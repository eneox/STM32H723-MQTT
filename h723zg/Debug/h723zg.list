
h723zg.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000002cc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001500c  080002d0  080002d0  000102d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003088  080152e0  080152e0  000252e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08018368  08018368  00028368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08018370  08018370  00028370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08018374  08018374  00028374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000314  24000000  08018378  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RxDecripSection 00000060  24000314  0801868c  00030314  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .TxDecripSection 00000060  24000374  080186ec  00030374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000033c4  240003d8  0801874c  000303d8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2400379c  0801874c  0003379c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000303d4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030402  2**0
                  CONTENTS, READONLY
 13 .debug_info   000232b5  00000000  00000000  00030445  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000300b  00000000  00000000  000536fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001928  00000000  00000000  00056708  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000148c  00000000  00000000  00058030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003528a  00000000  00000000  000594bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001d765  00000000  00000000  0008e746  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0014d5c8  00000000  00000000  000abeab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007db0  00000000  00000000  001f9474  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  00201224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002d0 <__do_global_dtors_aux>:
 80002d0:	b510      	push	{r4, lr}
 80002d2:	4c05      	ldr	r4, [pc, #20]	; (80002e8 <__do_global_dtors_aux+0x18>)
 80002d4:	7823      	ldrb	r3, [r4, #0]
 80002d6:	b933      	cbnz	r3, 80002e6 <__do_global_dtors_aux+0x16>
 80002d8:	4b04      	ldr	r3, [pc, #16]	; (80002ec <__do_global_dtors_aux+0x1c>)
 80002da:	b113      	cbz	r3, 80002e2 <__do_global_dtors_aux+0x12>
 80002dc:	4804      	ldr	r0, [pc, #16]	; (80002f0 <__do_global_dtors_aux+0x20>)
 80002de:	f3af 8000 	nop.w
 80002e2:	2301      	movs	r3, #1
 80002e4:	7023      	strb	r3, [r4, #0]
 80002e6:	bd10      	pop	{r4, pc}
 80002e8:	240003d8 	.word	0x240003d8
 80002ec:	00000000 	.word	0x00000000
 80002f0:	080152c4 	.word	0x080152c4

080002f4 <frame_dummy>:
 80002f4:	b508      	push	{r3, lr}
 80002f6:	4b03      	ldr	r3, [pc, #12]	; (8000304 <frame_dummy+0x10>)
 80002f8:	b11b      	cbz	r3, 8000302 <frame_dummy+0xe>
 80002fa:	4903      	ldr	r1, [pc, #12]	; (8000308 <frame_dummy+0x14>)
 80002fc:	4803      	ldr	r0, [pc, #12]	; (800030c <frame_dummy+0x18>)
 80002fe:	f3af 8000 	nop.w
 8000302:	bd08      	pop	{r3, pc}
 8000304:	00000000 	.word	0x00000000
 8000308:	240003dc 	.word	0x240003dc
 800030c:	080152c4 	.word	0x080152c4

08000310 <strcmp>:
 8000310:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000314:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000318:	2a01      	cmp	r2, #1
 800031a:	bf28      	it	cs
 800031c:	429a      	cmpcs	r2, r3
 800031e:	d0f7      	beq.n	8000310 <strcmp>
 8000320:	1ad0      	subs	r0, r2, r3
 8000322:	4770      	bx	lr
	...

08000330 <memchr>:
 8000330:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000334:	2a10      	cmp	r2, #16
 8000336:	db2b      	blt.n	8000390 <memchr+0x60>
 8000338:	f010 0f07 	tst.w	r0, #7
 800033c:	d008      	beq.n	8000350 <memchr+0x20>
 800033e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000342:	3a01      	subs	r2, #1
 8000344:	428b      	cmp	r3, r1
 8000346:	d02d      	beq.n	80003a4 <memchr+0x74>
 8000348:	f010 0f07 	tst.w	r0, #7
 800034c:	b342      	cbz	r2, 80003a0 <memchr+0x70>
 800034e:	d1f6      	bne.n	800033e <memchr+0xe>
 8000350:	b4f0      	push	{r4, r5, r6, r7}
 8000352:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000356:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800035a:	f022 0407 	bic.w	r4, r2, #7
 800035e:	f07f 0700 	mvns.w	r7, #0
 8000362:	2300      	movs	r3, #0
 8000364:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000368:	3c08      	subs	r4, #8
 800036a:	ea85 0501 	eor.w	r5, r5, r1
 800036e:	ea86 0601 	eor.w	r6, r6, r1
 8000372:	fa85 f547 	uadd8	r5, r5, r7
 8000376:	faa3 f587 	sel	r5, r3, r7
 800037a:	fa86 f647 	uadd8	r6, r6, r7
 800037e:	faa5 f687 	sel	r6, r5, r7
 8000382:	b98e      	cbnz	r6, 80003a8 <memchr+0x78>
 8000384:	d1ee      	bne.n	8000364 <memchr+0x34>
 8000386:	bcf0      	pop	{r4, r5, r6, r7}
 8000388:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800038c:	f002 0207 	and.w	r2, r2, #7
 8000390:	b132      	cbz	r2, 80003a0 <memchr+0x70>
 8000392:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000396:	3a01      	subs	r2, #1
 8000398:	ea83 0301 	eor.w	r3, r3, r1
 800039c:	b113      	cbz	r3, 80003a4 <memchr+0x74>
 800039e:	d1f8      	bne.n	8000392 <memchr+0x62>
 80003a0:	2000      	movs	r0, #0
 80003a2:	4770      	bx	lr
 80003a4:	3801      	subs	r0, #1
 80003a6:	4770      	bx	lr
 80003a8:	2d00      	cmp	r5, #0
 80003aa:	bf06      	itte	eq
 80003ac:	4635      	moveq	r5, r6
 80003ae:	3803      	subeq	r0, #3
 80003b0:	3807      	subne	r0, #7
 80003b2:	f015 0f01 	tst.w	r5, #1
 80003b6:	d107      	bne.n	80003c8 <memchr+0x98>
 80003b8:	3001      	adds	r0, #1
 80003ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80003be:	bf02      	ittt	eq
 80003c0:	3001      	addeq	r0, #1
 80003c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80003c6:	3001      	addeq	r0, #1
 80003c8:	bcf0      	pop	{r4, r5, r6, r7}
 80003ca:	3801      	subs	r0, #1
 80003cc:	4770      	bx	lr
 80003ce:	bf00      	nop

080003d0 <strlen>:
 80003d0:	4603      	mov	r3, r0
 80003d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80003d6:	2a00      	cmp	r2, #0
 80003d8:	d1fb      	bne.n	80003d2 <strlen+0x2>
 80003da:	1a18      	subs	r0, r3, r0
 80003dc:	3801      	subs	r0, #1
 80003de:	4770      	bx	lr

080003e0 <__aeabi_drsub>:
 80003e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e4:	e002      	b.n	80003ec <__adddf3>
 80003e6:	bf00      	nop

080003e8 <__aeabi_dsub>:
 80003e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003ec <__adddf3>:
 80003ec:	b530      	push	{r4, r5, lr}
 80003ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	bf1f      	itttt	ne
 8000402:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000406:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800040e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000412:	f000 80e2 	beq.w	80005da <__adddf3+0x1ee>
 8000416:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800041e:	bfb8      	it	lt
 8000420:	426d      	neglt	r5, r5
 8000422:	dd0c      	ble.n	800043e <__adddf3+0x52>
 8000424:	442c      	add	r4, r5
 8000426:	ea80 0202 	eor.w	r2, r0, r2
 800042a:	ea81 0303 	eor.w	r3, r1, r3
 800042e:	ea82 0000 	eor.w	r0, r2, r0
 8000432:	ea83 0101 	eor.w	r1, r3, r1
 8000436:	ea80 0202 	eor.w	r2, r0, r2
 800043a:	ea81 0303 	eor.w	r3, r1, r3
 800043e:	2d36      	cmp	r5, #54	; 0x36
 8000440:	bf88      	it	hi
 8000442:	bd30      	pophi	{r4, r5, pc}
 8000444:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000448:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800044c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000450:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000454:	d002      	beq.n	800045c <__adddf3+0x70>
 8000456:	4240      	negs	r0, r0
 8000458:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800045c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000460:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000464:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000468:	d002      	beq.n	8000470 <__adddf3+0x84>
 800046a:	4252      	negs	r2, r2
 800046c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000470:	ea94 0f05 	teq	r4, r5
 8000474:	f000 80a7 	beq.w	80005c6 <__adddf3+0x1da>
 8000478:	f1a4 0401 	sub.w	r4, r4, #1
 800047c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000480:	db0d      	blt.n	800049e <__adddf3+0xb2>
 8000482:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000486:	fa22 f205 	lsr.w	r2, r2, r5
 800048a:	1880      	adds	r0, r0, r2
 800048c:	f141 0100 	adc.w	r1, r1, #0
 8000490:	fa03 f20e 	lsl.w	r2, r3, lr
 8000494:	1880      	adds	r0, r0, r2
 8000496:	fa43 f305 	asr.w	r3, r3, r5
 800049a:	4159      	adcs	r1, r3
 800049c:	e00e      	b.n	80004bc <__adddf3+0xd0>
 800049e:	f1a5 0520 	sub.w	r5, r5, #32
 80004a2:	f10e 0e20 	add.w	lr, lr, #32
 80004a6:	2a01      	cmp	r2, #1
 80004a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004ac:	bf28      	it	cs
 80004ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b2:	fa43 f305 	asr.w	r3, r3, r5
 80004b6:	18c0      	adds	r0, r0, r3
 80004b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c0:	d507      	bpl.n	80004d2 <__adddf3+0xe6>
 80004c2:	f04f 0e00 	mov.w	lr, #0
 80004c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004d6:	d31b      	bcc.n	8000510 <__adddf3+0x124>
 80004d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004dc:	d30c      	bcc.n	80004f8 <__adddf3+0x10c>
 80004de:	0849      	lsrs	r1, r1, #1
 80004e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004e8:	f104 0401 	add.w	r4, r4, #1
 80004ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f4:	f080 809a 	bcs.w	800062c <__adddf3+0x240>
 80004f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80004fc:	bf08      	it	eq
 80004fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000502:	f150 0000 	adcs.w	r0, r0, #0
 8000506:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050a:	ea41 0105 	orr.w	r1, r1, r5
 800050e:	bd30      	pop	{r4, r5, pc}
 8000510:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000514:	4140      	adcs	r0, r0
 8000516:	eb41 0101 	adc.w	r1, r1, r1
 800051a:	3c01      	subs	r4, #1
 800051c:	bf28      	it	cs
 800051e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000522:	d2e9      	bcs.n	80004f8 <__adddf3+0x10c>
 8000524:	f091 0f00 	teq	r1, #0
 8000528:	bf04      	itt	eq
 800052a:	4601      	moveq	r1, r0
 800052c:	2000      	moveq	r0, #0
 800052e:	fab1 f381 	clz	r3, r1
 8000532:	bf08      	it	eq
 8000534:	3320      	addeq	r3, #32
 8000536:	f1a3 030b 	sub.w	r3, r3, #11
 800053a:	f1b3 0220 	subs.w	r2, r3, #32
 800053e:	da0c      	bge.n	800055a <__adddf3+0x16e>
 8000540:	320c      	adds	r2, #12
 8000542:	dd08      	ble.n	8000556 <__adddf3+0x16a>
 8000544:	f102 0c14 	add.w	ip, r2, #20
 8000548:	f1c2 020c 	rsb	r2, r2, #12
 800054c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000550:	fa21 f102 	lsr.w	r1, r1, r2
 8000554:	e00c      	b.n	8000570 <__adddf3+0x184>
 8000556:	f102 0214 	add.w	r2, r2, #20
 800055a:	bfd8      	it	le
 800055c:	f1c2 0c20 	rsble	ip, r2, #32
 8000560:	fa01 f102 	lsl.w	r1, r1, r2
 8000564:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000568:	bfdc      	itt	le
 800056a:	ea41 010c 	orrle.w	r1, r1, ip
 800056e:	4090      	lslle	r0, r2
 8000570:	1ae4      	subs	r4, r4, r3
 8000572:	bfa2      	ittt	ge
 8000574:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000578:	4329      	orrge	r1, r5
 800057a:	bd30      	popge	{r4, r5, pc}
 800057c:	ea6f 0404 	mvn.w	r4, r4
 8000580:	3c1f      	subs	r4, #31
 8000582:	da1c      	bge.n	80005be <__adddf3+0x1d2>
 8000584:	340c      	adds	r4, #12
 8000586:	dc0e      	bgt.n	80005a6 <__adddf3+0x1ba>
 8000588:	f104 0414 	add.w	r4, r4, #20
 800058c:	f1c4 0220 	rsb	r2, r4, #32
 8000590:	fa20 f004 	lsr.w	r0, r0, r4
 8000594:	fa01 f302 	lsl.w	r3, r1, r2
 8000598:	ea40 0003 	orr.w	r0, r0, r3
 800059c:	fa21 f304 	lsr.w	r3, r1, r4
 80005a0:	ea45 0103 	orr.w	r1, r5, r3
 80005a4:	bd30      	pop	{r4, r5, pc}
 80005a6:	f1c4 040c 	rsb	r4, r4, #12
 80005aa:	f1c4 0220 	rsb	r2, r4, #32
 80005ae:	fa20 f002 	lsr.w	r0, r0, r2
 80005b2:	fa01 f304 	lsl.w	r3, r1, r4
 80005b6:	ea40 0003 	orr.w	r0, r0, r3
 80005ba:	4629      	mov	r1, r5
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	fa21 f004 	lsr.w	r0, r1, r4
 80005c2:	4629      	mov	r1, r5
 80005c4:	bd30      	pop	{r4, r5, pc}
 80005c6:	f094 0f00 	teq	r4, #0
 80005ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005ce:	bf06      	itte	eq
 80005d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d4:	3401      	addeq	r4, #1
 80005d6:	3d01      	subne	r5, #1
 80005d8:	e74e      	b.n	8000478 <__adddf3+0x8c>
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf18      	it	ne
 80005e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e4:	d029      	beq.n	800063a <__adddf3+0x24e>
 80005e6:	ea94 0f05 	teq	r4, r5
 80005ea:	bf08      	it	eq
 80005ec:	ea90 0f02 	teqeq	r0, r2
 80005f0:	d005      	beq.n	80005fe <__adddf3+0x212>
 80005f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005f6:	bf04      	itt	eq
 80005f8:	4619      	moveq	r1, r3
 80005fa:	4610      	moveq	r0, r2
 80005fc:	bd30      	pop	{r4, r5, pc}
 80005fe:	ea91 0f03 	teq	r1, r3
 8000602:	bf1e      	ittt	ne
 8000604:	2100      	movne	r1, #0
 8000606:	2000      	movne	r0, #0
 8000608:	bd30      	popne	{r4, r5, pc}
 800060a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800060e:	d105      	bne.n	800061c <__adddf3+0x230>
 8000610:	0040      	lsls	r0, r0, #1
 8000612:	4149      	adcs	r1, r1
 8000614:	bf28      	it	cs
 8000616:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061a:	bd30      	pop	{r4, r5, pc}
 800061c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000620:	bf3c      	itt	cc
 8000622:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000626:	bd30      	popcc	{r4, r5, pc}
 8000628:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800062c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000630:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000634:	f04f 0000 	mov.w	r0, #0
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800063e:	bf1a      	itte	ne
 8000640:	4619      	movne	r1, r3
 8000642:	4610      	movne	r0, r2
 8000644:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000648:	bf1c      	itt	ne
 800064a:	460b      	movne	r3, r1
 800064c:	4602      	movne	r2, r0
 800064e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000652:	bf06      	itte	eq
 8000654:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000658:	ea91 0f03 	teqeq	r1, r3
 800065c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000660:	bd30      	pop	{r4, r5, pc}
 8000662:	bf00      	nop

08000664 <__aeabi_ui2d>:
 8000664:	f090 0f00 	teq	r0, #0
 8000668:	bf04      	itt	eq
 800066a:	2100      	moveq	r1, #0
 800066c:	4770      	bxeq	lr
 800066e:	b530      	push	{r4, r5, lr}
 8000670:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000674:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000678:	f04f 0500 	mov.w	r5, #0
 800067c:	f04f 0100 	mov.w	r1, #0
 8000680:	e750      	b.n	8000524 <__adddf3+0x138>
 8000682:	bf00      	nop

08000684 <__aeabi_i2d>:
 8000684:	f090 0f00 	teq	r0, #0
 8000688:	bf04      	itt	eq
 800068a:	2100      	moveq	r1, #0
 800068c:	4770      	bxeq	lr
 800068e:	b530      	push	{r4, r5, lr}
 8000690:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000694:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000698:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800069c:	bf48      	it	mi
 800069e:	4240      	negmi	r0, r0
 80006a0:	f04f 0100 	mov.w	r1, #0
 80006a4:	e73e      	b.n	8000524 <__adddf3+0x138>
 80006a6:	bf00      	nop

080006a8 <__aeabi_f2d>:
 80006a8:	0042      	lsls	r2, r0, #1
 80006aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006b6:	bf1f      	itttt	ne
 80006b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c4:	4770      	bxne	lr
 80006c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ca:	bf08      	it	eq
 80006cc:	4770      	bxeq	lr
 80006ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d2:	bf04      	itt	eq
 80006d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	e71c      	b.n	8000524 <__adddf3+0x138>
 80006ea:	bf00      	nop

080006ec <__aeabi_ul2d>:
 80006ec:	ea50 0201 	orrs.w	r2, r0, r1
 80006f0:	bf08      	it	eq
 80006f2:	4770      	bxeq	lr
 80006f4:	b530      	push	{r4, r5, lr}
 80006f6:	f04f 0500 	mov.w	r5, #0
 80006fa:	e00a      	b.n	8000712 <__aeabi_l2d+0x16>

080006fc <__aeabi_l2d>:
 80006fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000700:	bf08      	it	eq
 8000702:	4770      	bxeq	lr
 8000704:	b530      	push	{r4, r5, lr}
 8000706:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070a:	d502      	bpl.n	8000712 <__aeabi_l2d+0x16>
 800070c:	4240      	negs	r0, r0
 800070e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000712:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000716:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800071e:	f43f aed8 	beq.w	80004d2 <__adddf3+0xe6>
 8000722:	f04f 0203 	mov.w	r2, #3
 8000726:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072a:	bf18      	it	ne
 800072c:	3203      	addne	r2, #3
 800072e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000732:	bf18      	it	ne
 8000734:	3203      	addne	r2, #3
 8000736:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073a:	f1c2 0320 	rsb	r3, r2, #32
 800073e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000742:	fa20 f002 	lsr.w	r0, r0, r2
 8000746:	fa01 fe03 	lsl.w	lr, r1, r3
 800074a:	ea40 000e 	orr.w	r0, r0, lr
 800074e:	fa21 f102 	lsr.w	r1, r1, r2
 8000752:	4414      	add	r4, r2
 8000754:	e6bd      	b.n	80004d2 <__adddf3+0xe6>
 8000756:	bf00      	nop

08000758 <__aeabi_ldivmod>:
 8000758:	b97b      	cbnz	r3, 800077a <__aeabi_ldivmod+0x22>
 800075a:	b972      	cbnz	r2, 800077a <__aeabi_ldivmod+0x22>
 800075c:	2900      	cmp	r1, #0
 800075e:	bfbe      	ittt	lt
 8000760:	2000      	movlt	r0, #0
 8000762:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000766:	e006      	blt.n	8000776 <__aeabi_ldivmod+0x1e>
 8000768:	bf08      	it	eq
 800076a:	2800      	cmpeq	r0, #0
 800076c:	bf1c      	itt	ne
 800076e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000772:	f04f 30ff 	movne.w	r0, #4294967295
 8000776:	f000 b9f3 	b.w	8000b60 <__aeabi_idiv0>
 800077a:	f1ad 0c08 	sub.w	ip, sp, #8
 800077e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000782:	2900      	cmp	r1, #0
 8000784:	db09      	blt.n	800079a <__aeabi_ldivmod+0x42>
 8000786:	2b00      	cmp	r3, #0
 8000788:	db1a      	blt.n	80007c0 <__aeabi_ldivmod+0x68>
 800078a:	f000 f885 	bl	8000898 <__udivmoddi4>
 800078e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000792:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000796:	b004      	add	sp, #16
 8000798:	4770      	bx	lr
 800079a:	4240      	negs	r0, r0
 800079c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	db1b      	blt.n	80007dc <__aeabi_ldivmod+0x84>
 80007a4:	f000 f878 	bl	8000898 <__udivmoddi4>
 80007a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007b0:	b004      	add	sp, #16
 80007b2:	4240      	negs	r0, r0
 80007b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007b8:	4252      	negs	r2, r2
 80007ba:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007be:	4770      	bx	lr
 80007c0:	4252      	negs	r2, r2
 80007c2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007c6:	f000 f867 	bl	8000898 <__udivmoddi4>
 80007ca:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007d2:	b004      	add	sp, #16
 80007d4:	4240      	negs	r0, r0
 80007d6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007da:	4770      	bx	lr
 80007dc:	4252      	negs	r2, r2
 80007de:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007e2:	f000 f859 	bl	8000898 <__udivmoddi4>
 80007e6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80007ea:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80007ee:	b004      	add	sp, #16
 80007f0:	4252      	negs	r2, r2
 80007f2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80007f6:	4770      	bx	lr

080007f8 <__aeabi_uldivmod>:
 80007f8:	b953      	cbnz	r3, 8000810 <__aeabi_uldivmod+0x18>
 80007fa:	b94a      	cbnz	r2, 8000810 <__aeabi_uldivmod+0x18>
 80007fc:	2900      	cmp	r1, #0
 80007fe:	bf08      	it	eq
 8000800:	2800      	cmpeq	r0, #0
 8000802:	bf1c      	itt	ne
 8000804:	f04f 31ff 	movne.w	r1, #4294967295
 8000808:	f04f 30ff 	movne.w	r0, #4294967295
 800080c:	f000 b9a8 	b.w	8000b60 <__aeabi_idiv0>
 8000810:	f1ad 0c08 	sub.w	ip, sp, #8
 8000814:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000818:	f000 f83e 	bl	8000898 <__udivmoddi4>
 800081c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000820:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000824:	b004      	add	sp, #16
 8000826:	4770      	bx	lr

08000828 <__aeabi_d2lz>:
 8000828:	b508      	push	{r3, lr}
 800082a:	4602      	mov	r2, r0
 800082c:	460b      	mov	r3, r1
 800082e:	ec43 2b17 	vmov	d7, r2, r3
 8000832:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8000836:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800083a:	d403      	bmi.n	8000844 <__aeabi_d2lz+0x1c>
 800083c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8000840:	f000 b80a 	b.w	8000858 <__aeabi_d2ulz>
 8000844:	eeb1 7b47 	vneg.f64	d7, d7
 8000848:	ec51 0b17 	vmov	r0, r1, d7
 800084c:	f000 f804 	bl	8000858 <__aeabi_d2ulz>
 8000850:	4240      	negs	r0, r0
 8000852:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000856:	bd08      	pop	{r3, pc}

08000858 <__aeabi_d2ulz>:
 8000858:	ed9f 6b0b 	vldr	d6, [pc, #44]	; 8000888 <__aeabi_d2ulz+0x30>
 800085c:	ec41 0b17 	vmov	d7, r0, r1
 8000860:	ed9f 5b0b 	vldr	d5, [pc, #44]	; 8000890 <__aeabi_d2ulz+0x38>
 8000864:	ee27 6b06 	vmul.f64	d6, d7, d6
 8000868:	eebc 6bc6 	vcvt.u32.f64	s12, d6
 800086c:	eeb8 4b46 	vcvt.f64.u32	d4, s12
 8000870:	eea4 7b45 	vfms.f64	d7, d4, d5
 8000874:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 8000878:	ee16 1a10 	vmov	r1, s12
 800087c:	ee17 0a90 	vmov	r0, s15
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	f3af 8000 	nop.w
 8000888:	00000000 	.word	0x00000000
 800088c:	3df00000 	.word	0x3df00000
 8000890:	00000000 	.word	0x00000000
 8000894:	41f00000 	.word	0x41f00000

08000898 <__udivmoddi4>:
 8000898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800089c:	9e08      	ldr	r6, [sp, #32]
 800089e:	460d      	mov	r5, r1
 80008a0:	4604      	mov	r4, r0
 80008a2:	460f      	mov	r7, r1
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d14a      	bne.n	800093e <__udivmoddi4+0xa6>
 80008a8:	428a      	cmp	r2, r1
 80008aa:	4694      	mov	ip, r2
 80008ac:	d965      	bls.n	800097a <__udivmoddi4+0xe2>
 80008ae:	fab2 f382 	clz	r3, r2
 80008b2:	b143      	cbz	r3, 80008c6 <__udivmoddi4+0x2e>
 80008b4:	fa02 fc03 	lsl.w	ip, r2, r3
 80008b8:	f1c3 0220 	rsb	r2, r3, #32
 80008bc:	409f      	lsls	r7, r3
 80008be:	fa20 f202 	lsr.w	r2, r0, r2
 80008c2:	4317      	orrs	r7, r2
 80008c4:	409c      	lsls	r4, r3
 80008c6:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ca:	fa1f f58c 	uxth.w	r5, ip
 80008ce:	fbb7 f1fe 	udiv	r1, r7, lr
 80008d2:	0c22      	lsrs	r2, r4, #16
 80008d4:	fb0e 7711 	mls	r7, lr, r1, r7
 80008d8:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008dc:	fb01 f005 	mul.w	r0, r1, r5
 80008e0:	4290      	cmp	r0, r2
 80008e2:	d90a      	bls.n	80008fa <__udivmoddi4+0x62>
 80008e4:	eb1c 0202 	adds.w	r2, ip, r2
 80008e8:	f101 37ff 	add.w	r7, r1, #4294967295
 80008ec:	f080 811c 	bcs.w	8000b28 <__udivmoddi4+0x290>
 80008f0:	4290      	cmp	r0, r2
 80008f2:	f240 8119 	bls.w	8000b28 <__udivmoddi4+0x290>
 80008f6:	3902      	subs	r1, #2
 80008f8:	4462      	add	r2, ip
 80008fa:	1a12      	subs	r2, r2, r0
 80008fc:	b2a4      	uxth	r4, r4
 80008fe:	fbb2 f0fe 	udiv	r0, r2, lr
 8000902:	fb0e 2210 	mls	r2, lr, r0, r2
 8000906:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800090a:	fb00 f505 	mul.w	r5, r0, r5
 800090e:	42a5      	cmp	r5, r4
 8000910:	d90a      	bls.n	8000928 <__udivmoddi4+0x90>
 8000912:	eb1c 0404 	adds.w	r4, ip, r4
 8000916:	f100 32ff 	add.w	r2, r0, #4294967295
 800091a:	f080 8107 	bcs.w	8000b2c <__udivmoddi4+0x294>
 800091e:	42a5      	cmp	r5, r4
 8000920:	f240 8104 	bls.w	8000b2c <__udivmoddi4+0x294>
 8000924:	4464      	add	r4, ip
 8000926:	3802      	subs	r0, #2
 8000928:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800092c:	1b64      	subs	r4, r4, r5
 800092e:	2100      	movs	r1, #0
 8000930:	b11e      	cbz	r6, 800093a <__udivmoddi4+0xa2>
 8000932:	40dc      	lsrs	r4, r3
 8000934:	2300      	movs	r3, #0
 8000936:	e9c6 4300 	strd	r4, r3, [r6]
 800093a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800093e:	428b      	cmp	r3, r1
 8000940:	d908      	bls.n	8000954 <__udivmoddi4+0xbc>
 8000942:	2e00      	cmp	r6, #0
 8000944:	f000 80ed 	beq.w	8000b22 <__udivmoddi4+0x28a>
 8000948:	2100      	movs	r1, #0
 800094a:	e9c6 0500 	strd	r0, r5, [r6]
 800094e:	4608      	mov	r0, r1
 8000950:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000954:	fab3 f183 	clz	r1, r3
 8000958:	2900      	cmp	r1, #0
 800095a:	d149      	bne.n	80009f0 <__udivmoddi4+0x158>
 800095c:	42ab      	cmp	r3, r5
 800095e:	d302      	bcc.n	8000966 <__udivmoddi4+0xce>
 8000960:	4282      	cmp	r2, r0
 8000962:	f200 80f8 	bhi.w	8000b56 <__udivmoddi4+0x2be>
 8000966:	1a84      	subs	r4, r0, r2
 8000968:	eb65 0203 	sbc.w	r2, r5, r3
 800096c:	2001      	movs	r0, #1
 800096e:	4617      	mov	r7, r2
 8000970:	2e00      	cmp	r6, #0
 8000972:	d0e2      	beq.n	800093a <__udivmoddi4+0xa2>
 8000974:	e9c6 4700 	strd	r4, r7, [r6]
 8000978:	e7df      	b.n	800093a <__udivmoddi4+0xa2>
 800097a:	b902      	cbnz	r2, 800097e <__udivmoddi4+0xe6>
 800097c:	deff      	udf	#255	; 0xff
 800097e:	fab2 f382 	clz	r3, r2
 8000982:	2b00      	cmp	r3, #0
 8000984:	f040 8090 	bne.w	8000aa8 <__udivmoddi4+0x210>
 8000988:	1a8a      	subs	r2, r1, r2
 800098a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800098e:	fa1f fe8c 	uxth.w	lr, ip
 8000992:	2101      	movs	r1, #1
 8000994:	fbb2 f5f7 	udiv	r5, r2, r7
 8000998:	fb07 2015 	mls	r0, r7, r5, r2
 800099c:	0c22      	lsrs	r2, r4, #16
 800099e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009a2:	fb0e f005 	mul.w	r0, lr, r5
 80009a6:	4290      	cmp	r0, r2
 80009a8:	d908      	bls.n	80009bc <__udivmoddi4+0x124>
 80009aa:	eb1c 0202 	adds.w	r2, ip, r2
 80009ae:	f105 38ff 	add.w	r8, r5, #4294967295
 80009b2:	d202      	bcs.n	80009ba <__udivmoddi4+0x122>
 80009b4:	4290      	cmp	r0, r2
 80009b6:	f200 80cb 	bhi.w	8000b50 <__udivmoddi4+0x2b8>
 80009ba:	4645      	mov	r5, r8
 80009bc:	1a12      	subs	r2, r2, r0
 80009be:	b2a4      	uxth	r4, r4
 80009c0:	fbb2 f0f7 	udiv	r0, r2, r7
 80009c4:	fb07 2210 	mls	r2, r7, r0, r2
 80009c8:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009cc:	fb0e fe00 	mul.w	lr, lr, r0
 80009d0:	45a6      	cmp	lr, r4
 80009d2:	d908      	bls.n	80009e6 <__udivmoddi4+0x14e>
 80009d4:	eb1c 0404 	adds.w	r4, ip, r4
 80009d8:	f100 32ff 	add.w	r2, r0, #4294967295
 80009dc:	d202      	bcs.n	80009e4 <__udivmoddi4+0x14c>
 80009de:	45a6      	cmp	lr, r4
 80009e0:	f200 80bb 	bhi.w	8000b5a <__udivmoddi4+0x2c2>
 80009e4:	4610      	mov	r0, r2
 80009e6:	eba4 040e 	sub.w	r4, r4, lr
 80009ea:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 80009ee:	e79f      	b.n	8000930 <__udivmoddi4+0x98>
 80009f0:	f1c1 0720 	rsb	r7, r1, #32
 80009f4:	408b      	lsls	r3, r1
 80009f6:	fa22 fc07 	lsr.w	ip, r2, r7
 80009fa:	ea4c 0c03 	orr.w	ip, ip, r3
 80009fe:	fa05 f401 	lsl.w	r4, r5, r1
 8000a02:	fa20 f307 	lsr.w	r3, r0, r7
 8000a06:	40fd      	lsrs	r5, r7
 8000a08:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a0c:	4323      	orrs	r3, r4
 8000a0e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a12:	fa1f fe8c 	uxth.w	lr, ip
 8000a16:	fb09 5518 	mls	r5, r9, r8, r5
 8000a1a:	0c1c      	lsrs	r4, r3, #16
 8000a1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a20:	fb08 f50e 	mul.w	r5, r8, lr
 8000a24:	42a5      	cmp	r5, r4
 8000a26:	fa02 f201 	lsl.w	r2, r2, r1
 8000a2a:	fa00 f001 	lsl.w	r0, r0, r1
 8000a2e:	d90b      	bls.n	8000a48 <__udivmoddi4+0x1b0>
 8000a30:	eb1c 0404 	adds.w	r4, ip, r4
 8000a34:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a38:	f080 8088 	bcs.w	8000b4c <__udivmoddi4+0x2b4>
 8000a3c:	42a5      	cmp	r5, r4
 8000a3e:	f240 8085 	bls.w	8000b4c <__udivmoddi4+0x2b4>
 8000a42:	f1a8 0802 	sub.w	r8, r8, #2
 8000a46:	4464      	add	r4, ip
 8000a48:	1b64      	subs	r4, r4, r5
 8000a4a:	b29d      	uxth	r5, r3
 8000a4c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a50:	fb09 4413 	mls	r4, r9, r3, r4
 8000a54:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a58:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a5c:	45a6      	cmp	lr, r4
 8000a5e:	d908      	bls.n	8000a72 <__udivmoddi4+0x1da>
 8000a60:	eb1c 0404 	adds.w	r4, ip, r4
 8000a64:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a68:	d26c      	bcs.n	8000b44 <__udivmoddi4+0x2ac>
 8000a6a:	45a6      	cmp	lr, r4
 8000a6c:	d96a      	bls.n	8000b44 <__udivmoddi4+0x2ac>
 8000a6e:	3b02      	subs	r3, #2
 8000a70:	4464      	add	r4, ip
 8000a72:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a76:	fba3 9502 	umull	r9, r5, r3, r2
 8000a7a:	eba4 040e 	sub.w	r4, r4, lr
 8000a7e:	42ac      	cmp	r4, r5
 8000a80:	46c8      	mov	r8, r9
 8000a82:	46ae      	mov	lr, r5
 8000a84:	d356      	bcc.n	8000b34 <__udivmoddi4+0x29c>
 8000a86:	d053      	beq.n	8000b30 <__udivmoddi4+0x298>
 8000a88:	b156      	cbz	r6, 8000aa0 <__udivmoddi4+0x208>
 8000a8a:	ebb0 0208 	subs.w	r2, r0, r8
 8000a8e:	eb64 040e 	sbc.w	r4, r4, lr
 8000a92:	fa04 f707 	lsl.w	r7, r4, r7
 8000a96:	40ca      	lsrs	r2, r1
 8000a98:	40cc      	lsrs	r4, r1
 8000a9a:	4317      	orrs	r7, r2
 8000a9c:	e9c6 7400 	strd	r7, r4, [r6]
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000aa8:	f1c3 0120 	rsb	r1, r3, #32
 8000aac:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ab0:	fa20 f201 	lsr.w	r2, r0, r1
 8000ab4:	fa25 f101 	lsr.w	r1, r5, r1
 8000ab8:	409d      	lsls	r5, r3
 8000aba:	432a      	orrs	r2, r5
 8000abc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ac0:	fa1f fe8c 	uxth.w	lr, ip
 8000ac4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ac8:	fb07 1510 	mls	r5, r7, r0, r1
 8000acc:	0c11      	lsrs	r1, r2, #16
 8000ace:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000ad2:	fb00 f50e 	mul.w	r5, r0, lr
 8000ad6:	428d      	cmp	r5, r1
 8000ad8:	fa04 f403 	lsl.w	r4, r4, r3
 8000adc:	d908      	bls.n	8000af0 <__udivmoddi4+0x258>
 8000ade:	eb1c 0101 	adds.w	r1, ip, r1
 8000ae2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ae6:	d22f      	bcs.n	8000b48 <__udivmoddi4+0x2b0>
 8000ae8:	428d      	cmp	r5, r1
 8000aea:	d92d      	bls.n	8000b48 <__udivmoddi4+0x2b0>
 8000aec:	3802      	subs	r0, #2
 8000aee:	4461      	add	r1, ip
 8000af0:	1b49      	subs	r1, r1, r5
 8000af2:	b292      	uxth	r2, r2
 8000af4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000af8:	fb07 1115 	mls	r1, r7, r5, r1
 8000afc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b00:	fb05 f10e 	mul.w	r1, r5, lr
 8000b04:	4291      	cmp	r1, r2
 8000b06:	d908      	bls.n	8000b1a <__udivmoddi4+0x282>
 8000b08:	eb1c 0202 	adds.w	r2, ip, r2
 8000b0c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b10:	d216      	bcs.n	8000b40 <__udivmoddi4+0x2a8>
 8000b12:	4291      	cmp	r1, r2
 8000b14:	d914      	bls.n	8000b40 <__udivmoddi4+0x2a8>
 8000b16:	3d02      	subs	r5, #2
 8000b18:	4462      	add	r2, ip
 8000b1a:	1a52      	subs	r2, r2, r1
 8000b1c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b20:	e738      	b.n	8000994 <__udivmoddi4+0xfc>
 8000b22:	4631      	mov	r1, r6
 8000b24:	4630      	mov	r0, r6
 8000b26:	e708      	b.n	800093a <__udivmoddi4+0xa2>
 8000b28:	4639      	mov	r1, r7
 8000b2a:	e6e6      	b.n	80008fa <__udivmoddi4+0x62>
 8000b2c:	4610      	mov	r0, r2
 8000b2e:	e6fb      	b.n	8000928 <__udivmoddi4+0x90>
 8000b30:	4548      	cmp	r0, r9
 8000b32:	d2a9      	bcs.n	8000a88 <__udivmoddi4+0x1f0>
 8000b34:	ebb9 0802 	subs.w	r8, r9, r2
 8000b38:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b3c:	3b01      	subs	r3, #1
 8000b3e:	e7a3      	b.n	8000a88 <__udivmoddi4+0x1f0>
 8000b40:	4645      	mov	r5, r8
 8000b42:	e7ea      	b.n	8000b1a <__udivmoddi4+0x282>
 8000b44:	462b      	mov	r3, r5
 8000b46:	e794      	b.n	8000a72 <__udivmoddi4+0x1da>
 8000b48:	4640      	mov	r0, r8
 8000b4a:	e7d1      	b.n	8000af0 <__udivmoddi4+0x258>
 8000b4c:	46d0      	mov	r8, sl
 8000b4e:	e77b      	b.n	8000a48 <__udivmoddi4+0x1b0>
 8000b50:	3d02      	subs	r5, #2
 8000b52:	4462      	add	r2, ip
 8000b54:	e732      	b.n	80009bc <__udivmoddi4+0x124>
 8000b56:	4608      	mov	r0, r1
 8000b58:	e70a      	b.n	8000970 <__udivmoddi4+0xd8>
 8000b5a:	4464      	add	r4, ip
 8000b5c:	3802      	subs	r0, #2
 8000b5e:	e742      	b.n	80009e6 <__udivmoddi4+0x14e>

08000b60 <__aeabi_idiv0>:
 8000b60:	4770      	bx	lr
 8000b62:	bf00      	nop

08000b64 <chiprev>:

#pragma once

#include <stm32h723xx.h>

static inline char chiprev(void) {
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
  uint16_t rev = (uint16_t) (((uint32_t) DBGMCU->IDCODE) >> 16);
 8000b6a:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <chiprev+0x38>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	0c1b      	lsrs	r3, r3, #16
 8000b70:	80fb      	strh	r3, [r7, #6]
  if (rev == 0x1003) return 'Y';
 8000b72:	88fb      	ldrh	r3, [r7, #6]
 8000b74:	f241 0203 	movw	r2, #4099	; 0x1003
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d101      	bne.n	8000b80 <chiprev+0x1c>
 8000b7c:	2359      	movs	r3, #89	; 0x59
 8000b7e:	e007      	b.n	8000b90 <chiprev+0x2c>
  if (rev == 0x2003) return 'V';
 8000b80:	88fb      	ldrh	r3, [r7, #6]
 8000b82:	f242 0203 	movw	r2, #8195	; 0x2003
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d101      	bne.n	8000b8e <chiprev+0x2a>
 8000b8a:	2356      	movs	r3, #86	; 0x56
 8000b8c:	e000      	b.n	8000b90 <chiprev+0x2c>
  return '?';
 8000b8e:	233f      	movs	r3, #63	; 0x3f
}
 8000b90:	4618      	mov	r0, r3
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr
 8000b9c:	5c001000 	.word	0x5c001000

08000ba0 <mqtt_publisher_event_handler>:
static const char *s_mqtt_broker_url = "mqtt://broker.hivemq.com:1883";
static const char *s_pub_topic = "mg/clnt/test";
static int s_qos = 1;
static struct mg_connection *s_mqtt_publisher;

static void mqtt_publisher_event_handler(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b098      	sub	sp, #96	; 0x60
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	60f8      	str	r0, [r7, #12]
 8000ba8:	60b9      	str	r1, [r7, #8]
 8000baa:	607a      	str	r2, [r7, #4]
 8000bac:	603b      	str	r3, [r7, #0]
    if (ev == MG_EV_MQTT_OPEN) {
 8000bae:	68bb      	ldr	r3, [r7, #8]
 8000bb0:	2b11      	cmp	r3, #17
 8000bb2:	d12f      	bne.n	8000c14 <mqtt_publisher_event_handler+0x74>
        struct mg_str pubt = mg_str(s_pub_topic);
 8000bb4:	4b19      	ldr	r3, [pc, #100]	; (8000c1c <mqtt_publisher_event_handler+0x7c>)
 8000bb6:	681a      	ldr	r2, [r3, #0]
 8000bb8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000bbc:	4611      	mov	r1, r2
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f008 fdf6 	bl	80097b0 <mg_str_s>
        struct mg_str data = mg_str("hello");
 8000bc4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000bc8:	4915      	ldr	r1, [pc, #84]	; (8000c20 <mqtt_publisher_event_handler+0x80>)
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f008 fdf0 	bl	80097b0 <mg_str_s>

        struct mg_mqtt_opts pub_opts = {
 8000bd0:	f107 0310 	add.w	r3, r7, #16
 8000bd4:	2240      	movs	r2, #64	; 0x40
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	4618      	mov	r0, r3
 8000bda:	f013 fdab 	bl	8014734 <memset>
 8000bde:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000be2:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8000be6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bea:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000bf2:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8000bf6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000bfa:	e883 0003 	stmia.w	r3, {r0, r1}
 8000bfe:	4b09      	ldr	r3, [pc, #36]	; (8000c24 <mqtt_publisher_event_handler+0x84>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	b2db      	uxtb	r3, r3
 8000c04:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
            .topic = pubt,
            .message = data,
            .qos = s_qos,
            .retain = false,
        };
        mg_mqtt_pub(c, &pub_opts);
 8000c08:	f107 0310 	add.w	r3, r7, #16
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	68f8      	ldr	r0, [r7, #12]
 8000c10:	f006 ffa6 	bl	8007b60 <mg_mqtt_pub>
    }
}
 8000c14:	bf00      	nop
 8000c16:	3760      	adds	r7, #96	; 0x60
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	24000004 	.word	0x24000004
 8000c20:	08015310 	.word	0x08015310
 8000c24:	24000008 	.word	0x24000008

08000c28 <mg_millis>:
uint64_t mg_millis(void) {  // Let Mongoose use our uptime function
 8000c28:	b5b0      	push	{r4, r5, r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  return (uint64_t)HAL_GetTick();     // Return number of milliseconds since boot
 8000c2c:	f00e f8be 	bl	800edac <HAL_GetTick>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2200      	movs	r2, #0
 8000c34:	461c      	mov	r4, r3
 8000c36:	4615      	mov	r5, r2
 8000c38:	4622      	mov	r2, r4
 8000c3a:	462b      	mov	r3, r5
}
 8000c3c:	4610      	mov	r0, r2
 8000c3e:	4619      	mov	r1, r3
 8000c40:	bdb0      	pop	{r4, r5, r7, pc}
	...

08000c44 <mg_random>:

void mg_random(void *buf, size_t len) {  // Use on-board RNG
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b084      	sub	sp, #16
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	6078      	str	r0, [r7, #4]
 8000c4c:	6039      	str	r1, [r7, #0]
  extern RNG_HandleTypeDef hrng;
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000c4e:	2300      	movs	r3, #0
 8000c50:	60fb      	str	r3, [r7, #12]
 8000c52:	e01a      	b.n	8000c8a <mg_random+0x46>
    uint32_t r;
    HAL_RNG_GenerateRandomNumber(&hrng, &r);
 8000c54:	f107 0308 	add.w	r3, r7, #8
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4810      	ldr	r0, [pc, #64]	; (8000c9c <mg_random+0x58>)
 8000c5c:	f011 fddc 	bl	8012818 <HAL_RNG_GenerateRandomNumber>
    memcpy((char *) buf + n, &r, n + sizeof(r) > len ? len - n : sizeof(r));
 8000c60:	687a      	ldr	r2, [r7, #4]
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	18d0      	adds	r0, r2, r3
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	3304      	adds	r3, #4
 8000c6a:	683a      	ldr	r2, [r7, #0]
 8000c6c:	429a      	cmp	r2, r3
 8000c6e:	d203      	bcs.n	8000c78 <mg_random+0x34>
 8000c70:	683a      	ldr	r2, [r7, #0]
 8000c72:	68fb      	ldr	r3, [r7, #12]
 8000c74:	1ad3      	subs	r3, r2, r3
 8000c76:	e000      	b.n	8000c7a <mg_random+0x36>
 8000c78:	2304      	movs	r3, #4
 8000c7a:	f107 0108 	add.w	r1, r7, #8
 8000c7e:	461a      	mov	r2, r3
 8000c80:	f013 fe40 	bl	8014904 <memcpy>
  for (size_t n = 0; n < len; n += sizeof(uint32_t)) {
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	3304      	adds	r3, #4
 8000c88:	60fb      	str	r3, [r7, #12]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	429a      	cmp	r2, r3
 8000c90:	d3e0      	bcc.n	8000c54 <mg_random+0x10>
  }
}
 8000c92:	bf00      	nop
 8000c94:	bf00      	nop
 8000c96:	3710      	adds	r7, #16
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	240004dc 	.word	0x240004dc

08000ca0 <timer_fn>:

static void timer_fn(void *arg) {
 8000ca0:	b5b0      	push	{r4, r5, r7, lr}
 8000ca2:	b08a      	sub	sp, #40	; 0x28
 8000ca4:	af04      	add	r7, sp, #16
 8000ca6:	6078      	str	r0, [r7, #4]
  HAL_GPIO_TogglePin(GPIOE, GPIO_PIN_1);   // Blink On-board yellow LED
 8000ca8:	2102      	movs	r1, #2
 8000caa:	481a      	ldr	r0, [pc, #104]	; (8000d14 <timer_fn+0x74>)
 8000cac:	f00e ff93 	bl	800fbd6 <HAL_GPIO_TogglePin>
  struct mg_tcpip_if *ifp = arg;                  // And show
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	617b      	str	r3, [r7, #20]
  const char *names[] = {"down", "up", "ready"};  // network stats
 8000cb4:	4a18      	ldr	r2, [pc, #96]	; (8000d18 <timer_fn+0x78>)
 8000cb6:	f107 0308 	add.w	r3, r7, #8
 8000cba:	ca07      	ldmia	r2, {r0, r1, r2}
 8000cbc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
  MG_INFO(("Ethernet: %s, IP: %M, rx:%u, tx:%u, dr:%u, er:%u",
 8000cc0:	4b16      	ldr	r3, [pc, #88]	; (8000d1c <timer_fn+0x7c>)
 8000cc2:	227c      	movs	r2, #124	; 0x7c
 8000cc4:	4916      	ldr	r1, [pc, #88]	; (8000d20 <timer_fn+0x80>)
 8000cc6:	2002      	movs	r0, #2
 8000cc8:	f006 f9a4 	bl	8007014 <mg_log_prefix>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d01c      	beq.n	8000d0c <timer_fn+0x6c>
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	3318      	adds	r3, #24
 8000cdc:	443b      	add	r3, r7
 8000cde:	f853 4c10 	ldr.w	r4, [r3, #-16]
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	f103 0508 	add.w	r5, r3, #8
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000cec:	697a      	ldr	r2, [r7, #20]
 8000cee:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 8000cf0:	6979      	ldr	r1, [r7, #20]
 8000cf2:	6e49      	ldr	r1, [r1, #100]	; 0x64
 8000cf4:	6978      	ldr	r0, [r7, #20]
 8000cf6:	6f00      	ldr	r0, [r0, #112]	; 0x70
 8000cf8:	9003      	str	r0, [sp, #12]
 8000cfa:	9102      	str	r1, [sp, #8]
 8000cfc:	9201      	str	r2, [sp, #4]
 8000cfe:	9300      	str	r3, [sp, #0]
 8000d00:	462b      	mov	r3, r5
 8000d02:	4a08      	ldr	r2, [pc, #32]	; (8000d24 <timer_fn+0x84>)
 8000d04:	4621      	mov	r1, r4
 8000d06:	4808      	ldr	r0, [pc, #32]	; (8000d28 <timer_fn+0x88>)
 8000d08:	f006 f9de 	bl	80070c8 <mg_log>
           names[ifp->state], mg_print_ip4, &ifp->ip, ifp->nrecv, ifp->nsent,
           ifp->ndrop, ifp->nerr));
}
 8000d0c:	bf00      	nop
 8000d0e:	3718      	adds	r7, #24
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bdb0      	pop	{r4, r5, r7, pc}
 8000d14:	58021000 	.word	0x58021000
 8000d18:	08015374 	.word	0x08015374
 8000d1c:	0801736c 	.word	0x0801736c
 8000d20:	08015318 	.word	0x08015318
 8000d24:	08008d51 	.word	0x08008d51
 8000d28:	0801532c 	.word	0x0801532c
 8000d2c:	00000000 	.word	0x00000000

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b590      	push	{r4, r7, lr}
 8000d32:	b0b5      	sub	sp, #212	; 0xd4
 8000d34:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d36:	f00d ffb3 	bl	800eca0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d3a:	f000 f8ed 	bl	8000f18 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3e:	f000 fa11 	bl	8001164 <MX_GPIO_Init>
  MX_ETH_Init();
 8000d42:	f000 f959 	bl	8000ff8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000d46:	f000 f9b9 	bl	80010bc <MX_USART3_UART_Init>
  MX_USB_OTG_HS_USB_Init();
 8000d4a:	f000 fa03 	bl	8001154 <MX_USB_OTG_HS_USB_Init>
  MX_RNG_Init();
 8000d4e:	f000 f99f 	bl	8001090 <MX_RNG_Init>
  /* USER CODE BEGIN 2 */
  test_init();  // for internal testing purposes only
    MG_INFO(("Chip revision: %c, max cpu clock: %u MHz", chiprev(),
 8000d52:	4b61      	ldr	r3, [pc, #388]	; (8000ed8 <main+0x1a8>)
 8000d54:	22a4      	movs	r2, #164	; 0xa4
 8000d56:	4961      	ldr	r1, [pc, #388]	; (8000edc <main+0x1ac>)
 8000d58:	2002      	movs	r0, #2
 8000d5a:	f006 f95b 	bl	8007014 <mg_log_prefix>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2b00      	cmp	r3, #0
 8000d62:	d012      	beq.n	8000d8a <main+0x5a>
 8000d64:	f7ff fefe 	bl	8000b64 <chiprev>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	461c      	mov	r4, r3
 8000d6c:	f7ff fefa 	bl	8000b64 <chiprev>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b56      	cmp	r3, #86	; 0x56
 8000d74:	d102      	bne.n	8000d7c <main+0x4c>
 8000d76:	f44f 73f0 	mov.w	r3, #480	; 0x1e0
 8000d7a:	e001      	b.n	8000d80 <main+0x50>
 8000d7c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8000d80:	461a      	mov	r2, r3
 8000d82:	4621      	mov	r1, r4
 8000d84:	4856      	ldr	r0, [pc, #344]	; (8000ee0 <main+0x1b0>)
 8000d86:	f006 f99f 	bl	80070c8 <mg_log>
             (chiprev() == 'V') ? 480 : 400));
    MG_INFO(("Starting, CPU freq %g MHz", (double) SystemCoreClock / 1000000));
 8000d8a:	4b53      	ldr	r3, [pc, #332]	; (8000ed8 <main+0x1a8>)
 8000d8c:	22a6      	movs	r2, #166	; 0xa6
 8000d8e:	4953      	ldr	r1, [pc, #332]	; (8000edc <main+0x1ac>)
 8000d90:	2002      	movs	r0, #2
 8000d92:	f006 f93f 	bl	8007014 <mg_log_prefix>
 8000d96:	4603      	mov	r3, r0
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d00e      	beq.n	8000dba <main+0x8a>
 8000d9c:	4b51      	ldr	r3, [pc, #324]	; (8000ee4 <main+0x1b4>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	ee07 3a90 	vmov	s15, r3
 8000da4:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8000da8:	ed9f 6b49 	vldr	d6, [pc, #292]	; 8000ed0 <main+0x1a0>
 8000dac:	ee87 5b06 	vdiv.f64	d5, d7, d6
 8000db0:	ec53 2b15 	vmov	r2, r3, d5
 8000db4:	484c      	ldr	r0, [pc, #304]	; (8000ee8 <main+0x1b8>)
 8000db6:	f006 f987 	bl	80070c8 <mg_log>

    struct mg_mgr mgr;        // Initialise
    mg_mgr_init(&mgr);        // Mongoose event manager
 8000dba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f007 fe6c 	bl	8008a9c <mg_mgr_init>
    s_mqtt_publisher = mg_mqtt_connect(&mgr, s_mqtt_broker_url, NULL, mqtt_publisher_event_handler, NULL);
 8000dc4:	4b49      	ldr	r3, [pc, #292]	; (8000eec <main+0x1bc>)
 8000dc6:	6819      	ldr	r1, [r3, #0]
 8000dc8:	f107 007c 	add.w	r0, r7, #124	; 0x7c
 8000dcc:	2300      	movs	r3, #0
 8000dce:	9300      	str	r3, [sp, #0]
 8000dd0:	4b47      	ldr	r3, [pc, #284]	; (8000ef0 <main+0x1c0>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	f007 f9f2 	bl	80081bc <mg_mqtt_connect>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	4a46      	ldr	r2, [pc, #280]	; (8000ef4 <main+0x1c4>)
 8000ddc:	6013      	str	r3, [r2, #0]
       if (s_mqtt_publisher == NULL) {
 8000dde:	4b45      	ldr	r3, [pc, #276]	; (8000ef4 <main+0x1c4>)
 8000de0:	681b      	ldr	r3, [r3, #0]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d105      	bne.n	8000df2 <main+0xc2>
           printf("Failed to create MQTT publisher.\n");
 8000de6:	4844      	ldr	r0, [pc, #272]	; (8000ef8 <main+0x1c8>)
 8000de8:	f013 fb9a 	bl	8014520 <puts>
           return -1;
 8000dec:	f04f 33ff 	mov.w	r3, #4294967295
 8000df0:	e06a      	b.n	8000ec8 <main+0x198>
       }
    mg_log_set(MG_LL_DEBUG);  // Set log level
 8000df2:	2003      	movs	r0, #3
 8000df4:	f006 f8ec 	bl	8006fd0 <mg_log_set>

    // Initialise Mongoose network stack
    struct mg_tcpip_driver_stm32h_data driver_data = {.mdc_cr = 4};
 8000df8:	2304      	movs	r3, #4
 8000dfa:	67bb      	str	r3, [r7, #120]	; 0x78
    struct mg_tcpip_if mif = {.mac = {0xaa,0xbb,0xcc,1,2,3},
 8000dfc:	463b      	mov	r3, r7
 8000dfe:	2278      	movs	r2, #120	; 0x78
 8000e00:	2100      	movs	r1, #0
 8000e02:	4618      	mov	r0, r3
 8000e04:	f013 fc96 	bl	8014734 <memset>
 8000e08:	4a3c      	ldr	r2, [pc, #240]	; (8000efc <main+0x1cc>)
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000e10:	6018      	str	r0, [r3, #0]
 8000e12:	3304      	adds	r3, #4
 8000e14:	8019      	strh	r1, [r3, #0]
 8000e16:	4b3a      	ldr	r3, [pc, #232]	; (8000f00 <main+0x1d0>)
 8000e18:	623b      	str	r3, [r7, #32]
 8000e1a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8000e1e:	627b      	str	r3, [r7, #36]	; 0x24
                              //.ip = mg_htonl(MG_U32(192, 168, 1, 25)),
                              //.mask = mg_htonl(MG_U32(255, 255, 255, 0)),
                              //.gw = mg_htonl(MG_U32(192, 168, 1, 1)),
                              .driver = &mg_tcpip_driver_stm32h,
                              .driver_data = &driver_data};
    mg_tcpip_init(&mgr, &mif);
 8000e20:	463a      	mov	r2, r7
 8000e22:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e26:	4611      	mov	r1, r2
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f00c fa7d 	bl	800d328 <mg_tcpip_init>
    mg_timer_add(&mgr, BLINK_PERIOD_MS, MG_TIMER_REPEAT, timer_fn, &mif);
 8000e2e:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000e32:	463b      	mov	r3, r7
 8000e34:	9302      	str	r3, [sp, #8]
 8000e36:	4b33      	ldr	r3, [pc, #204]	; (8000f04 <main+0x1d4>)
 8000e38:	9301      	str	r3, [sp, #4]
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	9300      	str	r3, [sp, #0]
 8000e3e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e42:	f04f 0300 	mov.w	r3, #0
 8000e46:	4608      	mov	r0, r1
 8000e48:	f007 fdfe 	bl	8008a48 <mg_timer_add>

    MG_INFO(("MAC: %M. Waiting for IP...", mg_print_mac, mif.mac));
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <main+0x1a8>)
 8000e4e:	22bd      	movs	r2, #189	; 0xbd
 8000e50:	4922      	ldr	r1, [pc, #136]	; (8000edc <main+0x1ac>)
 8000e52:	2002      	movs	r0, #2
 8000e54:	f006 f8de 	bl	8007014 <mg_log_prefix>
 8000e58:	4603      	mov	r3, r0
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d00c      	beq.n	8000e78 <main+0x148>
 8000e5e:	463b      	mov	r3, r7
 8000e60:	461a      	mov	r2, r3
 8000e62:	4929      	ldr	r1, [pc, #164]	; (8000f08 <main+0x1d8>)
 8000e64:	4829      	ldr	r0, [pc, #164]	; (8000f0c <main+0x1dc>)
 8000e66:	f006 f92f 	bl	80070c8 <mg_log>
    while (mif.state != MG_TCPIP_STATE_READY) {
 8000e6a:	e005      	b.n	8000e78 <main+0x148>
      mg_mgr_poll(&mgr, 0);
 8000e6c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e70:	2100      	movs	r1, #0
 8000e72:	4618      	mov	r0, r3
 8000e74:	f00c fd1a 	bl	800d8ac <mg_mgr_poll>
    while (mif.state != MG_TCPIP_STATE_READY) {
 8000e78:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8000e7c:	2b03      	cmp	r3, #3
 8000e7e:	d1f5      	bne.n	8000e6c <main+0x13c>
    }

    MG_INFO(("Initialising application..."));
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <main+0x1a8>)
 8000e82:	22c2      	movs	r2, #194	; 0xc2
 8000e84:	4915      	ldr	r1, [pc, #84]	; (8000edc <main+0x1ac>)
 8000e86:	2002      	movs	r0, #2
 8000e88:	f006 f8c4 	bl	8007014 <mg_log_prefix>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d002      	beq.n	8000e98 <main+0x168>
 8000e92:	481f      	ldr	r0, [pc, #124]	; (8000f10 <main+0x1e0>)
 8000e94:	f006 f918 	bl	80070c8 <mg_log>
    web_init(&mgr);
 8000e98:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f00d fb43 	bl	800e528 <web_init>

    MG_INFO(("Starting event loop"));
 8000ea2:	4b0d      	ldr	r3, [pc, #52]	; (8000ed8 <main+0x1a8>)
 8000ea4:	22c5      	movs	r2, #197	; 0xc5
 8000ea6:	490d      	ldr	r1, [pc, #52]	; (8000edc <main+0x1ac>)
 8000ea8:	2002      	movs	r0, #2
 8000eaa:	f006 f8b3 	bl	8007014 <mg_log_prefix>
 8000eae:	4603      	mov	r3, r0
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <main+0x18a>
 8000eb4:	4817      	ldr	r0, [pc, #92]	; (8000f14 <main+0x1e4>)
 8000eb6:	f006 f907 	bl	80070c8 <mg_log>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  mg_mgr_poll(&mgr, 0);
 8000eba:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f00c fcf3 	bl	800d8ac <mg_mgr_poll>
 8000ec6:	e7f8      	b.n	8000eba <main+0x18a>
  }
  /* USER CODE END 3 */
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	37c4      	adds	r7, #196	; 0xc4
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd90      	pop	{r4, r7, pc}
 8000ed0:	00000000 	.word	0x00000000
 8000ed4:	412e8480 	.word	0x412e8480
 8000ed8:	08017378 	.word	0x08017378
 8000edc:	08015318 	.word	0x08015318
 8000ee0:	08015380 	.word	0x08015380
 8000ee4:	240002a8 	.word	0x240002a8
 8000ee8:	080153ac 	.word	0x080153ac
 8000eec:	24000000 	.word	0x24000000
 8000ef0:	08000ba1 	.word	0x08000ba1
 8000ef4:	24000584 	.word	0x24000584
 8000ef8:	080153c8 	.word	0x080153c8
 8000efc:	08015438 	.word	0x08015438
 8000f00:	2400024c 	.word	0x2400024c
 8000f04:	08000ca1 	.word	0x08000ca1
 8000f08:	08008e15 	.word	0x08008e15
 8000f0c:	080153ec 	.word	0x080153ec
 8000f10:	08015408 	.word	0x08015408
 8000f14:	08015424 	.word	0x08015424

08000f18 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b09c      	sub	sp, #112	; 0x70
 8000f1c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f1e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f22:	224c      	movs	r2, #76	; 0x4c
 8000f24:	2100      	movs	r1, #0
 8000f26:	4618      	mov	r0, r3
 8000f28:	f013 fc04 	bl	8014734 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f2c:	1d3b      	adds	r3, r7, #4
 8000f2e:	2220      	movs	r2, #32
 8000f30:	2100      	movs	r1, #0
 8000f32:	4618      	mov	r0, r3
 8000f34:	f013 fbfe 	bl	8014734 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000f38:	2002      	movs	r0, #2
 8000f3a:	f00e fe67 	bl	800fc0c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000f3e:	2300      	movs	r3, #0
 8000f40:	603b      	str	r3, [r7, #0]
 8000f42:	4b2c      	ldr	r3, [pc, #176]	; (8000ff4 <SystemClock_Config+0xdc>)
 8000f44:	699b      	ldr	r3, [r3, #24]
 8000f46:	4a2b      	ldr	r2, [pc, #172]	; (8000ff4 <SystemClock_Config+0xdc>)
 8000f48:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f4c:	6193      	str	r3, [r2, #24]
 8000f4e:	4b29      	ldr	r3, [pc, #164]	; (8000ff4 <SystemClock_Config+0xdc>)
 8000f50:	699b      	ldr	r3, [r3, #24]
 8000f52:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000f56:	603b      	str	r3, [r7, #0]
 8000f58:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000f5a:	bf00      	nop
 8000f5c:	4b25      	ldr	r3, [pc, #148]	; (8000ff4 <SystemClock_Config+0xdc>)
 8000f5e:	699b      	ldr	r3, [r3, #24]
 8000f60:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000f64:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f68:	d1f8      	bne.n	8000f5c <SystemClock_Config+0x44>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI48|RCC_OSCILLATORTYPE_HSE;
 8000f6a:	2321      	movs	r3, #33	; 0x21
 8000f6c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f6e:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000f72:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f74:	2301      	movs	r3, #1
 8000f76:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f78:	2302      	movs	r3, #2
 8000f7a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f80:	2304      	movs	r3, #4
 8000f82:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 275;
 8000f84:	f240 1313 	movw	r3, #275	; 0x113
 8000f88:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 1;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f8e:	2304      	movs	r3, #4
 8000f90:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000f92:	2302      	movs	r3, #2
 8000f94:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_1;
 8000f96:	2304      	movs	r3, #4
 8000f98:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fa2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fa6:	4618      	mov	r0, r3
 8000fa8:	f00e fe6a 	bl	800fc80 <HAL_RCC_OscConfig>
 8000fac:	4603      	mov	r3, r0
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d001      	beq.n	8000fb6 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000fb2:	f000 f9d3 	bl	800135c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fb6:	233f      	movs	r3, #63	; 0x3f
 8000fb8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000fc2:	2308      	movs	r3, #8
 8000fc4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000fc6:	2340      	movs	r3, #64	; 0x40
 8000fc8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000fca:	2340      	movs	r3, #64	; 0x40
 8000fcc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000fce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000fd2:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000fd4:	2340      	movs	r3, #64	; 0x40
 8000fd6:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2103      	movs	r1, #3
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f00f fa29 	bl	8010434 <HAL_RCC_ClockConfig>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d001      	beq.n	8000fec <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000fe8:	f000 f9b8 	bl	800135c <Error_Handler>
  }
}
 8000fec:	bf00      	nop
 8000fee:	3770      	adds	r7, #112	; 0x70
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	58024800 	.word	0x58024800

08000ff8 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000ffc:	4b1e      	ldr	r3, [pc, #120]	; (8001078 <MX_ETH_Init+0x80>)
 8000ffe:	4a1f      	ldr	r2, [pc, #124]	; (800107c <MX_ETH_Init+0x84>)
 8001000:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001002:	4b1f      	ldr	r3, [pc, #124]	; (8001080 <MX_ETH_Init+0x88>)
 8001004:	2200      	movs	r2, #0
 8001006:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001008:	4b1d      	ldr	r3, [pc, #116]	; (8001080 <MX_ETH_Init+0x88>)
 800100a:	2280      	movs	r2, #128	; 0x80
 800100c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 800100e:	4b1c      	ldr	r3, [pc, #112]	; (8001080 <MX_ETH_Init+0x88>)
 8001010:	22e1      	movs	r2, #225	; 0xe1
 8001012:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001014:	4b1a      	ldr	r3, [pc, #104]	; (8001080 <MX_ETH_Init+0x88>)
 8001016:	2200      	movs	r2, #0
 8001018:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 800101a:	4b19      	ldr	r3, [pc, #100]	; (8001080 <MX_ETH_Init+0x88>)
 800101c:	2200      	movs	r2, #0
 800101e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001020:	4b17      	ldr	r3, [pc, #92]	; (8001080 <MX_ETH_Init+0x88>)
 8001022:	2200      	movs	r2, #0
 8001024:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001026:	4b14      	ldr	r3, [pc, #80]	; (8001078 <MX_ETH_Init+0x80>)
 8001028:	4a15      	ldr	r2, [pc, #84]	; (8001080 <MX_ETH_Init+0x88>)
 800102a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800102c:	4b12      	ldr	r3, [pc, #72]	; (8001078 <MX_ETH_Init+0x80>)
 800102e:	2201      	movs	r2, #1
 8001030:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001032:	4b11      	ldr	r3, [pc, #68]	; (8001078 <MX_ETH_Init+0x80>)
 8001034:	4a13      	ldr	r2, [pc, #76]	; (8001084 <MX_ETH_Init+0x8c>)
 8001036:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001038:	4b0f      	ldr	r3, [pc, #60]	; (8001078 <MX_ETH_Init+0x80>)
 800103a:	4a13      	ldr	r2, [pc, #76]	; (8001088 <MX_ETH_Init+0x90>)
 800103c:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 800103e:	4b0e      	ldr	r3, [pc, #56]	; (8001078 <MX_ETH_Init+0x80>)
 8001040:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001044:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001046:	480c      	ldr	r0, [pc, #48]	; (8001078 <MX_ETH_Init+0x80>)
 8001048:	f00d ffe0 	bl	800f00c <HAL_ETH_Init>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 8001052:	f000 f983 	bl	800135c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001056:	2238      	movs	r2, #56	; 0x38
 8001058:	2100      	movs	r1, #0
 800105a:	480c      	ldr	r0, [pc, #48]	; (800108c <MX_ETH_Init+0x94>)
 800105c:	f013 fb6a 	bl	8014734 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001060:	4b0a      	ldr	r3, [pc, #40]	; (800108c <MX_ETH_Init+0x94>)
 8001062:	2221      	movs	r2, #33	; 0x21
 8001064:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001066:	4b09      	ldr	r3, [pc, #36]	; (800108c <MX_ETH_Init+0x94>)
 8001068:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800106c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800106e:	4b07      	ldr	r3, [pc, #28]	; (800108c <MX_ETH_Init+0x94>)
 8001070:	2200      	movs	r2, #0
 8001072:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001074:	bf00      	nop
 8001076:	bd80      	pop	{r7, pc}
 8001078:	2400042c 	.word	0x2400042c
 800107c:	40028000 	.word	0x40028000
 8001080:	24000588 	.word	0x24000588
 8001084:	24000374 	.word	0x24000374
 8001088:	24000314 	.word	0x24000314
 800108c:	240003f4 	.word	0x240003f4

08001090 <MX_RNG_Init>:
  * @brief RNG Initialization Function
  * @param None
  * @retval None
  */
static void MX_RNG_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
  /* USER CODE END RNG_Init 0 */

  /* USER CODE BEGIN RNG_Init 1 */

  /* USER CODE END RNG_Init 1 */
  hrng.Instance = RNG;
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <MX_RNG_Init+0x24>)
 8001096:	4a08      	ldr	r2, [pc, #32]	; (80010b8 <MX_RNG_Init+0x28>)
 8001098:	601a      	str	r2, [r3, #0]
  hrng.Init.ClockErrorDetection = RNG_CED_ENABLE;
 800109a:	4b06      	ldr	r3, [pc, #24]	; (80010b4 <MX_RNG_Init+0x24>)
 800109c:	2200      	movs	r2, #0
 800109e:	605a      	str	r2, [r3, #4]
  if (HAL_RNG_Init(&hrng) != HAL_OK)
 80010a0:	4804      	ldr	r0, [pc, #16]	; (80010b4 <MX_RNG_Init+0x24>)
 80010a2:	f011 fb15 	bl	80126d0 <HAL_RNG_Init>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_RNG_Init+0x20>
  {
    Error_Handler();
 80010ac:	f000 f956 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN RNG_Init 2 */

  /* USER CODE END RNG_Init 2 */

}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	240004dc 	.word	0x240004dc
 80010b8:	48021800 	.word	0x48021800

080010bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010c2:	4a23      	ldr	r2, [pc, #140]	; (8001150 <MX_USART3_UART_Init+0x94>)
 80010c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80010c6:	4b21      	ldr	r3, [pc, #132]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80010cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80010ce:	4b1f      	ldr	r3, [pc, #124]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80010d4:	4b1d      	ldr	r3, [pc, #116]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80010da:	4b1c      	ldr	r3, [pc, #112]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010dc:	2200      	movs	r2, #0
 80010de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80010e0:	4b1a      	ldr	r3, [pc, #104]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010e2:	220c      	movs	r2, #12
 80010e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80010e6:	4b19      	ldr	r3, [pc, #100]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80010f8:	4b14      	ldr	r3, [pc, #80]	; (800114c <MX_USART3_UART_Init+0x90>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80010fe:	4b13      	ldr	r3, [pc, #76]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001100:	2200      	movs	r2, #0
 8001102:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001104:	4811      	ldr	r0, [pc, #68]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001106:	f011 fc91 	bl	8012a2c <HAL_UART_Init>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d001      	beq.n	8001114 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001110:	f000 f924 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001114:	2100      	movs	r1, #0
 8001116:	480d      	ldr	r0, [pc, #52]	; (800114c <MX_USART3_UART_Init+0x90>)
 8001118:	f012 fe25 	bl	8013d66 <HAL_UARTEx_SetTxFifoThreshold>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001122:	f000 f91b 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001126:	2100      	movs	r1, #0
 8001128:	4808      	ldr	r0, [pc, #32]	; (800114c <MX_USART3_UART_Init+0x90>)
 800112a:	f012 fe5a 	bl	8013de2 <HAL_UARTEx_SetRxFifoThreshold>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d001      	beq.n	8001138 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001134:	f000 f912 	bl	800135c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001138:	4804      	ldr	r0, [pc, #16]	; (800114c <MX_USART3_UART_Init+0x90>)
 800113a:	f012 fddb 	bl	8013cf4 <HAL_UARTEx_DisableFifoMode>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001144:	f000 f90a 	bl	800135c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}
 800114c:	240004f0 	.word	0x240004f0
 8001150:	40004800 	.word	0x40004800

08001154 <MX_USB_OTG_HS_USB_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_USB_Init(void)
{
 8001154:	b480      	push	{r7}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 1 */
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8001158:	bf00      	nop
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
	...

08001164 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b08c      	sub	sp, #48	; 0x30
 8001168:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800116a:	f107 031c 	add.w	r3, r7, #28
 800116e:	2200      	movs	r2, #0
 8001170:	601a      	str	r2, [r3, #0]
 8001172:	605a      	str	r2, [r3, #4]
 8001174:	609a      	str	r2, [r3, #8]
 8001176:	60da      	str	r2, [r3, #12]
 8001178:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800117a:	4b71      	ldr	r3, [pc, #452]	; (8001340 <MX_GPIO_Init+0x1dc>)
 800117c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001180:	4a6f      	ldr	r2, [pc, #444]	; (8001340 <MX_GPIO_Init+0x1dc>)
 8001182:	f043 0304 	orr.w	r3, r3, #4
 8001186:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800118a:	4b6d      	ldr	r3, [pc, #436]	; (8001340 <MX_GPIO_Init+0x1dc>)
 800118c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001190:	f003 0304 	and.w	r3, r3, #4
 8001194:	61bb      	str	r3, [r7, #24]
 8001196:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001198:	4b69      	ldr	r3, [pc, #420]	; (8001340 <MX_GPIO_Init+0x1dc>)
 800119a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800119e:	4a68      	ldr	r2, [pc, #416]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011a4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011a8:	4b65      	ldr	r3, [pc, #404]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011b2:	617b      	str	r3, [r7, #20]
 80011b4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011b6:	4b62      	ldr	r3, [pc, #392]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011bc:	4a60      	ldr	r2, [pc, #384]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011be:	f043 0301 	orr.w	r3, r3, #1
 80011c2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011c6:	4b5e      	ldr	r3, [pc, #376]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011cc:	f003 0301 	and.w	r3, r3, #1
 80011d0:	613b      	str	r3, [r7, #16]
 80011d2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011d4:	4b5a      	ldr	r3, [pc, #360]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011da:	4a59      	ldr	r2, [pc, #356]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011dc:	f043 0302 	orr.w	r3, r3, #2
 80011e0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80011e4:	4b56      	ldr	r3, [pc, #344]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	60fb      	str	r3, [r7, #12]
 80011f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011f2:	4b53      	ldr	r3, [pc, #332]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80011f8:	4a51      	ldr	r2, [pc, #324]	; (8001340 <MX_GPIO_Init+0x1dc>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001202:	4b4f      	ldr	r3, [pc, #316]	; (8001340 <MX_GPIO_Init+0x1dc>)
 8001204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001208:	f003 0308 	and.w	r3, r3, #8
 800120c:	60bb      	str	r3, [r7, #8]
 800120e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001210:	4b4b      	ldr	r3, [pc, #300]	; (8001340 <MX_GPIO_Init+0x1dc>)
 8001212:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001216:	4a4a      	ldr	r2, [pc, #296]	; (8001340 <MX_GPIO_Init+0x1dc>)
 8001218:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800121c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8001220:	4b47      	ldr	r3, [pc, #284]	; (8001340 <MX_GPIO_Init+0x1dc>)
 8001222:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800122a:	607b      	str	r3, [r7, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800122e:	4b44      	ldr	r3, [pc, #272]	; (8001340 <MX_GPIO_Init+0x1dc>)
 8001230:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001234:	4a42      	ldr	r2, [pc, #264]	; (8001340 <MX_GPIO_Init+0x1dc>)
 8001236:	f043 0310 	orr.w	r3, r3, #16
 800123a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800123e:	4b40      	ldr	r3, [pc, #256]	; (8001340 <MX_GPIO_Init+0x1dc>)
 8001240:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8001244:	f003 0310 	and.w	r3, r3, #16
 8001248:	603b      	str	r3, [r7, #0]
 800124a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_GREEN_Pin|LED_RED_Pin, GPIO_PIN_RESET);
 800124c:	2200      	movs	r2, #0
 800124e:	f244 0101 	movw	r1, #16385	; 0x4001
 8001252:	483c      	ldr	r0, [pc, #240]	; (8001344 <MX_GPIO_Init+0x1e0>)
 8001254:	f00e fca6 	bl	800fba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_FS_PWR_EN_GPIO_Port, USB_FS_PWR_EN_Pin, GPIO_PIN_RESET);
 8001258:	2200      	movs	r2, #0
 800125a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800125e:	483a      	ldr	r0, [pc, #232]	; (8001348 <MX_GPIO_Init+0x1e4>)
 8001260:	f00e fca0 	bl	800fba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_YELLOW_GPIO_Port, LED_YELLOW_Pin, GPIO_PIN_RESET);
 8001264:	2200      	movs	r2, #0
 8001266:	2102      	movs	r1, #2
 8001268:	4838      	ldr	r0, [pc, #224]	; (800134c <MX_GPIO_Init+0x1e8>)
 800126a:	f00e fc9b 	bl	800fba4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800126e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001272:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001274:	2300      	movs	r3, #0
 8001276:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001278:	2300      	movs	r3, #0
 800127a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800127c:	f107 031c 	add.w	r3, r7, #28
 8001280:	4619      	mov	r1, r3
 8001282:	4833      	ldr	r0, [pc, #204]	; (8001350 <MX_GPIO_Init+0x1ec>)
 8001284:	f00e fae6 	bl	800f854 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_GREEN_Pin LED_RED_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin|LED_RED_Pin;
 8001288:	f244 0301 	movw	r3, #16385	; 0x4001
 800128c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800128e:	2301      	movs	r3, #1
 8001290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001296:	2300      	movs	r3, #0
 8001298:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800129a:	f107 031c 	add.w	r3, r7, #28
 800129e:	4619      	mov	r1, r3
 80012a0:	4828      	ldr	r0, [pc, #160]	; (8001344 <MX_GPIO_Init+0x1e0>)
 80012a2:	f00e fad7 	bl	800f854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_PWR_EN_Pin */
  GPIO_InitStruct.Pin = USB_FS_PWR_EN_Pin;
 80012a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b0:	2300      	movs	r3, #0
 80012b2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	2300      	movs	r3, #0
 80012b6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_FS_PWR_EN_GPIO_Port, &GPIO_InitStruct);
 80012b8:	f107 031c 	add.w	r3, r7, #28
 80012bc:	4619      	mov	r1, r3
 80012be:	4822      	ldr	r0, [pc, #136]	; (8001348 <MX_GPIO_Init+0x1e4>)
 80012c0:	f00e fac8 	bl	800f854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_OVCR_Pin */
  GPIO_InitStruct.Pin = USB_FS_OVCR_Pin;
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80012c8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80012cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_OVCR_GPIO_Port, &GPIO_InitStruct);
 80012d2:	f107 031c 	add.w	r3, r7, #28
 80012d6:	4619      	mov	r1, r3
 80012d8:	481e      	ldr	r0, [pc, #120]	; (8001354 <MX_GPIO_Init+0x1f0>)
 80012da:	f00e fabb 	bl	800f854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_FS_VBUS_Pin;
 80012de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80012e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012e4:	2300      	movs	r3, #0
 80012e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_FS_VBUS_GPIO_Port, &GPIO_InitStruct);
 80012ec:	f107 031c 	add.w	r3, r7, #28
 80012f0:	4619      	mov	r1, r3
 80012f2:	4819      	ldr	r0, [pc, #100]	; (8001358 <MX_GPIO_Init+0x1f4>)
 80012f4:	f00e faae 	bl	800f854 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_FS_ID_Pin */
  GPIO_InitStruct.Pin = USB_FS_ID_Pin;
 80012f8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001302:	2300      	movs	r3, #0
 8001304:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_HS;
 800130a:	230a      	movs	r3, #10
 800130c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_FS_ID_GPIO_Port, &GPIO_InitStruct);
 800130e:	f107 031c 	add.w	r3, r7, #28
 8001312:	4619      	mov	r1, r3
 8001314:	4810      	ldr	r0, [pc, #64]	; (8001358 <MX_GPIO_Init+0x1f4>)
 8001316:	f00e fa9d 	bl	800f854 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_YELLOW_Pin */
  GPIO_InitStruct.Pin = LED_YELLOW_Pin;
 800131a:	2302      	movs	r3, #2
 800131c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800131e:	2301      	movs	r3, #1
 8001320:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001322:	2300      	movs	r3, #0
 8001324:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001326:	2300      	movs	r3, #0
 8001328:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(LED_YELLOW_GPIO_Port, &GPIO_InitStruct);
 800132a:	f107 031c 	add.w	r3, r7, #28
 800132e:	4619      	mov	r1, r3
 8001330:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_GPIO_Init+0x1e8>)
 8001332:	f00e fa8f 	bl	800f854 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001336:	bf00      	nop
 8001338:	3730      	adds	r7, #48	; 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	58024400 	.word	0x58024400
 8001344:	58020400 	.word	0x58020400
 8001348:	58020c00 	.word	0x58020c00
 800134c:	58021000 	.word	0x58021000
 8001350:	58020800 	.word	0x58020800
 8001354:	58021800 	.word	0x58021800
 8001358:	58020000 	.word	0x58020000

0800135c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800135c:	b480      	push	{r7}
 800135e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001360:	b672      	cpsid	i
}
 8001362:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001364:	e7fe      	b.n	8001364 <Error_Handler+0x8>

08001366 <mg_b64rev>:
  } else {
    return c == 62 ? '+' : '/';
  }
}

static int mg_b64rev(int c) {
 8001366:	b480      	push	{r7}
 8001368:	b083      	sub	sp, #12
 800136a:	af00      	add	r7, sp, #0
 800136c:	6078      	str	r0, [r7, #4]
  if (c >= 'A' && c <= 'Z') {
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	2b40      	cmp	r3, #64	; 0x40
 8001372:	dd05      	ble.n	8001380 <mg_b64rev+0x1a>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	2b5a      	cmp	r3, #90	; 0x5a
 8001378:	dc02      	bgt.n	8001380 <mg_b64rev+0x1a>
    return c - 'A';
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	3b41      	subs	r3, #65	; 0x41
 800137e:	e022      	b.n	80013c6 <mg_b64rev+0x60>
  } else if (c >= 'a' && c <= 'z') {
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	2b60      	cmp	r3, #96	; 0x60
 8001384:	dd05      	ble.n	8001392 <mg_b64rev+0x2c>
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2b7a      	cmp	r3, #122	; 0x7a
 800138a:	dc02      	bgt.n	8001392 <mg_b64rev+0x2c>
    return c + 26 - 'a';
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3b47      	subs	r3, #71	; 0x47
 8001390:	e019      	b.n	80013c6 <mg_b64rev+0x60>
  } else if (c >= '0' && c <= '9') {
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b2f      	cmp	r3, #47	; 0x2f
 8001396:	dd05      	ble.n	80013a4 <mg_b64rev+0x3e>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2b39      	cmp	r3, #57	; 0x39
 800139c:	dc02      	bgt.n	80013a4 <mg_b64rev+0x3e>
    return c + 52 - '0';
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	3304      	adds	r3, #4
 80013a2:	e010      	b.n	80013c6 <mg_b64rev+0x60>
  } else if (c == '+') {
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	2b2b      	cmp	r3, #43	; 0x2b
 80013a8:	d101      	bne.n	80013ae <mg_b64rev+0x48>
    return 62;
 80013aa:	233e      	movs	r3, #62	; 0x3e
 80013ac:	e00b      	b.n	80013c6 <mg_b64rev+0x60>
  } else if (c == '/') {
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	2b2f      	cmp	r3, #47	; 0x2f
 80013b2:	d101      	bne.n	80013b8 <mg_b64rev+0x52>
    return 63;
 80013b4:	233f      	movs	r3, #63	; 0x3f
 80013b6:	e006      	b.n	80013c6 <mg_b64rev+0x60>
  } else if (c == '=') {
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	2b3d      	cmp	r3, #61	; 0x3d
 80013bc:	d101      	bne.n	80013c2 <mg_b64rev+0x5c>
    return 64;
 80013be:	2340      	movs	r3, #64	; 0x40
 80013c0:	e001      	b.n	80013c6 <mg_b64rev+0x60>
  } else {
    return -1;
 80013c2:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	370c      	adds	r7, #12
 80013ca:	46bd      	mov	sp, r7
 80013cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d0:	4770      	bx	lr

080013d2 <mg_base64_decode>:
  for (i = 0; i < n; i++) len = mg_base64_update(p[i], to, len);
  len = mg_base64_final(to, len);
  return len;
}

int mg_base64_decode(const char *src, int n, char *dst) {
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b08a      	sub	sp, #40	; 0x28
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	60f8      	str	r0, [r7, #12]
 80013da:	60b9      	str	r1, [r7, #8]
 80013dc:	607a      	str	r2, [r7, #4]
  const char *end = src == NULL ? NULL : src + n;  // Cannot add to NULL
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d003      	beq.n	80013ec <mg_base64_decode+0x1a>
 80013e4:	68bb      	ldr	r3, [r7, #8]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	e000      	b.n	80013ee <mg_base64_decode+0x1c>
 80013ec:	2300      	movs	r3, #0
 80013ee:	623b      	str	r3, [r7, #32]
  int len = 0;
 80013f0:	2300      	movs	r3, #0
 80013f2:	627b      	str	r3, [r7, #36]	; 0x24
  while (src != NULL && src + 3 < end) {
 80013f4:	e06a      	b.n	80014cc <mg_base64_decode+0xfa>
    int a = mg_b64rev(src[0]), b = mg_b64rev(src[1]), c = mg_b64rev(src[2]),
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ffb3 	bl	8001366 <mg_b64rev>
 8001400:	61f8      	str	r0, [r7, #28]
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	3301      	adds	r3, #1
 8001406:	781b      	ldrb	r3, [r3, #0]
 8001408:	4618      	mov	r0, r3
 800140a:	f7ff ffac 	bl	8001366 <mg_b64rev>
 800140e:	61b8      	str	r0, [r7, #24]
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	3302      	adds	r3, #2
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ffa5 	bl	8001366 <mg_b64rev>
 800141c:	6178      	str	r0, [r7, #20]
        d = mg_b64rev(src[3]);
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	3303      	adds	r3, #3
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4618      	mov	r0, r3
 8001426:	f7ff ff9e 	bl	8001366 <mg_b64rev>
 800142a:	6138      	str	r0, [r7, #16]
    if (a == 64 || a < 0 || b == 64 || b < 0 || c < 0 || d < 0) return 0;
 800142c:	69fb      	ldr	r3, [r7, #28]
 800142e:	2b40      	cmp	r3, #64	; 0x40
 8001430:	d00e      	beq.n	8001450 <mg_base64_decode+0x7e>
 8001432:	69fb      	ldr	r3, [r7, #28]
 8001434:	2b00      	cmp	r3, #0
 8001436:	db0b      	blt.n	8001450 <mg_base64_decode+0x7e>
 8001438:	69bb      	ldr	r3, [r7, #24]
 800143a:	2b40      	cmp	r3, #64	; 0x40
 800143c:	d008      	beq.n	8001450 <mg_base64_decode+0x7e>
 800143e:	69bb      	ldr	r3, [r7, #24]
 8001440:	2b00      	cmp	r3, #0
 8001442:	db05      	blt.n	8001450 <mg_base64_decode+0x7e>
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	2b00      	cmp	r3, #0
 8001448:	db02      	blt.n	8001450 <mg_base64_decode+0x7e>
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	2b00      	cmp	r3, #0
 800144e:	da01      	bge.n	8001454 <mg_base64_decode+0x82>
 8001450:	2300      	movs	r3, #0
 8001452:	e049      	b.n	80014e8 <mg_base64_decode+0x116>
    dst[len++] = (char) ((a << 2) | (b >> 4));
 8001454:	69fb      	ldr	r3, [r7, #28]
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	b25a      	sxtb	r2, r3
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	111b      	asrs	r3, r3, #4
 800145e:	b25b      	sxtb	r3, r3
 8001460:	4313      	orrs	r3, r2
 8001462:	b259      	sxtb	r1, r3
 8001464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001466:	1c5a      	adds	r2, r3, #1
 8001468:	627a      	str	r2, [r7, #36]	; 0x24
 800146a:	461a      	mov	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	4413      	add	r3, r2
 8001470:	b2ca      	uxtb	r2, r1
 8001472:	701a      	strb	r2, [r3, #0]
    if (src[2] != '=') {
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	3302      	adds	r3, #2
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	2b3d      	cmp	r3, #61	; 0x3d
 800147c:	d023      	beq.n	80014c6 <mg_base64_decode+0xf4>
      dst[len++] = (char) ((b << 4) | (c >> 2));
 800147e:	69bb      	ldr	r3, [r7, #24]
 8001480:	011b      	lsls	r3, r3, #4
 8001482:	b25a      	sxtb	r2, r3
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	109b      	asrs	r3, r3, #2
 8001488:	b25b      	sxtb	r3, r3
 800148a:	4313      	orrs	r3, r2
 800148c:	b259      	sxtb	r1, r3
 800148e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001490:	1c5a      	adds	r2, r3, #1
 8001492:	627a      	str	r2, [r7, #36]	; 0x24
 8001494:	461a      	mov	r2, r3
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	4413      	add	r3, r2
 800149a:	b2ca      	uxtb	r2, r1
 800149c:	701a      	strb	r2, [r3, #0]
      if (src[3] != '=') dst[len++] = (char) ((c << 6) | d);
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	3303      	adds	r3, #3
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	2b3d      	cmp	r3, #61	; 0x3d
 80014a6:	d00e      	beq.n	80014c6 <mg_base64_decode+0xf4>
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	019b      	lsls	r3, r3, #6
 80014ac:	b25a      	sxtb	r2, r3
 80014ae:	693b      	ldr	r3, [r7, #16]
 80014b0:	b25b      	sxtb	r3, r3
 80014b2:	4313      	orrs	r3, r2
 80014b4:	b259      	sxtb	r1, r3
 80014b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	627a      	str	r2, [r7, #36]	; 0x24
 80014bc:	461a      	mov	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	4413      	add	r3, r2
 80014c2:	b2ca      	uxtb	r2, r1
 80014c4:	701a      	strb	r2, [r3, #0]
    }
    src += 4;
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	3304      	adds	r3, #4
 80014ca:	60fb      	str	r3, [r7, #12]
  while (src != NULL && src + 3 < end) {
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d004      	beq.n	80014dc <mg_base64_decode+0x10a>
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3303      	adds	r3, #3
 80014d6:	6a3a      	ldr	r2, [r7, #32]
 80014d8:	429a      	cmp	r2, r3
 80014da:	d88c      	bhi.n	80013f6 <mg_base64_decode+0x24>
  }
  dst[len] = '\0';
 80014dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	4413      	add	r3, r2
 80014e2:	2200      	movs	r2, #0
 80014e4:	701a      	strb	r2, [r3, #0]
  return len;
 80014e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	3728      	adds	r7, #40	; 0x28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}

080014f0 <mg_dns_free>:
};

static void mg_sendnsreq(struct mg_connection *, struct mg_str *, int,
                         struct mg_dns *, bool);

static void mg_dns_free(struct mg_connection *c, struct dns_data *d) {
 80014f0:	b580      	push	{r7, lr}
 80014f2:	b084      	sub	sp, #16
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	6078      	str	r0, [r7, #4]
 80014f8:	6039      	str	r1, [r7, #0]
  LIST_DELETE(struct dns_data,
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	3330      	adds	r3, #48	; 0x30
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e002      	b.n	800150a <mg_dns_free+0x1a>
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	60fb      	str	r3, [r7, #12]
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	683a      	ldr	r2, [r7, #0]
 8001510:	429a      	cmp	r2, r3
 8001512:	d1f7      	bne.n	8001504 <mg_dns_free+0x14>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	601a      	str	r2, [r3, #0]
              (struct dns_data **) &c->mgr->active_dns_requests, d);
  free(d);
 800151c:	6838      	ldr	r0, [r7, #0]
 800151e:	f012 fd35 	bl	8013f8c <free>
}
 8001522:	bf00      	nop
 8001524:	3710      	adds	r7, #16
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}

0800152a <mg_resolve_cancel>:

void mg_resolve_cancel(struct mg_connection *c) {
 800152a:	b580      	push	{r7, lr}
 800152c:	b084      	sub	sp, #16
 800152e:	af00      	add	r7, sp, #0
 8001530:	6078      	str	r0, [r7, #4]
  struct dns_data *tmp, *d = (struct dns_data *) c->mgr->active_dns_requests;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	685b      	ldr	r3, [r3, #4]
 8001536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001538:	60fb      	str	r3, [r7, #12]
  for (; d != NULL; d = tmp) {
 800153a:	e00d      	b.n	8001558 <mg_resolve_cancel+0x2e>
    tmp = d->next;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	60bb      	str	r3, [r7, #8]
    if (d->c == c) mg_dns_free(c, d);
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	685b      	ldr	r3, [r3, #4]
 8001546:	687a      	ldr	r2, [r7, #4]
 8001548:	429a      	cmp	r2, r3
 800154a:	d103      	bne.n	8001554 <mg_resolve_cancel+0x2a>
 800154c:	68f9      	ldr	r1, [r7, #12]
 800154e:	6878      	ldr	r0, [r7, #4]
 8001550:	f7ff ffce 	bl	80014f0 <mg_dns_free>
  for (; d != NULL; d = tmp) {
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	60fb      	str	r3, [r7, #12]
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	2b00      	cmp	r3, #0
 800155c:	d1ee      	bne.n	800153c <mg_resolve_cancel+0x12>
  }
}
 800155e:	bf00      	nop
 8001560:	bf00      	nop
 8001562:	3710      	adds	r7, #16
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}

08001568 <mg_dns_parse_name_depth>:

static size_t mg_dns_parse_name_depth(const uint8_t *s, size_t len, size_t ofs,
                                      char *to, size_t tolen, size_t j,
                                      int depth) {
 8001568:	b580      	push	{r7, lr}
 800156a:	b08c      	sub	sp, #48	; 0x30
 800156c:	af04      	add	r7, sp, #16
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
 8001574:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	61fb      	str	r3, [r7, #28]
  if (tolen > 0 && depth == 0) to[0] = '\0';
 800157a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800157c:	2b00      	cmp	r3, #0
 800157e:	d005      	beq.n	800158c <mg_dns_parse_name_depth+0x24>
 8001580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001582:	2b00      	cmp	r3, #0
 8001584:	d102      	bne.n	800158c <mg_dns_parse_name_depth+0x24>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	2200      	movs	r2, #0
 800158a:	701a      	strb	r2, [r3, #0]
  if (depth > 5) return 0;
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	2b05      	cmp	r3, #5
 8001590:	f340 8084 	ble.w	800169c <mg_dns_parse_name_depth+0x134>
 8001594:	2300      	movs	r3, #0
 8001596:	e093      	b.n	80016c0 <mg_dns_parse_name_depth+0x158>
  // MG_INFO(("ofs %lx %x %x", (unsigned long) ofs, s[ofs], s[ofs + 1]));
  while (ofs + i + 1 < len) {
    size_t n = s[ofs + i];
 8001598:	687a      	ldr	r2, [r7, #4]
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	4413      	add	r3, r2
 800159e:	68fa      	ldr	r2, [r7, #12]
 80015a0:	4413      	add	r3, r2
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	61bb      	str	r3, [r7, #24]
    if (n == 0) {
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d103      	bne.n	80015b4 <mg_dns_parse_name_depth+0x4c>
      i++;
 80015ac:	69fb      	ldr	r3, [r7, #28]
 80015ae:	3301      	adds	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
      break;
 80015b2:	e07b      	b.n	80016ac <mg_dns_parse_name_depth+0x144>
    }
    if (n & 0xc0) {
 80015b4:	69bb      	ldr	r3, [r7, #24]
 80015b6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d02f      	beq.n	800161e <mg_dns_parse_name_depth+0xb6>
      size_t ptr = (((n & 0x3f) << 8) | s[ofs + i + 1]);  // 12 is hdr len
 80015be:	69bb      	ldr	r3, [r7, #24]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	f403 537c 	and.w	r3, r3, #16128	; 0x3f00
 80015c6:	6879      	ldr	r1, [r7, #4]
 80015c8:	69fa      	ldr	r2, [r7, #28]
 80015ca:	440a      	add	r2, r1
 80015cc:	3201      	adds	r2, #1
 80015ce:	68f9      	ldr	r1, [r7, #12]
 80015d0:	440a      	add	r2, r1
 80015d2:	7812      	ldrb	r2, [r2, #0]
 80015d4:	4313      	orrs	r3, r2
 80015d6:	617b      	str	r3, [r7, #20]
      // MG_INFO(("PTR %lx", (unsigned long) ptr));
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 80015d8:	697b      	ldr	r3, [r7, #20]
 80015da:	3301      	adds	r3, #1
 80015dc:	68ba      	ldr	r2, [r7, #8]
 80015de:	429a      	cmp	r2, r3
 80015e0:	d919      	bls.n	8001616 <mg_dns_parse_name_depth+0xae>
 80015e2:	68fa      	ldr	r2, [r7, #12]
 80015e4:	697b      	ldr	r3, [r7, #20]
 80015e6:	4413      	add	r3, r2
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d111      	bne.n	8001616 <mg_dns_parse_name_depth+0xae>
          mg_dns_parse_name_depth(s, len, ptr, to, tolen, j, depth + 1) == 0)
 80015f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015f4:	3301      	adds	r3, #1
 80015f6:	9302      	str	r3, [sp, #8]
 80015f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015fa:	9301      	str	r3, [sp, #4]
 80015fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015fe:	9300      	str	r3, [sp, #0]
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	68b9      	ldr	r1, [r7, #8]
 8001606:	68f8      	ldr	r0, [r7, #12]
 8001608:	f7ff ffae 	bl	8001568 <mg_dns_parse_name_depth>
 800160c:	4603      	mov	r3, r0
      if (ptr + 1 < len && (s[ptr] & 0xc0) == 0 &&
 800160e:	2b00      	cmp	r3, #0
 8001610:	d101      	bne.n	8001616 <mg_dns_parse_name_depth+0xae>
        return 0;
 8001612:	2300      	movs	r3, #0
 8001614:	e054      	b.n	80016c0 <mg_dns_parse_name_depth+0x158>
      i += 2;
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3302      	adds	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
      break;
 800161c:	e046      	b.n	80016ac <mg_dns_parse_name_depth+0x144>
    }
    if (ofs + i + n + 1 >= len) return 0;
 800161e:	687a      	ldr	r2, [r7, #4]
 8001620:	69fb      	ldr	r3, [r7, #28]
 8001622:	441a      	add	r2, r3
 8001624:	69bb      	ldr	r3, [r7, #24]
 8001626:	4413      	add	r3, r2
 8001628:	3301      	adds	r3, #1
 800162a:	68ba      	ldr	r2, [r7, #8]
 800162c:	429a      	cmp	r2, r3
 800162e:	d801      	bhi.n	8001634 <mg_dns_parse_name_depth+0xcc>
 8001630:	2300      	movs	r3, #0
 8001632:	e045      	b.n	80016c0 <mg_dns_parse_name_depth+0x158>
    if (j > 0) {
 8001634:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001636:	2b00      	cmp	r3, #0
 8001638:	d00b      	beq.n	8001652 <mg_dns_parse_name_depth+0xea>
      if (j < tolen) to[j] = '.';
 800163a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800163c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163e:	429a      	cmp	r2, r3
 8001640:	d204      	bcs.n	800164c <mg_dns_parse_name_depth+0xe4>
 8001642:	683a      	ldr	r2, [r7, #0]
 8001644:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001646:	4413      	add	r3, r2
 8001648:	222e      	movs	r2, #46	; 0x2e
 800164a:	701a      	strb	r2, [r3, #0]
      j++;
 800164c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800164e:	3301      	adds	r3, #1
 8001650:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    if (j + n < tolen) memcpy(&to[j], &s[ofs + i + 1], n);
 8001652:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001654:	69bb      	ldr	r3, [r7, #24]
 8001656:	4413      	add	r3, r2
 8001658:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800165a:	429a      	cmp	r2, r3
 800165c:	d90c      	bls.n	8001678 <mg_dns_parse_name_depth+0x110>
 800165e:	683a      	ldr	r2, [r7, #0]
 8001660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001662:	18d0      	adds	r0, r2, r3
 8001664:	687a      	ldr	r2, [r7, #4]
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	4413      	add	r3, r2
 800166a:	3301      	adds	r3, #1
 800166c:	68fa      	ldr	r2, [r7, #12]
 800166e:	4413      	add	r3, r2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	4619      	mov	r1, r3
 8001674:	f013 f946 	bl	8014904 <memcpy>
    j += n;
 8001678:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800167a:	69bb      	ldr	r3, [r7, #24]
 800167c:	4413      	add	r3, r2
 800167e:	62fb      	str	r3, [r7, #44]	; 0x2c
    i += n + 1;
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	69fb      	ldr	r3, [r7, #28]
 8001684:	4413      	add	r3, r2
 8001686:	3301      	adds	r3, #1
 8001688:	61fb      	str	r3, [r7, #28]
    if (j < tolen) to[j] = '\0';  // Zero-terminate this chunk
 800168a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800168c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800168e:	429a      	cmp	r2, r3
 8001690:	d204      	bcs.n	800169c <mg_dns_parse_name_depth+0x134>
 8001692:	683a      	ldr	r2, [r7, #0]
 8001694:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001696:	4413      	add	r3, r2
 8001698:	2200      	movs	r2, #0
 800169a:	701a      	strb	r2, [r3, #0]
  while (ofs + i + 1 < len) {
 800169c:	687a      	ldr	r2, [r7, #4]
 800169e:	69fb      	ldr	r3, [r7, #28]
 80016a0:	4413      	add	r3, r2
 80016a2:	3301      	adds	r3, #1
 80016a4:	68ba      	ldr	r2, [r7, #8]
 80016a6:	429a      	cmp	r2, r3
 80016a8:	f63f af76 	bhi.w	8001598 <mg_dns_parse_name_depth+0x30>
    // MG_INFO(("--> [%s]", to));
  }
  if (tolen > 0) to[tolen - 1] = '\0';  // Make sure make sure it is nul-term
 80016ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d005      	beq.n	80016be <mg_dns_parse_name_depth+0x156>
 80016b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80016b4:	3b01      	subs	r3, #1
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	4413      	add	r3, r2
 80016ba:	2200      	movs	r2, #0
 80016bc:	701a      	strb	r2, [r3, #0]
  return i;
 80016be:	69fb      	ldr	r3, [r7, #28]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3720      	adds	r7, #32
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}

080016c8 <mg_dns_parse_name>:

static size_t mg_dns_parse_name(const uint8_t *s, size_t n, size_t ofs,
                                char *dst, size_t dstlen) {
 80016c8:	b580      	push	{r7, lr}
 80016ca:	b088      	sub	sp, #32
 80016cc:	af04      	add	r7, sp, #16
 80016ce:	60f8      	str	r0, [r7, #12]
 80016d0:	60b9      	str	r1, [r7, #8]
 80016d2:	607a      	str	r2, [r7, #4]
 80016d4:	603b      	str	r3, [r7, #0]
  return mg_dns_parse_name_depth(s, n, ofs, dst, dstlen, 0, 0);
 80016d6:	2300      	movs	r3, #0
 80016d8:	9302      	str	r3, [sp, #8]
 80016da:	2300      	movs	r3, #0
 80016dc:	9301      	str	r3, [sp, #4]
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	9300      	str	r3, [sp, #0]
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	687a      	ldr	r2, [r7, #4]
 80016e6:	68b9      	ldr	r1, [r7, #8]
 80016e8:	68f8      	ldr	r0, [r7, #12]
 80016ea:	f7ff ff3d 	bl	8001568 <mg_dns_parse_name_depth>
 80016ee:	4603      	mov	r3, r0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	3710      	adds	r7, #16
 80016f4:	46bd      	mov	sp, r7
 80016f6:	bd80      	pop	{r7, pc}

080016f8 <mg_dns_parse_rr>:

size_t mg_dns_parse_rr(const uint8_t *buf, size_t len, size_t ofs,
                       bool is_question, struct mg_dns_rr *rr) {
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b088      	sub	sp, #32
 80016fc:	af02      	add	r7, sp, #8
 80016fe:	60f8      	str	r0, [r7, #12]
 8001700:	60b9      	str	r1, [r7, #8]
 8001702:	607a      	str	r2, [r7, #4]
 8001704:	70fb      	strb	r3, [r7, #3]
  const uint8_t *s = buf + ofs, *e = &buf[len];
 8001706:	68fa      	ldr	r2, [r7, #12]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	4413      	add	r3, r2
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	68fa      	ldr	r2, [r7, #12]
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	4413      	add	r3, r2
 8001714:	613b      	str	r3, [r7, #16]

  memset(rr, 0, sizeof(*rr));
 8001716:	2208      	movs	r2, #8
 8001718:	2100      	movs	r1, #0
 800171a:	6a38      	ldr	r0, [r7, #32]
 800171c:	f013 f80a 	bl	8014734 <memset>
  if (len < sizeof(struct mg_dns_header)) return 0;  // Too small
 8001720:	68bb      	ldr	r3, [r7, #8]
 8001722:	2b0b      	cmp	r3, #11
 8001724:	d801      	bhi.n	800172a <mg_dns_parse_rr+0x32>
 8001726:	2300      	movs	r3, #0
 8001728:	e074      	b.n	8001814 <mg_dns_parse_rr+0x11c>
  if (len > 512) return 0;  //  Too large, we don't expect that
 800172a:	68bb      	ldr	r3, [r7, #8]
 800172c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001730:	d901      	bls.n	8001736 <mg_dns_parse_rr+0x3e>
 8001732:	2300      	movs	r3, #0
 8001734:	e06e      	b.n	8001814 <mg_dns_parse_rr+0x11c>
  if (s >= e) return 0;     //  Overflow
 8001736:	697a      	ldr	r2, [r7, #20]
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	429a      	cmp	r2, r3
 800173c:	d301      	bcc.n	8001742 <mg_dns_parse_rr+0x4a>
 800173e:	2300      	movs	r3, #0
 8001740:	e068      	b.n	8001814 <mg_dns_parse_rr+0x11c>

  if ((rr->nlen = (uint16_t) mg_dns_parse_name(buf, len, ofs, NULL, 0)) == 0)
 8001742:	2300      	movs	r3, #0
 8001744:	9300      	str	r3, [sp, #0]
 8001746:	2300      	movs	r3, #0
 8001748:	687a      	ldr	r2, [r7, #4]
 800174a:	68b9      	ldr	r1, [r7, #8]
 800174c:	68f8      	ldr	r0, [r7, #12]
 800174e:	f7ff ffbb 	bl	80016c8 <mg_dns_parse_name>
 8001752:	4603      	mov	r3, r0
 8001754:	b29a      	uxth	r2, r3
 8001756:	6a3b      	ldr	r3, [r7, #32]
 8001758:	801a      	strh	r2, [r3, #0]
 800175a:	6a3b      	ldr	r3, [r7, #32]
 800175c:	881b      	ldrh	r3, [r3, #0]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <mg_dns_parse_rr+0x6e>
    return 0;
 8001762:	2300      	movs	r3, #0
 8001764:	e056      	b.n	8001814 <mg_dns_parse_rr+0x11c>
  s += rr->nlen + 4;
 8001766:	6a3b      	ldr	r3, [r7, #32]
 8001768:	881b      	ldrh	r3, [r3, #0]
 800176a:	3304      	adds	r3, #4
 800176c:	697a      	ldr	r2, [r7, #20]
 800176e:	4413      	add	r3, r2
 8001770:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 8001772:	697a      	ldr	r2, [r7, #20]
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	429a      	cmp	r2, r3
 8001778:	d901      	bls.n	800177e <mg_dns_parse_rr+0x86>
 800177a:	2300      	movs	r3, #0
 800177c:	e04a      	b.n	8001814 <mg_dns_parse_rr+0x11c>
  rr->atype = (uint16_t) (((uint16_t) s[-4] << 8) | s[-3]);
 800177e:	697b      	ldr	r3, [r7, #20]
 8001780:	3b04      	subs	r3, #4
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	021b      	lsls	r3, r3, #8
 8001786:	b21a      	sxth	r2, r3
 8001788:	697b      	ldr	r3, [r7, #20]
 800178a:	3b03      	subs	r3, #3
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	b21b      	sxth	r3, r3
 8001790:	4313      	orrs	r3, r2
 8001792:	b21b      	sxth	r3, r3
 8001794:	b29a      	uxth	r2, r3
 8001796:	6a3b      	ldr	r3, [r7, #32]
 8001798:	805a      	strh	r2, [r3, #2]
  rr->aclass = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	3b02      	subs	r3, #2
 800179e:	781b      	ldrb	r3, [r3, #0]
 80017a0:	021b      	lsls	r3, r3, #8
 80017a2:	b21a      	sxth	r2, r3
 80017a4:	697b      	ldr	r3, [r7, #20]
 80017a6:	3b01      	subs	r3, #1
 80017a8:	781b      	ldrb	r3, [r3, #0]
 80017aa:	b21b      	sxth	r3, r3
 80017ac:	4313      	orrs	r3, r2
 80017ae:	b21b      	sxth	r3, r3
 80017b0:	b29a      	uxth	r2, r3
 80017b2:	6a3b      	ldr	r3, [r7, #32]
 80017b4:	809a      	strh	r2, [r3, #4]
  if (is_question) return (size_t) (rr->nlen + 4);
 80017b6:	78fb      	ldrb	r3, [r7, #3]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d003      	beq.n	80017c4 <mg_dns_parse_rr+0xcc>
 80017bc:	6a3b      	ldr	r3, [r7, #32]
 80017be:	881b      	ldrh	r3, [r3, #0]
 80017c0:	3304      	adds	r3, #4
 80017c2:	e027      	b.n	8001814 <mg_dns_parse_rr+0x11c>

  s += 6;
 80017c4:	697b      	ldr	r3, [r7, #20]
 80017c6:	3306      	adds	r3, #6
 80017c8:	617b      	str	r3, [r7, #20]
  if (s > e) return 0;
 80017ca:	697a      	ldr	r2, [r7, #20]
 80017cc:	693b      	ldr	r3, [r7, #16]
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d901      	bls.n	80017d6 <mg_dns_parse_rr+0xde>
 80017d2:	2300      	movs	r3, #0
 80017d4:	e01e      	b.n	8001814 <mg_dns_parse_rr+0x11c>
  rr->alen = (uint16_t) (((uint16_t) s[-2] << 8) | s[-1]);
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	3b02      	subs	r3, #2
 80017da:	781b      	ldrb	r3, [r3, #0]
 80017dc:	021b      	lsls	r3, r3, #8
 80017de:	b21a      	sxth	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	3b01      	subs	r3, #1
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	b21b      	sxth	r3, r3
 80017e8:	4313      	orrs	r3, r2
 80017ea:	b21b      	sxth	r3, r3
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	6a3b      	ldr	r3, [r7, #32]
 80017f0:	80da      	strh	r2, [r3, #6]
  if (s + rr->alen > e) return 0;
 80017f2:	6a3b      	ldr	r3, [r7, #32]
 80017f4:	88db      	ldrh	r3, [r3, #6]
 80017f6:	461a      	mov	r2, r3
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4413      	add	r3, r2
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	429a      	cmp	r2, r3
 8001800:	d201      	bcs.n	8001806 <mg_dns_parse_rr+0x10e>
 8001802:	2300      	movs	r3, #0
 8001804:	e006      	b.n	8001814 <mg_dns_parse_rr+0x11c>
  return (size_t) (rr->nlen + rr->alen + 10);
 8001806:	6a3b      	ldr	r3, [r7, #32]
 8001808:	881b      	ldrh	r3, [r3, #0]
 800180a:	461a      	mov	r2, r3
 800180c:	6a3b      	ldr	r3, [r7, #32]
 800180e:	88db      	ldrh	r3, [r3, #6]
 8001810:	4413      	add	r3, r2
 8001812:	330a      	adds	r3, #10
}
 8001814:	4618      	mov	r0, r3
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <mg_dns_parse>:

bool mg_dns_parse(const uint8_t *buf, size_t len, struct mg_dns_message *dm) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	; 0x30
 8001820:	af02      	add	r7, sp, #8
 8001822:	60f8      	str	r0, [r7, #12]
 8001824:	60b9      	str	r1, [r7, #8]
 8001826:	607a      	str	r2, [r7, #4]
  const struct mg_dns_header *h = (struct mg_dns_header *) buf;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	61fb      	str	r3, [r7, #28]
  struct mg_dns_rr rr;
  size_t i, n, ofs = sizeof(*h);
 800182c:	230c      	movs	r3, #12
 800182e:	623b      	str	r3, [r7, #32]
  memset(dm, 0, sizeof(*dm));
 8001830:	f44f 728c 	mov.w	r2, #280	; 0x118
 8001834:	2100      	movs	r1, #0
 8001836:	6878      	ldr	r0, [r7, #4]
 8001838:	f012 ff7c 	bl	8014734 <memset>

  if (len < sizeof(*h)) return 0;                // Too small, headers dont fit
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	2b0b      	cmp	r3, #11
 8001840:	d801      	bhi.n	8001846 <mg_dns_parse+0x2a>
 8001842:	2300      	movs	r3, #0
 8001844:	e09f      	b.n	8001986 <mg_dns_parse+0x16a>
  if (mg_ntohs(h->num_questions) > 1) return 0;  // Sanity
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	889b      	ldrh	r3, [r3, #4]
 800184a:	4618      	mov	r0, r3
 800184c:	f008 fe37 	bl	800a4be <mg_ntohs>
 8001850:	4603      	mov	r3, r0
 8001852:	2b01      	cmp	r3, #1
 8001854:	d901      	bls.n	800185a <mg_dns_parse+0x3e>
 8001856:	2300      	movs	r3, #0
 8001858:	e095      	b.n	8001986 <mg_dns_parse+0x16a>
  if (mg_ntohs(h->num_answers) > 10) return 0;   // Sanity
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	88db      	ldrh	r3, [r3, #6]
 800185e:	4618      	mov	r0, r3
 8001860:	f008 fe2d 	bl	800a4be <mg_ntohs>
 8001864:	4603      	mov	r3, r0
 8001866:	2b0a      	cmp	r3, #10
 8001868:	d901      	bls.n	800186e <mg_dns_parse+0x52>
 800186a:	2300      	movs	r3, #0
 800186c:	e08b      	b.n	8001986 <mg_dns_parse+0x16a>
  dm->txnid = mg_ntohs(h->txnid);
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	881b      	ldrh	r3, [r3, #0]
 8001872:	4618      	mov	r0, r3
 8001874:	f008 fe23 	bl	800a4be <mg_ntohs>
 8001878:	4603      	mov	r3, r0
 800187a:	461a      	mov	r2, r3
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	801a      	strh	r2, [r3, #0]

  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 8001880:	2300      	movs	r3, #0
 8001882:	627b      	str	r3, [r7, #36]	; 0x24
 8001884:	e015      	b.n	80018b2 <mg_dns_parse+0x96>
    if ((n = mg_dns_parse_rr(buf, len, ofs, true, &rr)) == 0) return false;
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	9300      	str	r3, [sp, #0]
 800188c:	2301      	movs	r3, #1
 800188e:	6a3a      	ldr	r2, [r7, #32]
 8001890:	68b9      	ldr	r1, [r7, #8]
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff ff30 	bl	80016f8 <mg_dns_parse_rr>
 8001898:	61b8      	str	r0, [r7, #24]
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d101      	bne.n	80018a4 <mg_dns_parse+0x88>
 80018a0:	2300      	movs	r3, #0
 80018a2:	e070      	b.n	8001986 <mg_dns_parse+0x16a>
    // MG_INFO(("Q %lu %lu %hu/%hu", ofs, n, rr.atype, rr.aclass));
    ofs += n;
 80018a4:	6a3a      	ldr	r2, [r7, #32]
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	4413      	add	r3, r2
 80018aa:	623b      	str	r3, [r7, #32]
  for (i = 0; i < mg_ntohs(h->num_questions); i++) {
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3301      	adds	r3, #1
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
 80018b2:	69fb      	ldr	r3, [r7, #28]
 80018b4:	889b      	ldrh	r3, [r3, #4]
 80018b6:	4618      	mov	r0, r3
 80018b8:	f008 fe01 	bl	800a4be <mg_ntohs>
 80018bc:	4603      	mov	r3, r0
 80018be:	461a      	mov	r2, r3
 80018c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d3df      	bcc.n	8001886 <mg_dns_parse+0x6a>
  }
  for (i = 0; i < mg_ntohs(h->num_answers); i++) {
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	e051      	b.n	8001970 <mg_dns_parse+0x154>
    if ((n = mg_dns_parse_rr(buf, len, ofs, false, &rr)) == 0) return false;
 80018cc:	f107 0310 	add.w	r3, r7, #16
 80018d0:	9300      	str	r3, [sp, #0]
 80018d2:	2300      	movs	r3, #0
 80018d4:	6a3a      	ldr	r2, [r7, #32]
 80018d6:	68b9      	ldr	r1, [r7, #8]
 80018d8:	68f8      	ldr	r0, [r7, #12]
 80018da:	f7ff ff0d 	bl	80016f8 <mg_dns_parse_rr>
 80018de:	61b8      	str	r0, [r7, #24]
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d101      	bne.n	80018ea <mg_dns_parse+0xce>
 80018e6:	2300      	movs	r3, #0
 80018e8:	e04d      	b.n	8001986 <mg_dns_parse+0x16a>
    // MG_INFO(("A -- %lu %lu %hu/%hu %s", ofs, n, rr.atype, rr.aclass,
    // dm->name));
    mg_dns_parse_name(buf, len, ofs, dm->name, sizeof(dm->name));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	3318      	adds	r3, #24
 80018ee:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018f2:	9200      	str	r2, [sp, #0]
 80018f4:	6a3a      	ldr	r2, [r7, #32]
 80018f6:	68b9      	ldr	r1, [r7, #8]
 80018f8:	68f8      	ldr	r0, [r7, #12]
 80018fa:	f7ff fee5 	bl	80016c8 <mg_dns_parse_name>
    ofs += n;
 80018fe:	6a3a      	ldr	r2, [r7, #32]
 8001900:	69bb      	ldr	r3, [r7, #24]
 8001902:	4413      	add	r3, r2
 8001904:	623b      	str	r3, [r7, #32]

    if (rr.alen == 4 && rr.atype == 1 && rr.aclass == 1) {
 8001906:	8afb      	ldrh	r3, [r7, #22]
 8001908:	2b04      	cmp	r3, #4
 800190a:	d114      	bne.n	8001936 <mg_dns_parse+0x11a>
 800190c:	8a7b      	ldrh	r3, [r7, #18]
 800190e:	2b01      	cmp	r3, #1
 8001910:	d111      	bne.n	8001936 <mg_dns_parse+0x11a>
 8001912:	8abb      	ldrh	r3, [r7, #20]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d10e      	bne.n	8001936 <mg_dns_parse+0x11a>
      dm->addr.is_ip6 = false;
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	2200      	movs	r2, #0
 800191c:	759a      	strb	r2, [r3, #22]
      memcpy(&dm->addr.ip, &buf[ofs - 4], 4);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	3304      	adds	r3, #4
 8001922:	6a3a      	ldr	r2, [r7, #32]
 8001924:	3a04      	subs	r2, #4
 8001926:	68f9      	ldr	r1, [r7, #12]
 8001928:	440a      	add	r2, r1
 800192a:	6812      	ldr	r2, [r2, #0]
 800192c:	601a      	str	r2, [r3, #0]
      dm->resolved = true;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	2201      	movs	r2, #1
 8001932:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001934:	e026      	b.n	8001984 <mg_dns_parse+0x168>
    } else if (rr.alen == 16 && rr.atype == 28 && rr.aclass == 1) {
 8001936:	8afb      	ldrh	r3, [r7, #22]
 8001938:	2b10      	cmp	r3, #16
 800193a:	d116      	bne.n	800196a <mg_dns_parse+0x14e>
 800193c:	8a7b      	ldrh	r3, [r7, #18]
 800193e:	2b1c      	cmp	r3, #28
 8001940:	d113      	bne.n	800196a <mg_dns_parse+0x14e>
 8001942:	8abb      	ldrh	r3, [r7, #20]
 8001944:	2b01      	cmp	r3, #1
 8001946:	d110      	bne.n	800196a <mg_dns_parse+0x14e>
      dm->addr.is_ip6 = true;
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	2201      	movs	r2, #1
 800194c:	759a      	strb	r2, [r3, #22]
      memcpy(&dm->addr.ip, &buf[ofs - 16], 16);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	1d18      	adds	r0, r3, #4
 8001952:	6a3b      	ldr	r3, [r7, #32]
 8001954:	3b10      	subs	r3, #16
 8001956:	68fa      	ldr	r2, [r7, #12]
 8001958:	4413      	add	r3, r2
 800195a:	2210      	movs	r2, #16
 800195c:	4619      	mov	r1, r3
 800195e:	f012 ffd1 	bl	8014904 <memcpy>
      dm->resolved = true;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2201      	movs	r2, #1
 8001966:	709a      	strb	r2, [r3, #2]
      break;  // Return success
 8001968:	e00c      	b.n	8001984 <mg_dns_parse+0x168>
  for (i = 0; i < mg_ntohs(h->num_answers); i++) {
 800196a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196c:	3301      	adds	r3, #1
 800196e:	627b      	str	r3, [r7, #36]	; 0x24
 8001970:	69fb      	ldr	r3, [r7, #28]
 8001972:	88db      	ldrh	r3, [r3, #6]
 8001974:	4618      	mov	r0, r3
 8001976:	f008 fda2 	bl	800a4be <mg_ntohs>
 800197a:	4603      	mov	r3, r0
 800197c:	461a      	mov	r2, r3
 800197e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001980:	4293      	cmp	r3, r2
 8001982:	d3a3      	bcc.n	80018cc <mg_dns_parse+0xb0>
    }
  }
  return true;
 8001984:	2301      	movs	r3, #1
}
 8001986:	4618      	mov	r0, r3
 8001988:	3728      	adds	r7, #40	; 0x28
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
	...

08001990 <dns_cb>:

static void dns_cb(struct mg_connection *c, int ev, void *ev_data,
                   void *fn_data) {
 8001990:	b5b0      	push	{r4, r5, r7, lr}
 8001992:	b0d2      	sub	sp, #328	; 0x148
 8001994:	af02      	add	r7, sp, #8
 8001996:	f507 74a0 	add.w	r4, r7, #320	; 0x140
 800199a:	f5a4 749a 	sub.w	r4, r4, #308	; 0x134
 800199e:	6020      	str	r0, [r4, #0]
 80019a0:	f507 70a0 	add.w	r0, r7, #320	; 0x140
 80019a4:	f5a0 709c 	sub.w	r0, r0, #312	; 0x138
 80019a8:	6001      	str	r1, [r0, #0]
 80019aa:	f507 71a0 	add.w	r1, r7, #320	; 0x140
 80019ae:	f5a1 719e 	sub.w	r1, r1, #316	; 0x13c
 80019b2:	600a      	str	r2, [r1, #0]
 80019b4:	f507 72a0 	add.w	r2, r7, #320	; 0x140
 80019b8:	f5a2 72a0 	sub.w	r2, r2, #320	; 0x140
 80019bc:	6013      	str	r3, [r2, #0]
  struct dns_data *d, *tmp;
  if (ev == MG_EV_POLL) {
 80019be:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019c2:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d131      	bne.n	8001a30 <dns_cb+0xa0>
    uint64_t now = *(uint64_t *) ev_data;
 80019cc:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019d0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019da:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 80019de:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 80019e2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ec:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 80019f0:	e019      	b.n	8001a26 <dns_cb+0x96>
         d = tmp) {
      tmp = d->next;
 80019f2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      // MG_DEBUG ("%lu %lu dns poll", d->expire, now));
      if (now > d->expire) mg_error(d->c, "DNS timeout");
 80019fc:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a00:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8001a04:	e9d7 234a 	ldrd	r2, r3, [r7, #296]	; 0x128
 8001a08:	4290      	cmp	r0, r2
 8001a0a:	eb71 0303 	sbcs.w	r3, r1, r3
 8001a0e:	d206      	bcs.n	8001a1e <dns_cb+0x8e>
 8001a10:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a14:	685b      	ldr	r3, [r3, #4]
 8001a16:	4997      	ldr	r1, [pc, #604]	; (8001c74 <dns_cb+0x2e4>)
 8001a18:	4618      	mov	r0, r3
 8001a1a:	f000 fb3d 	bl	8002098 <mg_error>
         d = tmp) {
 8001a1e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001a22:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001a26:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1e1      	bne.n	80019f2 <dns_cb+0x62>
      mg_error(d->c, "DNS error");
      mg_dns_free(c, d);
    }
  }
  (void) fn_data;
}
 8001a2e:	e11c      	b.n	8001c6a <dns_cb+0x2da>
  } else if (ev == MG_EV_READ) {
 8001a30:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a34:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	2b07      	cmp	r3, #7
 8001a3c:	f040 80e7 	bne.w	8001c0e <dns_cb+0x27e>
    int resolved = 0;
 8001a40:	2300      	movs	r3, #0
 8001a42:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
    if (mg_dns_parse(c->recv.buf, c->recv.len, &dm) == false) {
 8001a46:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a4a:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8001a52:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a56:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a5e:	f107 0210 	add.w	r2, r7, #16
 8001a62:	4619      	mov	r1, r3
 8001a64:	f7ff feda 	bl	800181c <mg_dns_parse>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	f083 0301 	eor.w	r3, r3, #1
 8001a6e:	b2db      	uxtb	r3, r3
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d01d      	beq.n	8001ab0 <dns_cb+0x120>
      MG_ERROR(("Unexpected DNS response:"));
 8001a74:	4b80      	ldr	r3, [pc, #512]	; (8001c78 <dns_cb+0x2e8>)
 8001a76:	f44f 7284 	mov.w	r2, #264	; 0x108
 8001a7a:	4980      	ldr	r1, [pc, #512]	; (8001c7c <dns_cb+0x2ec>)
 8001a7c:	2001      	movs	r0, #1
 8001a7e:	f005 fac9 	bl	8007014 <mg_log_prefix>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <dns_cb+0xfe>
 8001a88:	487d      	ldr	r0, [pc, #500]	; (8001c80 <dns_cb+0x2f0>)
 8001a8a:	f005 fb1d 	bl	80070c8 <mg_log>
      mg_hexdump(c->recv.buf, c->recv.len);
 8001a8e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a92:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a9a:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001a9e:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	4610      	mov	r0, r2
 8001aaa:	f005 fb41 	bl	8007130 <mg_hexdump>
 8001aae:	e095      	b.n	8001bdc <dns_cb+0x24c>
      for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001ab0:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ab4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001abe:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001ac2:	e086      	b.n	8001bd2 <dns_cb+0x242>
        tmp = d->next;
 8001ac4:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
        if (dm.txnid != d->txnid) continue;
 8001ace:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001ad2:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001ad6:	881a      	ldrh	r2, [r3, #0]
 8001ad8:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001adc:	8a1b      	ldrh	r3, [r3, #16]
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d172      	bne.n	8001bc8 <dns_cb+0x238>
        if (d->c->is_resolving) {
 8001ae2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ae6:	685b      	ldr	r3, [r3, #4]
 8001ae8:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001aec:	f003 0308 	and.w	r3, r3, #8
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d049      	beq.n	8001b8a <dns_cb+0x1fa>
          if (dm.resolved) {
 8001af6:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001afa:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001afe:	789b      	ldrb	r3, [r3, #2]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d037      	beq.n	8001b74 <dns_cb+0x1e4>
            dm.addr.port = d->c->rem.port;  // Save port
 8001b04:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8001b0c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b10:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b14:	829a      	strh	r2, [r3, #20]
            d->c->rem = dm.addr;            // Copy resolved address
 8001b16:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001b20:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8001b24:	f102 041c 	add.w	r4, r2, #28
 8001b28:	1d1d      	adds	r5, r3, #4
 8001b2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b2e:	682b      	ldr	r3, [r5, #0]
 8001b30:	6023      	str	r3, [r4, #0]
            MG_DEBUG(
 8001b32:	4b51      	ldr	r3, [pc, #324]	; (8001c78 <dns_cb+0x2e8>)
 8001b34:	f240 1215 	movw	r2, #277	; 0x115
 8001b38:	4950      	ldr	r1, [pc, #320]	; (8001c7c <dns_cb+0x2ec>)
 8001b3a:	2003      	movs	r0, #3
 8001b3c:	f005 fa6a 	bl	8007014 <mg_log_prefix>
 8001b40:	4603      	mov	r3, r0
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d00f      	beq.n	8001b66 <dns_cb+0x1d6>
 8001b46:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001b4e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b52:	685b      	ldr	r3, [r3, #4]
 8001b54:	331c      	adds	r3, #28
 8001b56:	f107 0210 	add.w	r2, r7, #16
 8001b5a:	3218      	adds	r2, #24
 8001b5c:	9300      	str	r3, [sp, #0]
 8001b5e:	4b49      	ldr	r3, [pc, #292]	; (8001c84 <dns_cb+0x2f4>)
 8001b60:	4849      	ldr	r0, [pc, #292]	; (8001c88 <dns_cb+0x2f8>)
 8001b62:	f005 fab1 	bl	80070c8 <mg_log>
            mg_connect_resolved(d->c);
 8001b66:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f00b fce1 	bl	800d534 <mg_connect_resolved>
 8001b72:	e01c      	b.n	8001bae <dns_cb+0x21e>
            mg_error(d->c, "%s DNS lookup failed", dm.name);
 8001b74:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001b78:	6858      	ldr	r0, [r3, #4]
 8001b7a:	f107 0310 	add.w	r3, r7, #16
 8001b7e:	3318      	adds	r3, #24
 8001b80:	461a      	mov	r2, r3
 8001b82:	4942      	ldr	r1, [pc, #264]	; (8001c8c <dns_cb+0x2fc>)
 8001b84:	f000 fa88 	bl	8002098 <mg_error>
 8001b88:	e011      	b.n	8001bae <dns_cb+0x21e>
          MG_ERROR(("%lu already resolved", d->c->id));
 8001b8a:	4b3b      	ldr	r3, [pc, #236]	; (8001c78 <dns_cb+0x2e8>)
 8001b8c:	f44f 7291 	mov.w	r2, #290	; 0x122
 8001b90:	493a      	ldr	r1, [pc, #232]	; (8001c7c <dns_cb+0x2ec>)
 8001b92:	2001      	movs	r0, #1
 8001b94:	f005 fa3e 	bl	8007014 <mg_log_prefix>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d007      	beq.n	8001bae <dns_cb+0x21e>
 8001b9e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ba6:	4619      	mov	r1, r3
 8001ba8:	4839      	ldr	r0, [pc, #228]	; (8001c90 <dns_cb+0x300>)
 8001baa:	f005 fa8d 	bl	80070c8 <mg_log>
        mg_dns_free(c, d);
 8001bae:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001bb2:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001bb6:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001bba:	6818      	ldr	r0, [r3, #0]
 8001bbc:	f7ff fc98 	bl	80014f0 <mg_dns_free>
        resolved = 1;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
 8001bc6:	e000      	b.n	8001bca <dns_cb+0x23a>
        if (dm.txnid != d->txnid) continue;
 8001bc8:	bf00      	nop
           d = tmp) {
 8001bca:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001bce:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
      for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001bd2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	f47f af74 	bne.w	8001ac4 <dns_cb+0x134>
    if (!resolved) MG_ERROR(("stray DNS reply"));
 8001bdc:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d10c      	bne.n	8001bfe <dns_cb+0x26e>
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <dns_cb+0x2e8>)
 8001be6:	f44f 7294 	mov.w	r2, #296	; 0x128
 8001bea:	4924      	ldr	r1, [pc, #144]	; (8001c7c <dns_cb+0x2ec>)
 8001bec:	2001      	movs	r0, #1
 8001bee:	f005 fa11 	bl	8007014 <mg_log_prefix>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d002      	beq.n	8001bfe <dns_cb+0x26e>
 8001bf8:	4826      	ldr	r0, [pc, #152]	; (8001c94 <dns_cb+0x304>)
 8001bfa:	f005 fa65 	bl	80070c8 <mg_log>
    c->recv.len = 0;
 8001bfe:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c02:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2200      	movs	r2, #0
 8001c0a:	641a      	str	r2, [r3, #64]	; 0x40
}
 8001c0c:	e02d      	b.n	8001c6a <dns_cb+0x2da>
  } else if (ev == MG_EV_CLOSE) {
 8001c0e:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c12:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2b09      	cmp	r3, #9
 8001c1a:	d126      	bne.n	8001c6a <dns_cb+0x2da>
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001c1c:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c20:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c2a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
 8001c2e:	e018      	b.n	8001c62 <dns_cb+0x2d2>
      tmp = d->next;
 8001c30:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      mg_error(d->c, "DNS error");
 8001c3a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	4915      	ldr	r1, [pc, #84]	; (8001c98 <dns_cb+0x308>)
 8001c42:	4618      	mov	r0, r3
 8001c44:	f000 fa28 	bl	8002098 <mg_error>
      mg_dns_free(c, d);
 8001c48:	f507 73a0 	add.w	r3, r7, #320	; 0x140
 8001c4c:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001c50:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001c54:	6818      	ldr	r0, [r3, #0]
 8001c56:	f7ff fc4b 	bl	80014f0 <mg_dns_free>
         d = tmp) {
 8001c5a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001c5e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
    for (d = (struct dns_data *) c->mgr->active_dns_requests; d != NULL;
 8001c62:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d1e2      	bne.n	8001c30 <dns_cb+0x2a0>
}
 8001c6a:	bf00      	nop
 8001c6c:	f507 77a0 	add.w	r7, r7, #320	; 0x140
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bdb0      	pop	{r4, r5, r7, pc}
 8001c74:	08015440 	.word	0x08015440
 8001c78:	080173c0 	.word	0x080173c0
 8001c7c:	0801544c 	.word	0x0801544c
 8001c80:	08015464 	.word	0x08015464
 8001c84:	08008d7f 	.word	0x08008d7f
 8001c88:	08015480 	.word	0x08015480
 8001c8c:	08015490 	.word	0x08015490
 8001c90:	080154a8 	.word	0x080154a8
 8001c94:	080154c0 	.word	0x080154c0
 8001c98:	080154d0 	.word	0x080154d0

08001c9c <mg_dns_send>:

static bool mg_dns_send(struct mg_connection *c, const struct mg_str *name,
                        uint16_t txnid, bool ipv6) {
 8001c9c:	b590      	push	{r4, r7, lr}
 8001c9e:	b0cb      	sub	sp, #300	; 0x12c
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	f507 7494 	add.w	r4, r7, #296	; 0x128
 8001ca6:	f5a4 748e 	sub.w	r4, r4, #284	; 0x11c
 8001caa:	6020      	str	r0, [r4, #0]
 8001cac:	f507 7094 	add.w	r0, r7, #296	; 0x128
 8001cb0:	f5a0 7090 	sub.w	r0, r0, #288	; 0x120
 8001cb4:	6001      	str	r1, [r0, #0]
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cbc:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8001cc0:	801a      	strh	r2, [r3, #0]
 8001cc2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cc6:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 8001cca:	460a      	mov	r2, r1
 8001ccc:	701a      	strb	r2, [r3, #0]
  struct {
    struct mg_dns_header header;
    uint8_t data[256];
  } pkt;
  size_t i, n;
  memset(&pkt, 0, sizeof(pkt));
 8001cce:	f107 0314 	add.w	r3, r7, #20
 8001cd2:	f44f 7286 	mov.w	r2, #268	; 0x10c
 8001cd6:	2100      	movs	r1, #0
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f012 fd2b 	bl	8014734 <memset>
  pkt.header.txnid = mg_htons(txnid);
 8001cde:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001ce2:	f5a3 7391 	sub.w	r3, r3, #290	; 0x122
 8001ce6:	881b      	ldrh	r3, [r3, #0]
 8001ce8:	4618      	mov	r0, r3
 8001cea:	f008 fbe8 	bl	800a4be <mg_ntohs>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	461a      	mov	r2, r3
 8001cf2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001cf6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001cfa:	801a      	strh	r2, [r3, #0]
  pkt.header.flags = mg_htons(0x100);
 8001cfc:	f44f 7080 	mov.w	r0, #256	; 0x100
 8001d00:	f008 fbdd 	bl	800a4be <mg_ntohs>
 8001d04:	4603      	mov	r3, r0
 8001d06:	461a      	mov	r2, r3
 8001d08:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d0c:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d10:	805a      	strh	r2, [r3, #2]
  pkt.header.num_questions = mg_htons(1);
 8001d12:	2001      	movs	r0, #1
 8001d14:	f008 fbd3 	bl	800a4be <mg_ntohs>
 8001d18:	4603      	mov	r3, r0
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d20:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001d24:	809a      	strh	r2, [r3, #4]
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001d26:	2300      	movs	r3, #0
 8001d28:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001d2c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d30:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001d34:	e054      	b.n	8001de0 <mg_dns_send+0x144>
    if (name->ptr[i] == '.' || i >= name->len) {
 8001d36:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d3a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d46:	4413      	add	r3, r2
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d4c:	d009      	beq.n	8001d62 <mg_dns_send+0xc6>
 8001d4e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d52:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	685b      	ldr	r3, [r3, #4]
 8001d5a:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001d5e:	429a      	cmp	r2, r3
 8001d60:	d32f      	bcc.n	8001dc2 <mg_dns_send+0x126>
      pkt.data[n] = (uint8_t) (i - n);
 8001d62:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001d66:	b2da      	uxtb	r2, r3
 8001d68:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d6c:	b2db      	uxtb	r3, r3
 8001d6e:	1ad3      	subs	r3, r2, r3
 8001d70:	b2d9      	uxtb	r1, r3
 8001d72:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d76:	f5a3 728a 	sub.w	r2, r3, #276	; 0x114
 8001d7a:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d7e:	4413      	add	r3, r2
 8001d80:	330c      	adds	r3, #12
 8001d82:	460a      	mov	r2, r1
 8001d84:	701a      	strb	r2, [r3, #0]
      memcpy(&pkt.data[n + 1], name->ptr + n, i - n);
 8001d86:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	f107 0214 	add.w	r2, r7, #20
 8001d90:	3308      	adds	r3, #8
 8001d92:	4413      	add	r3, r2
 8001d94:	1d18      	adds	r0, r3, #4
 8001d96:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001d9a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	681a      	ldr	r2, [r3, #0]
 8001da2:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001da6:	18d1      	adds	r1, r2, r3
 8001da8:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001dac:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	461a      	mov	r2, r3
 8001db4:	f012 fda6 	bl	8014904 <memcpy>
      n = i + 1;
 8001db8:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
    }
    if (i >= name->len) break;
 8001dc2:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001dc6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	685b      	ldr	r3, [r3, #4]
 8001dce:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 8001dd2:	429a      	cmp	r2, r3
 8001dd4:	d209      	bcs.n	8001dea <mg_dns_send+0x14e>
  for (i = n = 0; i < sizeof(pkt.data) - 5; i++) {
 8001dd6:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001dda:	3301      	adds	r3, #1
 8001ddc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001de0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001de4:	2bfa      	cmp	r3, #250	; 0xfa
 8001de6:	d9a6      	bls.n	8001d36 <mg_dns_send+0x9a>
 8001de8:	e000      	b.n	8001dec <mg_dns_send+0x150>
    if (i >= name->len) break;
 8001dea:	bf00      	nop
  }
  memcpy(&pkt.data[n], "\x00\x00\x01\x00\x01", 5);  // A query
 8001dec:	f107 0214 	add.w	r2, r7, #20
 8001df0:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001df4:	3308      	adds	r3, #8
 8001df6:	4413      	add	r3, r2
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2205      	movs	r2, #5
 8001dfc:	4916      	ldr	r1, [pc, #88]	; (8001e58 <mg_dns_send+0x1bc>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f012 fd80 	bl	8014904 <memcpy>
  n += 5;
 8001e04:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e08:	3305      	adds	r3, #5
 8001e0a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
  if (ipv6) pkt.data[n - 3] = 0x1c;  // AAAA query
 8001e0e:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e12:	f2a3 1323 	subw	r3, r3, #291	; 0x123
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d009      	beq.n	8001e30 <mg_dns_send+0x194>
 8001e1c:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e20:	3b03      	subs	r3, #3
 8001e22:	f507 7294 	add.w	r2, r7, #296	; 0x128
 8001e26:	f5a2 728a 	sub.w	r2, r2, #276	; 0x114
 8001e2a:	4413      	add	r3, r2
 8001e2c:	221c      	movs	r2, #28
 8001e2e:	731a      	strb	r2, [r3, #12]
  // memcpy(&pkt.data[n], "\xc0\x0c\x00\x1c\x00\x01", 6);  // AAAA query
  // n += 6;
  return mg_send(c, &pkt, sizeof(pkt.header) + n);
 8001e30:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8001e34:	f103 020c 	add.w	r2, r3, #12
 8001e38:	f107 0114 	add.w	r1, r7, #20
 8001e3c:	f507 7394 	add.w	r3, r7, #296	; 0x128
 8001e40:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001e44:	6818      	ldr	r0, [r3, #0]
 8001e46:	f00b fde9 	bl	800da1c <mg_send>
 8001e4a:	4603      	mov	r3, r0
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f507 7796 	add.w	r7, r7, #300	; 0x12c
 8001e52:	46bd      	mov	sp, r7
 8001e54:	bd90      	pop	{r4, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	080154dc 	.word	0x080154dc

08001e5c <mg_sendnsreq>:

static void mg_sendnsreq(struct mg_connection *c, struct mg_str *name, int ms,
                         struct mg_dns *dnsc, bool ipv6) {
 8001e5c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e60:	b088      	sub	sp, #32
 8001e62:	af02      	add	r7, sp, #8
 8001e64:	60f8      	str	r0, [r7, #12]
 8001e66:	60b9      	str	r1, [r7, #8]
 8001e68:	607a      	str	r2, [r7, #4]
 8001e6a:	603b      	str	r3, [r7, #0]
  struct dns_data *d = NULL;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  if (dnsc->url == NULL) {
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d104      	bne.n	8001e82 <mg_sendnsreq+0x26>
    mg_error(c, "DNS server URL is NULL. Call mg_mgr_init()");
 8001e78:	494c      	ldr	r1, [pc, #304]	; (8001fac <mg_sendnsreq+0x150>)
 8001e7a:	68f8      	ldr	r0, [r7, #12]
 8001e7c:	f000 f90c 	bl	8002098 <mg_error>
 8001e80:	e016      	b.n	8001eb0 <mg_sendnsreq+0x54>
  } else if (dnsc->c == NULL) {
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d112      	bne.n	8001eb0 <mg_sendnsreq+0x54>
    dnsc->c = mg_connect(c->mgr, dnsc->url, NULL, NULL);
 8001e8a:	68fb      	ldr	r3, [r7, #12]
 8001e8c:	6858      	ldr	r0, [r3, #4]
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	6819      	ldr	r1, [r3, #0]
 8001e92:	2300      	movs	r3, #0
 8001e94:	2200      	movs	r2, #0
 8001e96:	f006 fcbd 	bl	8008814 <mg_connect>
 8001e9a:	4602      	mov	r2, r0
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	605a      	str	r2, [r3, #4]
    if (dnsc->c != NULL) {
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	685b      	ldr	r3, [r3, #4]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d003      	beq.n	8001eb0 <mg_sendnsreq+0x54>
      dnsc->c->pfn = dns_cb;
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	4a40      	ldr	r2, [pc, #256]	; (8001fb0 <mg_sendnsreq+0x154>)
 8001eae:	661a      	str	r2, [r3, #96]	; 0x60
      // dnsc->c->is_hexdumping = 1;
    }
  }
  if (dnsc->c == NULL) {
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d104      	bne.n	8001ec2 <mg_sendnsreq+0x66>
    mg_error(c, "resolver");
 8001eb8:	493e      	ldr	r1, [pc, #248]	; (8001fb4 <mg_sendnsreq+0x158>)
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f8ec 	bl	8002098 <mg_error>
                name->ptr, dnsc->url, d->txnid));
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
      mg_error(dnsc->c, "DNS send");
    }
  }
}
 8001ec0:	e06f      	b.n	8001fa2 <mg_sendnsreq+0x146>
  } else if ((d = (struct dns_data *) calloc(1, sizeof(*d))) == NULL) {
 8001ec2:	2118      	movs	r1, #24
 8001ec4:	2001      	movs	r0, #1
 8001ec6:	f012 f83b 	bl	8013f40 <calloc>
 8001eca:	4603      	mov	r3, r0
 8001ecc:	617b      	str	r3, [r7, #20]
 8001ece:	697b      	ldr	r3, [r7, #20]
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d104      	bne.n	8001ede <mg_sendnsreq+0x82>
    mg_error(c, "resolve OOM");
 8001ed4:	4938      	ldr	r1, [pc, #224]	; (8001fb8 <mg_sendnsreq+0x15c>)
 8001ed6:	68f8      	ldr	r0, [r7, #12]
 8001ed8:	f000 f8de 	bl	8002098 <mg_error>
}
 8001edc:	e061      	b.n	8001fa2 <mg_sendnsreq+0x146>
    struct dns_data *reqs = (struct dns_data *) c->mgr->active_dns_requests;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ee4:	613b      	str	r3, [r7, #16]
    d->txnid = reqs ? (uint16_t) (reqs->txnid + 1) : 1;
 8001ee6:	693b      	ldr	r3, [r7, #16]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d004      	beq.n	8001ef6 <mg_sendnsreq+0x9a>
 8001eec:	693b      	ldr	r3, [r7, #16]
 8001eee:	8a1b      	ldrh	r3, [r3, #16]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	b29a      	uxth	r2, r3
 8001ef4:	e000      	b.n	8001ef8 <mg_sendnsreq+0x9c>
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	697b      	ldr	r3, [r7, #20]
 8001efa:	821a      	strh	r2, [r3, #16]
    d->next = (struct dns_data *) c->mgr->active_dns_requests;
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	685b      	ldr	r3, [r3, #4]
 8001f00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f02:	697b      	ldr	r3, [r7, #20]
 8001f04:	601a      	str	r2, [r3, #0]
    c->mgr->active_dns_requests = d;
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	697a      	ldr	r2, [r7, #20]
 8001f0c:	631a      	str	r2, [r3, #48]	; 0x30
    d->expire = mg_millis() + (uint64_t) ms;
 8001f0e:	f7fe fe8b 	bl	8000c28 <mg_millis>
 8001f12:	4602      	mov	r2, r0
 8001f14:	460b      	mov	r3, r1
 8001f16:	6879      	ldr	r1, [r7, #4]
 8001f18:	17c8      	asrs	r0, r1, #31
 8001f1a:	460c      	mov	r4, r1
 8001f1c:	4605      	mov	r5, r0
 8001f1e:	eb12 0804 	adds.w	r8, r2, r4
 8001f22:	eb43 0905 	adc.w	r9, r3, r5
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	e9c3 8902 	strd	r8, r9, [r3, #8]
    d->c = c;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	68fa      	ldr	r2, [r7, #12]
 8001f30:	605a      	str	r2, [r3, #4]
    c->is_resolving = 1;
 8001f32:	68fa      	ldr	r2, [r7, #12]
 8001f34:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 8001f38:	f043 0308 	orr.w	r3, r3, #8
 8001f3c:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    MG_VERBOSE(("%lu resolving %.*s @ %s, txnid %hu", c->id, (int) name->len,
 8001f40:	4b1e      	ldr	r3, [pc, #120]	; (8001fbc <mg_sendnsreq+0x160>)
 8001f42:	f44f 72b4 	mov.w	r2, #360	; 0x168
 8001f46:	491e      	ldr	r1, [pc, #120]	; (8001fc0 <mg_sendnsreq+0x164>)
 8001f48:	2004      	movs	r0, #4
 8001f4a:	f005 f863 	bl	8007014 <mg_log_prefix>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d011      	beq.n	8001f78 <mg_sendnsreq+0x11c>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	685b      	ldr	r3, [r3, #4]
 8001f5c:	461c      	mov	r4, r3
 8001f5e:	68bb      	ldr	r3, [r7, #8]
 8001f60:	6818      	ldr	r0, [r3, #0]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	697a      	ldr	r2, [r7, #20]
 8001f68:	8a12      	ldrh	r2, [r2, #16]
 8001f6a:	9201      	str	r2, [sp, #4]
 8001f6c:	9300      	str	r3, [sp, #0]
 8001f6e:	4603      	mov	r3, r0
 8001f70:	4622      	mov	r2, r4
 8001f72:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <mg_sendnsreq+0x168>)
 8001f74:	f005 f8a8 	bl	80070c8 <mg_log>
    if (!mg_dns_send(dnsc->c, name, d->txnid, ipv6)) {
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	6858      	ldr	r0, [r3, #4]
 8001f7c:	697b      	ldr	r3, [r7, #20]
 8001f7e:	8a1a      	ldrh	r2, [r3, #16]
 8001f80:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001f84:	68b9      	ldr	r1, [r7, #8]
 8001f86:	f7ff fe89 	bl	8001c9c <mg_dns_send>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	f083 0301 	eor.w	r3, r3, #1
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d005      	beq.n	8001fa2 <mg_sendnsreq+0x146>
      mg_error(dnsc->c, "DNS send");
 8001f96:	683b      	ldr	r3, [r7, #0]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	490b      	ldr	r1, [pc, #44]	; (8001fc8 <mg_sendnsreq+0x16c>)
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f000 f87b 	bl	8002098 <mg_error>
}
 8001fa2:	bf00      	nop
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fac:	080154e4 	.word	0x080154e4
 8001fb0:	08001991 	.word	0x08001991
 8001fb4:	08015510 	.word	0x08015510
 8001fb8:	0801551c 	.word	0x0801551c
 8001fbc:	080173c8 	.word	0x080173c8
 8001fc0:	0801544c 	.word	0x0801544c
 8001fc4:	08015528 	.word	0x08015528
 8001fc8:	0801554c 	.word	0x0801554c

08001fcc <mg_resolve>:

void mg_resolve(struct mg_connection *c, const char *url) {
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b088      	sub	sp, #32
 8001fd0:	af02      	add	r7, sp, #8
 8001fd2:	6078      	str	r0, [r7, #4]
 8001fd4:	6039      	str	r1, [r7, #0]
  struct mg_str host = mg_url_host(url);
 8001fd6:	f107 030c 	add.w	r3, r7, #12
 8001fda:	6839      	ldr	r1, [r7, #0]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f008 f9be 	bl	800a35e <mg_url_host>
  c->rem.port = mg_htons(mg_url_port(url));
 8001fe2:	6838      	ldr	r0, [r7, #0]
 8001fe4:	f008 f9ee 	bl	800a3c4 <mg_url_port>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	4618      	mov	r0, r3
 8001fec:	f008 fa67 	bl	800a4be <mg_ntohs>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	859a      	strh	r2, [r3, #44]	; 0x2c
  if (mg_aton(host, &c->rem)) {
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	331c      	adds	r3, #28
 8001ffc:	461a      	mov	r2, r3
 8001ffe:	f107 030c 	add.w	r3, r7, #12
 8002002:	e893 0003 	ldmia.w	r3, {r0, r1}
 8002006:	f006 fb3f 	bl	8008688 <mg_aton>
 800200a:	4603      	mov	r3, r0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d003      	beq.n	8002018 <mg_resolve+0x4c>
    // host is an IP address, do not fire name resolution
    mg_connect_resolved(c);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f00b fa8f 	bl	800d534 <mg_connect_resolved>
  } else {
    // host is not an IP, send DNS resolution request
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
  }
}
 8002016:	e019      	b.n	800204c <mg_resolve+0x80>
    struct mg_dns *dns = c->mgr->use_dns6 ? &c->mgr->dns6 : &c->mgr->dns4;
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	685b      	ldr	r3, [r3, #4]
 800201c:	7e1b      	ldrb	r3, [r3, #24]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <mg_resolve+0x5e>
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	330c      	adds	r3, #12
 8002028:	e002      	b.n	8002030 <mg_resolve+0x64>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	3304      	adds	r3, #4
 8002030:	617b      	str	r3, [r7, #20]
    mg_sendnsreq(c, &host, c->mgr->dnstimeout, dns, c->mgr->use_dns6);
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	695a      	ldr	r2, [r3, #20]
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	7e1b      	ldrb	r3, [r3, #24]
 800203e:	f107 010c 	add.w	r1, r7, #12
 8002042:	9300      	str	r3, [sp, #0]
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	6878      	ldr	r0, [r7, #4]
 8002048:	f7ff ff08 	bl	8001e5c <mg_sendnsreq>
}
 800204c:	bf00      	nop
 800204e:	3718      	adds	r7, #24
 8002050:	46bd      	mov	sp, r7
 8002052:	bd80      	pop	{r7, pc}

08002054 <mg_call>:





void mg_call(struct mg_connection *c, int ev, void *ev_data) {
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	60f8      	str	r0, [r7, #12]
 800205c:	60b9      	str	r1, [r7, #8]
 800205e:	607a      	str	r2, [r7, #4]
  // Run user-defined handler first, in order to give it an ability
  // to intercept processing (e.g. clean input buffer) before the
  // protocol handler kicks in
  if (c->fn != NULL) c->fn(c, ev, ev_data, c->fn_data);
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002064:	2b00      	cmp	r3, #0
 8002066:	d007      	beq.n	8002078 <mg_call+0x24>
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	6d9c      	ldr	r4, [r3, #88]	; 0x58
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	68b9      	ldr	r1, [r7, #8]
 8002074:	68f8      	ldr	r0, [r7, #12]
 8002076:	47a0      	blx	r4
  if (c->pfn != NULL) c->pfn(c, ev, ev_data, c->pfn_data);
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800207c:	2b00      	cmp	r3, #0
 800207e:	d007      	beq.n	8002090 <mg_call+0x3c>
 8002080:	68fb      	ldr	r3, [r7, #12]
 8002082:	6e1c      	ldr	r4, [r3, #96]	; 0x60
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	68b9      	ldr	r1, [r7, #8]
 800208c:	68f8      	ldr	r0, [r7, #12]
 800208e:	47a0      	blx	r4
}
 8002090:	bf00      	nop
 8002092:	3714      	adds	r7, #20
 8002094:	46bd      	mov	sp, r7
 8002096:	bd90      	pop	{r4, r7, pc}

08002098 <mg_error>:

void mg_error(struct mg_connection *c, const char *fmt, ...) {
 8002098:	b40e      	push	{r1, r2, r3}
 800209a:	b580      	push	{r7, lr}
 800209c:	b095      	sub	sp, #84	; 0x54
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
  char buf[64];
  va_list ap;
  va_start(ap, fmt);
 80020a2:	f107 0360 	add.w	r3, r7, #96	; 0x60
 80020a6:	60fb      	str	r3, [r7, #12]
  mg_vsnprintf(buf, sizeof(buf), fmt, &ap);
 80020a8:	f107 030c 	add.w	r3, r7, #12
 80020ac:	f107 0010 	add.w	r0, r7, #16
 80020b0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80020b2:	2140      	movs	r1, #64	; 0x40
 80020b4:	f006 fd7a 	bl	8008bac <mg_vsnprintf>
  va_end(ap);
  MG_ERROR(("%lu %p %s", c->id, c->fd, buf));
 80020b8:	4b13      	ldr	r3, [pc, #76]	; (8002108 <mg_error+0x70>)
 80020ba:	f240 1293 	movw	r2, #403	; 0x193
 80020be:	4913      	ldr	r1, [pc, #76]	; (800210c <mg_error+0x74>)
 80020c0:	2001      	movs	r0, #1
 80020c2:	f004 ffa7 	bl	8007014 <mg_log_prefix>
 80020c6:	4603      	mov	r3, r0
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d008      	beq.n	80020de <mg_error+0x46>
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80020d4:	f107 0310 	add.w	r3, r7, #16
 80020d8:	480d      	ldr	r0, [pc, #52]	; (8002110 <mg_error+0x78>)
 80020da:	f004 fff5 	bl	80070c8 <mg_log>
  c->is_closing = 1;             // Set is_closing before sending MG_EV_CALL
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80020e4:	f043 0320 	orr.w	r3, r3, #32
 80020e8:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  mg_call(c, MG_EV_ERROR, buf);  // Let user handler to override it
 80020ec:	f107 0310 	add.w	r3, r7, #16
 80020f0:	461a      	mov	r2, r3
 80020f2:	2100      	movs	r1, #0
 80020f4:	6878      	ldr	r0, [r7, #4]
 80020f6:	f7ff ffad 	bl	8002054 <mg_call>
}
 80020fa:	bf00      	nop
 80020fc:	3754      	adds	r7, #84	; 0x54
 80020fe:	46bd      	mov	sp, r7
 8002100:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8002104:	b003      	add	sp, #12
 8002106:	4770      	bx	lr
 8002108:	080173d8 	.word	0x080173d8
 800210c:	0801544c 	.word	0x0801544c
 8002110:	08015558 	.word	0x08015558

08002114 <is_digit>:
#endif




static bool is_digit(int c) {
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
  return c >= '0' && c <= '9';
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2b2f      	cmp	r3, #47	; 0x2f
 8002120:	dd04      	ble.n	800212c <is_digit+0x18>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b39      	cmp	r3, #57	; 0x39
 8002126:	dc01      	bgt.n	800212c <is_digit+0x18>
 8002128:	2301      	movs	r3, #1
 800212a:	e000      	b.n	800212e <is_digit+0x1a>
 800212c:	2300      	movs	r3, #0
 800212e:	f003 0301 	and.w	r3, r3, #1
 8002132:	b2db      	uxtb	r3, r3
}
 8002134:	4618      	mov	r0, r3
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <addexp>:

static int addexp(char *buf, int e, int sign) {
 8002140:	b480      	push	{r7}
 8002142:	b087      	sub	sp, #28
 8002144:	af00      	add	r7, sp, #0
 8002146:	60f8      	str	r0, [r7, #12]
 8002148:	60b9      	str	r1, [r7, #8]
 800214a:	607a      	str	r2, [r7, #4]
  int n = 0;
 800214c:	2300      	movs	r3, #0
 800214e:	617b      	str	r3, [r7, #20]
  buf[n++] = 'e';
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	1c5a      	adds	r2, r3, #1
 8002154:	617a      	str	r2, [r7, #20]
 8002156:	461a      	mov	r2, r3
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	4413      	add	r3, r2
 800215c:	2265      	movs	r2, #101	; 0x65
 800215e:	701a      	strb	r2, [r3, #0]
  buf[n++] = (char) sign;
 8002160:	697b      	ldr	r3, [r7, #20]
 8002162:	1c5a      	adds	r2, r3, #1
 8002164:	617a      	str	r2, [r7, #20]
 8002166:	461a      	mov	r2, r3
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	4413      	add	r3, r2
 800216c:	687a      	ldr	r2, [r7, #4]
 800216e:	b2d2      	uxtb	r2, r2
 8002170:	701a      	strb	r2, [r3, #0]
  if (e > 400) return 0;
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002178:	dd01      	ble.n	800217e <addexp+0x3e>
 800217a:	2300      	movs	r3, #0
 800217c:	e057      	b.n	800222e <addexp+0xee>
  if (e < 10) buf[n++] = '0';
 800217e:	68bb      	ldr	r3, [r7, #8]
 8002180:	2b09      	cmp	r3, #9
 8002182:	dc07      	bgt.n	8002194 <addexp+0x54>
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	1c5a      	adds	r2, r3, #1
 8002188:	617a      	str	r2, [r7, #20]
 800218a:	461a      	mov	r2, r3
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	4413      	add	r3, r2
 8002190:	2230      	movs	r2, #48	; 0x30
 8002192:	701a      	strb	r2, [r3, #0]
  if (e >= 100) buf[n++] = (char) (e / 100 + '0'), e -= 100 * (e / 100);
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	2b63      	cmp	r3, #99	; 0x63
 8002198:	dd1c      	ble.n	80021d4 <addexp+0x94>
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	4a27      	ldr	r2, [pc, #156]	; (800223c <addexp+0xfc>)
 800219e:	fb82 1203 	smull	r1, r2, r2, r3
 80021a2:	1152      	asrs	r2, r2, #5
 80021a4:	17db      	asrs	r3, r3, #31
 80021a6:	1ad3      	subs	r3, r2, r3
 80021a8:	b2da      	uxtb	r2, r3
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	1c59      	adds	r1, r3, #1
 80021ae:	6179      	str	r1, [r7, #20]
 80021b0:	4619      	mov	r1, r3
 80021b2:	68fb      	ldr	r3, [r7, #12]
 80021b4:	440b      	add	r3, r1
 80021b6:	3230      	adds	r2, #48	; 0x30
 80021b8:	b2d2      	uxtb	r2, r2
 80021ba:	701a      	strb	r2, [r3, #0]
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	4a1f      	ldr	r2, [pc, #124]	; (800223c <addexp+0xfc>)
 80021c0:	fb82 1203 	smull	r1, r2, r2, r3
 80021c4:	1151      	asrs	r1, r2, #5
 80021c6:	17da      	asrs	r2, r3, #31
 80021c8:	1a8a      	subs	r2, r1, r2
 80021ca:	2164      	movs	r1, #100	; 0x64
 80021cc:	fb01 f202 	mul.w	r2, r1, r2
 80021d0:	1a9b      	subs	r3, r3, r2
 80021d2:	60bb      	str	r3, [r7, #8]
  if (e >= 10) buf[n++] = (char) (e / 10 + '0'), e -= 10 * (e / 10);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	2b09      	cmp	r3, #9
 80021d8:	dd1d      	ble.n	8002216 <addexp+0xd6>
 80021da:	68bb      	ldr	r3, [r7, #8]
 80021dc:	4a18      	ldr	r2, [pc, #96]	; (8002240 <addexp+0x100>)
 80021de:	fb82 1203 	smull	r1, r2, r2, r3
 80021e2:	1092      	asrs	r2, r2, #2
 80021e4:	17db      	asrs	r3, r3, #31
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	b2da      	uxtb	r2, r3
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	1c59      	adds	r1, r3, #1
 80021ee:	6179      	str	r1, [r7, #20]
 80021f0:	4619      	mov	r1, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	440b      	add	r3, r1
 80021f6:	3230      	adds	r2, #48	; 0x30
 80021f8:	b2d2      	uxtb	r2, r2
 80021fa:	701a      	strb	r2, [r3, #0]
 80021fc:	68ba      	ldr	r2, [r7, #8]
 80021fe:	4b10      	ldr	r3, [pc, #64]	; (8002240 <addexp+0x100>)
 8002200:	fb83 1302 	smull	r1, r3, r3, r2
 8002204:	1099      	asrs	r1, r3, #2
 8002206:	17d3      	asrs	r3, r2, #31
 8002208:	1ac9      	subs	r1, r1, r3
 800220a:	460b      	mov	r3, r1
 800220c:	009b      	lsls	r3, r3, #2
 800220e:	440b      	add	r3, r1
 8002210:	005b      	lsls	r3, r3, #1
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	60bb      	str	r3, [r7, #8]
  buf[n++] = (char) (e + '0');
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	b2da      	uxtb	r2, r3
 800221a:	697b      	ldr	r3, [r7, #20]
 800221c:	1c59      	adds	r1, r3, #1
 800221e:	6179      	str	r1, [r7, #20]
 8002220:	4619      	mov	r1, r3
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	440b      	add	r3, r1
 8002226:	3230      	adds	r2, #48	; 0x30
 8002228:	b2d2      	uxtb	r2, r2
 800222a:	701a      	strb	r2, [r3, #0]
  return n;
 800222c:	697b      	ldr	r3, [r7, #20]
}
 800222e:	4618      	mov	r0, r3
 8002230:	371c      	adds	r7, #28
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	51eb851f 	.word	0x51eb851f
 8002240:	66666667 	.word	0x66666667

08002244 <xisinf>:

static int xisinf(double x) {
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800224e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002252:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800225a:	f04f 0200 	mov.w	r2, #0
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	000a      	movs	r2, r1
 8002264:	2300      	movs	r3, #0
 8002266:	4613      	mov	r3, r2
 8002268:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800226c:	4a08      	ldr	r2, [pc, #32]	; (8002290 <xisinf+0x4c>)
 800226e:	4293      	cmp	r3, r2
 8002270:	d106      	bne.n	8002280 <xisinf+0x3c>
         ((unsigned) ieee754.u == 0);
 8002272:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002276:	4613      	mov	r3, r2
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) == 0x7ff00000 &&
 8002278:	2b00      	cmp	r3, #0
 800227a:	d101      	bne.n	8002280 <xisinf+0x3c>
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <xisinf+0x3e>
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3714      	adds	r7, #20
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
 800228e:	bf00      	nop
 8002290:	7ff00000 	.word	0x7ff00000

08002294 <xisnan>:

static int xisnan(double x) {
 8002294:	b480      	push	{r7}
 8002296:	b085      	sub	sp, #20
 8002298:	af00      	add	r7, sp, #0
 800229a:	ed87 0b00 	vstr	d0, [r7]
  union {
    double f;
    uint64_t u;
  } ieee754 = {x};
 800229e:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022a2:	e9c7 2302 	strd	r2, r3, [r7, #8]
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80022a6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80022aa:	f04f 0200 	mov.w	r2, #0
 80022ae:	f04f 0300 	mov.w	r3, #0
 80022b2:	000a      	movs	r2, r1
 80022b4:	2300      	movs	r3, #0
 80022b6:	4613      	mov	r3, r2
 80022b8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
             ((unsigned) ieee754.u != 0) >
 80022bc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022c0:	4613      	mov	r3, r2
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	bf14      	ite	ne
 80022c6:	2301      	movne	r3, #1
 80022c8:	2300      	moveq	r3, #0
 80022ca:	b2db      	uxtb	r3, r3
  return ((unsigned) (ieee754.u >> 32) & 0x7fffffff) +
 80022cc:	440b      	add	r3, r1
             ((unsigned) ieee754.u != 0) >
 80022ce:	4a06      	ldr	r2, [pc, #24]	; (80022e8 <xisnan+0x54>)
 80022d0:	4293      	cmp	r3, r2
 80022d2:	bf8c      	ite	hi
 80022d4:	2301      	movhi	r3, #1
 80022d6:	2300      	movls	r3, #0
 80022d8:	b2db      	uxtb	r3, r3
         0x7ff00000;
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3714      	adds	r7, #20
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	7ff00000 	.word	0x7ff00000
 80022ec:	00000000 	.word	0x00000000

080022f0 <mg_dtoa>:

static size_t mg_dtoa(char *dst, size_t dstlen, double d, int width, bool tz) {
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b09e      	sub	sp, #120	; 0x78
 80022f4:	af02      	add	r7, sp, #8
 80022f6:	6178      	str	r0, [r7, #20]
 80022f8:	6139      	str	r1, [r7, #16]
 80022fa:	ed87 0b02 	vstr	d0, [r7, #8]
 80022fe:	607a      	str	r2, [r7, #4]
 8002300:	70fb      	strb	r3, [r7, #3]
  char buf[40];
  int i, s = 0, n = 0, e = 0;
 8002302:	2300      	movs	r3, #0
 8002304:	66bb      	str	r3, [r7, #104]	; 0x68
 8002306:	2300      	movs	r3, #0
 8002308:	667b      	str	r3, [r7, #100]	; 0x64
 800230a:	2300      	movs	r3, #0
 800230c:	663b      	str	r3, [r7, #96]	; 0x60
  double t, mul, saved;
  if (d == 0.0) return mg_snprintf(dst, dstlen, "%s", "0");
 800230e:	ed97 7b02 	vldr	d7, [r7, #8]
 8002312:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8002316:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231a:	d107      	bne.n	800232c <mg_dtoa+0x3c>
 800231c:	4bb1      	ldr	r3, [pc, #708]	; (80025e4 <mg_dtoa+0x2f4>)
 800231e:	4ab2      	ldr	r2, [pc, #712]	; (80025e8 <mg_dtoa+0x2f8>)
 8002320:	6939      	ldr	r1, [r7, #16]
 8002322:	6978      	ldr	r0, [r7, #20]
 8002324:	f006 fc6a 	bl	8008bfc <mg_snprintf>
 8002328:	4603      	mov	r3, r0
 800232a:	e266      	b.n	80027fa <mg_dtoa+0x50a>
  if (xisinf(d)) return mg_snprintf(dst, dstlen, "%s", d > 0 ? "inf" : "-inf");
 800232c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002330:	f7ff ff88 	bl	8002244 <xisinf>
 8002334:	4603      	mov	r3, r0
 8002336:	2b00      	cmp	r3, #0
 8002338:	d010      	beq.n	800235c <mg_dtoa+0x6c>
 800233a:	ed97 7b02 	vldr	d7, [r7, #8]
 800233e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002342:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002346:	dd01      	ble.n	800234c <mg_dtoa+0x5c>
 8002348:	4ba8      	ldr	r3, [pc, #672]	; (80025ec <mg_dtoa+0x2fc>)
 800234a:	e000      	b.n	800234e <mg_dtoa+0x5e>
 800234c:	4ba8      	ldr	r3, [pc, #672]	; (80025f0 <mg_dtoa+0x300>)
 800234e:	4aa6      	ldr	r2, [pc, #664]	; (80025e8 <mg_dtoa+0x2f8>)
 8002350:	6939      	ldr	r1, [r7, #16]
 8002352:	6978      	ldr	r0, [r7, #20]
 8002354:	f006 fc52 	bl	8008bfc <mg_snprintf>
 8002358:	4603      	mov	r3, r0
 800235a:	e24e      	b.n	80027fa <mg_dtoa+0x50a>
  if (xisnan(d)) return mg_snprintf(dst, dstlen, "%s", "nan");
 800235c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002360:	f7ff ff98 	bl	8002294 <xisnan>
 8002364:	4603      	mov	r3, r0
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <mg_dtoa+0x8a>
 800236a:	4ba2      	ldr	r3, [pc, #648]	; (80025f4 <mg_dtoa+0x304>)
 800236c:	4a9e      	ldr	r2, [pc, #632]	; (80025e8 <mg_dtoa+0x2f8>)
 800236e:	6939      	ldr	r1, [r7, #16]
 8002370:	6978      	ldr	r0, [r7, #20]
 8002372:	f006 fc43 	bl	8008bfc <mg_snprintf>
 8002376:	4603      	mov	r3, r0
 8002378:	e23f      	b.n	80027fa <mg_dtoa+0x50a>
  if (d < 0.0) d = -d, buf[s++] = '-';
 800237a:	ed97 7b02 	vldr	d7, [r7, #8]
 800237e:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 8002382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002386:	d50d      	bpl.n	80023a4 <mg_dtoa+0xb4>
 8002388:	ed97 7b02 	vldr	d7, [r7, #8]
 800238c:	eeb1 7b47 	vneg.f64	d7, d7
 8002390:	ed87 7b02 	vstr	d7, [r7, #8]
 8002394:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	66ba      	str	r2, [r7, #104]	; 0x68
 800239a:	3370      	adds	r3, #112	; 0x70
 800239c:	443b      	add	r3, r7
 800239e:	222d      	movs	r2, #45	; 0x2d
 80023a0:	f803 2c58 	strb.w	r2, [r3, #-88]

  // Round
  saved = d;
 80023a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023a8:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  mul = 1.0;
 80023ac:	f04f 0200 	mov.w	r2, #0
 80023b0:	4b91      	ldr	r3, [pc, #580]	; (80025f8 <mg_dtoa+0x308>)
 80023b2:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0;
 80023b6:	e007      	b.n	80023c8 <mg_dtoa+0xd8>
 80023b8:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 80023bc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80023c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80023c4:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 80023c8:	ed97 7b02 	vldr	d7, [r7, #8]
 80023cc:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80023d0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d8:	db0c      	blt.n	80023f4 <mg_dtoa+0x104>
 80023da:	ed97 5b02 	vldr	d5, [r7, #8]
 80023de:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80023e2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80023e6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80023ea:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80023ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023f2:	dae1      	bge.n	80023b8 <mg_dtoa+0xc8>
  while (d <= 1.0 && d / mul <= 1.0) mul /= 10.0;
 80023f4:	e007      	b.n	8002406 <mg_dtoa+0x116>
 80023f6:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80023fa:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80023fe:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002402:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 8002406:	ed97 7b02 	vldr	d7, [r7, #8]
 800240a:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 800240e:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002412:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002416:	d80c      	bhi.n	8002432 <mg_dtoa+0x142>
 8002418:	ed97 5b02 	vldr	d5, [r7, #8]
 800241c:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 8002420:	ee85 7b06 	vdiv.f64	d7, d5, d6
 8002424:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002428:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800242c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002430:	d9e1      	bls.n	80023f6 <mg_dtoa+0x106>
  for (i = 0, t = mul * 5; i < width; i++) t /= 10.0;
 8002432:	2300      	movs	r3, #0
 8002434:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002436:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800243a:	eeb1 6b04 	vmov.f64	d6, #20	; 0x40a00000  5.0
 800243e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8002442:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 8002446:	e00a      	b.n	800245e <mg_dtoa+0x16e>
 8002448:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800244c:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002450:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002454:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 8002458:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800245a:	3301      	adds	r3, #1
 800245c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800245e:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	429a      	cmp	r2, r3
 8002464:	dbf0      	blt.n	8002448 <mg_dtoa+0x158>
  d += t;
 8002466:	ed97 6b02 	vldr	d6, [r7, #8]
 800246a:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800246e:	ee36 7b07 	vadd.f64	d7, d6, d7
 8002472:	ed87 7b02 	vstr	d7, [r7, #8]
  // Calculate exponent, and 'mul' for scientific representation
  mul = 1.0;
 8002476:	f04f 0200 	mov.w	r2, #0
 800247a:	4b5f      	ldr	r3, [pc, #380]	; (80025f8 <mg_dtoa+0x308>)
 800247c:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
  while (d >= 10.0 && d / mul >= 10.0) mul *= 10.0, e++;
 8002480:	e00a      	b.n	8002498 <mg_dtoa+0x1a8>
 8002482:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002486:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 800248a:	ee27 7b06 	vmul.f64	d7, d7, d6
 800248e:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 8002492:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002494:	3301      	adds	r3, #1
 8002496:	663b      	str	r3, [r7, #96]	; 0x60
 8002498:	ed97 7b02 	vldr	d7, [r7, #8]
 800249c:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80024a0:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80024a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024a8:	db0c      	blt.n	80024c4 <mg_dtoa+0x1d4>
 80024aa:	ed97 5b02 	vldr	d5, [r7, #8]
 80024ae:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80024b2:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024b6:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80024ba:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	dade      	bge.n	8002482 <mg_dtoa+0x192>
  while (d < 1.0 && d / mul < 1.0) mul /= 10.0, e--;
 80024c4:	e00a      	b.n	80024dc <mg_dtoa+0x1ec>
 80024c6:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80024ca:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80024ce:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80024d2:	ed87 7b14 	vstr	d7, [r7, #80]	; 0x50
 80024d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80024d8:	3b01      	subs	r3, #1
 80024da:	663b      	str	r3, [r7, #96]	; 0x60
 80024dc:	ed97 7b02 	vldr	d7, [r7, #8]
 80024e0:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80024e4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80024e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ec:	d50c      	bpl.n	8002508 <mg_dtoa+0x218>
 80024ee:	ed97 5b02 	vldr	d5, [r7, #8]
 80024f2:	ed97 6b14 	vldr	d6, [r7, #80]	; 0x50
 80024f6:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80024fa:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80024fe:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8002502:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002506:	d4de      	bmi.n	80024c6 <mg_dtoa+0x1d6>
  // printf(" --> %g %d %g %g\n", saved, e, t, mul);

  if (e >= width && width > 1) {
 8002508:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	429a      	cmp	r2, r3
 800250e:	db2d      	blt.n	800256c <mg_dtoa+0x27c>
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b01      	cmp	r3, #1
 8002514:	dd2a      	ble.n	800256c <mg_dtoa+0x27c>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 8002516:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 800251a:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 800251e:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002522:	78fb      	ldrb	r3, [r7, #3]
 8002524:	f107 0018 	add.w	r0, r7, #24
 8002528:	687a      	ldr	r2, [r7, #4]
 800252a:	eeb0 0b45 	vmov.f64	d0, d5
 800252e:	2128      	movs	r1, #40	; 0x28
 8002530:	f7ff fede 	bl	80022f0 <mg_dtoa>
 8002534:	4603      	mov	r3, r0
 8002536:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / t, e, n, buf);
    n += addexp(buf + s + n, e, '+');
 8002538:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800253a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800253c:	4413      	add	r3, r2
 800253e:	f107 0218 	add.w	r2, r7, #24
 8002542:	4413      	add	r3, r2
 8002544:	222b      	movs	r2, #43	; 0x2b
 8002546:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8002548:	4618      	mov	r0, r3
 800254a:	f7ff fdf9 	bl	8002140 <addexp>
 800254e:	4602      	mov	r2, r0
 8002550:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002552:	4413      	add	r3, r2
 8002554:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 8002556:	f107 0318 	add.w	r3, r7, #24
 800255a:	9300      	str	r3, [sp, #0]
 800255c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800255e:	4a27      	ldr	r2, [pc, #156]	; (80025fc <mg_dtoa+0x30c>)
 8002560:	6939      	ldr	r1, [r7, #16]
 8002562:	6978      	ldr	r0, [r7, #20]
 8002564:	f006 fb4a 	bl	8008bfc <mg_snprintf>
 8002568:	4603      	mov	r3, r0
 800256a:	e146      	b.n	80027fa <mg_dtoa+0x50a>
  } else if (e <= -width && width > 1) {
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	425b      	negs	r3, r3
 8002570:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002572:	429a      	cmp	r2, r3
 8002574:	dc2e      	bgt.n	80025d4 <mg_dtoa+0x2e4>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2b01      	cmp	r3, #1
 800257a:	dd2b      	ble.n	80025d4 <mg_dtoa+0x2e4>
    n = (int) mg_dtoa(buf, sizeof(buf), saved / mul, width, tz);
 800257c:	ed97 6b12 	vldr	d6, [r7, #72]	; 0x48
 8002580:	ed97 7b14 	vldr	d7, [r7, #80]	; 0x50
 8002584:	ee86 5b07 	vdiv.f64	d5, d6, d7
 8002588:	78fb      	ldrb	r3, [r7, #3]
 800258a:	f107 0018 	add.w	r0, r7, #24
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	eeb0 0b45 	vmov.f64	d0, d5
 8002594:	2128      	movs	r1, #40	; 0x28
 8002596:	f7ff feab 	bl	80022f0 <mg_dtoa>
 800259a:	4603      	mov	r3, r0
 800259c:	667b      	str	r3, [r7, #100]	; 0x64
    // printf(" --> %.*g %d [%.*s]\n", 10, d / mul, e, n, buf);
    n += addexp(buf + s + n, -e, '-');
 800259e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80025a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025a2:	4413      	add	r3, r2
 80025a4:	f107 0218 	add.w	r2, r7, #24
 80025a8:	18d0      	adds	r0, r2, r3
 80025aa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025ac:	425b      	negs	r3, r3
 80025ae:	222d      	movs	r2, #45	; 0x2d
 80025b0:	4619      	mov	r1, r3
 80025b2:	f7ff fdc5 	bl	8002140 <addexp>
 80025b6:	4602      	mov	r2, r0
 80025b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025ba:	4413      	add	r3, r2
 80025bc:	667b      	str	r3, [r7, #100]	; 0x64
    return mg_snprintf(dst, dstlen, "%.*s", n, buf);
 80025be:	f107 0318 	add.w	r3, r7, #24
 80025c2:	9300      	str	r3, [sp, #0]
 80025c4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80025c6:	4a0d      	ldr	r2, [pc, #52]	; (80025fc <mg_dtoa+0x30c>)
 80025c8:	6939      	ldr	r1, [r7, #16]
 80025ca:	6978      	ldr	r0, [r7, #20]
 80025cc:	f006 fb16 	bl	8008bfc <mg_snprintf>
 80025d0:	4603      	mov	r3, r0
 80025d2:	e112      	b.n	80027fa <mg_dtoa+0x50a>
  } else {
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 80025d4:	2300      	movs	r3, #0
 80025d6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80025d8:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80025dc:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 80025e0:	e046      	b.n	8002670 <mg_dtoa+0x380>
 80025e2:	bf00      	nop
 80025e4:	08015564 	.word	0x08015564
 80025e8:	08015568 	.word	0x08015568
 80025ec:	0801556c 	.word	0x0801556c
 80025f0:	08015570 	.word	0x08015570
 80025f4:	08015578 	.word	0x08015578
 80025f8:	3ff00000 	.word	0x3ff00000
 80025fc:	0801557c 	.word	0x0801557c
      int ch = (int) (d / t);
 8002600:	ed97 5b02 	vldr	d5, [r7, #8]
 8002604:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002608:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800260c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8002610:	ee17 3a90 	vmov	r3, s15
 8002614:	647b      	str	r3, [r7, #68]	; 0x44
      if (n > 0 || ch > 0) buf[s + n++] = (char) (ch + '0');
 8002616:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002618:	2b00      	cmp	r3, #0
 800261a:	dc02      	bgt.n	8002622 <mg_dtoa+0x332>
 800261c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800261e:	2b00      	cmp	r3, #0
 8002620:	dd0c      	ble.n	800263c <mg_dtoa+0x34c>
 8002622:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002624:	b2da      	uxtb	r2, r3
 8002626:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002628:	1c59      	adds	r1, r3, #1
 800262a:	6679      	str	r1, [r7, #100]	; 0x64
 800262c:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800262e:	440b      	add	r3, r1
 8002630:	3230      	adds	r2, #48	; 0x30
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	3370      	adds	r3, #112	; 0x70
 8002636:	443b      	add	r3, r7
 8002638:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 800263c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800263e:	ee07 3a90 	vmov	s15, r3
 8002642:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002646:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800264a:	ee26 7b07 	vmul.f64	d7, d6, d7
 800264e:	ed97 6b02 	vldr	d6, [r7, #8]
 8002652:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002656:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 800265a:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 800265e:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002662:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002666:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
    for (i = 0, t = mul; t >= 1.0 && s + n < (int) sizeof(buf); i++) {
 800266a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800266c:	3301      	adds	r3, #1
 800266e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002670:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 8002674:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 8002678:	eeb4 7bc6 	vcmpe.f64	d7, d6
 800267c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002680:	db04      	blt.n	800268c <mg_dtoa+0x39c>
 8002682:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002686:	4413      	add	r3, r2
 8002688:	2b27      	cmp	r3, #39	; 0x27
 800268a:	ddb9      	ble.n	8002600 <mg_dtoa+0x310>
    }
    // printf(" --> [%g] -> %g %g (%d) [%.*s]\n", saved, d, t, n, s + n, buf);
    if (n == 0) buf[s++] = '0';
 800268c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800268e:	2b00      	cmp	r3, #0
 8002690:	d118      	bne.n	80026c4 <mg_dtoa+0x3d4>
 8002692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002694:	1c5a      	adds	r2, r3, #1
 8002696:	66ba      	str	r2, [r7, #104]	; 0x68
 8002698:	3370      	adds	r3, #112	; 0x70
 800269a:	443b      	add	r3, r7
 800269c:	2230      	movs	r2, #48	; 0x30
 800269e:	f803 2c58 	strb.w	r2, [r3, #-88]
    while (t >= 1.0 && n + s < (int) sizeof(buf)) buf[n++] = '0', t /= 10.0;
 80026a2:	e00f      	b.n	80026c4 <mg_dtoa+0x3d4>
 80026a4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026a6:	1c5a      	adds	r2, r3, #1
 80026a8:	667a      	str	r2, [r7, #100]	; 0x64
 80026aa:	3370      	adds	r3, #112	; 0x70
 80026ac:	443b      	add	r3, r7
 80026ae:	2230      	movs	r2, #48	; 0x30
 80026b0:	f803 2c58 	strb.w	r2, [r3, #-88]
 80026b4:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 80026b8:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80026bc:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80026c0:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
 80026c4:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 80026c8:	eeb7 6b00 	vmov.f64	d6, #112	; 0x3f800000  1.0
 80026cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80026d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d4:	db04      	blt.n	80026e0 <mg_dtoa+0x3f0>
 80026d6:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026da:	4413      	add	r3, r2
 80026dc:	2b27      	cmp	r3, #39	; 0x27
 80026de:	dde1      	ble.n	80026a4 <mg_dtoa+0x3b4>
    if (s + n < (int) sizeof(buf)) buf[n + s++] = '.';
 80026e0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80026e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026e4:	4413      	add	r3, r2
 80026e6:	2b27      	cmp	r3, #39	; 0x27
 80026e8:	dc09      	bgt.n	80026fe <mg_dtoa+0x40e>
 80026ea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026ec:	1c5a      	adds	r2, r3, #1
 80026ee:	66ba      	str	r2, [r7, #104]	; 0x68
 80026f0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80026f2:	4413      	add	r3, r2
 80026f4:	3370      	adds	r3, #112	; 0x70
 80026f6:	443b      	add	r3, r7
 80026f8:	222e      	movs	r2, #46	; 0x2e
 80026fa:	f803 2c58 	strb.w	r2, [r3, #-88]
    // printf(" 1--> [%g] -> [%.*s]\n", saved, s + n, buf);
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 80026fe:	2300      	movs	r3, #0
 8002700:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002702:	a342      	add	r3, pc, #264	; (adr r3, 800280c <mg_dtoa+0x51c>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	e9c7 2316 	strd	r2, r3, [r7, #88]	; 0x58
 800270c:	e031      	b.n	8002772 <mg_dtoa+0x482>
      int ch = (int) (d / t);
 800270e:	ed97 5b02 	vldr	d5, [r7, #8]
 8002712:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002716:	ee85 7b06 	vdiv.f64	d7, d5, d6
 800271a:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 800271e:	ee17 3a90 	vmov	r3, s15
 8002722:	643b      	str	r3, [r7, #64]	; 0x40
      buf[s + n++] = (char) (ch + '0');
 8002724:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002726:	b2da      	uxtb	r2, r3
 8002728:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800272a:	1c59      	adds	r1, r3, #1
 800272c:	6679      	str	r1, [r7, #100]	; 0x64
 800272e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002730:	440b      	add	r3, r1
 8002732:	3230      	adds	r2, #48	; 0x30
 8002734:	b2d2      	uxtb	r2, r2
 8002736:	3370      	adds	r3, #112	; 0x70
 8002738:	443b      	add	r3, r7
 800273a:	f803 2c58 	strb.w	r2, [r3, #-88]
      d -= ch * t;
 800273e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8002748:	ed97 7b16 	vldr	d7, [r7, #88]	; 0x58
 800274c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8002750:	ed97 6b02 	vldr	d6, [r7, #8]
 8002754:	ee36 7b47 	vsub.f64	d7, d6, d7
 8002758:	ed87 7b02 	vstr	d7, [r7, #8]
      t /= 10.0;
 800275c:	ed97 6b16 	vldr	d6, [r7, #88]	; 0x58
 8002760:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8002764:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8002768:	ed87 7b16 	vstr	d7, [r7, #88]	; 0x58
    for (i = 0, t = 0.1; s + n < (int) sizeof(buf) && n < width; i++) {
 800276c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276e:	3301      	adds	r3, #1
 8002770:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002772:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002774:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002776:	4413      	add	r3, r2
 8002778:	2b27      	cmp	r3, #39	; 0x27
 800277a:	dc07      	bgt.n	800278c <mg_dtoa+0x49c>
 800277c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	429a      	cmp	r2, r3
 8002782:	dbc4      	blt.n	800270e <mg_dtoa+0x41e>
    }
  }
  while (tz && n > 0 && buf[s + n - 1] == '0') n--;  // Trim trailing zeroes
 8002784:	e002      	b.n	800278c <mg_dtoa+0x49c>
 8002786:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002788:	3b01      	subs	r3, #1
 800278a:	667b      	str	r3, [r7, #100]	; 0x64
 800278c:	78fb      	ldrb	r3, [r7, #3]
 800278e:	2b00      	cmp	r3, #0
 8002790:	d00c      	beq.n	80027ac <mg_dtoa+0x4bc>
 8002792:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002794:	2b00      	cmp	r3, #0
 8002796:	dd09      	ble.n	80027ac <mg_dtoa+0x4bc>
 8002798:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800279a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800279c:	4413      	add	r3, r2
 800279e:	3b01      	subs	r3, #1
 80027a0:	3370      	adds	r3, #112	; 0x70
 80027a2:	443b      	add	r3, r7
 80027a4:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80027a8:	2b30      	cmp	r3, #48	; 0x30
 80027aa:	d0ec      	beq.n	8002786 <mg_dtoa+0x496>
  if (n > 0 && buf[s + n - 1] == '.') n--;           // Trim trailing dot
 80027ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	dd0c      	ble.n	80027cc <mg_dtoa+0x4dc>
 80027b2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80027b4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027b6:	4413      	add	r3, r2
 80027b8:	3b01      	subs	r3, #1
 80027ba:	3370      	adds	r3, #112	; 0x70
 80027bc:	443b      	add	r3, r7
 80027be:	f813 3c58 	ldrb.w	r3, [r3, #-88]
 80027c2:	2b2e      	cmp	r3, #46	; 0x2e
 80027c4:	d102      	bne.n	80027cc <mg_dtoa+0x4dc>
 80027c6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027c8:	3b01      	subs	r3, #1
 80027ca:	667b      	str	r3, [r7, #100]	; 0x64
  n += s;
 80027cc:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80027ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80027d0:	4413      	add	r3, r2
 80027d2:	667b      	str	r3, [r7, #100]	; 0x64
  if (n >= (int) sizeof(buf)) n = (int) sizeof(buf) - 1;
 80027d4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027d6:	2b27      	cmp	r3, #39	; 0x27
 80027d8:	dd01      	ble.n	80027de <mg_dtoa+0x4ee>
 80027da:	2327      	movs	r3, #39	; 0x27
 80027dc:	667b      	str	r3, [r7, #100]	; 0x64
  buf[n] = '\0';
 80027de:	f107 0218 	add.w	r2, r7, #24
 80027e2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80027e4:	4413      	add	r3, r2
 80027e6:	2200      	movs	r2, #0
 80027e8:	701a      	strb	r2, [r3, #0]
  return mg_snprintf(dst, dstlen, "%s", buf);
 80027ea:	f107 0318 	add.w	r3, r7, #24
 80027ee:	4a06      	ldr	r2, [pc, #24]	; (8002808 <mg_dtoa+0x518>)
 80027f0:	6939      	ldr	r1, [r7, #16]
 80027f2:	6978      	ldr	r0, [r7, #20]
 80027f4:	f006 fa02 	bl	8008bfc <mg_snprintf>
 80027f8:	4603      	mov	r3, r0
}
 80027fa:	4618      	mov	r0, r3
 80027fc:	3770      	adds	r7, #112	; 0x70
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
 8002802:	bf00      	nop
 8002804:	f3af 8000 	nop.w
 8002808:	08015568 	.word	0x08015568
 800280c:	9999999a 	.word	0x9999999a
 8002810:	3fb99999 	.word	0x3fb99999

08002814 <mg_lld>:

static size_t mg_lld(char *buf, int64_t val, bool is_signed, bool is_hex) {
 8002814:	b5b0      	push	{r4, r5, r7, lr}
 8002816:	b08c      	sub	sp, #48	; 0x30
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	e9c7 2300 	strd	r2, r3, [r7]
  const char *letters = "0123456789abcdef";
 8002820:	4b53      	ldr	r3, [pc, #332]	; (8002970 <mg_lld+0x15c>)
 8002822:	61bb      	str	r3, [r7, #24]
  uint64_t v = (uint64_t) val;
 8002824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002828:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  size_t s = 0, n, i;
 800282c:	2300      	movs	r3, #0
 800282e:	627b      	str	r3, [r7, #36]	; 0x24
  if (is_signed && val < 0) buf[s++] = '-', v = (uint64_t) (-val);
 8002830:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8002834:	2b00      	cmp	r3, #0
 8002836:	d012      	beq.n	800285e <mg_lld+0x4a>
 8002838:	e9d7 2300 	ldrd	r2, r3, [r7]
 800283c:	2b00      	cmp	r3, #0
 800283e:	da0e      	bge.n	800285e <mg_lld+0x4a>
 8002840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002842:	1c5a      	adds	r2, r3, #1
 8002844:	627a      	str	r2, [r7, #36]	; 0x24
 8002846:	68fa      	ldr	r2, [r7, #12]
 8002848:	4413      	add	r3, r2
 800284a:	222d      	movs	r2, #45	; 0x2d
 800284c:	701a      	strb	r2, [r3, #0]
 800284e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002852:	2100      	movs	r1, #0
 8002854:	4254      	negs	r4, r2
 8002856:	eb61 0503 	sbc.w	r5, r1, r3
 800285a:	e9c7 450a 	strd	r4, r5, [r7, #40]	; 0x28
  // This loop prints a number in reverse order. I guess this is because we
  // write numbers from right to left: least significant digit comes last.
  // Maybe because we use Arabic numbers, and Arabs write RTL?
  if (is_hex) {
 800285e:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8002862:	2b00      	cmp	r3, #0
 8002864:	d021      	beq.n	80028aa <mg_lld+0x96>
    for (n = 0; v; v >>= 4) buf[s + n++] = letters[v & 15];
 8002866:	2300      	movs	r3, #0
 8002868:	623b      	str	r3, [r7, #32]
 800286a:	e019      	b.n	80028a0 <mg_lld+0x8c>
 800286c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286e:	f003 030f 	and.w	r3, r3, #15
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	441a      	add	r2, r3
 8002876:	6a3b      	ldr	r3, [r7, #32]
 8002878:	1c59      	adds	r1, r3, #1
 800287a:	6239      	str	r1, [r7, #32]
 800287c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800287e:	440b      	add	r3, r1
 8002880:	68f9      	ldr	r1, [r7, #12]
 8002882:	440b      	add	r3, r1
 8002884:	7812      	ldrb	r2, [r2, #0]
 8002886:	701a      	strb	r2, [r3, #0]
 8002888:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800288c:	f04f 0200 	mov.w	r2, #0
 8002890:	f04f 0300 	mov.w	r3, #0
 8002894:	0902      	lsrs	r2, r0, #4
 8002896:	ea42 7201 	orr.w	r2, r2, r1, lsl #28
 800289a:	090b      	lsrs	r3, r1, #4
 800289c:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80028a0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028a4:	4313      	orrs	r3, r2
 80028a6:	d1e1      	bne.n	800286c <mg_lld+0x58>
 80028a8:	e025      	b.n	80028f6 <mg_lld+0xe2>
  } else {
    for (n = 0; v; v /= 10) buf[s + n++] = letters[v % 10];
 80028aa:	2300      	movs	r3, #0
 80028ac:	623b      	str	r3, [r7, #32]
 80028ae:	e01e      	b.n	80028ee <mg_lld+0xda>
 80028b0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028b4:	f04f 020a 	mov.w	r2, #10
 80028b8:	f04f 0300 	mov.w	r3, #0
 80028bc:	f7fd ff9c 	bl	80007f8 <__aeabi_uldivmod>
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	441a      	add	r2, r3
 80028c4:	6a3b      	ldr	r3, [r7, #32]
 80028c6:	1c59      	adds	r1, r3, #1
 80028c8:	6239      	str	r1, [r7, #32]
 80028ca:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80028cc:	440b      	add	r3, r1
 80028ce:	68f9      	ldr	r1, [r7, #12]
 80028d0:	440b      	add	r3, r1
 80028d2:	7812      	ldrb	r2, [r2, #0]
 80028d4:	701a      	strb	r2, [r3, #0]
 80028d6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80028da:	f04f 020a 	mov.w	r2, #10
 80028de:	f04f 0300 	mov.w	r3, #0
 80028e2:	f7fd ff89 	bl	80007f8 <__aeabi_uldivmod>
 80028e6:	4602      	mov	r2, r0
 80028e8:	460b      	mov	r3, r1
 80028ea:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 80028ee:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80028f2:	4313      	orrs	r3, r2
 80028f4:	d1dc      	bne.n	80028b0 <mg_lld+0x9c>
  }
  // Reverse a string
  for (i = 0; i < n / 2; i++) {
 80028f6:	2300      	movs	r3, #0
 80028f8:	61fb      	str	r3, [r7, #28]
 80028fa:	e022      	b.n	8002942 <mg_lld+0x12e>
    char t = buf[s + i];
 80028fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	68fa      	ldr	r2, [r7, #12]
 8002904:	4413      	add	r3, r2
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	75fb      	strb	r3, [r7, #23]
    buf[s + i] = buf[s + n - i - 1], buf[s + n - i - 1] = t;
 800290a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800290c:	6a3b      	ldr	r3, [r7, #32]
 800290e:	441a      	add	r2, r3
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	1ad3      	subs	r3, r2, r3
 8002914:	3b01      	subs	r3, #1
 8002916:	68fa      	ldr	r2, [r7, #12]
 8002918:	441a      	add	r2, r3
 800291a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800291c:	69fb      	ldr	r3, [r7, #28]
 800291e:	440b      	add	r3, r1
 8002920:	68f9      	ldr	r1, [r7, #12]
 8002922:	440b      	add	r3, r1
 8002924:	7812      	ldrb	r2, [r2, #0]
 8002926:	701a      	strb	r2, [r3, #0]
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	6a3b      	ldr	r3, [r7, #32]
 800292c:	441a      	add	r2, r3
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	3b01      	subs	r3, #1
 8002934:	68fa      	ldr	r2, [r7, #12]
 8002936:	4413      	add	r3, r2
 8002938:	7dfa      	ldrb	r2, [r7, #23]
 800293a:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < n / 2; i++) {
 800293c:	69fb      	ldr	r3, [r7, #28]
 800293e:	3301      	adds	r3, #1
 8002940:	61fb      	str	r3, [r7, #28]
 8002942:	6a3b      	ldr	r3, [r7, #32]
 8002944:	085b      	lsrs	r3, r3, #1
 8002946:	69fa      	ldr	r2, [r7, #28]
 8002948:	429a      	cmp	r2, r3
 800294a:	d3d7      	bcc.n	80028fc <mg_lld+0xe8>
  }
  if (val == 0) buf[n++] = '0';  // Handle special case
 800294c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002950:	4313      	orrs	r3, r2
 8002952:	d106      	bne.n	8002962 <mg_lld+0x14e>
 8002954:	6a3b      	ldr	r3, [r7, #32]
 8002956:	1c5a      	adds	r2, r3, #1
 8002958:	623a      	str	r2, [r7, #32]
 800295a:	68fa      	ldr	r2, [r7, #12]
 800295c:	4413      	add	r3, r2
 800295e:	2230      	movs	r2, #48	; 0x30
 8002960:	701a      	strb	r2, [r3, #0]
  return n + s;
 8002962:	6a3a      	ldr	r2, [r7, #32]
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	4413      	add	r3, r2
}
 8002968:	4618      	mov	r0, r3
 800296a:	3730      	adds	r7, #48	; 0x30
 800296c:	46bd      	mov	sp, r7
 800296e:	bdb0      	pop	{r4, r5, r7, pc}
 8002970:	08015584 	.word	0x08015584

08002974 <scpy>:

static size_t scpy(void (*out)(char, void *), void *ptr, char *buf,
                          size_t len) {
 8002974:	b580      	push	{r7, lr}
 8002976:	b086      	sub	sp, #24
 8002978:	af00      	add	r7, sp, #0
 800297a:	60f8      	str	r0, [r7, #12]
 800297c:	60b9      	str	r1, [r7, #8]
 800297e:	607a      	str	r2, [r7, #4]
 8002980:	603b      	str	r3, [r7, #0]
  size_t i = 0;
 8002982:	2300      	movs	r3, #0
 8002984:	617b      	str	r3, [r7, #20]
  while (i < len && buf[i] != '\0') out(buf[i++], ptr);
 8002986:	e009      	b.n	800299c <scpy+0x28>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	1c5a      	adds	r2, r3, #1
 800298c:	617a      	str	r2, [r7, #20]
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	4413      	add	r3, r2
 8002992:	781a      	ldrb	r2, [r3, #0]
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	68b9      	ldr	r1, [r7, #8]
 8002998:	4610      	mov	r0, r2
 800299a:	4798      	blx	r3
 800299c:	697a      	ldr	r2, [r7, #20]
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d205      	bcs.n	80029b0 <scpy+0x3c>
 80029a4:	687a      	ldr	r2, [r7, #4]
 80029a6:	697b      	ldr	r3, [r7, #20]
 80029a8:	4413      	add	r3, r2
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d1eb      	bne.n	8002988 <scpy+0x14>
  return i;
 80029b0:	697b      	ldr	r3, [r7, #20]
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3718      	adds	r7, #24
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <mg_xprintf>:

size_t mg_xprintf(void (*out)(char, void *), void *ptr, const char *fmt, ...) {
 80029ba:	b40c      	push	{r2, r3}
 80029bc:	b580      	push	{r7, lr}
 80029be:	b084      	sub	sp, #16
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 80029c6:	2300      	movs	r3, #0
 80029c8:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 80029ca:	f107 031c 	add.w	r3, r7, #28
 80029ce:	60bb      	str	r3, [r7, #8]
  len = mg_vxprintf(out, ptr, fmt, &ap);
 80029d0:	f107 0308 	add.w	r3, r7, #8
 80029d4:	69ba      	ldr	r2, [r7, #24]
 80029d6:	6839      	ldr	r1, [r7, #0]
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 f809 	bl	80029f0 <mg_vxprintf>
 80029de:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 80029e0:	68fb      	ldr	r3, [r7, #12]
}
 80029e2:	4618      	mov	r0, r3
 80029e4:	3710      	adds	r7, #16
 80029e6:	46bd      	mov	sp, r7
 80029e8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80029ec:	b002      	add	sp, #8
 80029ee:	4770      	bx	lr

080029f0 <mg_vxprintf>:

size_t mg_vxprintf(void (*out)(char, void *), void *param, const char *fmt,
                   va_list *ap) {
 80029f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80029f4:	b0a6      	sub	sp, #152	; 0x98
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	60b9      	str	r1, [r7, #8]
 80029fc:	607a      	str	r2, [r7, #4]
 80029fe:	603b      	str	r3, [r7, #0]
  size_t i = 0, n = 0;
 8002a00:	2300      	movs	r3, #0
 8002a02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a06:	2300      	movs	r3, #0
 8002a08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  while (fmt[i] != '\0') {
 8002a0c:	e383      	b.n	8003116 <mg_vxprintf+0x726>
    if (fmt[i] == '%') {
 8002a0e:	687a      	ldr	r2, [r7, #4]
 8002a10:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a14:	4413      	add	r3, r2
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b25      	cmp	r3, #37	; 0x25
 8002a1a:	f040 8369 	bne.w	80030f0 <mg_vxprintf+0x700>
      size_t j, k, x = 0, is_long = 0, w = 0 /* width */, pr = ~0U /* prec */;
 8002a1e:	2300      	movs	r3, #0
 8002a20:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a22:	2300      	movs	r3, #0
 8002a24:	67bb      	str	r3, [r7, #120]	; 0x78
 8002a26:	2300      	movs	r3, #0
 8002a28:	677b      	str	r3, [r7, #116]	; 0x74
 8002a2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002a2e:	673b      	str	r3, [r7, #112]	; 0x70
      char pad = ' ', minus = 0, c = fmt[++i];
 8002a30:	2320      	movs	r3, #32
 8002a32:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002a36:	2300      	movs	r3, #0
 8002a38:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002a3c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a40:	3301      	adds	r3, #1
 8002a42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a4c:	4413      	add	r3, r2
 8002a4e:	781b      	ldrb	r3, [r3, #0]
 8002a50:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '#') x++, c = fmt[++i];
 8002a54:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002a58:	2b23      	cmp	r3, #35	; 0x23
 8002a5a:	d10e      	bne.n	8002a7a <mg_vxprintf+0x8a>
 8002a5c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002a5e:	3301      	adds	r3, #1
 8002a60:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002a62:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a66:	3301      	adds	r3, #1
 8002a68:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a6c:	687a      	ldr	r2, [r7, #4]
 8002a6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a72:	4413      	add	r3, r2
 8002a74:	781b      	ldrb	r3, [r3, #0]
 8002a76:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '-') minus++, c = fmt[++i];
 8002a7a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002a7e:	2b2d      	cmp	r3, #45	; 0x2d
 8002a80:	d110      	bne.n	8002aa4 <mg_vxprintf+0xb4>
 8002a82:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002a86:	3301      	adds	r3, #1
 8002a88:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8002a8c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a90:	3301      	adds	r3, #1
 8002a92:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002a96:	687a      	ldr	r2, [r7, #4]
 8002a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002a9c:	4413      	add	r3, r2
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      if (c == '0') pad = '0', c = fmt[++i];
 8002aa4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002aa8:	2b30      	cmp	r3, #48	; 0x30
 8002aaa:	d127      	bne.n	8002afc <mg_vxprintf+0x10c>
 8002aac:	2330      	movs	r3, #48	; 0x30
 8002aae:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8002ab2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ab6:	3301      	adds	r3, #1
 8002ab8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ac2:	4413      	add	r3, r2
 8002ac4:	781b      	ldrb	r3, [r3, #0]
 8002ac6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      while (is_digit(c)) w *= 10, w += (size_t) (c - '0'), c = fmt[++i];
 8002aca:	e017      	b.n	8002afc <mg_vxprintf+0x10c>
 8002acc:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	005b      	lsls	r3, r3, #1
 8002ad6:	677b      	str	r3, [r7, #116]	; 0x74
 8002ad8:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002adc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ade:	4413      	add	r3, r2
 8002ae0:	3b30      	subs	r3, #48	; 0x30
 8002ae2:	677b      	str	r3, [r7, #116]	; 0x74
 8002ae4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ae8:	3301      	adds	r3, #1
 8002aea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002aee:	687a      	ldr	r2, [r7, #4]
 8002af0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002af4:	4413      	add	r3, r2
 8002af6:	781b      	ldrb	r3, [r3, #0]
 8002af8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002afc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7ff fb07 	bl	8002114 <is_digit>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1df      	bne.n	8002acc <mg_vxprintf+0xdc>
      if (c == '.') {
 8002b0c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b10:	2b2e      	cmp	r3, #46	; 0x2e
 8002b12:	d153      	bne.n	8002bbc <mg_vxprintf+0x1cc>
        c = fmt[++i];
 8002b14:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b18:	3301      	adds	r3, #1
 8002b1a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b1e:	687a      	ldr	r2, [r7, #4]
 8002b20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b24:	4413      	add	r3, r2
 8002b26:	781b      	ldrb	r3, [r3, #0]
 8002b28:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == '*') {
 8002b2c:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b30:	2b2a      	cmp	r3, #42	; 0x2a
 8002b32:	d113      	bne.n	8002b5c <mg_vxprintf+0x16c>
          pr = (size_t) va_arg(*ap, int);
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	1d19      	adds	r1, r3, #4
 8002b3a:	683a      	ldr	r2, [r7, #0]
 8002b3c:	6011      	str	r1, [r2, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	673b      	str	r3, [r7, #112]	; 0x70
          c = fmt[++i];
 8002b42:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b46:	3301      	adds	r3, #1
 8002b48:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b4c:	687a      	ldr	r2, [r7, #4]
 8002b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b52:	4413      	add	r3, r2
 8002b54:	781b      	ldrb	r3, [r3, #0]
 8002b56:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002b5a:	e02f      	b.n	8002bbc <mg_vxprintf+0x1cc>
        } else {
          pr = 0;
 8002b5c:	2300      	movs	r3, #0
 8002b5e:	673b      	str	r3, [r7, #112]	; 0x70
          while (is_digit(c)) pr *= 10, pr += (size_t) (c - '0'), c = fmt[++i];
 8002b60:	e017      	b.n	8002b92 <mg_vxprintf+0x1a2>
 8002b62:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002b64:	4613      	mov	r3, r2
 8002b66:	009b      	lsls	r3, r3, #2
 8002b68:	4413      	add	r3, r2
 8002b6a:	005b      	lsls	r3, r3, #1
 8002b6c:	673b      	str	r3, [r7, #112]	; 0x70
 8002b6e:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 8002b72:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b74:	4413      	add	r3, r2
 8002b76:	3b30      	subs	r3, #48	; 0x30
 8002b78:	673b      	str	r3, [r7, #112]	; 0x70
 8002b7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b7e:	3301      	adds	r3, #1
 8002b80:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b84:	687a      	ldr	r2, [r7, #4]
 8002b86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002b8a:	4413      	add	r3, r2
 8002b8c:	781b      	ldrb	r3, [r3, #0]
 8002b8e:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002b92:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7ff fabc 	bl	8002114 <is_digit>
 8002b9c:	4603      	mov	r3, r0
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d1df      	bne.n	8002b62 <mg_vxprintf+0x172>
        }
      }
      while (c == 'h') c = fmt[++i];  // Treat h and hh as int
 8002ba2:	e00b      	b.n	8002bbc <mg_vxprintf+0x1cc>
 8002ba4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002ba8:	3301      	adds	r3, #1
 8002baa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002bae:	687a      	ldr	r2, [r7, #4]
 8002bb0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bb4:	4413      	add	r3, r2
 8002bb6:	781b      	ldrb	r3, [r3, #0]
 8002bb8:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8002bbc:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002bc0:	2b68      	cmp	r3, #104	; 0x68
 8002bc2:	d0ef      	beq.n	8002ba4 <mg_vxprintf+0x1b4>
      if (c == 'l') {
 8002bc4:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002bc8:	2b6c      	cmp	r3, #108	; 0x6c
 8002bca:	d121      	bne.n	8002c10 <mg_vxprintf+0x220>
        is_long++, c = fmt[++i];
 8002bcc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bce:	3301      	adds	r3, #1
 8002bd0:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bd2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bd6:	3301      	adds	r3, #1
 8002bd8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002bdc:	687a      	ldr	r2, [r7, #4]
 8002bde:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002be2:	4413      	add	r3, r2
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
        if (c == 'l') is_long++, c = fmt[++i];
 8002bea:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002bee:	2b6c      	cmp	r3, #108	; 0x6c
 8002bf0:	d10e      	bne.n	8002c10 <mg_vxprintf+0x220>
 8002bf2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002bf4:	3301      	adds	r3, #1
 8002bf6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bf8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002c02:	687a      	ldr	r2, [r7, #4]
 8002c04:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002c08:	4413      	add	r3, r2
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
      }
      if (c == 'p') x = 1, is_long = 1;
 8002c10:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c14:	2b70      	cmp	r3, #112	; 0x70
 8002c16:	d103      	bne.n	8002c20 <mg_vxprintf+0x230>
 8002c18:	2301      	movs	r3, #1
 8002c1a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	67bb      	str	r3, [r7, #120]	; 0x78
      if (c == 'd' || c == 'u' || c == 'x' || c == 'X' || c == 'p' ||
 8002c20:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c24:	2b64      	cmp	r3, #100	; 0x64
 8002c26:	d018      	beq.n	8002c5a <mg_vxprintf+0x26a>
 8002c28:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c2c:	2b75      	cmp	r3, #117	; 0x75
 8002c2e:	d014      	beq.n	8002c5a <mg_vxprintf+0x26a>
 8002c30:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c34:	2b78      	cmp	r3, #120	; 0x78
 8002c36:	d010      	beq.n	8002c5a <mg_vxprintf+0x26a>
 8002c38:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c3c:	2b58      	cmp	r3, #88	; 0x58
 8002c3e:	d00c      	beq.n	8002c5a <mg_vxprintf+0x26a>
 8002c40:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c44:	2b70      	cmp	r3, #112	; 0x70
 8002c46:	d008      	beq.n	8002c5a <mg_vxprintf+0x26a>
 8002c48:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c4c:	2b67      	cmp	r3, #103	; 0x67
 8002c4e:	d004      	beq.n	8002c5a <mg_vxprintf+0x26a>
          c == 'g' || c == 'f') {
 8002c50:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c54:	2b66      	cmp	r3, #102	; 0x66
 8002c56:	f040 816c 	bne.w	8002f32 <mg_vxprintf+0x542>
        bool s = (c == 'd'), h = (c == 'x' || c == 'X' || c == 'p');
 8002c5a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c5e:	2b64      	cmp	r3, #100	; 0x64
 8002c60:	bf0c      	ite	eq
 8002c62:	2301      	moveq	r3, #1
 8002c64:	2300      	movne	r3, #0
 8002c66:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8002c6a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c6e:	2b78      	cmp	r3, #120	; 0x78
 8002c70:	d007      	beq.n	8002c82 <mg_vxprintf+0x292>
 8002c72:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c76:	2b58      	cmp	r3, #88	; 0x58
 8002c78:	d003      	beq.n	8002c82 <mg_vxprintf+0x292>
 8002c7a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002c7e:	2b70      	cmp	r3, #112	; 0x70
 8002c80:	d101      	bne.n	8002c86 <mg_vxprintf+0x296>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <mg_vxprintf+0x298>
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8002c8c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
        char tmp[40];
        size_t xl = x ? 2 : 0;
 8002c98:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d001      	beq.n	8002ca2 <mg_vxprintf+0x2b2>
 8002c9e:	2302      	movs	r3, #2
 8002ca0:	e000      	b.n	8002ca4 <mg_vxprintf+0x2b4>
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	65bb      	str	r3, [r7, #88]	; 0x58
        if (c == 'g' || c == 'f') {
 8002ca6:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002caa:	2b67      	cmp	r3, #103	; 0x67
 8002cac:	d003      	beq.n	8002cb6 <mg_vxprintf+0x2c6>
 8002cae:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002cb2:	2b66      	cmp	r3, #102	; 0x66
 8002cb4:	d124      	bne.n	8002d00 <mg_vxprintf+0x310>
          double v = va_arg(*ap, double);
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	3307      	adds	r3, #7
 8002cbc:	f023 0307 	bic.w	r3, r3, #7
 8002cc0:	f103 0108 	add.w	r1, r3, #8
 8002cc4:	683a      	ldr	r2, [r7, #0]
 8002cc6:	6011      	str	r1, [r2, #0]
 8002cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ccc:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
          if (pr == ~0U) pr = 6;
 8002cd0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002cd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cd6:	d101      	bne.n	8002cdc <mg_vxprintf+0x2ec>
 8002cd8:	2306      	movs	r3, #6
 8002cda:	673b      	str	r3, [r7, #112]	; 0x70
          k = mg_dtoa(tmp, sizeof(tmp), v, (int) pr, c == 'g');
 8002cdc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8002cde:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002ce2:	2b67      	cmp	r3, #103	; 0x67
 8002ce4:	bf0c      	ite	eq
 8002ce6:	2301      	moveq	r3, #1
 8002ce8:	2300      	movne	r3, #0
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	f107 0014 	add.w	r0, r7, #20
 8002cf0:	ed97 0b10 	vldr	d0, [r7, #64]	; 0x40
 8002cf4:	2128      	movs	r1, #40	; 0x28
 8002cf6:	f7ff fafb 	bl	80022f0 <mg_dtoa>
 8002cfa:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        if (c == 'g' || c == 'f') {
 8002cfe:	e069      	b.n	8002dd4 <mg_vxprintf+0x3e4>
        } else if (is_long == 2) {
 8002d00:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d11c      	bne.n	8002d40 <mg_vxprintf+0x350>
          int64_t v = va_arg(*ap, int64_t);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	3307      	adds	r3, #7
 8002d0c:	f023 0307 	bic.w	r3, r3, #7
 8002d10:	f103 0108 	add.w	r1, r3, #8
 8002d14:	683a      	ldr	r2, [r7, #0]
 8002d16:	6011      	str	r1, [r2, #0]
 8002d18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1c:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
          k = mg_lld(tmp, v, s, h);
 8002d20:	f107 0114 	add.w	r1, r7, #20
 8002d24:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002d28:	9301      	str	r3, [sp, #4]
 8002d2a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d2e:	9300      	str	r3, [sp, #0]
 8002d30:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002d34:	4608      	mov	r0, r1
 8002d36:	f7ff fd6d 	bl	8002814 <mg_lld>
 8002d3a:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002d3e:	e049      	b.n	8002dd4 <mg_vxprintf+0x3e4>
        } else if (is_long == 1) {
 8002d40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d42:	2b01      	cmp	r3, #1
 8002d44:	d123      	bne.n	8002d8e <mg_vxprintf+0x39e>
          long v = va_arg(*ap, long);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	1d19      	adds	r1, r3, #4
 8002d4c:	683a      	ldr	r2, [r7, #0]
 8002d4e:	6011      	str	r1, [r2, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	653b      	str	r3, [r7, #80]	; 0x50
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned long) v, s, h);
 8002d54:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d004      	beq.n	8002d66 <mg_vxprintf+0x376>
 8002d5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d5e:	17da      	asrs	r2, r3, #31
 8002d60:	461c      	mov	r4, r3
 8002d62:	4615      	mov	r5, r2
 8002d64:	e003      	b.n	8002d6e <mg_vxprintf+0x37e>
 8002d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002d68:	2200      	movs	r2, #0
 8002d6a:	461c      	mov	r4, r3
 8002d6c:	4615      	mov	r5, r2
 8002d6e:	f107 0114 	add.w	r1, r7, #20
 8002d72:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002d76:	9301      	str	r3, [sp, #4]
 8002d78:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002d7c:	9300      	str	r3, [sp, #0]
 8002d7e:	4622      	mov	r2, r4
 8002d80:	462b      	mov	r3, r5
 8002d82:	4608      	mov	r0, r1
 8002d84:	f7ff fd46 	bl	8002814 <mg_lld>
 8002d88:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
 8002d8c:	e022      	b.n	8002dd4 <mg_vxprintf+0x3e4>
        } else {
          int v = va_arg(*ap, int);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	1d19      	adds	r1, r3, #4
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	6011      	str	r1, [r2, #0]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	657b      	str	r3, [r7, #84]	; 0x54
          k = mg_lld(tmp, s ? (int64_t) v : (int64_t) (unsigned) v, s, h);
 8002d9c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d004      	beq.n	8002dae <mg_vxprintf+0x3be>
 8002da4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002da6:	17da      	asrs	r2, r3, #31
 8002da8:	4698      	mov	r8, r3
 8002daa:	4691      	mov	r9, r2
 8002dac:	e003      	b.n	8002db6 <mg_vxprintf+0x3c6>
 8002dae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002db0:	2200      	movs	r2, #0
 8002db2:	4698      	mov	r8, r3
 8002db4:	4691      	mov	r9, r2
 8002db6:	f107 0114 	add.w	r1, r7, #20
 8002dba:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8002dbe:	9301      	str	r3, [sp, #4]
 8002dc0:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8002dc4:	9300      	str	r3, [sp, #0]
 8002dc6:	4642      	mov	r2, r8
 8002dc8:	464b      	mov	r3, r9
 8002dca:	4608      	mov	r0, r1
 8002dcc:	f7ff fd22 	bl	8002814 <mg_lld>
 8002dd0:	f8c7 0080 	str.w	r0, [r7, #128]	; 0x80
        }
        for (j = 0; j < xl && w > 0; j++) w--;
 8002dd4:	2300      	movs	r3, #0
 8002dd6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dda:	e007      	b.n	8002dec <mg_vxprintf+0x3fc>
 8002ddc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002dde:	3b01      	subs	r3, #1
 8002de0:	677b      	str	r3, [r7, #116]	; 0x74
 8002de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002de6:	3301      	adds	r3, #1
 8002de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002dec:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002df0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d202      	bcs.n	8002dfc <mg_vxprintf+0x40c>
 8002df6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d1ef      	bne.n	8002ddc <mg_vxprintf+0x3ec>
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e02:	e011      	b.n	8002e28 <mg_vxprintf+0x438>
          n += scpy(out, param, &pad, 1);
 8002e04:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002e08:	2301      	movs	r3, #1
 8002e0a:	68b9      	ldr	r1, [r7, #8]
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff fdb1 	bl	8002974 <scpy>
 8002e12:	4602      	mov	r2, r0
 8002e14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e18:	4413      	add	r3, r2
 8002e1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && !minus && k < w && j + k < w; j++)
 8002e1e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e22:	3301      	adds	r3, #1
 8002e24:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e28:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e2c:	2b20      	cmp	r3, #32
 8002e2e:	d110      	bne.n	8002e52 <mg_vxprintf+0x462>
 8002e30:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10c      	bne.n	8002e52 <mg_vxprintf+0x462>
 8002e38:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002e3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d207      	bcs.n	8002e52 <mg_vxprintf+0x462>
 8002e42:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002e46:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002e4a:	4413      	add	r3, r2
 8002e4c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002e4e:	429a      	cmp	r2, r3
 8002e50:	d8d8      	bhi.n	8002e04 <mg_vxprintf+0x414>
        n += scpy(out, param, (char *) "0x", xl);
 8002e52:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002e54:	4ab7      	ldr	r2, [pc, #732]	; (8003134 <mg_vxprintf+0x744>)
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f7ff fd8b 	bl	8002974 <scpy>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e64:	4413      	add	r3, r2
 8002e66:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e70:	e011      	b.n	8002e96 <mg_vxprintf+0x4a6>
          n += scpy(out, param, &pad, 1);
 8002e72:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002e76:	2301      	movs	r3, #1
 8002e78:	68b9      	ldr	r1, [r7, #8]
 8002e7a:	68f8      	ldr	r0, [r7, #12]
 8002e7c:	f7ff fd7a 	bl	8002974 <scpy>
 8002e80:	4602      	mov	r2, r0
 8002e82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002e86:	4413      	add	r3, r2
 8002e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == '0' && k < w && j + k < w; j++)
 8002e8c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002e90:	3301      	adds	r3, #1
 8002e92:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002e96:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002e9a:	2b30      	cmp	r3, #48	; 0x30
 8002e9c:	d10c      	bne.n	8002eb8 <mg_vxprintf+0x4c8>
 8002e9e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d207      	bcs.n	8002eb8 <mg_vxprintf+0x4c8>
 8002ea8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002eac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002eb0:	4413      	add	r3, r2
 8002eb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002eb4:	429a      	cmp	r2, r3
 8002eb6:	d8dc      	bhi.n	8002e72 <mg_vxprintf+0x482>
        n += scpy(out, param, tmp, k);
 8002eb8:	f107 0214 	add.w	r2, r7, #20
 8002ebc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002ec0:	68b9      	ldr	r1, [r7, #8]
 8002ec2:	68f8      	ldr	r0, [r7, #12]
 8002ec4:	f7ff fd56 	bl	8002974 <scpy>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ece:	4413      	add	r3, r2
 8002ed0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002ed4:	2300      	movs	r3, #0
 8002ed6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002eda:	e011      	b.n	8002f00 <mg_vxprintf+0x510>
          n += scpy(out, param, &pad, 1);
 8002edc:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8002ee0:	2301      	movs	r3, #1
 8002ee2:	68b9      	ldr	r1, [r7, #8]
 8002ee4:	68f8      	ldr	r0, [r7, #12]
 8002ee6:	f7ff fd45 	bl	8002974 <scpy>
 8002eea:	4602      	mov	r2, r0
 8002eec:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002ef0:	4413      	add	r3, r2
 8002ef2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; pad == ' ' && minus && k < w && j + k < w; j++)
 8002ef6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002efa:	3301      	adds	r3, #1
 8002efc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002f00:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8002f04:	2b20      	cmp	r3, #32
 8002f06:	f040 80ea 	bne.w	80030de <mg_vxprintf+0x6ee>
 8002f0a:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	f000 80e5 	beq.w	80030de <mg_vxprintf+0x6ee>
 8002f14:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002f18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	f080 80df 	bcs.w	80030de <mg_vxprintf+0x6ee>
 8002f20:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8002f24:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002f28:	4413      	add	r3, r2
 8002f2a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d8d5      	bhi.n	8002edc <mg_vxprintf+0x4ec>
          c == 'g' || c == 'f') {
 8002f30:	e0d5      	b.n	80030de <mg_vxprintf+0x6ee>
      } else if (c == 'm' || c == 'M') {
 8002f32:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f36:	2b6d      	cmp	r3, #109	; 0x6d
 8002f38:	d003      	beq.n	8002f42 <mg_vxprintf+0x552>
 8002f3a:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f3e:	2b4d      	cmp	r3, #77	; 0x4d
 8002f40:	d128      	bne.n	8002f94 <mg_vxprintf+0x5a4>
        mg_pm_t f = va_arg(*ap, mg_pm_t);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	1d19      	adds	r1, r3, #4
 8002f48:	683a      	ldr	r2, [r7, #0]
 8002f4a:	6011      	str	r1, [r2, #0]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	663b      	str	r3, [r7, #96]	; 0x60
        if (c == 'm') out('"', param);
 8002f50:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f54:	2b6d      	cmp	r3, #109	; 0x6d
 8002f56:	d103      	bne.n	8002f60 <mg_vxprintf+0x570>
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68b9      	ldr	r1, [r7, #8]
 8002f5c:	2022      	movs	r0, #34	; 0x22
 8002f5e:	4798      	blx	r3
        n += f(out, param, ap);
 8002f60:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002f62:	683a      	ldr	r2, [r7, #0]
 8002f64:	68b9      	ldr	r1, [r7, #8]
 8002f66:	68f8      	ldr	r0, [r7, #12]
 8002f68:	4798      	blx	r3
 8002f6a:	4602      	mov	r2, r0
 8002f6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f70:	4413      	add	r3, r2
 8002f72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        if (c == 'm') n += 2, out('"', param);
 8002f76:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f7a:	2b6d      	cmp	r3, #109	; 0x6d
 8002f7c:	f040 80b1 	bne.w	80030e2 <mg_vxprintf+0x6f2>
 8002f80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002f84:	3302      	adds	r3, #2
 8002f86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	68b9      	ldr	r1, [r7, #8]
 8002f8e:	2022      	movs	r0, #34	; 0x22
 8002f90:	4798      	blx	r3
      } else if (c == 'm' || c == 'M') {
 8002f92:	e0a6      	b.n	80030e2 <mg_vxprintf+0x6f2>
      } else if (c == 'c') {
 8002f94:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002f98:	2b63      	cmp	r3, #99	; 0x63
 8002f9a:	d112      	bne.n	8002fc2 <mg_vxprintf+0x5d2>
        int ch = va_arg(*ap, int);
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	1d19      	adds	r1, r3, #4
 8002fa2:	683a      	ldr	r2, [r7, #0]
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	667b      	str	r3, [r7, #100]	; 0x64
        out((char) ch, param);
 8002faa:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002fac:	b2da      	uxtb	r2, r3
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	68b9      	ldr	r1, [r7, #8]
 8002fb2:	4610      	mov	r0, r2
 8002fb4:	4798      	blx	r3
        n++;
 8002fb6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002fba:	3301      	adds	r3, #1
 8002fbc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002fc0:	e090      	b.n	80030e4 <mg_vxprintf+0x6f4>
      } else if (c == 's') {
 8002fc2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 8002fc6:	2b73      	cmp	r3, #115	; 0x73
 8002fc8:	d16b      	bne.n	80030a2 <mg_vxprintf+0x6b2>
        char *p = va_arg(*ap, char *);
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	1d19      	adds	r1, r3, #4
 8002fd0:	683a      	ldr	r2, [r7, #0]
 8002fd2:	6011      	str	r1, [r2, #0]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	66bb      	str	r3, [r7, #104]	; 0x68
        if (pr == ~0U) pr = p == NULL ? 0 : strlen(p);
 8002fd8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fde:	d109      	bne.n	8002ff4 <mg_vxprintf+0x604>
 8002fe0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d004      	beq.n	8002ff0 <mg_vxprintf+0x600>
 8002fe6:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8002fe8:	f7fd f9f2 	bl	80003d0 <strlen>
 8002fec:	4603      	mov	r3, r0
 8002fee:	e000      	b.n	8002ff2 <mg_vxprintf+0x602>
 8002ff0:	2300      	movs	r3, #0
 8002ff2:	673b      	str	r3, [r7, #112]	; 0x70
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002ffa:	e011      	b.n	8003020 <mg_vxprintf+0x630>
          n += scpy(out, param, &pad, 1);
 8002ffc:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8003000:	2301      	movs	r3, #1
 8003002:	68b9      	ldr	r1, [r7, #8]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f7ff fcb5 	bl	8002974 <scpy>
 800300a:	4602      	mov	r2, r0
 800300c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003010:	4413      	add	r3, r2
 8003012:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; !minus && pr < w && j + pr < w; j++)
 8003016:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800301a:	3301      	adds	r3, #1
 800301c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003020:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003024:	2b00      	cmp	r3, #0
 8003026:	d10a      	bne.n	800303e <mg_vxprintf+0x64e>
 8003028:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800302a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800302c:	429a      	cmp	r2, r3
 800302e:	d206      	bcs.n	800303e <mg_vxprintf+0x64e>
 8003030:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003034:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003036:	4413      	add	r3, r2
 8003038:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800303a:	429a      	cmp	r2, r3
 800303c:	d8de      	bhi.n	8002ffc <mg_vxprintf+0x60c>
        n += scpy(out, param, p, pr);
 800303e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003040:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003042:	68b9      	ldr	r1, [r7, #8]
 8003044:	68f8      	ldr	r0, [r7, #12]
 8003046:	f7ff fc95 	bl	8002974 <scpy>
 800304a:	4602      	mov	r2, r0
 800304c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003050:	4413      	add	r3, r2
 8003052:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003056:	2300      	movs	r3, #0
 8003058:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800305c:	e011      	b.n	8003082 <mg_vxprintf+0x692>
          n += scpy(out, param, &pad, 1);
 800305e:	f107 023f 	add.w	r2, r7, #63	; 0x3f
 8003062:	2301      	movs	r3, #1
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	68f8      	ldr	r0, [r7, #12]
 8003068:	f7ff fc84 	bl	8002974 <scpy>
 800306c:	4602      	mov	r2, r0
 800306e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003072:	4413      	add	r3, r2
 8003074:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
        for (j = 0; minus && pr < w && j + pr < w; j++)
 8003078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800307c:	3301      	adds	r3, #1
 800307e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003082:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8003086:	2b00      	cmp	r3, #0
 8003088:	d02c      	beq.n	80030e4 <mg_vxprintf+0x6f4>
 800308a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800308c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800308e:	429a      	cmp	r2, r3
 8003090:	d228      	bcs.n	80030e4 <mg_vxprintf+0x6f4>
 8003092:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8003096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003098:	4413      	add	r3, r2
 800309a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800309c:	429a      	cmp	r2, r3
 800309e:	d8de      	bhi.n	800305e <mg_vxprintf+0x66e>
 80030a0:	e020      	b.n	80030e4 <mg_vxprintf+0x6f4>
      } else if (c == '%') {
 80030a2:	f897 306e 	ldrb.w	r3, [r7, #110]	; 0x6e
 80030a6:	2b25      	cmp	r3, #37	; 0x25
 80030a8:	d109      	bne.n	80030be <mg_vxprintf+0x6ce>
        out('%', param);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	68b9      	ldr	r1, [r7, #8]
 80030ae:	2025      	movs	r0, #37	; 0x25
 80030b0:	4798      	blx	r3
        n++;
 80030b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030b6:	3301      	adds	r3, #1
 80030b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030bc:	e012      	b.n	80030e4 <mg_vxprintf+0x6f4>
      } else {
        out('%', param);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	68b9      	ldr	r1, [r7, #8]
 80030c2:	2025      	movs	r0, #37	; 0x25
 80030c4:	4798      	blx	r3
        out(c, param);
 80030c6:	f897 206e 	ldrb.w	r2, [r7, #110]	; 0x6e
 80030ca:	68fb      	ldr	r3, [r7, #12]
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	4610      	mov	r0, r2
 80030d0:	4798      	blx	r3
        n += 2;
 80030d2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80030d6:	3302      	adds	r3, #2
 80030d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80030dc:	e002      	b.n	80030e4 <mg_vxprintf+0x6f4>
          c == 'g' || c == 'f') {
 80030de:	bf00      	nop
 80030e0:	e000      	b.n	80030e4 <mg_vxprintf+0x6f4>
      } else if (c == 'm' || c == 'M') {
 80030e2:	bf00      	nop
      }
      i++;
 80030e4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030e8:	3301      	adds	r3, #1
 80030ea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80030ee:	e012      	b.n	8003116 <mg_vxprintf+0x726>
    } else {
      out(fmt[i], param), n++, i++;
 80030f0:	687a      	ldr	r2, [r7, #4]
 80030f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80030f6:	4413      	add	r3, r2
 80030f8:	781a      	ldrb	r2, [r3, #0]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	68b9      	ldr	r1, [r7, #8]
 80030fe:	4610      	mov	r0, r2
 8003100:	4798      	blx	r3
 8003102:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003106:	3301      	adds	r3, #1
 8003108:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800310c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003110:	3301      	adds	r3, #1
 8003112:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  while (fmt[i] != '\0') {
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800311c:	4413      	add	r3, r2
 800311e:	781b      	ldrb	r3, [r3, #0]
 8003120:	2b00      	cmp	r3, #0
 8003122:	f47f ac74 	bne.w	8002a0e <mg_vxprintf+0x1e>
    }
  }
  return n;
 8003126:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800312a:	4618      	mov	r0, r3
 800312c:	3790      	adds	r7, #144	; 0x90
 800312e:	46bd      	mov	sp, r7
 8003130:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003134:	08015598 	.word	0x08015598

08003138 <mg_fs_open>:
#line 1 "src/fs.c"
#endif



struct mg_fd *mg_fs_open(struct mg_fs *fs, const char *path, int flags) {
 8003138:	b580      	push	{r7, lr}
 800313a:	b086      	sub	sp, #24
 800313c:	af00      	add	r7, sp, #0
 800313e:	60f8      	str	r0, [r7, #12]
 8003140:	60b9      	str	r1, [r7, #8]
 8003142:	607a      	str	r2, [r7, #4]
  struct mg_fd *fd = (struct mg_fd *) calloc(1, sizeof(*fd));
 8003144:	2108      	movs	r1, #8
 8003146:	2001      	movs	r0, #1
 8003148:	f010 fefa 	bl	8013f40 <calloc>
 800314c:	4603      	mov	r3, r0
 800314e:	617b      	str	r3, [r7, #20]
  if (fd != NULL) {
 8003150:	697b      	ldr	r3, [r7, #20]
 8003152:	2b00      	cmp	r3, #0
 8003154:	d013      	beq.n	800317e <mg_fs_open+0x46>
    fd->fd = fs->op(path, flags);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	689b      	ldr	r3, [r3, #8]
 800315a:	6879      	ldr	r1, [r7, #4]
 800315c:	68b8      	ldr	r0, [r7, #8]
 800315e:	4798      	blx	r3
 8003160:	4602      	mov	r2, r0
 8003162:	697b      	ldr	r3, [r7, #20]
 8003164:	601a      	str	r2, [r3, #0]
    fd->fs = fs;
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	68fa      	ldr	r2, [r7, #12]
 800316a:	605a      	str	r2, [r3, #4]
    if (fd->fd == NULL) {
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2b00      	cmp	r3, #0
 8003172:	d104      	bne.n	800317e <mg_fs_open+0x46>
      free(fd);
 8003174:	6978      	ldr	r0, [r7, #20]
 8003176:	f010 ff09 	bl	8013f8c <free>
      fd = NULL;
 800317a:	2300      	movs	r3, #0
 800317c:	617b      	str	r3, [r7, #20]
    }
  }
  return fd;
 800317e:	697b      	ldr	r3, [r7, #20]
}
 8003180:	4618      	mov	r0, r3
 8003182:	3718      	adds	r7, #24
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <mg_fs_close>:

void mg_fs_close(struct mg_fd *fd) {
 8003188:	b580      	push	{r7, lr}
 800318a:	b082      	sub	sp, #8
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  if (fd != NULL) {
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2b00      	cmp	r3, #0
 8003194:	d009      	beq.n	80031aa <mg_fs_close+0x22>
    fd->fs->cl(fd->fd);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	685b      	ldr	r3, [r3, #4]
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	6812      	ldr	r2, [r2, #0]
 80031a0:	4610      	mov	r0, r2
 80031a2:	4798      	blx	r3
    free(fd);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f010 fef1 	bl	8013f8c <free>
  }
}
 80031aa:	bf00      	nop
 80031ac:	3708      	adds	r7, #8
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd80      	pop	{r7, pc}

080031b2 <is_dir_prefix>:
  (void) no;
  return NULL;
}
#endif

static int is_dir_prefix(const char *prefix, size_t n, const char *path) {
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b084      	sub	sp, #16
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s] [%s] %c", (int) n, prefix, path, path[n]));
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f7fd f906 	bl	80003d0 <strlen>
 80031c4:	4602      	mov	r2, r0
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d219      	bcs.n	8003200 <is_dir_prefix+0x4e>
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	6879      	ldr	r1, [r7, #4]
 80031d0:	68f8      	ldr	r0, [r7, #12]
 80031d2:	f011 fae2 	bl	801479a <strncmp>
 80031d6:	4603      	mov	r3, r0
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d111      	bne.n	8003200 <is_dir_prefix+0x4e>
 80031dc:	68bb      	ldr	r3, [r7, #8]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d00c      	beq.n	80031fc <is_dir_prefix+0x4a>
         (n == 0 || path[n] == '/' || path[n - 1] == '/');
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	4413      	add	r3, r2
 80031e8:	781b      	ldrb	r3, [r3, #0]
 80031ea:	2b2f      	cmp	r3, #47	; 0x2f
 80031ec:	d006      	beq.n	80031fc <is_dir_prefix+0x4a>
 80031ee:	68bb      	ldr	r3, [r7, #8]
 80031f0:	3b01      	subs	r3, #1
 80031f2:	687a      	ldr	r2, [r7, #4]
 80031f4:	4413      	add	r3, r2
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b2f      	cmp	r3, #47	; 0x2f
 80031fa:	d101      	bne.n	8003200 <is_dir_prefix+0x4e>
  return n < strlen(path) && strncmp(prefix, path, n) == 0 &&
 80031fc:	2301      	movs	r3, #1
 80031fe:	e000      	b.n	8003202 <is_dir_prefix+0x50>
 8003200:	2300      	movs	r3, #0
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <packed_stat>:

static int packed_stat(const char *path, size_t *size, time_t *mtime) {
 800320a:	b580      	push	{r7, lr}
 800320c:	b088      	sub	sp, #32
 800320e:	af00      	add	r7, sp, #0
 8003210:	60f8      	str	r0, [r7, #12]
 8003212:	60b9      	str	r1, [r7, #8]
 8003214:	607a      	str	r2, [r7, #4]
  const char *p;
  size_t i, n = strlen(path);
 8003216:	68f8      	ldr	r0, [r7, #12]
 8003218:	f7fd f8da 	bl	80003d0 <strlen>
 800321c:	61b8      	str	r0, [r7, #24]
  if (mg_unpack(path, size, mtime)) return MG_FS_READ;  // Regular file
 800321e:	687a      	ldr	r2, [r7, #4]
 8003220:	68b9      	ldr	r1, [r7, #8]
 8003222:	68f8      	ldr	r0, [r7, #12]
 8003224:	f00b f9e4 	bl	800e5f0 <mg_unpack>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <packed_stat+0x28>
 800322e:	2301      	movs	r3, #1
 8003230:	e017      	b.n	8003262 <packed_stat+0x58>
  // Scan all files. If `path` is a dir prefix for any of them, it's a dir
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 8003232:	2300      	movs	r3, #0
 8003234:	61fb      	str	r3, [r7, #28]
 8003236:	e00c      	b.n	8003252 <packed_stat+0x48>
    if (is_dir_prefix(path, n, p)) return MG_FS_DIR;
 8003238:	697a      	ldr	r2, [r7, #20]
 800323a:	69b9      	ldr	r1, [r7, #24]
 800323c:	68f8      	ldr	r0, [r7, #12]
 800323e:	f7ff ffb8 	bl	80031b2 <is_dir_prefix>
 8003242:	4603      	mov	r3, r0
 8003244:	2b00      	cmp	r3, #0
 8003246:	d001      	beq.n	800324c <packed_stat+0x42>
 8003248:	2304      	movs	r3, #4
 800324a:	e00a      	b.n	8003262 <packed_stat+0x58>
  for (i = 0; (p = mg_unlist(i)) != NULL; i++) {
 800324c:	69fb      	ldr	r3, [r7, #28]
 800324e:	3301      	adds	r3, #1
 8003250:	61fb      	str	r3, [r7, #28]
 8003252:	69f8      	ldr	r0, [r7, #28]
 8003254:	f00b f9b8 	bl	800e5c8 <mg_unlist>
 8003258:	6178      	str	r0, [r7, #20]
 800325a:	697b      	ldr	r3, [r7, #20]
 800325c:	2b00      	cmp	r3, #0
 800325e:	d1eb      	bne.n	8003238 <packed_stat+0x2e>
  }
  return 0;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3720      	adds	r7, #32
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}
	...

0800326c <packed_list>:

static void packed_list(const char *dir, void (*fn)(const char *, void *),
                        void *userdata) {
 800326c:	b580      	push	{r7, lr}
 800326e:	b0be      	sub	sp, #248	; 0xf8
 8003270:	af02      	add	r7, sp, #8
 8003272:	60f8      	str	r0, [r7, #12]
 8003274:	60b9      	str	r1, [r7, #8]
 8003276:	607a      	str	r2, [r7, #4]
  char buf[MG_PATH_MAX], tmp[sizeof(buf)];
  const char *path, *begin, *end;
  size_t i, n = strlen(dir);
 8003278:	68f8      	ldr	r0, [r7, #12]
 800327a:	f7fd f8a9 	bl	80003d0 <strlen>
 800327e:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  tmp[0] = '\0';  // Previously listed entry
 8003282:	2300      	movs	r3, #0
 8003284:	753b      	strb	r3, [r7, #20]
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 8003286:	2300      	movs	r3, #0
 8003288:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800328c:	e05a      	b.n	8003344 <packed_list+0xd8>
    if (!is_dir_prefix(dir, n, path)) continue;
 800328e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003292:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f7ff ff8b 	bl	80031b2 <is_dir_prefix>
 800329c:	4603      	mov	r3, r0
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d048      	beq.n	8003334 <packed_list+0xc8>
    begin = &path[n + 1];
 80032a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032a6:	3301      	adds	r3, #1
 80032a8:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032ac:	4413      	add	r3, r2
 80032ae:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    end = strchr(begin, '/');
 80032b2:	212f      	movs	r1, #47	; 0x2f
 80032b4:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80032b8:	f011 fa44 	bl	8014744 <strchr>
 80032bc:	f8c7 00ec 	str.w	r0, [r7, #236]	; 0xec
    if (end == NULL) end = begin + strlen(begin);
 80032c0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d109      	bne.n	80032dc <packed_list+0x70>
 80032c8:	f8d7 00dc 	ldr.w	r0, [r7, #220]	; 0xdc
 80032cc:	f7fd f880 	bl	80003d0 <strlen>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032d6:	4413      	add	r3, r2
 80032d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    mg_snprintf(buf, sizeof(buf), "%.*s", (int) (end - begin), begin);
 80032dc:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 80032e0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032e4:	1ad2      	subs	r2, r2, r3
 80032e6:	f107 0078 	add.w	r0, r7, #120	; 0x78
 80032ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032ee:	9300      	str	r3, [sp, #0]
 80032f0:	4613      	mov	r3, r2
 80032f2:	4a1c      	ldr	r2, [pc, #112]	; (8003364 <packed_list+0xf8>)
 80032f4:	2164      	movs	r1, #100	; 0x64
 80032f6:	f005 fc81 	bl	8008bfc <mg_snprintf>
    buf[sizeof(buf) - 1] = '\0';
 80032fa:	2300      	movs	r3, #0
 80032fc:	f887 30db 	strb.w	r3, [r7, #219]	; 0xdb
    // If this entry has been already listed, skip
    // NOTE: we're assuming that file list is sorted alphabetically
    if (strcmp(buf, tmp) == 0) continue;
 8003300:	f107 0214 	add.w	r2, r7, #20
 8003304:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8003308:	4611      	mov	r1, r2
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f800 	bl	8000310 <strcmp>
 8003310:	4603      	mov	r3, r0
 8003312:	2b00      	cmp	r3, #0
 8003314:	d010      	beq.n	8003338 <packed_list+0xcc>
    fn(buf, userdata);  // Not yet listed, call user function
 8003316:	f107 0278 	add.w	r2, r7, #120	; 0x78
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	6879      	ldr	r1, [r7, #4]
 800331e:	4610      	mov	r0, r2
 8003320:	4798      	blx	r3
    strcpy(tmp, buf);   // And save this entry as listed
 8003322:	f107 0278 	add.w	r2, r7, #120	; 0x78
 8003326:	f107 0314 	add.w	r3, r7, #20
 800332a:	4611      	mov	r1, r2
 800332c:	4618      	mov	r0, r3
 800332e:	f011 fae1 	bl	80148f4 <strcpy>
 8003332:	e002      	b.n	800333a <packed_list+0xce>
    if (!is_dir_prefix(dir, n, path)) continue;
 8003334:	bf00      	nop
 8003336:	e000      	b.n	800333a <packed_list+0xce>
    if (strcmp(buf, tmp) == 0) continue;
 8003338:	bf00      	nop
  for (i = 0; (path = mg_unlist(i)) != NULL; i++) {
 800333a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800333e:	3301      	adds	r3, #1
 8003340:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003344:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 8003348:	f00b f93e 	bl	800e5c8 <mg_unlist>
 800334c:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
 8003350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003354:	2b00      	cmp	r3, #0
 8003356:	d19a      	bne.n	800328e <packed_list+0x22>
  }
}
 8003358:	bf00      	nop
 800335a:	bf00      	nop
 800335c:	37f0      	adds	r7, #240	; 0xf0
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	0801557c 	.word	0x0801557c

08003368 <packed_open>:

static void *packed_open(const char *path, int flags) {
 8003368:	b580      	push	{r7, lr}
 800336a:	b086      	sub	sp, #24
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
 8003370:	6039      	str	r1, [r7, #0]
  size_t size = 0;
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
  const char *data = mg_unpack(path, &size, NULL);
 8003376:	f107 030c 	add.w	r3, r7, #12
 800337a:	2200      	movs	r2, #0
 800337c:	4619      	mov	r1, r3
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f00b f936 	bl	800e5f0 <mg_unpack>
 8003384:	6178      	str	r0, [r7, #20]
  struct packed_file *fp = NULL;
 8003386:	2300      	movs	r3, #0
 8003388:	613b      	str	r3, [r7, #16]
  if (data == NULL) return NULL;
 800338a:	697b      	ldr	r3, [r7, #20]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d101      	bne.n	8003394 <packed_open+0x2c>
 8003390:	2300      	movs	r3, #0
 8003392:	e016      	b.n	80033c2 <packed_open+0x5a>
  if (flags & MG_FS_WRITE) return NULL;
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d001      	beq.n	80033a2 <packed_open+0x3a>
 800339e:	2300      	movs	r3, #0
 80033a0:	e00f      	b.n	80033c2 <packed_open+0x5a>
  if ((fp = (struct packed_file *) calloc(1, sizeof(*fp))) != NULL) {
 80033a2:	210c      	movs	r1, #12
 80033a4:	2001      	movs	r0, #1
 80033a6:	f010 fdcb 	bl	8013f40 <calloc>
 80033aa:	4603      	mov	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d005      	beq.n	80033c0 <packed_open+0x58>
    fp->size = size;
 80033b4:	68fa      	ldr	r2, [r7, #12]
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	605a      	str	r2, [r3, #4]
    fp->data = data;
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	697a      	ldr	r2, [r7, #20]
 80033be:	601a      	str	r2, [r3, #0]
  }
  return (void *) fp;
 80033c0:	693b      	ldr	r3, [r7, #16]
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <packed_close>:

static void packed_close(void *fp) {
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  if (fp != NULL) free(fp);
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d002      	beq.n	80033de <packed_close+0x14>
 80033d8:	6878      	ldr	r0, [r7, #4]
 80033da:	f010 fdd7 	bl	8013f8c <free>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <packed_read>:

static size_t packed_read(void *fd, void *buf, size_t len) {
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b086      	sub	sp, #24
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	60f8      	str	r0, [r7, #12]
 80033ee:	60b9      	str	r1, [r7, #8]
 80033f0:	607a      	str	r2, [r7, #4]
  struct packed_file *fp = (struct packed_file *) fd;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	617b      	str	r3, [r7, #20]
  if (fp->pos + len > fp->size) len = fp->size - fp->pos;
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	689a      	ldr	r2, [r3, #8]
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	441a      	add	r2, r3
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	429a      	cmp	r2, r3
 8003404:	d905      	bls.n	8003412 <packed_read+0x2c>
 8003406:	697b      	ldr	r3, [r7, #20]
 8003408:	685a      	ldr	r2, [r3, #4]
 800340a:	697b      	ldr	r3, [r7, #20]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	607b      	str	r3, [r7, #4]
  memcpy(buf, &fp->data[fp->pos], len);
 8003412:	697b      	ldr	r3, [r7, #20]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	697b      	ldr	r3, [r7, #20]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	4413      	add	r3, r2
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	4619      	mov	r1, r3
 8003420:	68b8      	ldr	r0, [r7, #8]
 8003422:	f011 fa6f 	bl	8014904 <memcpy>
  fp->pos += len;
 8003426:	697b      	ldr	r3, [r7, #20]
 8003428:	689a      	ldr	r2, [r3, #8]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	441a      	add	r2, r3
 800342e:	697b      	ldr	r3, [r7, #20]
 8003430:	609a      	str	r2, [r3, #8]
  return len;
 8003432:	687b      	ldr	r3, [r7, #4]
}
 8003434:	4618      	mov	r0, r3
 8003436:	3718      	adds	r7, #24
 8003438:	46bd      	mov	sp, r7
 800343a:	bd80      	pop	{r7, pc}

0800343c <packed_write>:

static size_t packed_write(void *fd, const void *buf, size_t len) {
 800343c:	b480      	push	{r7}
 800343e:	b085      	sub	sp, #20
 8003440:	af00      	add	r7, sp, #0
 8003442:	60f8      	str	r0, [r7, #12]
 8003444:	60b9      	str	r1, [r7, #8]
 8003446:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003448:	2300      	movs	r3, #0
}
 800344a:	4618      	mov	r0, r3
 800344c:	3714      	adds	r7, #20
 800344e:	46bd      	mov	sp, r7
 8003450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003454:	4770      	bx	lr

08003456 <packed_seek>:

static size_t packed_seek(void *fd, size_t offset) {
 8003456:	b480      	push	{r7}
 8003458:	b085      	sub	sp, #20
 800345a:	af00      	add	r7, sp, #0
 800345c:	6078      	str	r0, [r7, #4]
 800345e:	6039      	str	r1, [r7, #0]
  struct packed_file *fp = (struct packed_file *) fd;
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	60fb      	str	r3, [r7, #12]
  fp->pos = offset;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	683a      	ldr	r2, [r7, #0]
 8003468:	609a      	str	r2, [r3, #8]
  if (fp->pos > fp->size) fp->pos = fp->size;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	429a      	cmp	r2, r3
 8003474:	d903      	bls.n	800347e <packed_seek+0x28>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	685a      	ldr	r2, [r3, #4]
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	609a      	str	r2, [r3, #8]
  return fp->pos;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	689b      	ldr	r3, [r3, #8]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3714      	adds	r7, #20
 8003486:	46bd      	mov	sp, r7
 8003488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348c:	4770      	bx	lr

0800348e <packed_rename>:

static bool packed_rename(const char *from, const char *to) {
 800348e:	b480      	push	{r7}
 8003490:	b083      	sub	sp, #12
 8003492:	af00      	add	r7, sp, #0
 8003494:	6078      	str	r0, [r7, #4]
 8003496:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr

080034a6 <packed_remove>:

static bool packed_remove(const char *path) {
 80034a6:	b480      	push	{r7}
 80034a8:	b083      	sub	sp, #12
 80034aa:	af00      	add	r7, sp, #0
 80034ac:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <packed_mkdir>:

static bool packed_mkdir(const char *path) {
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80034c4:	2300      	movs	r3, #0
}
 80034c6:	4618      	mov	r0, r3
 80034c8:	370c      	adds	r7, #12
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr

080034d2 <p_stat>:
  return mkdir(path, 0775) == 0;
}

#else

static int p_stat(const char *path, size_t *size, time_t *mtime) {
 80034d2:	b480      	push	{r7}
 80034d4:	b085      	sub	sp, #20
 80034d6:	af00      	add	r7, sp, #0
 80034d8:	60f8      	str	r0, [r7, #12]
 80034da:	60b9      	str	r1, [r7, #8]
 80034dc:	607a      	str	r2, [r7, #4]
  (void) path, (void) size, (void) mtime;
  return 0;
 80034de:	2300      	movs	r3, #0
}
 80034e0:	4618      	mov	r0, r3
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ea:	4770      	bx	lr

080034ec <p_list>:
static void p_list(const char *path, void (*fn)(const char *, void *),
                   void *userdata) {
 80034ec:	b480      	push	{r7}
 80034ee:	b085      	sub	sp, #20
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  (void) path, (void) fn, (void) userdata;
}
 80034f8:	bf00      	nop
 80034fa:	3714      	adds	r7, #20
 80034fc:	46bd      	mov	sp, r7
 80034fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003502:	4770      	bx	lr

08003504 <p_open>:
static void *p_open(const char *path, int flags) {
 8003504:	b480      	push	{r7}
 8003506:	b083      	sub	sp, #12
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  (void) path, (void) flags;
  return NULL;
 800350e:	2300      	movs	r3, #0
}
 8003510:	4618      	mov	r0, r3
 8003512:	370c      	adds	r7, #12
 8003514:	46bd      	mov	sp, r7
 8003516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351a:	4770      	bx	lr

0800351c <p_close>:
static void p_close(void *fp) {
 800351c:	b480      	push	{r7}
 800351e:	b083      	sub	sp, #12
 8003520:	af00      	add	r7, sp, #0
 8003522:	6078      	str	r0, [r7, #4]
  (void) fp;
}
 8003524:	bf00      	nop
 8003526:	370c      	adds	r7, #12
 8003528:	46bd      	mov	sp, r7
 800352a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352e:	4770      	bx	lr

08003530 <p_read>:
static size_t p_read(void *fd, void *buf, size_t len) {
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	60b9      	str	r1, [r7, #8]
 800353a:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 800353c:	2300      	movs	r3, #0
}
 800353e:	4618      	mov	r0, r3
 8003540:	3714      	adds	r7, #20
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr

0800354a <p_write>:
static size_t p_write(void *fd, const void *buf, size_t len) {
 800354a:	b480      	push	{r7}
 800354c:	b085      	sub	sp, #20
 800354e:	af00      	add	r7, sp, #0
 8003550:	60f8      	str	r0, [r7, #12]
 8003552:	60b9      	str	r1, [r7, #8]
 8003554:	607a      	str	r2, [r7, #4]
  (void) fd, (void) buf, (void) len;
  return 0;
 8003556:	2300      	movs	r3, #0
}
 8003558:	4618      	mov	r0, r3
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr

08003564 <p_seek>:
static size_t p_seek(void *fd, size_t offset) {
 8003564:	b480      	push	{r7}
 8003566:	b083      	sub	sp, #12
 8003568:	af00      	add	r7, sp, #0
 800356a:	6078      	str	r0, [r7, #4]
 800356c:	6039      	str	r1, [r7, #0]
  (void) fd, (void) offset;
  return (size_t) ~0;
 800356e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr

0800357e <p_rename>:
static bool p_rename(const char *from, const char *to) {
 800357e:	b480      	push	{r7}
 8003580:	b083      	sub	sp, #12
 8003582:	af00      	add	r7, sp, #0
 8003584:	6078      	str	r0, [r7, #4]
 8003586:	6039      	str	r1, [r7, #0]
  (void) from, (void) to;
  return false;
 8003588:	2300      	movs	r3, #0
}
 800358a:	4618      	mov	r0, r3
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003594:	4770      	bx	lr

08003596 <p_remove>:
static bool p_remove(const char *path) {
 8003596:	b480      	push	{r7}
 8003598:	b083      	sub	sp, #12
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 800359e:	2300      	movs	r3, #0
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	370c      	adds	r7, #12
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr

080035ac <p_mkdir>:
static bool p_mkdir(const char *path) {
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  (void) path;
  return false;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	0000      	movs	r0, r0
 80035c4:	0000      	movs	r0, r0
	...

080035c8 <mg_to_size_t>:




bool mg_to_size_t(struct mg_str str, size_t *val);
bool mg_to_size_t(struct mg_str str, size_t *val) {
 80035c8:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80035cc:	b08f      	sub	sp, #60	; 0x3c
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	f107 0318 	add.w	r3, r7, #24
 80035d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80035d8:	617a      	str	r2, [r7, #20]
  uint64_t result = 0, max = 1844674407370955160 /* (UINT64_MAX-9)/10 */;
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	f04f 0300 	mov.w	r3, #0
 80035e2:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
 80035e6:	a340      	add	r3, pc, #256	; (adr r3, 80036e8 <mg_to_size_t+0x120>)
 80035e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ec:	e9c7 2308 	strd	r2, r3, [r7, #32]
  size_t i = 0;
 80035f0:	2300      	movs	r3, #0
 80035f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && (str.ptr[i] == ' ' || str.ptr[i] == '\t')) i++;
 80035f4:	e002      	b.n	80035fc <mg_to_size_t+0x34>
 80035f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f8:	3301      	adds	r3, #1
 80035fa:	62fb      	str	r3, [r7, #44]	; 0x2c
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003600:	429a      	cmp	r2, r3
 8003602:	d20b      	bcs.n	800361c <mg_to_size_t+0x54>
 8003604:	69ba      	ldr	r2, [r7, #24]
 8003606:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003608:	4413      	add	r3, r2
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	2b20      	cmp	r3, #32
 800360e:	d0f2      	beq.n	80035f6 <mg_to_size_t+0x2e>
 8003610:	69ba      	ldr	r2, [r7, #24]
 8003612:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003614:	4413      	add	r3, r2
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b09      	cmp	r3, #9
 800361a:	d0ec      	beq.n	80035f6 <mg_to_size_t+0x2e>
  if (i < str.len && str.ptr[i] == '-') return false;
 800361c:	69fb      	ldr	r3, [r7, #28]
 800361e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003620:	429a      	cmp	r2, r3
 8003622:	d244      	bcs.n	80036ae <mg_to_size_t+0xe6>
 8003624:	69ba      	ldr	r2, [r7, #24]
 8003626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003628:	4413      	add	r3, r2
 800362a:	781b      	ldrb	r3, [r3, #0]
 800362c:	2b2d      	cmp	r3, #45	; 0x2d
 800362e:	d13e      	bne.n	80036ae <mg_to_size_t+0xe6>
 8003630:	2300      	movs	r3, #0
 8003632:	e050      	b.n	80036d6 <mg_to_size_t+0x10e>
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
    if (result > max) return false;
 8003634:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003638:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800363c:	4290      	cmp	r0, r2
 800363e:	eb71 0303 	sbcs.w	r3, r1, r3
 8003642:	d201      	bcs.n	8003648 <mg_to_size_t+0x80>
 8003644:	2300      	movs	r3, #0
 8003646:	e046      	b.n	80036d6 <mg_to_size_t+0x10e>
    result *= 10;
 8003648:	e9d7 890c 	ldrd	r8, r9, [r7, #48]	; 0x30
 800364c:	4642      	mov	r2, r8
 800364e:	464b      	mov	r3, r9
 8003650:	f04f 0000 	mov.w	r0, #0
 8003654:	f04f 0100 	mov.w	r1, #0
 8003658:	0099      	lsls	r1, r3, #2
 800365a:	ea41 7192 	orr.w	r1, r1, r2, lsr #30
 800365e:	0090      	lsls	r0, r2, #2
 8003660:	4602      	mov	r2, r0
 8003662:	460b      	mov	r3, r1
 8003664:	eb12 0408 	adds.w	r4, r2, r8
 8003668:	eb43 0509 	adc.w	r5, r3, r9
 800366c:	1923      	adds	r3, r4, r4
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	eb45 0305 	adc.w	r3, r5, r5
 8003674:	60fb      	str	r3, [r7, #12]
 8003676:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800367a:	e9c7 450c 	strd	r4, r5, [r7, #48]	; 0x30
    result += (unsigned) (str.ptr[i] - '0');
 800367e:	69ba      	ldr	r2, [r7, #24]
 8003680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003682:	4413      	add	r3, r2
 8003684:	781b      	ldrb	r3, [r3, #0]
 8003686:	3b30      	subs	r3, #48	; 0x30
 8003688:	461a      	mov	r2, r3
 800368a:	2300      	movs	r3, #0
 800368c:	4692      	mov	sl, r2
 800368e:	469b      	mov	fp, r3
 8003690:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003694:	eb12 010a 	adds.w	r1, r2, sl
 8003698:	6039      	str	r1, [r7, #0]
 800369a:	eb43 030b 	adc.w	r3, r3, fp
 800369e:	607b      	str	r3, [r7, #4]
 80036a0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80036a4:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    i++;
 80036a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036aa:	3301      	adds	r3, #1
 80036ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (i < str.len && str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 80036ae:	69fb      	ldr	r3, [r7, #28]
 80036b0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80036b2:	429a      	cmp	r2, r3
 80036b4:	d20b      	bcs.n	80036ce <mg_to_size_t+0x106>
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ba:	4413      	add	r3, r2
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2b2f      	cmp	r3, #47	; 0x2f
 80036c0:	d905      	bls.n	80036ce <mg_to_size_t+0x106>
 80036c2:	69ba      	ldr	r2, [r7, #24]
 80036c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036c6:	4413      	add	r3, r2
 80036c8:	781b      	ldrb	r3, [r3, #0]
 80036ca:	2b39      	cmp	r3, #57	; 0x39
 80036cc:	d9b2      	bls.n	8003634 <mg_to_size_t+0x6c>
  }
  *val = (size_t) result;
 80036ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80036d0:	697b      	ldr	r3, [r7, #20]
 80036d2:	601a      	str	r2, [r3, #0]
  return true;
 80036d4:	2301      	movs	r3, #1
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	373c      	adds	r7, #60	; 0x3c
 80036da:	46bd      	mov	sp, r7
 80036dc:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80036e0:	4770      	bx	lr
 80036e2:	bf00      	nop
 80036e4:	f3af 8000 	nop.w
 80036e8:	99999998 	.word	0x99999998
 80036ec:	19999999 	.word	0x19999999

080036f0 <mg_http_var>:
  } else {
    MG_ERROR(("%lu oom %d->%d ", c->id, (int) c->send.size, (int) need));
  }
}

struct mg_str mg_http_var(struct mg_str buf, struct mg_str name) {
 80036f0:	b082      	sub	sp, #8
 80036f2:	b580      	push	{r7, lr}
 80036f4:	b08a      	sub	sp, #40	; 0x28
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	60f8      	str	r0, [r7, #12]
 80036fa:	1d38      	adds	r0, r7, #4
 80036fc:	e880 0006 	stmia.w	r0, {r1, r2}
 8003700:	637b      	str	r3, [r7, #52]	; 0x34
  struct mg_str k, v, result = mg_str_n(NULL, 0);
 8003702:	f107 0310 	add.w	r3, r7, #16
 8003706:	2200      	movs	r2, #0
 8003708:	2100      	movs	r1, #0
 800370a:	4618      	mov	r0, r3
 800370c:	f006 f86d 	bl	80097ea <mg_str_n>
  while (mg_split(&buf, &k, &v, '&')) {
 8003710:	e015      	b.n	800373e <mg_http_var+0x4e>
    if (name.len == k.len && mg_ncasecmp(name.ptr, k.ptr, k.len) == 0) {
 8003712:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003716:	429a      	cmp	r2, r3
 8003718:	d111      	bne.n	800373e <mg_http_var+0x4e>
 800371a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371c:	6a39      	ldr	r1, [r7, #32]
 800371e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003720:	4618      	mov	r0, r3
 8003722:	f006 f891 	bl	8009848 <mg_ncasecmp>
 8003726:	4603      	mov	r3, r0
 8003728:	2b00      	cmp	r3, #0
 800372a:	d108      	bne.n	800373e <mg_http_var+0x4e>
      result = v;
 800372c:	f107 0310 	add.w	r3, r7, #16
 8003730:	f107 0218 	add.w	r2, r7, #24
 8003734:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003738:	e883 0003 	stmia.w	r3, {r0, r1}
      break;
 800373c:	e00a      	b.n	8003754 <mg_http_var+0x64>
  while (mg_split(&buf, &k, &v, '&')) {
 800373e:	f107 0218 	add.w	r2, r7, #24
 8003742:	f107 0120 	add.w	r1, r7, #32
 8003746:	1d38      	adds	r0, r7, #4
 8003748:	2326      	movs	r3, #38	; 0x26
 800374a:	f006 fade 	bl	8009d0a <mg_split>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1de      	bne.n	8003712 <mg_http_var+0x22>
    }
  }
  return result;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	461a      	mov	r2, r3
 8003758:	f107 0310 	add.w	r3, r7, #16
 800375c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003760:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	3728      	adds	r7, #40	; 0x28
 8003768:	46bd      	mov	sp, r7
 800376a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800376e:	b002      	add	sp, #8
 8003770:	4770      	bx	lr

08003772 <mg_http_get_var>:

int mg_http_get_var(const struct mg_str *buf, const char *name, char *dst,
                    size_t dst_len) {
 8003772:	b580      	push	{r7, lr}
 8003774:	b08c      	sub	sp, #48	; 0x30
 8003776:	af02      	add	r7, sp, #8
 8003778:	60f8      	str	r0, [r7, #12]
 800377a:	60b9      	str	r1, [r7, #8]
 800377c:	607a      	str	r2, [r7, #4]
 800377e:	603b      	str	r3, [r7, #0]
  int len;
  if (dst == NULL || dst_len == 0) {
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d002      	beq.n	800378c <mg_http_get_var+0x1a>
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d103      	bne.n	8003794 <mg_http_get_var+0x22>
    len = -2;  // Bad destination
 800378c:	f06f 0301 	mvn.w	r3, #1
 8003790:	627b      	str	r3, [r7, #36]	; 0x24
 8003792:	e036      	b.n	8003802 <mg_http_get_var+0x90>
  } else if (buf->ptr == NULL || name == NULL || buf->len == 0) {
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	2b00      	cmp	r3, #0
 800379a:	d006      	beq.n	80037aa <mg_http_get_var+0x38>
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d003      	beq.n	80037aa <mg_http_get_var+0x38>
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	685b      	ldr	r3, [r3, #4]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <mg_http_get_var+0x46>
    len = -1;  // Bad source
 80037aa:	f04f 33ff 	mov.w	r3, #4294967295
 80037ae:	627b      	str	r3, [r7, #36]	; 0x24
    dst[0] = '\0';
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2200      	movs	r2, #0
 80037b4:	701a      	strb	r2, [r3, #0]
 80037b6:	e024      	b.n	8003802 <mg_http_get_var+0x90>
  } else {
    struct mg_str v = mg_http_var(*buf, mg_str(name));
 80037b8:	f107 031c 	add.w	r3, r7, #28
 80037bc:	68b9      	ldr	r1, [r7, #8]
 80037be:	4618      	mov	r0, r3
 80037c0:	f005 fff6 	bl	80097b0 <mg_str_s>
 80037c4:	f107 0014 	add.w	r0, r7, #20
 80037c8:	68fa      	ldr	r2, [r7, #12]
 80037ca:	6a3b      	ldr	r3, [r7, #32]
 80037cc:	9300      	str	r3, [sp, #0]
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	ca06      	ldmia	r2, {r1, r2}
 80037d2:	f7ff ff8d 	bl	80036f0 <mg_http_var>
    if (v.ptr == NULL) {
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d103      	bne.n	80037e4 <mg_http_get_var+0x72>
      len = -4;  // Name does not exist
 80037dc:	f06f 0303 	mvn.w	r3, #3
 80037e0:	627b      	str	r3, [r7, #36]	; 0x24
 80037e2:	e00e      	b.n	8003802 <mg_http_get_var+0x90>
    } else {
      len = mg_url_decode(v.ptr, v.len, dst, dst_len, 1);
 80037e4:	6978      	ldr	r0, [r7, #20]
 80037e6:	69b9      	ldr	r1, [r7, #24]
 80037e8:	2301      	movs	r3, #1
 80037ea:	9300      	str	r3, [sp, #0]
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	f000 f82e 	bl	8003850 <mg_url_decode>
 80037f4:	6278      	str	r0, [r7, #36]	; 0x24
      if (len < 0) len = -3;  // Failed to decode
 80037f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	da02      	bge.n	8003802 <mg_http_get_var+0x90>
 80037fc:	f06f 0302 	mvn.w	r3, #2
 8003800:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return len;
 8003802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003804:	4618      	mov	r0, r3
 8003806:	3728      	adds	r7, #40	; 0x28
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}

0800380c <isx>:

static bool isx(int c) {
 800380c:	b480      	push	{r7}
 800380e:	b083      	sub	sp, #12
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b2f      	cmp	r3, #47	; 0x2f
 8003818:	dd02      	ble.n	8003820 <isx+0x14>
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2b39      	cmp	r3, #57	; 0x39
 800381e:	dd0b      	ble.n	8003838 <isx+0x2c>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2b60      	cmp	r3, #96	; 0x60
 8003824:	dd02      	ble.n	800382c <isx+0x20>
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b66      	cmp	r3, #102	; 0x66
 800382a:	dd05      	ble.n	8003838 <isx+0x2c>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	2b40      	cmp	r3, #64	; 0x40
 8003830:	dd04      	ble.n	800383c <isx+0x30>
         (c >= 'A' && c <= 'F');
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2b46      	cmp	r3, #70	; 0x46
 8003836:	dc01      	bgt.n	800383c <isx+0x30>
  return (c >= '0' && c <= '9') || (c >= 'a' && c <= 'f') ||
 8003838:	2301      	movs	r3, #1
 800383a:	e000      	b.n	800383e <isx+0x32>
 800383c:	2300      	movs	r3, #0
 800383e:	f003 0301 	and.w	r3, r3, #1
 8003842:	b2db      	uxtb	r3, r3
}
 8003844:	4618      	mov	r0, r3
 8003846:	370c      	adds	r7, #12
 8003848:	46bd      	mov	sp, r7
 800384a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384e:	4770      	bx	lr

08003850 <mg_url_decode>:

int mg_url_decode(const char *src, size_t src_len, char *dst, size_t dst_len,
                  int is_form_url_encoded) {
 8003850:	b580      	push	{r7, lr}
 8003852:	b086      	sub	sp, #24
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	607a      	str	r2, [r7, #4]
 800385c:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	617b      	str	r3, [r7, #20]
 8003866:	e04f      	b.n	8003908 <mg_url_decode+0xb8>
    if (src[i] == '%') {
 8003868:	68fa      	ldr	r2, [r7, #12]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	4413      	add	r3, r2
 800386e:	781b      	ldrb	r3, [r3, #0]
 8003870:	2b25      	cmp	r3, #37	; 0x25
 8003872:	d12c      	bne.n	80038ce <mg_url_decode+0x7e>
      // Use `i + 2 < src_len`, not `i < src_len - 2`, note small src_len
      if (i + 2 < src_len && isx(src[i + 1]) && isx(src[i + 2])) {
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	3302      	adds	r3, #2
 8003878:	68ba      	ldr	r2, [r7, #8]
 800387a:	429a      	cmp	r2, r3
 800387c:	d924      	bls.n	80038c8 <mg_url_decode+0x78>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	3301      	adds	r3, #1
 8003882:	68fa      	ldr	r2, [r7, #12]
 8003884:	4413      	add	r3, r2
 8003886:	781b      	ldrb	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7ff ffbf 	bl	800380c <isx>
 800388e:	4603      	mov	r3, r0
 8003890:	2b00      	cmp	r3, #0
 8003892:	d019      	beq.n	80038c8 <mg_url_decode+0x78>
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	3302      	adds	r3, #2
 8003898:	68fa      	ldr	r2, [r7, #12]
 800389a:	4413      	add	r3, r2
 800389c:	781b      	ldrb	r3, [r3, #0]
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff ffb4 	bl	800380c <isx>
 80038a4:	4603      	mov	r3, r0
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d00e      	beq.n	80038c8 <mg_url_decode+0x78>
        mg_unhex(src + i + 1, 2, (uint8_t *) &dst[j]);
 80038aa:	697b      	ldr	r3, [r7, #20]
 80038ac:	3301      	adds	r3, #1
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	18d0      	adds	r0, r2, r3
 80038b2:	687a      	ldr	r2, [r7, #4]
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	4413      	add	r3, r2
 80038b8:	461a      	mov	r2, r3
 80038ba:	2102      	movs	r1, #2
 80038bc:	f006 fb31 	bl	8009f22 <mg_unhex>
        i += 2;
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	3302      	adds	r3, #2
 80038c4:	617b      	str	r3, [r7, #20]
 80038c6:	e019      	b.n	80038fc <mg_url_decode+0xac>
      } else {
        return -1;
 80038c8:	f04f 33ff 	mov.w	r3, #4294967295
 80038cc:	e03a      	b.n	8003944 <mg_url_decode+0xf4>
      }
    } else if (is_form_url_encoded && src[i] == '+') {
 80038ce:	6a3b      	ldr	r3, [r7, #32]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d00b      	beq.n	80038ec <mg_url_decode+0x9c>
 80038d4:	68fa      	ldr	r2, [r7, #12]
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	4413      	add	r3, r2
 80038da:	781b      	ldrb	r3, [r3, #0]
 80038dc:	2b2b      	cmp	r3, #43	; 0x2b
 80038de:	d105      	bne.n	80038ec <mg_url_decode+0x9c>
      dst[j] = ' ';
 80038e0:	687a      	ldr	r2, [r7, #4]
 80038e2:	693b      	ldr	r3, [r7, #16]
 80038e4:	4413      	add	r3, r2
 80038e6:	2220      	movs	r2, #32
 80038e8:	701a      	strb	r2, [r3, #0]
 80038ea:	e007      	b.n	80038fc <mg_url_decode+0xac>
    } else {
      dst[j] = src[i];
 80038ec:	68fa      	ldr	r2, [r7, #12]
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	441a      	add	r2, r3
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	440b      	add	r3, r1
 80038f8:	7812      	ldrb	r2, [r2, #0]
 80038fa:	701a      	strb	r2, [r3, #0]
  for (i = j = 0; i < src_len && j + 1 < dst_len; i++, j++) {
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	3301      	adds	r3, #1
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	693b      	ldr	r3, [r7, #16]
 8003904:	3301      	adds	r3, #1
 8003906:	613b      	str	r3, [r7, #16]
 8003908:	697a      	ldr	r2, [r7, #20]
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	429a      	cmp	r2, r3
 800390e:	d204      	bcs.n	800391a <mg_url_decode+0xca>
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	3301      	adds	r3, #1
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	429a      	cmp	r2, r3
 8003918:	d8a6      	bhi.n	8003868 <mg_url_decode+0x18>
    }
  }
  if (j < dst_len) dst[j] = '\0';  // Null-terminate the destination
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	683b      	ldr	r3, [r7, #0]
 800391e:	429a      	cmp	r2, r3
 8003920:	d204      	bcs.n	800392c <mg_url_decode+0xdc>
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	4413      	add	r3, r2
 8003928:	2200      	movs	r2, #0
 800392a:	701a      	strb	r2, [r3, #0]
  return i >= src_len && j < dst_len ? (int) j : -1;
 800392c:	697a      	ldr	r2, [r7, #20]
 800392e:	68bb      	ldr	r3, [r7, #8]
 8003930:	429a      	cmp	r2, r3
 8003932:	d305      	bcc.n	8003940 <mg_url_decode+0xf0>
 8003934:	693a      	ldr	r2, [r7, #16]
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	429a      	cmp	r2, r3
 800393a:	d201      	bcs.n	8003940 <mg_url_decode+0xf0>
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	e001      	b.n	8003944 <mg_url_decode+0xf4>
 8003940:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003944:	4618      	mov	r0, r3
 8003946:	3718      	adds	r7, #24
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}

0800394c <isok>:

static bool isok(uint8_t c) {
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
 8003952:	4603      	mov	r3, r0
 8003954:	71fb      	strb	r3, [r7, #7]
  return c == '\n' || c == '\r' || c >= ' ';
 8003956:	79fb      	ldrb	r3, [r7, #7]
 8003958:	2b0a      	cmp	r3, #10
 800395a:	d005      	beq.n	8003968 <isok+0x1c>
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	2b0d      	cmp	r3, #13
 8003960:	d002      	beq.n	8003968 <isok+0x1c>
 8003962:	79fb      	ldrb	r3, [r7, #7]
 8003964:	2b1f      	cmp	r3, #31
 8003966:	d901      	bls.n	800396c <isok+0x20>
 8003968:	2301      	movs	r3, #1
 800396a:	e000      	b.n	800396e <isok+0x22>
 800396c:	2300      	movs	r3, #0
 800396e:	f003 0301 	and.w	r3, r3, #1
 8003972:	b2db      	uxtb	r3, r3
}
 8003974:	4618      	mov	r0, r3
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr

08003980 <mg_http_get_request_len>:

int mg_http_get_request_len(const unsigned char *buf, size_t buf_len) {
 8003980:	b580      	push	{r7, lr}
 8003982:	b084      	sub	sp, #16
 8003984:	af00      	add	r7, sp, #0
 8003986:	6078      	str	r0, [r7, #4]
 8003988:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < buf_len; i++) {
 800398a:	2300      	movs	r3, #0
 800398c:	60fb      	str	r3, [r7, #12]
 800398e:	e03c      	b.n	8003a0a <mg_http_get_request_len+0x8a>
    if (!isok(buf[i])) return -1;
 8003990:	687a      	ldr	r2, [r7, #4]
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	781b      	ldrb	r3, [r3, #0]
 8003998:	4618      	mov	r0, r3
 800399a:	f7ff ffd7 	bl	800394c <isok>
 800399e:	4603      	mov	r3, r0
 80039a0:	f083 0301 	eor.w	r3, r3, #1
 80039a4:	b2db      	uxtb	r3, r3
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <mg_http_get_request_len+0x30>
 80039aa:	f04f 33ff 	mov.w	r3, #4294967295
 80039ae:	e031      	b.n	8003a14 <mg_http_get_request_len+0x94>
    if ((i > 0 && buf[i] == '\n' && buf[i - 1] == '\n') ||
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d00c      	beq.n	80039d0 <mg_http_get_request_len+0x50>
 80039b6:	687a      	ldr	r2, [r7, #4]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	4413      	add	r3, r2
 80039bc:	781b      	ldrb	r3, [r3, #0]
 80039be:	2b0a      	cmp	r3, #10
 80039c0:	d106      	bne.n	80039d0 <mg_http_get_request_len+0x50>
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	3b01      	subs	r3, #1
 80039c6:	687a      	ldr	r2, [r7, #4]
 80039c8:	4413      	add	r3, r2
 80039ca:	781b      	ldrb	r3, [r3, #0]
 80039cc:	2b0a      	cmp	r3, #10
 80039ce:	d016      	beq.n	80039fe <mg_http_get_request_len+0x7e>
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	2b03      	cmp	r3, #3
 80039d4:	d916      	bls.n	8003a04 <mg_http_get_request_len+0x84>
        (i > 3 && buf[i] == '\n' && buf[i - 1] == '\r' && buf[i - 2] == '\n'))
 80039d6:	687a      	ldr	r2, [r7, #4]
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	4413      	add	r3, r2
 80039dc:	781b      	ldrb	r3, [r3, #0]
 80039de:	2b0a      	cmp	r3, #10
 80039e0:	d110      	bne.n	8003a04 <mg_http_get_request_len+0x84>
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	3b01      	subs	r3, #1
 80039e6:	687a      	ldr	r2, [r7, #4]
 80039e8:	4413      	add	r3, r2
 80039ea:	781b      	ldrb	r3, [r3, #0]
 80039ec:	2b0d      	cmp	r3, #13
 80039ee:	d109      	bne.n	8003a04 <mg_http_get_request_len+0x84>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	3b02      	subs	r3, #2
 80039f4:	687a      	ldr	r2, [r7, #4]
 80039f6:	4413      	add	r3, r2
 80039f8:	781b      	ldrb	r3, [r3, #0]
 80039fa:	2b0a      	cmp	r3, #10
 80039fc:	d102      	bne.n	8003a04 <mg_http_get_request_len+0x84>
      return (int) i + 1;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	3301      	adds	r3, #1
 8003a02:	e007      	b.n	8003a14 <mg_http_get_request_len+0x94>
  for (i = 0; i < buf_len; i++) {
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3301      	adds	r3, #1
 8003a08:	60fb      	str	r3, [r7, #12]
 8003a0a:	68fa      	ldr	r2, [r7, #12]
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	429a      	cmp	r2, r3
 8003a10:	d3be      	bcc.n	8003990 <mg_http_get_request_len+0x10>
  }
  return 0;
 8003a12:	2300      	movs	r3, #0
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}

08003a1c <skip>:

static const char *skip(const char *s, const char *e, const char *d,
                        struct mg_str *v) {
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	b084      	sub	sp, #16
 8003a20:	af00      	add	r7, sp, #0
 8003a22:	60f8      	str	r0, [r7, #12]
 8003a24:	60b9      	str	r1, [r7, #8]
 8003a26:	607a      	str	r2, [r7, #4]
 8003a28:	603b      	str	r3, [r7, #0]
  v->ptr = s;
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	68fa      	ldr	r2, [r7, #12]
 8003a2e:	601a      	str	r2, [r3, #0]
  while (s < e && *s != '\n' && strchr(d, *s) == NULL) s++;
 8003a30:	e002      	b.n	8003a38 <skip+0x1c>
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	3301      	adds	r3, #1
 8003a36:	60fb      	str	r3, [r7, #12]
 8003a38:	68fa      	ldr	r2, [r7, #12]
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d20c      	bcs.n	8003a5a <skip+0x3e>
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b0a      	cmp	r3, #10
 8003a46:	d008      	beq.n	8003a5a <skip+0x3e>
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4619      	mov	r1, r3
 8003a4e:	6878      	ldr	r0, [r7, #4]
 8003a50:	f010 fe78 	bl	8014744 <strchr>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0eb      	beq.n	8003a32 <skip+0x16>
  v->len = (size_t) (s - v->ptr);
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	68fa      	ldr	r2, [r7, #12]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	461a      	mov	r2, r3
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	605a      	str	r2, [r3, #4]
  while (s < e && strchr(d, *s) != NULL) s++;
 8003a68:	e002      	b.n	8003a70 <skip+0x54>
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	3301      	adds	r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fa      	ldr	r2, [r7, #12]
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	429a      	cmp	r2, r3
 8003a76:	d208      	bcs.n	8003a8a <skip+0x6e>
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	781b      	ldrb	r3, [r3, #0]
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f010 fe60 	bl	8014744 <strchr>
 8003a84:	4603      	mov	r3, r0
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d1ef      	bne.n	8003a6a <skip+0x4e>
  return s;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}

08003a94 <mg_http_get_header>:

struct mg_str *mg_http_get_header(struct mg_http_message *h, const char *name) {
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  size_t i, n = strlen(name), max = sizeof(h->headers) / sizeof(h->headers[0]);
 8003a9e:	6838      	ldr	r0, [r7, #0]
 8003aa0:	f7fc fc96 	bl	80003d0 <strlen>
 8003aa4:	61b8      	str	r0, [r7, #24]
 8003aa6:	231e      	movs	r3, #30
 8003aa8:	617b      	str	r3, [r7, #20]
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003aaa:	2300      	movs	r3, #0
 8003aac:	61fb      	str	r3, [r7, #28]
 8003aae:	e01f      	b.n	8003af0 <mg_http_get_header+0x5c>
    struct mg_str *k = &h->headers[i].name, *v = &h->headers[i].value;
 8003ab0:	69fb      	ldr	r3, [r7, #28]
 8003ab2:	3302      	adds	r3, #2
 8003ab4:	011b      	lsls	r3, r3, #4
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	4413      	add	r3, r2
 8003aba:	613b      	str	r3, [r7, #16]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	011b      	lsls	r3, r3, #4
 8003ac0:	3328      	adds	r3, #40	; 0x28
 8003ac2:	687a      	ldr	r2, [r7, #4]
 8003ac4:	4413      	add	r3, r2
 8003ac6:	60fb      	str	r3, [r7, #12]
    if (n == k->len && mg_ncasecmp(k->ptr, name, n) == 0) return v;
 8003ac8:	693b      	ldr	r3, [r7, #16]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	69ba      	ldr	r2, [r7, #24]
 8003ace:	429a      	cmp	r2, r3
 8003ad0:	d10b      	bne.n	8003aea <mg_http_get_header+0x56>
 8003ad2:	693b      	ldr	r3, [r7, #16]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	69ba      	ldr	r2, [r7, #24]
 8003ad8:	6839      	ldr	r1, [r7, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f005 feb4 	bl	8009848 <mg_ncasecmp>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d101      	bne.n	8003aea <mg_http_get_header+0x56>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	e010      	b.n	8003b0c <mg_http_get_header+0x78>
  for (i = 0; i < max && h->headers[i].name.len > 0; i++) {
 8003aea:	69fb      	ldr	r3, [r7, #28]
 8003aec:	3301      	adds	r3, #1
 8003aee:	61fb      	str	r3, [r7, #28]
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	697b      	ldr	r3, [r7, #20]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d208      	bcs.n	8003b0a <mg_http_get_header+0x76>
 8003af8:	687a      	ldr	r2, [r7, #4]
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	3302      	adds	r3, #2
 8003afe:	011b      	lsls	r3, r3, #4
 8003b00:	4413      	add	r3, r2
 8003b02:	3304      	adds	r3, #4
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d1d2      	bne.n	8003ab0 <mg_http_get_header+0x1c>
  }
  return NULL;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3720      	adds	r7, #32
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <mg_http_parse_headers>:

static bool mg_http_parse_headers(const char *s, const char *end,
                                  struct mg_http_header *h, int max_headers) {
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b08c      	sub	sp, #48	; 0x30
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
 8003b20:	603b      	str	r3, [r7, #0]
  int i;
  for (i = 0; i < max_headers; i++) {
 8003b22:	2300      	movs	r3, #0
 8003b24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003b26:	e04c      	b.n	8003bc2 <mg_http_parse_headers+0xae>
    struct mg_str k, v, tmp;
    const char *he = skip(s, end, "\r\n", &tmp);
 8003b28:	f107 0310 	add.w	r3, r7, #16
 8003b2c:	4a2a      	ldr	r2, [pc, #168]	; (8003bd8 <mg_http_parse_headers+0xc4>)
 8003b2e:	68b9      	ldr	r1, [r7, #8]
 8003b30:	68f8      	ldr	r0, [r7, #12]
 8003b32:	f7ff ff73 	bl	8003a1c <skip>
 8003b36:	62b8      	str	r0, [r7, #40]	; 0x28
    if (tmp.len == 0) break;  // empty header = EOH
 8003b38:	697b      	ldr	r3, [r7, #20]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d046      	beq.n	8003bcc <mg_http_parse_headers+0xb8>
    s = skip(s, he, ": \r\n", &k);
 8003b3e:	f107 0320 	add.w	r3, r7, #32
 8003b42:	4a26      	ldr	r2, [pc, #152]	; (8003bdc <mg_http_parse_headers+0xc8>)
 8003b44:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b46:	68f8      	ldr	r0, [r7, #12]
 8003b48:	f7ff ff68 	bl	8003a1c <skip>
 8003b4c:	60f8      	str	r0, [r7, #12]
    s = skip(s, he, "\r\n", &v);
 8003b4e:	f107 0318 	add.w	r3, r7, #24
 8003b52:	4a21      	ldr	r2, [pc, #132]	; (8003bd8 <mg_http_parse_headers+0xc4>)
 8003b54:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b56:	68f8      	ldr	r0, [r7, #12]
 8003b58:	f7ff ff60 	bl	8003a1c <skip>
 8003b5c:	60f8      	str	r0, [r7, #12]
    if (k.len == tmp.len) continue;
 8003b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d029      	beq.n	8003bba <mg_http_parse_headers+0xa6>
    while (v.len > 0 && v.ptr[v.len - 1] == ' ') v.len--;  // Trim spaces
 8003b66:	e002      	b.n	8003b6e <mg_http_parse_headers+0x5a>
 8003b68:	69fb      	ldr	r3, [r7, #28]
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	61fb      	str	r3, [r7, #28]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d006      	beq.n	8003b82 <mg_http_parse_headers+0x6e>
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	69fb      	ldr	r3, [r7, #28]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	4413      	add	r3, r2
 8003b7c:	781b      	ldrb	r3, [r3, #0]
 8003b7e:	2b20      	cmp	r3, #32
 8003b80:	d0f2      	beq.n	8003b68 <mg_http_parse_headers+0x54>
    if (k.len == 0) return false;                          // empty name
 8003b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d101      	bne.n	8003b8c <mg_http_parse_headers+0x78>
 8003b88:	2300      	movs	r3, #0
 8003b8a:	e021      	b.n	8003bd0 <mg_http_parse_headers+0xbc>
    // MG_INFO(("--HH [%.*s] [%.*s] [%.*s]", (int) tmp.len - 1, tmp.ptr,
    //(int) k.len, k.ptr, (int) v.len, v.ptr));
    h[i].name = k;
 8003b8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	4413      	add	r3, r2
 8003b94:	461a      	mov	r2, r3
 8003b96:	f107 0320 	add.w	r3, r7, #32
 8003b9a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003b9e:	e882 0003 	stmia.w	r2, {r0, r1}
    h[i].value = v;
 8003ba2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	3308      	adds	r3, #8
 8003bac:	f107 0218 	add.w	r2, r7, #24
 8003bb0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8003bb4:	e883 0003 	stmia.w	r3, {r0, r1}
 8003bb8:	e000      	b.n	8003bbc <mg_http_parse_headers+0xa8>
    if (k.len == tmp.len) continue;
 8003bba:	bf00      	nop
  for (i = 0; i < max_headers; i++) {
 8003bbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003bc2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	429a      	cmp	r2, r3
 8003bc8:	dbae      	blt.n	8003b28 <mg_http_parse_headers+0x14>
 8003bca:	e000      	b.n	8003bce <mg_http_parse_headers+0xba>
    if (tmp.len == 0) break;  // empty header = EOH
 8003bcc:	bf00      	nop
  }
  return true;
 8003bce:	2301      	movs	r3, #1
}
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	3730      	adds	r7, #48	; 0x30
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	bd80      	pop	{r7, pc}
 8003bd8:	080155e4 	.word	0x080155e4
 8003bdc:	080155f8 	.word	0x080155f8

08003be0 <mg_http_parse>:

int mg_http_parse(const char *s, size_t len, struct mg_http_message *hm) {
 8003be0:	b580      	push	{r7, lr}
 8003be2:	b08a      	sub	sp, #40	; 0x28
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	60f8      	str	r0, [r7, #12]
 8003be8:	60b9      	str	r1, [r7, #8]
 8003bea:	607a      	str	r2, [r7, #4]
  int is_response, req_len = mg_http_get_request_len((unsigned char *) s, len);
 8003bec:	68b9      	ldr	r1, [r7, #8]
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff fec6 	bl	8003980 <mg_http_get_request_len>
 8003bf4:	6278      	str	r0, [r7, #36]	; 0x24
  const char *end = s == NULL ? NULL : s + req_len, *qs;  // Cannot add to NULL
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	d003      	beq.n	8003c04 <mg_http_parse+0x24>
 8003bfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003bfe:	68fa      	ldr	r2, [r7, #12]
 8003c00:	4413      	add	r3, r2
 8003c02:	e000      	b.n	8003c06 <mg_http_parse+0x26>
 8003c04:	2300      	movs	r3, #0
 8003c06:	623b      	str	r3, [r7, #32]
  struct mg_str *cl;

  memset(hm, 0, sizeof(*hm));
 8003c08:	f44f 7208 	mov.w	r2, #544	; 0x220
 8003c0c:	2100      	movs	r1, #0
 8003c0e:	6878      	ldr	r0, [r7, #4]
 8003c10:	f010 fd90 	bl	8014734 <memset>
  if (req_len <= 0) return req_len;
 8003c14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	dc01      	bgt.n	8003c1e <mg_http_parse+0x3e>
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	e0e0      	b.n	8003de0 <mg_http_parse+0x200>

  hm->message.ptr = hm->head.ptr = s;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	68fa      	ldr	r2, [r7, #12]
 8003c22:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	f8d3 2208 	ldr.w	r2, [r3, #520]	; 0x208
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218
  hm->body.ptr = end;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6a3a      	ldr	r2, [r7, #32]
 8003c36:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  hm->head.len = (size_t) req_len;
 8003c3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c
  hm->chunk.ptr = end;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6a3a      	ldr	r2, [r7, #32]
 8003c46:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  hm->message.len = hm->body.len = (size_t) ~0;  // Set body length to infinite
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	f04f 32ff 	mov.w	r2, #4294967295
 8003c50:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

  // Parse request line
  s = skip(s, end, " ", &hm->method);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	4a61      	ldr	r2, [pc, #388]	; (8003de8 <mg_http_parse+0x208>)
 8003c64:	6a39      	ldr	r1, [r7, #32]
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f7ff fed8 	bl	8003a1c <skip>
 8003c6c:	60f8      	str	r0, [r7, #12]
  s = skip(s, end, " ", &hm->uri);
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	3308      	adds	r3, #8
 8003c72:	4a5d      	ldr	r2, [pc, #372]	; (8003de8 <mg_http_parse+0x208>)
 8003c74:	6a39      	ldr	r1, [r7, #32]
 8003c76:	68f8      	ldr	r0, [r7, #12]
 8003c78:	f7ff fed0 	bl	8003a1c <skip>
 8003c7c:	60f8      	str	r0, [r7, #12]
  s = skip(s, end, "\r\n", &hm->proto);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	3318      	adds	r3, #24
 8003c82:	4a5a      	ldr	r2, [pc, #360]	; (8003dec <mg_http_parse+0x20c>)
 8003c84:	6a39      	ldr	r1, [r7, #32]
 8003c86:	68f8      	ldr	r0, [r7, #12]
 8003c88:	f7ff fec8 	bl	8003a1c <skip>
 8003c8c:	60f8      	str	r0, [r7, #12]

  // Sanity check. Allow protocol/reason to be empty
  if (hm->method.len == 0 || hm->uri.len == 0) return -1;
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <mg_http_parse+0xbe>
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	68db      	ldr	r3, [r3, #12]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d102      	bne.n	8003ca4 <mg_http_parse+0xc4>
 8003c9e:	f04f 33ff 	mov.w	r3, #4294967295
 8003ca2:	e09d      	b.n	8003de0 <mg_http_parse+0x200>

  // If URI contains '?' character, setup query string
  if ((qs = (const char *) memchr(hm->uri.ptr, '?', hm->uri.len)) != NULL) {
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6898      	ldr	r0, [r3, #8]
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	461a      	mov	r2, r3
 8003cae:	213f      	movs	r1, #63	; 0x3f
 8003cb0:	f7fc fb3e 	bl	8000330 <memchr>
 8003cb4:	61f8      	str	r0, [r7, #28]
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d015      	beq.n	8003ce8 <mg_http_parse+0x108>
    hm->query.ptr = qs + 1;
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	1c5a      	adds	r2, r3, #1
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	611a      	str	r2, [r3, #16]
    hm->query.len = (size_t) (&hm->uri.ptr[hm->uri.len] - (qs + 1));
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	689a      	ldr	r2, [r3, #8]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	441a      	add	r2, r3
 8003cce:	69fb      	ldr	r3, [r7, #28]
 8003cd0:	3301      	adds	r3, #1
 8003cd2:	1ad3      	subs	r3, r2, r3
 8003cd4:	461a      	mov	r2, r3
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	615a      	str	r2, [r3, #20]
    hm->uri.len = (size_t) (qs - hm->uri.ptr);
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	69fa      	ldr	r2, [r7, #28]
 8003ce0:	1ad3      	subs	r3, r2, r3
 8003ce2:	461a      	mov	r2, r3
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	60da      	str	r2, [r3, #12]
  }

  if (!mg_http_parse_headers(s, end, hm->headers,
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	f103 0220 	add.w	r2, r3, #32
 8003cee:	231e      	movs	r3, #30
 8003cf0:	6a39      	ldr	r1, [r7, #32]
 8003cf2:	68f8      	ldr	r0, [r7, #12]
 8003cf4:	f7ff ff0e 	bl	8003b14 <mg_http_parse_headers>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	f083 0301 	eor.w	r3, r3, #1
 8003cfe:	b2db      	uxtb	r3, r3
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d002      	beq.n	8003d0a <mg_http_parse+0x12a>
                             sizeof(hm->headers) / sizeof(hm->headers[0])))
    return -1;  // error when parsing
 8003d04:	f04f 33ff 	mov.w	r3, #4294967295
 8003d08:	e06a      	b.n	8003de0 <mg_http_parse+0x200>
  if ((cl = mg_http_get_header(hm, "Content-Length")) != NULL) {
 8003d0a:	4939      	ldr	r1, [pc, #228]	; (8003df0 <mg_http_parse+0x210>)
 8003d0c:	6878      	ldr	r0, [r7, #4]
 8003d0e:	f7ff fec1 	bl	8003a94 <mg_http_get_header>
 8003d12:	61b8      	str	r0, [r7, #24]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d018      	beq.n	8003d4c <mg_http_parse+0x16c>
    if (mg_to_size_t(*cl, &hm->body.len) == false) return -1;
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	f503 7201 	add.w	r2, r3, #516	; 0x204
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	e893 0003 	ldmia.w	r3, {r0, r1}
 8003d26:	f7ff fc4f 	bl	80035c8 <mg_to_size_t>
 8003d2a:	4603      	mov	r3, r0
 8003d2c:	f083 0301 	eor.w	r3, r3, #1
 8003d30:	b2db      	uxtb	r3, r3
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d002      	beq.n	8003d3c <mg_http_parse+0x15c>
 8003d36:	f04f 33ff 	mov.w	r3, #4294967295
 8003d3a:	e051      	b.n	8003de0 <mg_http_parse+0x200>
    hm->message.len = (size_t) req_len + hm->body.len;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8003d42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d44:	441a      	add	r2, r3
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  // Therefore, if Content-Length is not specified and methods are
  // not one of PUT or POST, set body length to 0.
  //
  // So, if it is HTTP request, and Content-Length is not set,
  // and method is not (PUT or POST) then reset body length to zero.
  is_response = mg_ncasecmp(hm->method.ptr, "HTTP/", 5) == 0;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	2205      	movs	r2, #5
 8003d52:	4928      	ldr	r1, [pc, #160]	; (8003df4 <mg_http_parse+0x214>)
 8003d54:	4618      	mov	r0, r3
 8003d56:	f005 fd77 	bl	8009848 <mg_ncasecmp>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	bf0c      	ite	eq
 8003d60:	2301      	moveq	r3, #1
 8003d62:	2300      	movne	r3, #0
 8003d64:	b2db      	uxtb	r3, r3
 8003d66:	617b      	str	r3, [r7, #20]
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003d6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d72:	d11a      	bne.n	8003daa <mg_http_parse+0x1ca>
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	d117      	bne.n	8003daa <mg_http_parse+0x1ca>
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	491e      	ldr	r1, [pc, #120]	; (8003df8 <mg_http_parse+0x218>)
 8003d7e:	4618      	mov	r0, r3
 8003d80:	f005 fdb4 	bl	80098ec <mg_vcasecmp>
 8003d84:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && !is_response &&
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d00f      	beq.n	8003daa <mg_http_parse+0x1ca>
      mg_vcasecmp(&hm->method, "POST") != 0) {
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	491b      	ldr	r1, [pc, #108]	; (8003dfc <mg_http_parse+0x21c>)
 8003d8e:	4618      	mov	r0, r3
 8003d90:	f005 fdac 	bl	80098ec <mg_vcasecmp>
 8003d94:	4603      	mov	r3, r0
      mg_vcasecmp(&hm->method, "PUT") != 0 &&
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d007      	beq.n	8003daa <mg_http_parse+0x1ca>
    hm->body.len = 0;
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003da2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  // The 204 (No content) responses also have 0 body length
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8003db0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db4:	d113      	bne.n	8003dde <mg_http_parse+0x1fe>
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d010      	beq.n	8003dde <mg_http_parse+0x1fe>
      mg_vcasecmp(&hm->uri, "204") == 0) {
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	3308      	adds	r3, #8
 8003dc0:	490f      	ldr	r1, [pc, #60]	; (8003e00 <mg_http_parse+0x220>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f005 fd92 	bl	80098ec <mg_vcasecmp>
 8003dc8:	4603      	mov	r3, r0
  if (hm->body.len == (size_t) ~0 && is_response &&
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d107      	bne.n	8003dde <mg_http_parse+0x1fe>
    hm->body.len = 0;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = (size_t) req_len;
 8003dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
  }

  return req_len;
 8003dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003de0:	4618      	mov	r0, r3
 8003de2:	3728      	adds	r7, #40	; 0x28
 8003de4:	46bd      	mov	sp, r7
 8003de6:	bd80      	pop	{r7, pc}
 8003de8:	08015600 	.word	0x08015600
 8003dec:	080155e4 	.word	0x080155e4
 8003df0:	08015604 	.word	0x08015604
 8003df4:	08015614 	.word	0x08015614
 8003df8:	0801561c 	.word	0x0801561c
 8003dfc:	08015620 	.word	0x08015620
 8003e00:	08015628 	.word	0x08015628

08003e04 <mg_http_status_code_str>:
  mg_send(c, "\r\n", 2);
  if (len == 0) c->is_resp = 0;
}

// clang-format off
static const char *mg_http_status_code_str(int status_code) {
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  switch (status_code) {
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	3b64      	subs	r3, #100	; 0x64
 8003e10:	f240 12f3 	movw	r2, #499	; 0x1f3
 8003e14:	4293      	cmp	r3, r2
 8003e16:	f200 8469 	bhi.w	80046ec <mg_http_status_code_str+0x8e8>
 8003e1a:	a101      	add	r1, pc, #4	; (adr r1, 8003e20 <mg_http_status_code_str+0x1c>)
 8003e1c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003e20:	080045f1 	.word	0x080045f1
 8003e24:	080045f5 	.word	0x080045f5
 8003e28:	080045f9 	.word	0x080045f9
 8003e2c:	080046ed 	.word	0x080046ed
 8003e30:	080046ed 	.word	0x080046ed
 8003e34:	080046ed 	.word	0x080046ed
 8003e38:	080046ed 	.word	0x080046ed
 8003e3c:	080046ed 	.word	0x080046ed
 8003e40:	080046ed 	.word	0x080046ed
 8003e44:	080046ed 	.word	0x080046ed
 8003e48:	080046ed 	.word	0x080046ed
 8003e4c:	080046ed 	.word	0x080046ed
 8003e50:	080046ed 	.word	0x080046ed
 8003e54:	080046ed 	.word	0x080046ed
 8003e58:	080046ed 	.word	0x080046ed
 8003e5c:	080046ed 	.word	0x080046ed
 8003e60:	080046ed 	.word	0x080046ed
 8003e64:	080046ed 	.word	0x080046ed
 8003e68:	080046ed 	.word	0x080046ed
 8003e6c:	080046ed 	.word	0x080046ed
 8003e70:	080046ed 	.word	0x080046ed
 8003e74:	080046ed 	.word	0x080046ed
 8003e78:	080046ed 	.word	0x080046ed
 8003e7c:	080046ed 	.word	0x080046ed
 8003e80:	080046ed 	.word	0x080046ed
 8003e84:	080046ed 	.word	0x080046ed
 8003e88:	080046ed 	.word	0x080046ed
 8003e8c:	080046ed 	.word	0x080046ed
 8003e90:	080046ed 	.word	0x080046ed
 8003e94:	080046ed 	.word	0x080046ed
 8003e98:	080046ed 	.word	0x080046ed
 8003e9c:	080046ed 	.word	0x080046ed
 8003ea0:	080046ed 	.word	0x080046ed
 8003ea4:	080046ed 	.word	0x080046ed
 8003ea8:	080046ed 	.word	0x080046ed
 8003eac:	080046ed 	.word	0x080046ed
 8003eb0:	080046ed 	.word	0x080046ed
 8003eb4:	080046ed 	.word	0x080046ed
 8003eb8:	080046ed 	.word	0x080046ed
 8003ebc:	080046ed 	.word	0x080046ed
 8003ec0:	080046ed 	.word	0x080046ed
 8003ec4:	080046ed 	.word	0x080046ed
 8003ec8:	080046ed 	.word	0x080046ed
 8003ecc:	080046ed 	.word	0x080046ed
 8003ed0:	080046ed 	.word	0x080046ed
 8003ed4:	080046ed 	.word	0x080046ed
 8003ed8:	080046ed 	.word	0x080046ed
 8003edc:	080046ed 	.word	0x080046ed
 8003ee0:	080046ed 	.word	0x080046ed
 8003ee4:	080046ed 	.word	0x080046ed
 8003ee8:	080046ed 	.word	0x080046ed
 8003eec:	080046ed 	.word	0x080046ed
 8003ef0:	080046ed 	.word	0x080046ed
 8003ef4:	080046ed 	.word	0x080046ed
 8003ef8:	080046ed 	.word	0x080046ed
 8003efc:	080046ed 	.word	0x080046ed
 8003f00:	080046ed 	.word	0x080046ed
 8003f04:	080046ed 	.word	0x080046ed
 8003f08:	080046ed 	.word	0x080046ed
 8003f0c:	080046ed 	.word	0x080046ed
 8003f10:	080046ed 	.word	0x080046ed
 8003f14:	080046ed 	.word	0x080046ed
 8003f18:	080046ed 	.word	0x080046ed
 8003f1c:	080046ed 	.word	0x080046ed
 8003f20:	080046ed 	.word	0x080046ed
 8003f24:	080046ed 	.word	0x080046ed
 8003f28:	080046ed 	.word	0x080046ed
 8003f2c:	080046ed 	.word	0x080046ed
 8003f30:	080046ed 	.word	0x080046ed
 8003f34:	080046ed 	.word	0x080046ed
 8003f38:	080046ed 	.word	0x080046ed
 8003f3c:	080046ed 	.word	0x080046ed
 8003f40:	080046ed 	.word	0x080046ed
 8003f44:	080046ed 	.word	0x080046ed
 8003f48:	080046ed 	.word	0x080046ed
 8003f4c:	080046ed 	.word	0x080046ed
 8003f50:	080046ed 	.word	0x080046ed
 8003f54:	080046ed 	.word	0x080046ed
 8003f58:	080046ed 	.word	0x080046ed
 8003f5c:	080046ed 	.word	0x080046ed
 8003f60:	080046ed 	.word	0x080046ed
 8003f64:	080046ed 	.word	0x080046ed
 8003f68:	080046ed 	.word	0x080046ed
 8003f6c:	080046ed 	.word	0x080046ed
 8003f70:	080046ed 	.word	0x080046ed
 8003f74:	080046ed 	.word	0x080046ed
 8003f78:	080046ed 	.word	0x080046ed
 8003f7c:	080046ed 	.word	0x080046ed
 8003f80:	080046ed 	.word	0x080046ed
 8003f84:	080046ed 	.word	0x080046ed
 8003f88:	080046ed 	.word	0x080046ed
 8003f8c:	080046ed 	.word	0x080046ed
 8003f90:	080046ed 	.word	0x080046ed
 8003f94:	080046ed 	.word	0x080046ed
 8003f98:	080046ed 	.word	0x080046ed
 8003f9c:	080046ed 	.word	0x080046ed
 8003fa0:	080046ed 	.word	0x080046ed
 8003fa4:	080046ed 	.word	0x080046ed
 8003fa8:	080046ed 	.word	0x080046ed
 8003fac:	080046ed 	.word	0x080046ed
 8003fb0:	080045fd 	.word	0x080045fd
 8003fb4:	08004601 	.word	0x08004601
 8003fb8:	08004605 	.word	0x08004605
 8003fbc:	08004609 	.word	0x08004609
 8003fc0:	0800460d 	.word	0x0800460d
 8003fc4:	08004611 	.word	0x08004611
 8003fc8:	08004615 	.word	0x08004615
 8003fcc:	08004619 	.word	0x08004619
 8003fd0:	0800461d 	.word	0x0800461d
 8003fd4:	080046ed 	.word	0x080046ed
 8003fd8:	080046ed 	.word	0x080046ed
 8003fdc:	080046ed 	.word	0x080046ed
 8003fe0:	080046ed 	.word	0x080046ed
 8003fe4:	080046ed 	.word	0x080046ed
 8003fe8:	080046ed 	.word	0x080046ed
 8003fec:	080046ed 	.word	0x080046ed
 8003ff0:	080046ed 	.word	0x080046ed
 8003ff4:	080046ed 	.word	0x080046ed
 8003ff8:	080046ed 	.word	0x080046ed
 8003ffc:	080046ed 	.word	0x080046ed
 8004000:	080046ed 	.word	0x080046ed
 8004004:	080046ed 	.word	0x080046ed
 8004008:	080046ed 	.word	0x080046ed
 800400c:	080046ed 	.word	0x080046ed
 8004010:	080046ed 	.word	0x080046ed
 8004014:	080046ed 	.word	0x080046ed
 8004018:	08004621 	.word	0x08004621
 800401c:	080046ed 	.word	0x080046ed
 8004020:	080046ed 	.word	0x080046ed
 8004024:	080046ed 	.word	0x080046ed
 8004028:	080046ed 	.word	0x080046ed
 800402c:	080046ed 	.word	0x080046ed
 8004030:	080046ed 	.word	0x080046ed
 8004034:	080046ed 	.word	0x080046ed
 8004038:	080046ed 	.word	0x080046ed
 800403c:	080046ed 	.word	0x080046ed
 8004040:	080046ed 	.word	0x080046ed
 8004044:	080046ed 	.word	0x080046ed
 8004048:	080046ed 	.word	0x080046ed
 800404c:	080046ed 	.word	0x080046ed
 8004050:	080046ed 	.word	0x080046ed
 8004054:	080046ed 	.word	0x080046ed
 8004058:	080046ed 	.word	0x080046ed
 800405c:	080046ed 	.word	0x080046ed
 8004060:	080046ed 	.word	0x080046ed
 8004064:	080046ed 	.word	0x080046ed
 8004068:	080046ed 	.word	0x080046ed
 800406c:	080046ed 	.word	0x080046ed
 8004070:	080046ed 	.word	0x080046ed
 8004074:	080046ed 	.word	0x080046ed
 8004078:	080046ed 	.word	0x080046ed
 800407c:	080046ed 	.word	0x080046ed
 8004080:	080046ed 	.word	0x080046ed
 8004084:	080046ed 	.word	0x080046ed
 8004088:	080046ed 	.word	0x080046ed
 800408c:	080046ed 	.word	0x080046ed
 8004090:	080046ed 	.word	0x080046ed
 8004094:	080046ed 	.word	0x080046ed
 8004098:	080046ed 	.word	0x080046ed
 800409c:	080046ed 	.word	0x080046ed
 80040a0:	080046ed 	.word	0x080046ed
 80040a4:	080046ed 	.word	0x080046ed
 80040a8:	080046ed 	.word	0x080046ed
 80040ac:	080046ed 	.word	0x080046ed
 80040b0:	080046ed 	.word	0x080046ed
 80040b4:	080046ed 	.word	0x080046ed
 80040b8:	080046ed 	.word	0x080046ed
 80040bc:	080046ed 	.word	0x080046ed
 80040c0:	080046ed 	.word	0x080046ed
 80040c4:	080046ed 	.word	0x080046ed
 80040c8:	080046ed 	.word	0x080046ed
 80040cc:	080046ed 	.word	0x080046ed
 80040d0:	080046ed 	.word	0x080046ed
 80040d4:	080046ed 	.word	0x080046ed
 80040d8:	080046ed 	.word	0x080046ed
 80040dc:	080046ed 	.word	0x080046ed
 80040e0:	080046ed 	.word	0x080046ed
 80040e4:	080046ed 	.word	0x080046ed
 80040e8:	080046ed 	.word	0x080046ed
 80040ec:	080046ed 	.word	0x080046ed
 80040f0:	080046ed 	.word	0x080046ed
 80040f4:	080046ed 	.word	0x080046ed
 80040f8:	080046ed 	.word	0x080046ed
 80040fc:	080046ed 	.word	0x080046ed
 8004100:	080046ed 	.word	0x080046ed
 8004104:	080046ed 	.word	0x080046ed
 8004108:	080046ed 	.word	0x080046ed
 800410c:	080046ed 	.word	0x080046ed
 8004110:	080046ed 	.word	0x080046ed
 8004114:	080046ed 	.word	0x080046ed
 8004118:	080046ed 	.word	0x080046ed
 800411c:	080046ed 	.word	0x080046ed
 8004120:	080046ed 	.word	0x080046ed
 8004124:	080046ed 	.word	0x080046ed
 8004128:	080046ed 	.word	0x080046ed
 800412c:	080046ed 	.word	0x080046ed
 8004130:	080046ed 	.word	0x080046ed
 8004134:	080046ed 	.word	0x080046ed
 8004138:	080046ed 	.word	0x080046ed
 800413c:	080046ed 	.word	0x080046ed
 8004140:	08004625 	.word	0x08004625
 8004144:	08004629 	.word	0x08004629
 8004148:	0800462d 	.word	0x0800462d
 800414c:	08004631 	.word	0x08004631
 8004150:	08004635 	.word	0x08004635
 8004154:	08004639 	.word	0x08004639
 8004158:	080046ed 	.word	0x080046ed
 800415c:	0800463d 	.word	0x0800463d
 8004160:	08004641 	.word	0x08004641
 8004164:	080046ed 	.word	0x080046ed
 8004168:	080046ed 	.word	0x080046ed
 800416c:	080046ed 	.word	0x080046ed
 8004170:	080046ed 	.word	0x080046ed
 8004174:	080046ed 	.word	0x080046ed
 8004178:	080046ed 	.word	0x080046ed
 800417c:	080046ed 	.word	0x080046ed
 8004180:	080046ed 	.word	0x080046ed
 8004184:	080046ed 	.word	0x080046ed
 8004188:	080046ed 	.word	0x080046ed
 800418c:	080046ed 	.word	0x080046ed
 8004190:	080046ed 	.word	0x080046ed
 8004194:	080046ed 	.word	0x080046ed
 8004198:	080046ed 	.word	0x080046ed
 800419c:	080046ed 	.word	0x080046ed
 80041a0:	080046ed 	.word	0x080046ed
 80041a4:	080046ed 	.word	0x080046ed
 80041a8:	080046ed 	.word	0x080046ed
 80041ac:	080046ed 	.word	0x080046ed
 80041b0:	080046ed 	.word	0x080046ed
 80041b4:	080046ed 	.word	0x080046ed
 80041b8:	080046ed 	.word	0x080046ed
 80041bc:	080046ed 	.word	0x080046ed
 80041c0:	080046ed 	.word	0x080046ed
 80041c4:	080046ed 	.word	0x080046ed
 80041c8:	080046ed 	.word	0x080046ed
 80041cc:	080046ed 	.word	0x080046ed
 80041d0:	080046ed 	.word	0x080046ed
 80041d4:	080046ed 	.word	0x080046ed
 80041d8:	080046ed 	.word	0x080046ed
 80041dc:	080046ed 	.word	0x080046ed
 80041e0:	080046ed 	.word	0x080046ed
 80041e4:	080046ed 	.word	0x080046ed
 80041e8:	080046ed 	.word	0x080046ed
 80041ec:	080046ed 	.word	0x080046ed
 80041f0:	080046ed 	.word	0x080046ed
 80041f4:	080046ed 	.word	0x080046ed
 80041f8:	080046ed 	.word	0x080046ed
 80041fc:	080046ed 	.word	0x080046ed
 8004200:	080046ed 	.word	0x080046ed
 8004204:	080046ed 	.word	0x080046ed
 8004208:	080046ed 	.word	0x080046ed
 800420c:	080046ed 	.word	0x080046ed
 8004210:	080046ed 	.word	0x080046ed
 8004214:	080046ed 	.word	0x080046ed
 8004218:	080046ed 	.word	0x080046ed
 800421c:	080046ed 	.word	0x080046ed
 8004220:	080046ed 	.word	0x080046ed
 8004224:	080046ed 	.word	0x080046ed
 8004228:	080046ed 	.word	0x080046ed
 800422c:	080046ed 	.word	0x080046ed
 8004230:	080046ed 	.word	0x080046ed
 8004234:	080046ed 	.word	0x080046ed
 8004238:	080046ed 	.word	0x080046ed
 800423c:	080046ed 	.word	0x080046ed
 8004240:	080046ed 	.word	0x080046ed
 8004244:	080046ed 	.word	0x080046ed
 8004248:	080046ed 	.word	0x080046ed
 800424c:	080046ed 	.word	0x080046ed
 8004250:	080046ed 	.word	0x080046ed
 8004254:	080046ed 	.word	0x080046ed
 8004258:	080046ed 	.word	0x080046ed
 800425c:	080046ed 	.word	0x080046ed
 8004260:	080046ed 	.word	0x080046ed
 8004264:	080046ed 	.word	0x080046ed
 8004268:	080046ed 	.word	0x080046ed
 800426c:	080046ed 	.word	0x080046ed
 8004270:	080046ed 	.word	0x080046ed
 8004274:	080046ed 	.word	0x080046ed
 8004278:	080046ed 	.word	0x080046ed
 800427c:	080046ed 	.word	0x080046ed
 8004280:	080046ed 	.word	0x080046ed
 8004284:	080046ed 	.word	0x080046ed
 8004288:	080046ed 	.word	0x080046ed
 800428c:	080046ed 	.word	0x080046ed
 8004290:	080046ed 	.word	0x080046ed
 8004294:	080046ed 	.word	0x080046ed
 8004298:	080046ed 	.word	0x080046ed
 800429c:	080046ed 	.word	0x080046ed
 80042a0:	080046ed 	.word	0x080046ed
 80042a4:	080046ed 	.word	0x080046ed
 80042a8:	080046ed 	.word	0x080046ed
 80042ac:	080046ed 	.word	0x080046ed
 80042b0:	080046ed 	.word	0x080046ed
 80042b4:	080046ed 	.word	0x080046ed
 80042b8:	080046ed 	.word	0x080046ed
 80042bc:	080046ed 	.word	0x080046ed
 80042c0:	080046ed 	.word	0x080046ed
 80042c4:	080046ed 	.word	0x080046ed
 80042c8:	080046ed 	.word	0x080046ed
 80042cc:	080046ed 	.word	0x080046ed
 80042d0:	08004645 	.word	0x08004645
 80042d4:	08004649 	.word	0x08004649
 80042d8:	0800464d 	.word	0x0800464d
 80042dc:	08004651 	.word	0x08004651
 80042e0:	08004655 	.word	0x08004655
 80042e4:	08004659 	.word	0x08004659
 80042e8:	0800465d 	.word	0x0800465d
 80042ec:	08004661 	.word	0x08004661
 80042f0:	08004665 	.word	0x08004665
 80042f4:	08004669 	.word	0x08004669
 80042f8:	0800466d 	.word	0x0800466d
 80042fc:	08004671 	.word	0x08004671
 8004300:	08004675 	.word	0x08004675
 8004304:	08004679 	.word	0x08004679
 8004308:	0800467d 	.word	0x0800467d
 800430c:	08004681 	.word	0x08004681
 8004310:	08004685 	.word	0x08004685
 8004314:	08004689 	.word	0x08004689
 8004318:	0800468d 	.word	0x0800468d
 800431c:	080046ed 	.word	0x080046ed
 8004320:	080046ed 	.word	0x080046ed
 8004324:	08004691 	.word	0x08004691
 8004328:	08004695 	.word	0x08004695
 800432c:	08004699 	.word	0x08004699
 8004330:	0800469d 	.word	0x0800469d
 8004334:	080046ed 	.word	0x080046ed
 8004338:	080046a1 	.word	0x080046a1
 800433c:	080046ed 	.word	0x080046ed
 8004340:	080046a5 	.word	0x080046a5
 8004344:	080046a9 	.word	0x080046a9
 8004348:	080046ed 	.word	0x080046ed
 800434c:	080046ad 	.word	0x080046ad
 8004350:	080046ed 	.word	0x080046ed
 8004354:	080046ed 	.word	0x080046ed
 8004358:	080046ed 	.word	0x080046ed
 800435c:	080046ed 	.word	0x080046ed
 8004360:	080046ed 	.word	0x080046ed
 8004364:	080046ed 	.word	0x080046ed
 8004368:	080046ed 	.word	0x080046ed
 800436c:	080046ed 	.word	0x080046ed
 8004370:	080046ed 	.word	0x080046ed
 8004374:	080046ed 	.word	0x080046ed
 8004378:	080046ed 	.word	0x080046ed
 800437c:	080046ed 	.word	0x080046ed
 8004380:	080046b1 	.word	0x080046b1
 8004384:	080046ed 	.word	0x080046ed
 8004388:	080046ed 	.word	0x080046ed
 800438c:	080046ed 	.word	0x080046ed
 8004390:	080046ed 	.word	0x080046ed
 8004394:	080046ed 	.word	0x080046ed
 8004398:	080046ed 	.word	0x080046ed
 800439c:	080046b5 	.word	0x080046b5
 80043a0:	080046ed 	.word	0x080046ed
 80043a4:	080046ed 	.word	0x080046ed
 80043a8:	080046ed 	.word	0x080046ed
 80043ac:	080046ed 	.word	0x080046ed
 80043b0:	080046ed 	.word	0x080046ed
 80043b4:	080046ed 	.word	0x080046ed
 80043b8:	080046ed 	.word	0x080046ed
 80043bc:	080046ed 	.word	0x080046ed
 80043c0:	080046ed 	.word	0x080046ed
 80043c4:	080046ed 	.word	0x080046ed
 80043c8:	080046ed 	.word	0x080046ed
 80043cc:	080046ed 	.word	0x080046ed
 80043d0:	080046ed 	.word	0x080046ed
 80043d4:	080046ed 	.word	0x080046ed
 80043d8:	080046ed 	.word	0x080046ed
 80043dc:	080046ed 	.word	0x080046ed
 80043e0:	080046ed 	.word	0x080046ed
 80043e4:	080046ed 	.word	0x080046ed
 80043e8:	080046ed 	.word	0x080046ed
 80043ec:	080046ed 	.word	0x080046ed
 80043f0:	080046ed 	.word	0x080046ed
 80043f4:	080046ed 	.word	0x080046ed
 80043f8:	080046ed 	.word	0x080046ed
 80043fc:	080046ed 	.word	0x080046ed
 8004400:	080046ed 	.word	0x080046ed
 8004404:	080046ed 	.word	0x080046ed
 8004408:	080046ed 	.word	0x080046ed
 800440c:	080046ed 	.word	0x080046ed
 8004410:	080046ed 	.word	0x080046ed
 8004414:	080046ed 	.word	0x080046ed
 8004418:	080046ed 	.word	0x080046ed
 800441c:	080046ed 	.word	0x080046ed
 8004420:	080046ed 	.word	0x080046ed
 8004424:	080046ed 	.word	0x080046ed
 8004428:	080046ed 	.word	0x080046ed
 800442c:	080046ed 	.word	0x080046ed
 8004430:	080046ed 	.word	0x080046ed
 8004434:	080046ed 	.word	0x080046ed
 8004438:	080046ed 	.word	0x080046ed
 800443c:	080046ed 	.word	0x080046ed
 8004440:	080046ed 	.word	0x080046ed
 8004444:	080046ed 	.word	0x080046ed
 8004448:	080046ed 	.word	0x080046ed
 800444c:	080046ed 	.word	0x080046ed
 8004450:	080046ed 	.word	0x080046ed
 8004454:	080046ed 	.word	0x080046ed
 8004458:	080046ed 	.word	0x080046ed
 800445c:	080046b9 	.word	0x080046b9
 8004460:	080046bd 	.word	0x080046bd
 8004464:	080046c1 	.word	0x080046c1
 8004468:	080046c5 	.word	0x080046c5
 800446c:	080046c9 	.word	0x080046c9
 8004470:	080046cd 	.word	0x080046cd
 8004474:	080046d1 	.word	0x080046d1
 8004478:	080046d5 	.word	0x080046d5
 800447c:	080046d9 	.word	0x080046d9
 8004480:	080046dd 	.word	0x080046dd
 8004484:	080046ed 	.word	0x080046ed
 8004488:	080046e1 	.word	0x080046e1
 800448c:	080046e5 	.word	0x080046e5
 8004490:	080046ed 	.word	0x080046ed
 8004494:	080046ed 	.word	0x080046ed
 8004498:	080046ed 	.word	0x080046ed
 800449c:	080046ed 	.word	0x080046ed
 80044a0:	080046ed 	.word	0x080046ed
 80044a4:	080046ed 	.word	0x080046ed
 80044a8:	080046ed 	.word	0x080046ed
 80044ac:	080046ed 	.word	0x080046ed
 80044b0:	080046ed 	.word	0x080046ed
 80044b4:	080046ed 	.word	0x080046ed
 80044b8:	080046ed 	.word	0x080046ed
 80044bc:	080046ed 	.word	0x080046ed
 80044c0:	080046ed 	.word	0x080046ed
 80044c4:	080046ed 	.word	0x080046ed
 80044c8:	080046ed 	.word	0x080046ed
 80044cc:	080046ed 	.word	0x080046ed
 80044d0:	080046ed 	.word	0x080046ed
 80044d4:	080046ed 	.word	0x080046ed
 80044d8:	080046ed 	.word	0x080046ed
 80044dc:	080046ed 	.word	0x080046ed
 80044e0:	080046ed 	.word	0x080046ed
 80044e4:	080046ed 	.word	0x080046ed
 80044e8:	080046ed 	.word	0x080046ed
 80044ec:	080046ed 	.word	0x080046ed
 80044f0:	080046ed 	.word	0x080046ed
 80044f4:	080046ed 	.word	0x080046ed
 80044f8:	080046ed 	.word	0x080046ed
 80044fc:	080046ed 	.word	0x080046ed
 8004500:	080046ed 	.word	0x080046ed
 8004504:	080046ed 	.word	0x080046ed
 8004508:	080046ed 	.word	0x080046ed
 800450c:	080046ed 	.word	0x080046ed
 8004510:	080046ed 	.word	0x080046ed
 8004514:	080046ed 	.word	0x080046ed
 8004518:	080046ed 	.word	0x080046ed
 800451c:	080046ed 	.word	0x080046ed
 8004520:	080046ed 	.word	0x080046ed
 8004524:	080046ed 	.word	0x080046ed
 8004528:	080046ed 	.word	0x080046ed
 800452c:	080046ed 	.word	0x080046ed
 8004530:	080046ed 	.word	0x080046ed
 8004534:	080046ed 	.word	0x080046ed
 8004538:	080046ed 	.word	0x080046ed
 800453c:	080046ed 	.word	0x080046ed
 8004540:	080046ed 	.word	0x080046ed
 8004544:	080046ed 	.word	0x080046ed
 8004548:	080046ed 	.word	0x080046ed
 800454c:	080046ed 	.word	0x080046ed
 8004550:	080046ed 	.word	0x080046ed
 8004554:	080046ed 	.word	0x080046ed
 8004558:	080046ed 	.word	0x080046ed
 800455c:	080046ed 	.word	0x080046ed
 8004560:	080046ed 	.word	0x080046ed
 8004564:	080046ed 	.word	0x080046ed
 8004568:	080046ed 	.word	0x080046ed
 800456c:	080046ed 	.word	0x080046ed
 8004570:	080046ed 	.word	0x080046ed
 8004574:	080046ed 	.word	0x080046ed
 8004578:	080046ed 	.word	0x080046ed
 800457c:	080046ed 	.word	0x080046ed
 8004580:	080046ed 	.word	0x080046ed
 8004584:	080046ed 	.word	0x080046ed
 8004588:	080046ed 	.word	0x080046ed
 800458c:	080046ed 	.word	0x080046ed
 8004590:	080046ed 	.word	0x080046ed
 8004594:	080046ed 	.word	0x080046ed
 8004598:	080046ed 	.word	0x080046ed
 800459c:	080046ed 	.word	0x080046ed
 80045a0:	080046ed 	.word	0x080046ed
 80045a4:	080046ed 	.word	0x080046ed
 80045a8:	080046ed 	.word	0x080046ed
 80045ac:	080046ed 	.word	0x080046ed
 80045b0:	080046ed 	.word	0x080046ed
 80045b4:	080046ed 	.word	0x080046ed
 80045b8:	080046ed 	.word	0x080046ed
 80045bc:	080046ed 	.word	0x080046ed
 80045c0:	080046ed 	.word	0x080046ed
 80045c4:	080046ed 	.word	0x080046ed
 80045c8:	080046ed 	.word	0x080046ed
 80045cc:	080046ed 	.word	0x080046ed
 80045d0:	080046ed 	.word	0x080046ed
 80045d4:	080046ed 	.word	0x080046ed
 80045d8:	080046ed 	.word	0x080046ed
 80045dc:	080046ed 	.word	0x080046ed
 80045e0:	080046ed 	.word	0x080046ed
 80045e4:	080046ed 	.word	0x080046ed
 80045e8:	080046ed 	.word	0x080046ed
 80045ec:	080046e9 	.word	0x080046e9
    case 100: return "Continue";
 80045f0:	4b42      	ldr	r3, [pc, #264]	; (80046fc <mg_http_status_code_str+0x8f8>)
 80045f2:	e07c      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 101: return "Switching Protocols";
 80045f4:	4b42      	ldr	r3, [pc, #264]	; (8004700 <mg_http_status_code_str+0x8fc>)
 80045f6:	e07a      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 102: return "Processing";
 80045f8:	4b42      	ldr	r3, [pc, #264]	; (8004704 <mg_http_status_code_str+0x900>)
 80045fa:	e078      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 200: return "OK";
 80045fc:	4b42      	ldr	r3, [pc, #264]	; (8004708 <mg_http_status_code_str+0x904>)
 80045fe:	e076      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 201: return "Created";
 8004600:	4b42      	ldr	r3, [pc, #264]	; (800470c <mg_http_status_code_str+0x908>)
 8004602:	e074      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 202: return "Accepted";
 8004604:	4b42      	ldr	r3, [pc, #264]	; (8004710 <mg_http_status_code_str+0x90c>)
 8004606:	e072      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 203: return "Non-authoritative Information";
 8004608:	4b42      	ldr	r3, [pc, #264]	; (8004714 <mg_http_status_code_str+0x910>)
 800460a:	e070      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 204: return "No Content";
 800460c:	4b42      	ldr	r3, [pc, #264]	; (8004718 <mg_http_status_code_str+0x914>)
 800460e:	e06e      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 205: return "Reset Content";
 8004610:	4b42      	ldr	r3, [pc, #264]	; (800471c <mg_http_status_code_str+0x918>)
 8004612:	e06c      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 206: return "Partial Content";
 8004614:	4b42      	ldr	r3, [pc, #264]	; (8004720 <mg_http_status_code_str+0x91c>)
 8004616:	e06a      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 207: return "Multi-Status";
 8004618:	4b42      	ldr	r3, [pc, #264]	; (8004724 <mg_http_status_code_str+0x920>)
 800461a:	e068      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 208: return "Already Reported";
 800461c:	4b42      	ldr	r3, [pc, #264]	; (8004728 <mg_http_status_code_str+0x924>)
 800461e:	e066      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 226: return "IM Used";
 8004620:	4b42      	ldr	r3, [pc, #264]	; (800472c <mg_http_status_code_str+0x928>)
 8004622:	e064      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 300: return "Multiple Choices";
 8004624:	4b42      	ldr	r3, [pc, #264]	; (8004730 <mg_http_status_code_str+0x92c>)
 8004626:	e062      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 301: return "Moved Permanently";
 8004628:	4b42      	ldr	r3, [pc, #264]	; (8004734 <mg_http_status_code_str+0x930>)
 800462a:	e060      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 302: return "Found";
 800462c:	4b42      	ldr	r3, [pc, #264]	; (8004738 <mg_http_status_code_str+0x934>)
 800462e:	e05e      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 303: return "See Other";
 8004630:	4b42      	ldr	r3, [pc, #264]	; (800473c <mg_http_status_code_str+0x938>)
 8004632:	e05c      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 304: return "Not Modified";
 8004634:	4b42      	ldr	r3, [pc, #264]	; (8004740 <mg_http_status_code_str+0x93c>)
 8004636:	e05a      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 305: return "Use Proxy";
 8004638:	4b42      	ldr	r3, [pc, #264]	; (8004744 <mg_http_status_code_str+0x940>)
 800463a:	e058      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 307: return "Temporary Redirect";
 800463c:	4b42      	ldr	r3, [pc, #264]	; (8004748 <mg_http_status_code_str+0x944>)
 800463e:	e056      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 308: return "Permanent Redirect";
 8004640:	4b42      	ldr	r3, [pc, #264]	; (800474c <mg_http_status_code_str+0x948>)
 8004642:	e054      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 400: return "Bad Request";
 8004644:	4b42      	ldr	r3, [pc, #264]	; (8004750 <mg_http_status_code_str+0x94c>)
 8004646:	e052      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 401: return "Unauthorized";
 8004648:	4b42      	ldr	r3, [pc, #264]	; (8004754 <mg_http_status_code_str+0x950>)
 800464a:	e050      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 402: return "Payment Required";
 800464c:	4b42      	ldr	r3, [pc, #264]	; (8004758 <mg_http_status_code_str+0x954>)
 800464e:	e04e      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 403: return "Forbidden";
 8004650:	4b42      	ldr	r3, [pc, #264]	; (800475c <mg_http_status_code_str+0x958>)
 8004652:	e04c      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 404: return "Not Found";
 8004654:	4b42      	ldr	r3, [pc, #264]	; (8004760 <mg_http_status_code_str+0x95c>)
 8004656:	e04a      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 405: return "Method Not Allowed";
 8004658:	4b42      	ldr	r3, [pc, #264]	; (8004764 <mg_http_status_code_str+0x960>)
 800465a:	e048      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 406: return "Not Acceptable";
 800465c:	4b42      	ldr	r3, [pc, #264]	; (8004768 <mg_http_status_code_str+0x964>)
 800465e:	e046      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 407: return "Proxy Authentication Required";
 8004660:	4b42      	ldr	r3, [pc, #264]	; (800476c <mg_http_status_code_str+0x968>)
 8004662:	e044      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 408: return "Request Timeout";
 8004664:	4b42      	ldr	r3, [pc, #264]	; (8004770 <mg_http_status_code_str+0x96c>)
 8004666:	e042      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 409: return "Conflict";
 8004668:	4b42      	ldr	r3, [pc, #264]	; (8004774 <mg_http_status_code_str+0x970>)
 800466a:	e040      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 410: return "Gone";
 800466c:	4b42      	ldr	r3, [pc, #264]	; (8004778 <mg_http_status_code_str+0x974>)
 800466e:	e03e      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 411: return "Length Required";
 8004670:	4b42      	ldr	r3, [pc, #264]	; (800477c <mg_http_status_code_str+0x978>)
 8004672:	e03c      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 412: return "Precondition Failed";
 8004674:	4b42      	ldr	r3, [pc, #264]	; (8004780 <mg_http_status_code_str+0x97c>)
 8004676:	e03a      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 413: return "Payload Too Large";
 8004678:	4b42      	ldr	r3, [pc, #264]	; (8004784 <mg_http_status_code_str+0x980>)
 800467a:	e038      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 414: return "Request-URI Too Long";
 800467c:	4b42      	ldr	r3, [pc, #264]	; (8004788 <mg_http_status_code_str+0x984>)
 800467e:	e036      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 415: return "Unsupported Media Type";
 8004680:	4b42      	ldr	r3, [pc, #264]	; (800478c <mg_http_status_code_str+0x988>)
 8004682:	e034      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 416: return "Requested Range Not Satisfiable";
 8004684:	4b42      	ldr	r3, [pc, #264]	; (8004790 <mg_http_status_code_str+0x98c>)
 8004686:	e032      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 417: return "Expectation Failed";
 8004688:	4b42      	ldr	r3, [pc, #264]	; (8004794 <mg_http_status_code_str+0x990>)
 800468a:	e030      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 418: return "I'm a teapot";
 800468c:	4b42      	ldr	r3, [pc, #264]	; (8004798 <mg_http_status_code_str+0x994>)
 800468e:	e02e      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 421: return "Misdirected Request";
 8004690:	4b42      	ldr	r3, [pc, #264]	; (800479c <mg_http_status_code_str+0x998>)
 8004692:	e02c      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 422: return "Unprocessable Entity";
 8004694:	4b42      	ldr	r3, [pc, #264]	; (80047a0 <mg_http_status_code_str+0x99c>)
 8004696:	e02a      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 423: return "Locked";
 8004698:	4b42      	ldr	r3, [pc, #264]	; (80047a4 <mg_http_status_code_str+0x9a0>)
 800469a:	e028      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 424: return "Failed Dependency";
 800469c:	4b42      	ldr	r3, [pc, #264]	; (80047a8 <mg_http_status_code_str+0x9a4>)
 800469e:	e026      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 426: return "Upgrade Required";
 80046a0:	4b42      	ldr	r3, [pc, #264]	; (80047ac <mg_http_status_code_str+0x9a8>)
 80046a2:	e024      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 428: return "Precondition Required";
 80046a4:	4b42      	ldr	r3, [pc, #264]	; (80047b0 <mg_http_status_code_str+0x9ac>)
 80046a6:	e022      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 429: return "Too Many Requests";
 80046a8:	4b42      	ldr	r3, [pc, #264]	; (80047b4 <mg_http_status_code_str+0x9b0>)
 80046aa:	e020      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 431: return "Request Header Fields Too Large";
 80046ac:	4b42      	ldr	r3, [pc, #264]	; (80047b8 <mg_http_status_code_str+0x9b4>)
 80046ae:	e01e      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 444: return "Connection Closed Without Response";
 80046b0:	4b42      	ldr	r3, [pc, #264]	; (80047bc <mg_http_status_code_str+0x9b8>)
 80046b2:	e01c      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 451: return "Unavailable For Legal Reasons";
 80046b4:	4b42      	ldr	r3, [pc, #264]	; (80047c0 <mg_http_status_code_str+0x9bc>)
 80046b6:	e01a      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 499: return "Client Closed Request";
 80046b8:	4b42      	ldr	r3, [pc, #264]	; (80047c4 <mg_http_status_code_str+0x9c0>)
 80046ba:	e018      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 500: return "Internal Server Error";
 80046bc:	4b42      	ldr	r3, [pc, #264]	; (80047c8 <mg_http_status_code_str+0x9c4>)
 80046be:	e016      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 501: return "Not Implemented";
 80046c0:	4b42      	ldr	r3, [pc, #264]	; (80047cc <mg_http_status_code_str+0x9c8>)
 80046c2:	e014      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 502: return "Bad Gateway";
 80046c4:	4b42      	ldr	r3, [pc, #264]	; (80047d0 <mg_http_status_code_str+0x9cc>)
 80046c6:	e012      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 503: return "Service Unavailable";
 80046c8:	4b42      	ldr	r3, [pc, #264]	; (80047d4 <mg_http_status_code_str+0x9d0>)
 80046ca:	e010      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 504: return "Gateway Timeout";
 80046cc:	4b42      	ldr	r3, [pc, #264]	; (80047d8 <mg_http_status_code_str+0x9d4>)
 80046ce:	e00e      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 505: return "HTTP Version Not Supported";
 80046d0:	4b42      	ldr	r3, [pc, #264]	; (80047dc <mg_http_status_code_str+0x9d8>)
 80046d2:	e00c      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 506: return "Variant Also Negotiates";
 80046d4:	4b42      	ldr	r3, [pc, #264]	; (80047e0 <mg_http_status_code_str+0x9dc>)
 80046d6:	e00a      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 507: return "Insufficient Storage";
 80046d8:	4b42      	ldr	r3, [pc, #264]	; (80047e4 <mg_http_status_code_str+0x9e0>)
 80046da:	e008      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 508: return "Loop Detected";
 80046dc:	4b42      	ldr	r3, [pc, #264]	; (80047e8 <mg_http_status_code_str+0x9e4>)
 80046de:	e006      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 510: return "Not Extended";
 80046e0:	4b42      	ldr	r3, [pc, #264]	; (80047ec <mg_http_status_code_str+0x9e8>)
 80046e2:	e004      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 511: return "Network Authentication Required";
 80046e4:	4b42      	ldr	r3, [pc, #264]	; (80047f0 <mg_http_status_code_str+0x9ec>)
 80046e6:	e002      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    case 599: return "Network Connect Timeout Error";
 80046e8:	4b42      	ldr	r3, [pc, #264]	; (80047f4 <mg_http_status_code_str+0x9f0>)
 80046ea:	e000      	b.n	80046ee <mg_http_status_code_str+0x8ea>
    default: return "";
 80046ec:	4b42      	ldr	r3, [pc, #264]	; (80047f8 <mg_http_status_code_str+0x9f4>)
  }
}
 80046ee:	4618      	mov	r0, r3
 80046f0:	370c      	adds	r7, #12
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	08015648 	.word	0x08015648
 8004700:	08015654 	.word	0x08015654
 8004704:	08015668 	.word	0x08015668
 8004708:	08015674 	.word	0x08015674
 800470c:	08015678 	.word	0x08015678
 8004710:	08015680 	.word	0x08015680
 8004714:	0801568c 	.word	0x0801568c
 8004718:	080156ac 	.word	0x080156ac
 800471c:	080156b8 	.word	0x080156b8
 8004720:	080156c8 	.word	0x080156c8
 8004724:	080156d8 	.word	0x080156d8
 8004728:	080156e8 	.word	0x080156e8
 800472c:	080156fc 	.word	0x080156fc
 8004730:	08015704 	.word	0x08015704
 8004734:	08015718 	.word	0x08015718
 8004738:	0801572c 	.word	0x0801572c
 800473c:	08015734 	.word	0x08015734
 8004740:	08015740 	.word	0x08015740
 8004744:	08015750 	.word	0x08015750
 8004748:	0801575c 	.word	0x0801575c
 800474c:	08015770 	.word	0x08015770
 8004750:	08015784 	.word	0x08015784
 8004754:	08015790 	.word	0x08015790
 8004758:	080157a0 	.word	0x080157a0
 800475c:	080157b4 	.word	0x080157b4
 8004760:	080157c0 	.word	0x080157c0
 8004764:	080157cc 	.word	0x080157cc
 8004768:	080157e0 	.word	0x080157e0
 800476c:	080157f0 	.word	0x080157f0
 8004770:	08015810 	.word	0x08015810
 8004774:	08015820 	.word	0x08015820
 8004778:	0801582c 	.word	0x0801582c
 800477c:	08015834 	.word	0x08015834
 8004780:	08015844 	.word	0x08015844
 8004784:	08015858 	.word	0x08015858
 8004788:	0801586c 	.word	0x0801586c
 800478c:	08015884 	.word	0x08015884
 8004790:	0801589c 	.word	0x0801589c
 8004794:	080158bc 	.word	0x080158bc
 8004798:	080158d0 	.word	0x080158d0
 800479c:	080158e0 	.word	0x080158e0
 80047a0:	080158f4 	.word	0x080158f4
 80047a4:	0801590c 	.word	0x0801590c
 80047a8:	08015914 	.word	0x08015914
 80047ac:	08015928 	.word	0x08015928
 80047b0:	0801593c 	.word	0x0801593c
 80047b4:	08015954 	.word	0x08015954
 80047b8:	08015968 	.word	0x08015968
 80047bc:	08015988 	.word	0x08015988
 80047c0:	080159ac 	.word	0x080159ac
 80047c4:	080159cc 	.word	0x080159cc
 80047c8:	080159e4 	.word	0x080159e4
 80047cc:	080159fc 	.word	0x080159fc
 80047d0:	08015a0c 	.word	0x08015a0c
 80047d4:	08015a18 	.word	0x08015a18
 80047d8:	08015a2c 	.word	0x08015a2c
 80047dc:	08015a3c 	.word	0x08015a3c
 80047e0:	08015a58 	.word	0x08015a58
 80047e4:	08015a70 	.word	0x08015a70
 80047e8:	08015a88 	.word	0x08015a88
 80047ec:	08015a98 	.word	0x08015a98
 80047f0:	08015aa8 	.word	0x08015aa8
 80047f4:	08015ac8 	.word	0x08015ac8
 80047f8:	08015ae8 	.word	0x08015ae8

080047fc <mg_http_reply>:
// clang-format on

void mg_http_reply(struct mg_connection *c, int code, const char *headers,
                   const char *fmt, ...) {
 80047fc:	b408      	push	{r3}
 80047fe:	b580      	push	{r7, lr}
 8004800:	b08b      	sub	sp, #44	; 0x2c
 8004802:	af02      	add	r7, sp, #8
 8004804:	60f8      	str	r0, [r7, #12]
 8004806:	60b9      	str	r1, [r7, #8]
 8004808:	607a      	str	r2, [r7, #4]
  va_list ap;
  size_t len;
  mg_printf(c, "HTTP/1.1 %d %s\r\n%sContent-Length:            \r\n\r\n", code,
 800480a:	68b8      	ldr	r0, [r7, #8]
 800480c:	f7ff fafa 	bl	8003e04 <mg_http_status_code_str>
 8004810:	4602      	mov	r2, r0
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d001      	beq.n	800481c <mg_http_reply+0x20>
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	e000      	b.n	800481e <mg_http_reply+0x22>
 800481c:	4b1f      	ldr	r3, [pc, #124]	; (800489c <mg_http_reply+0xa0>)
 800481e:	9300      	str	r3, [sp, #0]
 8004820:	4613      	mov	r3, r2
 8004822:	68ba      	ldr	r2, [r7, #8]
 8004824:	491e      	ldr	r1, [pc, #120]	; (80048a0 <mg_http_reply+0xa4>)
 8004826:	68f8      	ldr	r0, [r7, #12]
 8004828:	f003 fd12 	bl	8008250 <mg_printf>
            mg_http_status_code_str(code), headers == NULL ? "" : headers);
  len = c->send.len;
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004830:	61fb      	str	r3, [r7, #28]
  va_start(ap, fmt);
 8004832:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004836:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, &ap);
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800483e:	f107 0314 	add.w	r3, r7, #20
 8004842:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004844:	4817      	ldr	r0, [pc, #92]	; (80048a4 <mg_http_reply+0xa8>)
 8004846:	f7fe f8d3 	bl	80029f0 <mg_vxprintf>
  va_end(ap);
  if (c->send.len > 16) {
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800484e:	2b10      	cmp	r3, #16
 8004850:	d916      	bls.n	8004880 <mg_http_reply+0x84>
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004856:	69fb      	ldr	r3, [r7, #28]
 8004858:	3b0f      	subs	r3, #15
 800485a:	18d0      	adds	r0, r2, r3
                           (unsigned long) (c->send.len - len));
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004860:	69fb      	ldr	r3, [r7, #28]
 8004862:	1ad3      	subs	r3, r2, r3
    size_t n = mg_snprintf((char *) &c->send.buf[len - 15], 11, "%-10lu",
 8004864:	4a10      	ldr	r2, [pc, #64]	; (80048a8 <mg_http_reply+0xac>)
 8004866:	210b      	movs	r1, #11
 8004868:	f004 f9c8 	bl	8008bfc <mg_snprintf>
 800486c:	61b8      	str	r0, [r7, #24]
    c->send.buf[len - 15 + n] = ' ';  // Change ending 0 to space
 800486e:	68fb      	ldr	r3, [r7, #12]
 8004870:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004872:	69f9      	ldr	r1, [r7, #28]
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	440b      	add	r3, r1
 8004878:	3b0f      	subs	r3, #15
 800487a:	4413      	add	r3, r2
 800487c:	2220      	movs	r2, #32
 800487e:	701a      	strb	r2, [r3, #0]
  }
  c->is_resp = 0;
 8004880:	68fa      	ldr	r2, [r7, #12]
 8004882:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8004886:	f36f 13c7 	bfc	r3, #7, #1
 800488a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800488e:	bf00      	nop
 8004890:	3724      	adds	r7, #36	; 0x24
 8004892:	46bd      	mov	sp, r7
 8004894:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004898:	b001      	add	sp, #4
 800489a:	4770      	bx	lr
 800489c:	08015ae8 	.word	0x08015ae8
 80048a0:	08015aec 	.word	0x08015aec
 80048a4:	08008b8d 	.word	0x08008b8d
 80048a8:	08015b20 	.word	0x08015b20

080048ac <restore_http_cb>:

static void http_cb(struct mg_connection *, int, void *, void *);
static void restore_http_cb(struct mg_connection *c) {
 80048ac:	b580      	push	{r7, lr}
 80048ae:	b082      	sub	sp, #8
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  mg_fs_close((struct mg_fd *) c->pfn_data);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7fe fc65 	bl	8003188 <mg_fs_close>
  c->pfn_data = NULL;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	665a      	str	r2, [r3, #100]	; 0x64
  c->pfn = http_cb;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	4a06      	ldr	r2, [pc, #24]	; (80048e0 <restore_http_cb+0x34>)
 80048c8:	661a      	str	r2, [r3, #96]	; 0x60
  c->is_resp = 0;
 80048ca:	687a      	ldr	r2, [r7, #4]
 80048cc:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80048d0:	f36f 13c7 	bfc	r3, #7, #1
 80048d4:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 80048d8:	bf00      	nop
 80048da:	3708      	adds	r7, #8
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	08005d51 	.word	0x08005d51

080048e4 <mg_http_etag>:

char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime);
char *mg_http_etag(char *buf, size_t len, size_t size, time_t mtime) {
 80048e4:	b5b0      	push	{r4, r5, r7, lr}
 80048e6:	b088      	sub	sp, #32
 80048e8:	af04      	add	r7, sp, #16
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
  mg_snprintf(buf, len, "\"%lld.%lld\"", (int64_t) mtime, (int64_t) size);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2200      	movs	r2, #0
 80048f4:	461c      	mov	r4, r3
 80048f6:	4615      	mov	r5, r2
 80048f8:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80048fc:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004900:	e9cd 2300 	strd	r2, r3, [sp]
 8004904:	4a04      	ldr	r2, [pc, #16]	; (8004918 <mg_http_etag+0x34>)
 8004906:	68b9      	ldr	r1, [r7, #8]
 8004908:	68f8      	ldr	r0, [r7, #12]
 800490a:	f004 f977 	bl	8008bfc <mg_snprintf>
  return buf;
 800490e:	68fb      	ldr	r3, [r7, #12]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bdb0      	pop	{r4, r5, r7, pc}
 8004918:	08015b28 	.word	0x08015b28

0800491c <static_cb>:

static void static_cb(struct mg_connection *c, int ev, void *ev_data,
                      void *fn_data) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b08a      	sub	sp, #40	; 0x28
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
 8004928:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 800492a:	68bb      	ldr	r3, [r7, #8]
 800492c:	2b08      	cmp	r3, #8
 800492e:	d002      	beq.n	8004936 <static_cb+0x1a>
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	2b02      	cmp	r3, #2
 8004934:	d146      	bne.n	80049c4 <static_cb+0xa8>
    struct mg_fd *fd = (struct mg_fd *) fn_data;
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	623b      	str	r3, [r7, #32]
    // Read to send IO buffer directly, avoid extra on-stack buffer
    size_t n, max = MG_IO_SIZE, space;
 800493a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800493e:	61fb      	str	r3, [r7, #28]
    size_t *cl = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	3384      	adds	r3, #132	; 0x84
 8004944:	61bb      	str	r3, [r7, #24]
                                     sizeof(size_t) * sizeof(size_t)];
    if (c->send.size < max) mg_iobuf_resize(&c->send, max);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800494a:	69fa      	ldr	r2, [r7, #28]
 800494c:	429a      	cmp	r2, r3
 800494e:	d905      	bls.n	800495c <static_cb+0x40>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	3348      	adds	r3, #72	; 0x48
 8004954:	69f9      	ldr	r1, [r7, #28]
 8004956:	4618      	mov	r0, r3
 8004958:	f001 fb6c 	bl	8006034 <mg_iobuf_resize>
    if (c->send.len >= c->send.size) return;  // Rate limit
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004964:	429a      	cmp	r2, r3
 8004966:	d234      	bcs.n	80049d2 <static_cb+0xb6>
    if ((space = c->send.size - c->send.len) > *cl) space = *cl;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	627b      	str	r3, [r7, #36]	; 0x24
 8004974:	69bb      	ldr	r3, [r7, #24]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497a:	429a      	cmp	r2, r3
 800497c:	d902      	bls.n	8004984 <static_cb+0x68>
 800497e:	69bb      	ldr	r3, [r7, #24]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	627b      	str	r3, [r7, #36]	; 0x24
    n = fd->fs->rd(fd->fd, c->send.buf + c->send.len, space);
 8004984:	6a3b      	ldr	r3, [r7, #32]
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	691b      	ldr	r3, [r3, #16]
 800498a:	6a3a      	ldr	r2, [r7, #32]
 800498c:	6810      	ldr	r0, [r2, #0]
 800498e:	68fa      	ldr	r2, [r7, #12]
 8004990:	6c91      	ldr	r1, [r2, #72]	; 0x48
 8004992:	68fa      	ldr	r2, [r7, #12]
 8004994:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004996:	4411      	add	r1, r2
 8004998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800499a:	4798      	blx	r3
 800499c:	6178      	str	r0, [r7, #20]
    c->send.len += n;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80049a2:	697b      	ldr	r3, [r7, #20]
 80049a4:	441a      	add	r2, r3
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	651a      	str	r2, [r3, #80]	; 0x50
    *cl -= n;
 80049aa:	69bb      	ldr	r3, [r7, #24]
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	1ad2      	subs	r2, r2, r3
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	601a      	str	r2, [r3, #0]
    if (n == 0) restore_http_cb(c);
 80049b6:	697b      	ldr	r3, [r7, #20]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d10c      	bne.n	80049d6 <static_cb+0xba>
 80049bc:	68f8      	ldr	r0, [r7, #12]
 80049be:	f7ff ff75 	bl	80048ac <restore_http_cb>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80049c2:	e008      	b.n	80049d6 <static_cb+0xba>
  } else if (ev == MG_EV_CLOSE) {
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b09      	cmp	r3, #9
 80049c8:	d106      	bne.n	80049d8 <static_cb+0xbc>
    restore_http_cb(c);
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f7ff ff6e 	bl	80048ac <restore_http_cb>
 80049d0:	e002      	b.n	80049d8 <static_cb+0xbc>
    if (c->send.len >= c->send.size) return;  // Rate limit
 80049d2:	bf00      	nop
 80049d4:	e000      	b.n	80049d8 <static_cb+0xbc>
  if (ev == MG_EV_WRITE || ev == MG_EV_POLL) {
 80049d6:	bf00      	nop
  }
  (void) ev_data;
}
 80049d8:	3728      	adds	r7, #40	; 0x28
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}
	...

080049e0 <guess_content_type>:
    MG_C_STR("3gp"), MG_C_STR("video/3gpp"),
    {0, 0},
};
// clang-format on

static struct mg_str guess_content_type(struct mg_str path, const char *extra) {
 80049e0:	b590      	push	{r4, r7, lr}
 80049e2:	b08d      	sub	sp, #52	; 0x34
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	60f8      	str	r0, [r7, #12]
 80049e8:	1d38      	adds	r0, r7, #4
 80049ea:	e880 0006 	stmia.w	r0, {r1, r2}
 80049ee:	603b      	str	r3, [r7, #0]
  struct mg_str k, v, s = mg_str(extra);
 80049f0:	f107 0314 	add.w	r3, r7, #20
 80049f4:	6839      	ldr	r1, [r7, #0]
 80049f6:	4618      	mov	r0, r3
 80049f8:	f004 feda 	bl	80097b0 <mg_str_s>
  size_t i = 0;
 80049fc:	2300      	movs	r3, #0
 80049fe:	62fb      	str	r3, [r7, #44]	; 0x2c

  // Shrink path to its extension only
  while (i < path.len && path.ptr[path.len - i - 1] != '.') i++;
 8004a00:	e002      	b.n	8004a08 <guess_content_type+0x28>
 8004a02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a04:	3301      	adds	r3, #1
 8004a06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d208      	bcs.n	8004a22 <guess_content_type+0x42>
 8004a10:	687a      	ldr	r2, [r7, #4]
 8004a12:	68b9      	ldr	r1, [r7, #8]
 8004a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a16:	1acb      	subs	r3, r1, r3
 8004a18:	3b01      	subs	r3, #1
 8004a1a:	4413      	add	r3, r2
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b2e      	cmp	r3, #46	; 0x2e
 8004a20:	d1ef      	bne.n	8004a02 <guess_content_type+0x22>
  path.ptr += path.len - i;
 8004a22:	687a      	ldr	r2, [r7, #4]
 8004a24:	68b9      	ldr	r1, [r7, #8]
 8004a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a28:	1acb      	subs	r3, r1, r3
 8004a2a:	4413      	add	r3, r2
 8004a2c:	607b      	str	r3, [r7, #4]
  path.len = i;
 8004a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a30:	60bb      	str	r3, [r7, #8]

  // Process user-provided mime type overrides, if any
  while (mg_commalist(&s, &k, &v)) {
 8004a32:	e012      	b.n	8004a5a <guess_content_type+0x7a>
    if (mg_strcmp(path, k) == 0) return v;
 8004a34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004a38:	cb0c      	ldmia	r3, {r2, r3}
 8004a3a:	1d39      	adds	r1, r7, #4
 8004a3c:	c903      	ldmia	r1, {r0, r1}
 8004a3e:	f004 ff79 	bl	8009934 <mg_strcmp>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d108      	bne.n	8004a5a <guess_content_type+0x7a>
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	461a      	mov	r2, r3
 8004a4c:	f107 031c 	add.w	r3, r7, #28
 8004a50:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004a54:	e882 0003 	stmia.w	r2, {r0, r1}
 8004a58:	e034      	b.n	8004ac4 <guess_content_type+0xe4>
  while (mg_commalist(&s, &k, &v)) {
 8004a5a:	f107 021c 	add.w	r2, r7, #28
 8004a5e:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8004a62:	f107 0314 	add.w	r3, r7, #20
 8004a66:	4618      	mov	r0, r3
 8004a68:	f005 f9c3 	bl	8009df2 <mg_commalist>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d1e0      	bne.n	8004a34 <guess_content_type+0x54>
  }

  // Process built-in mime types
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 8004a72:	2300      	movs	r3, #0
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a76:	e01a      	b.n	8004aae <guess_content_type+0xce>
    if (mg_strcmp(path, s_known_types[i]) == 0) return s_known_types[i + 1];
 8004a78:	4a14      	ldr	r2, [pc, #80]	; (8004acc <guess_content_type+0xec>)
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	00db      	lsls	r3, r3, #3
 8004a7e:	4413      	add	r3, r2
 8004a80:	cb0c      	ldmia	r3, {r2, r3}
 8004a82:	1d39      	adds	r1, r7, #4
 8004a84:	c903      	ldmia	r1, {r0, r1}
 8004a86:	f004 ff55 	bl	8009934 <mg_strcmp>
 8004a8a:	4603      	mov	r3, r0
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10b      	bne.n	8004aa8 <guess_content_type+0xc8>
 8004a90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a92:	3301      	adds	r3, #1
 8004a94:	68f9      	ldr	r1, [r7, #12]
 8004a96:	4a0d      	ldr	r2, [pc, #52]	; (8004acc <guess_content_type+0xec>)
 8004a98:	460c      	mov	r4, r1
 8004a9a:	00db      	lsls	r3, r3, #3
 8004a9c:	4413      	add	r3, r2
 8004a9e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004aa2:	e884 0003 	stmia.w	r4, {r0, r1}
 8004aa6:	e00d      	b.n	8004ac4 <guess_content_type+0xe4>
  for (i = 0; s_known_types[i].ptr != NULL; i += 2) {
 8004aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004aaa:	3302      	adds	r3, #2
 8004aac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004aae:	4a07      	ldr	r2, [pc, #28]	; (8004acc <guess_content_type+0xec>)
 8004ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ab2:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d1de      	bne.n	8004a78 <guess_content_type+0x98>
  }

  return mg_str("text/plain; charset=utf-8");
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	4904      	ldr	r1, [pc, #16]	; (8004ad0 <guess_content_type+0xf0>)
 8004abe:	4618      	mov	r0, r3
 8004ac0:	f004 fe76 	bl	80097b0 <mg_str_s>
}
 8004ac4:	68f8      	ldr	r0, [r7, #12]
 8004ac6:	3734      	adds	r7, #52	; 0x34
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	bd90      	pop	{r4, r7, pc}
 8004acc:	2400005c 	.word	0x2400005c
 8004ad0:	08015c10 	.word	0x08015c10

08004ad4 <getrange>:

static int getrange(struct mg_str *s, size_t *a, size_t *b) {
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b088      	sub	sp, #32
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	60f8      	str	r0, [r7, #12]
 8004adc:	60b9      	str	r1, [r7, #8]
 8004ade:	607a      	str	r2, [r7, #4]
  size_t i, numparsed = 0;
 8004ae0:	2300      	movs	r3, #0
 8004ae2:	61bb      	str	r3, [r7, #24]
  // MG_INFO(("%.*s", (int) s->len, s->ptr));
  for (i = 0; i + 6 < s->len; i++) {
 8004ae4:	2300      	movs	r3, #0
 8004ae6:	61fb      	str	r3, [r7, #28]
 8004ae8:	e076      	b.n	8004bd8 <getrange+0x104>
    if (memcmp(&s->ptr[i], "bytes=", 6) == 0) {
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681a      	ldr	r2, [r3, #0]
 8004aee:	69fb      	ldr	r3, [r7, #28]
 8004af0:	4413      	add	r3, r2
 8004af2:	2206      	movs	r2, #6
 8004af4:	493f      	ldr	r1, [pc, #252]	; (8004bf4 <getrange+0x120>)
 8004af6:	4618      	mov	r0, r3
 8004af8:	f00f fdf2 	bl	80146e0 <memcmp>
 8004afc:	4603      	mov	r3, r0
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d167      	bne.n	8004bd2 <getrange+0xfe>
      struct mg_str p = mg_str_n(s->ptr + i + 6, s->len - i - 6);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681a      	ldr	r2, [r3, #0]
 8004b06:	69fb      	ldr	r3, [r7, #28]
 8004b08:	3306      	adds	r3, #6
 8004b0a:	18d1      	adds	r1, r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	685a      	ldr	r2, [r3, #4]
 8004b10:	69fb      	ldr	r3, [r7, #28]
 8004b12:	1ad3      	subs	r3, r2, r3
 8004b14:	1f9a      	subs	r2, r3, #6
 8004b16:	f107 0310 	add.w	r3, r7, #16
 8004b1a:	4618      	mov	r0, r3
 8004b1c:	f004 fe65 	bl	80097ea <mg_str_n>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004b20:	697b      	ldr	r3, [r7, #20]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00a      	beq.n	8004b3c <getrange+0x68>
 8004b26:	693b      	ldr	r3, [r7, #16]
 8004b28:	781b      	ldrb	r3, [r3, #0]
 8004b2a:	2b2f      	cmp	r3, #47	; 0x2f
 8004b2c:	d906      	bls.n	8004b3c <getrange+0x68>
 8004b2e:	693b      	ldr	r3, [r7, #16]
 8004b30:	781b      	ldrb	r3, [r3, #0]
 8004b32:	2b39      	cmp	r3, #57	; 0x39
 8004b34:	d802      	bhi.n	8004b3c <getrange+0x68>
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	61bb      	str	r3, [r7, #24]
      if (!mg_to_size_t(p, a)) return 0;
 8004b3c:	68ba      	ldr	r2, [r7, #8]
 8004b3e:	f107 0310 	add.w	r3, r7, #16
 8004b42:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004b46:	f7fe fd3f 	bl	80035c8 <mg_to_size_t>
 8004b4a:	4603      	mov	r3, r0
 8004b4c:	f083 0301 	eor.w	r3, r3, #1
 8004b50:	b2db      	uxtb	r3, r3
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d007      	beq.n	8004b66 <getrange+0x92>
 8004b56:	2300      	movs	r3, #0
 8004b58:	e047      	b.n	8004bea <getrange+0x116>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      while (p.len && p.ptr[0] >= '0' && p.ptr[0] <= '9') p.ptr++, p.len--;
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	3301      	adds	r3, #1
 8004b5e:	613b      	str	r3, [r7, #16]
 8004b60:	697b      	ldr	r3, [r7, #20]
 8004b62:	3b01      	subs	r3, #1
 8004b64:	617b      	str	r3, [r7, #20]
 8004b66:	697b      	ldr	r3, [r7, #20]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d007      	beq.n	8004b7c <getrange+0xa8>
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	781b      	ldrb	r3, [r3, #0]
 8004b70:	2b2f      	cmp	r3, #47	; 0x2f
 8004b72:	d903      	bls.n	8004b7c <getrange+0xa8>
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b39      	cmp	r3, #57	; 0x39
 8004b7a:	d9ee      	bls.n	8004b5a <getrange+0x86>
      if (p.len && p.ptr[0] == '-') p.ptr++, p.len--;
 8004b7c:	697b      	ldr	r3, [r7, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d009      	beq.n	8004b96 <getrange+0xc2>
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	2b2d      	cmp	r3, #45	; 0x2d
 8004b88:	d105      	bne.n	8004b96 <getrange+0xc2>
 8004b8a:	693b      	ldr	r3, [r7, #16]
 8004b8c:	3301      	adds	r3, #1
 8004b8e:	613b      	str	r3, [r7, #16]
 8004b90:	697b      	ldr	r3, [r7, #20]
 8004b92:	3b01      	subs	r3, #1
 8004b94:	617b      	str	r3, [r7, #20]
      if (!mg_to_size_t(p, b)) return 0;
 8004b96:	687a      	ldr	r2, [r7, #4]
 8004b98:	f107 0310 	add.w	r3, r7, #16
 8004b9c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8004ba0:	f7fe fd12 	bl	80035c8 <mg_to_size_t>
 8004ba4:	4603      	mov	r3, r0
 8004ba6:	f083 0301 	eor.w	r3, r3, #1
 8004baa:	b2db      	uxtb	r3, r3
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d001      	beq.n	8004bb4 <getrange+0xe0>
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	e01a      	b.n	8004bea <getrange+0x116>
      if (p.len > 0 && p.ptr[0] >= '0' && p.ptr[0] <= '9') numparsed++;
 8004bb4:	697b      	ldr	r3, [r7, #20]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d015      	beq.n	8004be6 <getrange+0x112>
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b2f      	cmp	r3, #47	; 0x2f
 8004bc0:	d911      	bls.n	8004be6 <getrange+0x112>
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	2b39      	cmp	r3, #57	; 0x39
 8004bc8:	d80d      	bhi.n	8004be6 <getrange+0x112>
 8004bca:	69bb      	ldr	r3, [r7, #24]
 8004bcc:	3301      	adds	r3, #1
 8004bce:	61bb      	str	r3, [r7, #24]
 8004bd0:	e00a      	b.n	8004be8 <getrange+0x114>
  for (i = 0; i + 6 < s->len; i++) {
 8004bd2:	69fb      	ldr	r3, [r7, #28]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	61fb      	str	r3, [r7, #28]
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	1d9a      	adds	r2, r3, #6
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d382      	bcc.n	8004aea <getrange+0x16>
 8004be4:	e000      	b.n	8004be8 <getrange+0x114>
      // MG_INFO(("PPP [%.*s] %d", (int) p.len, p.ptr, numparsed));
      break;
 8004be6:	bf00      	nop
    }
  }
  return (int) numparsed;
 8004be8:	69bb      	ldr	r3, [r7, #24]
}
 8004bea:	4618      	mov	r0, r3
 8004bec:	3720      	adds	r7, #32
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	bd80      	pop	{r7, pc}
 8004bf2:	bf00      	nop
 8004bf4:	08015d94 	.word	0x08015d94

08004bf8 <mg_http_serve_file>:

void mg_http_serve_file(struct mg_connection *c, struct mg_http_message *hm,
                        const char *path,
                        const struct mg_http_serve_opts *opts) {
 8004bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bfc:	b0ef      	sub	sp, #444	; 0x1bc
 8004bfe:	af0a      	add	r7, sp, #40	; 0x28
 8004c00:	f507 74c8 	add.w	r4, r7, #400	; 0x190
 8004c04:	f5a4 74b6 	sub.w	r4, r4, #364	; 0x16c
 8004c08:	6020      	str	r0, [r4, #0]
 8004c0a:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8004c0e:	f5a0 70b8 	sub.w	r0, r0, #368	; 0x170
 8004c12:	6001      	str	r1, [r0, #0]
 8004c14:	f507 71c8 	add.w	r1, r7, #400	; 0x190
 8004c18:	f5a1 71ba 	sub.w	r1, r1, #372	; 0x174
 8004c1c:	600a      	str	r2, [r1, #0]
 8004c1e:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8004c22:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004c26:	6013      	str	r3, [r2, #0]
  char etag[64], tmp[MG_PATH_MAX];
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 8004c28:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004c2c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d006      	beq.n	8004c46 <mg_http_serve_file+0x4e>
 8004c38:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004c3c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	695b      	ldr	r3, [r3, #20]
 8004c44:	e000      	b.n	8004c48 <mg_http_serve_file+0x50>
 8004c46:	4bcd      	ldr	r3, [pc, #820]	; (8004f7c <mg_http_serve_file+0x384>)
 8004c48:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
  struct mg_fd *fd = NULL;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  size_t size = 0;
 8004c52:	2300      	movs	r3, #0
 8004c54:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  time_t mtime = 0;
 8004c58:	f04f 0200 	mov.w	r2, #0
 8004c5c:	f04f 0300 	mov.w	r3, #0
 8004c60:	e9c7 2328 	strd	r2, r3, [r7, #160]	; 0xa0
  struct mg_str *inm = NULL;
 8004c64:	2300      	movs	r3, #0
 8004c66:	f8c7 3178 	str.w	r3, [r7, #376]	; 0x178
  struct mg_str mime = guess_content_type(mg_str(path), opts->mime_types);
 8004c6a:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004c6e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004c72:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004c76:	6819      	ldr	r1, [r3, #0]
 8004c78:	4610      	mov	r0, r2
 8004c7a:	f004 fd99 	bl	80097b0 <mg_str_s>
 8004c7e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004c82:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68db      	ldr	r3, [r3, #12]
 8004c8a:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8004c8e:	f507 72a8 	add.w	r2, r7, #336	; 0x150
 8004c92:	ca06      	ldmia	r2, {r1, r2}
 8004c94:	f7ff fea4 	bl	80049e0 <guess_content_type>
  bool gzip = false;
 8004c98:	2300      	movs	r3, #0
 8004c9a:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b

  if (path != NULL) {
 8004c9e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004ca2:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d051      	beq.n	8004d50 <mg_http_serve_file+0x158>
    // If a browser sends us "Accept-Encoding: gzip", try to open .gz first
    struct mg_str *ae = mg_http_get_header(hm, "Accept-Encoding");
 8004cac:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004cb0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004cb4:	49b2      	ldr	r1, [pc, #712]	; (8004f80 <mg_http_serve_file+0x388>)
 8004cb6:	6818      	ldr	r0, [r3, #0]
 8004cb8:	f7fe feec 	bl	8003a94 <mg_http_get_header>
 8004cbc:	f8c7 0174 	str.w	r0, [r7, #372]	; 0x174
    if (ae != NULL && mg_strstr(*ae, mg_str("gzip")) != NULL) {
 8004cc0:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d033      	beq.n	8004d30 <mg_http_serve_file+0x138>
 8004cc8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004ccc:	49ad      	ldr	r1, [pc, #692]	; (8004f84 <mg_http_serve_file+0x38c>)
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f004 fd6e 	bl	80097b0 <mg_str_s>
 8004cd4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 8004cd8:	f507 73ac 	add.w	r3, r7, #344	; 0x158
 8004cdc:	cb0c      	ldmia	r3, {r2, r3}
 8004cde:	c903      	ldmia	r1, {r0, r1}
 8004ce0:	f004 fe6a 	bl	80099b8 <mg_strstr>
 8004ce4:	4603      	mov	r3, r0
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d022      	beq.n	8004d30 <mg_http_serve_file+0x138>
      mg_snprintf(tmp, sizeof(tmp), "%s.gz", path);
 8004cea:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004cee:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004cf2:	f107 00ac 	add.w	r0, r7, #172	; 0xac
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	4aa3      	ldr	r2, [pc, #652]	; (8004f88 <mg_http_serve_file+0x390>)
 8004cfa:	2164      	movs	r1, #100	; 0x64
 8004cfc:	f003 ff7e 	bl	8008bfc <mg_snprintf>
      fd = mg_fs_open(fs, tmp, MG_FS_READ);
 8004d00:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8004d04:	2201      	movs	r2, #1
 8004d06:	4619      	mov	r1, r3
 8004d08:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004d0c:	f7fe fa14 	bl	8003138 <mg_fs_open>
 8004d10:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
      if (fd != NULL) gzip = true, path = tmp;
 8004d14:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d009      	beq.n	8004d30 <mg_http_serve_file+0x138>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	f887 318b 	strb.w	r3, [r7, #395]	; 0x18b
 8004d22:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d26:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d2a:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8004d2e:	601a      	str	r2, [r3, #0]
    }
    // No luck opening .gz? Open what we've told to open
    if (fd == NULL) fd = mg_fs_open(fs, path, MG_FS_READ);
 8004d30:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d10b      	bne.n	8004d50 <mg_http_serve_file+0x158>
 8004d38:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d3c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d40:	2201      	movs	r2, #1
 8004d42:	6819      	ldr	r1, [r3, #0]
 8004d44:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004d48:	f7fe f9f6 	bl	8003138 <mg_fs_open>
 8004d4c:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
  }

  // Failed to open, and page404 is configured? Open it, then
  if (fd == NULL && opts->page404 != NULL) {
 8004d50:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d141      	bne.n	8004ddc <mg_http_serve_file+0x1e4>
 8004d58:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d5c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d039      	beq.n	8004ddc <mg_http_serve_file+0x1e4>
    fd = mg_fs_open(fs, opts->page404, MG_FS_READ);
 8004d68:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d6c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	691b      	ldr	r3, [r3, #16]
 8004d74:	2201      	movs	r2, #1
 8004d76:	4619      	mov	r1, r3
 8004d78:	f8d7 017c 	ldr.w	r0, [r7, #380]	; 0x17c
 8004d7c:	f7fe f9dc 	bl	8003138 <mg_fs_open>
 8004d80:	f8c7 018c 	str.w	r0, [r7, #396]	; 0x18c
    mime = guess_content_type(mg_str(path), opts->mime_types);
 8004d84:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004d88:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d8c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004d90:	6819      	ldr	r1, [r3, #0]
 8004d92:	4610      	mov	r0, r2
 8004d94:	f004 fd0c 	bl	80097b0 <mg_str_s>
 8004d98:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004d9c:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	f107 0010 	add.w	r0, r7, #16
 8004da8:	f507 72b0 	add.w	r2, r7, #352	; 0x160
 8004dac:	ca06      	ldmia	r2, {r1, r2}
 8004dae:	f7ff fe17 	bl	80049e0 <guess_content_type>
 8004db2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004db6:	f5a3 72c0 	sub.w	r2, r3, #384	; 0x180
 8004dba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8004dbe:	e892 0003 	ldmia.w	r2, {r0, r1}
 8004dc2:	e883 0003 	stmia.w	r3, {r0, r1}
    path = opts->page404;
 8004dc6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004dca:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004dce:	f507 72c8 	add.w	r2, r7, #400	; 0x190
 8004dd2:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8004dd6:	6812      	ldr	r2, [r2, #0]
 8004dd8:	6912      	ldr	r2, [r2, #16]
 8004dda:	601a      	str	r2, [r3, #0]
  }

  if (fd == NULL || fs->st(path, &size, &mtime) == 0) {
 8004ddc:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d00f      	beq.n	8004e04 <mg_http_serve_file+0x20c>
 8004de4:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8004de8:	681c      	ldr	r4, [r3, #0]
 8004dea:	f107 02a0 	add.w	r2, r7, #160	; 0xa0
 8004dee:	f107 01a8 	add.w	r1, r7, #168	; 0xa8
 8004df2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004df6:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8004dfa:	6818      	ldr	r0, [r3, #0]
 8004dfc:	47a0      	blx	r4
 8004dfe:	4603      	mov	r3, r0
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d114      	bne.n	8004e2e <mg_http_serve_file+0x236>
    mg_http_reply(c, 404, opts->extra_headers, "Not found\n");
 8004e04:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e08:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	689a      	ldr	r2, [r3, #8]
 8004e10:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e14:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8004e18:	4b5c      	ldr	r3, [pc, #368]	; (8004f8c <mg_http_serve_file+0x394>)
 8004e1a:	f44f 71ca 	mov.w	r1, #404	; 0x194
 8004e1e:	6800      	ldr	r0, [r0, #0]
 8004e20:	f7ff fcec 	bl	80047fc <mg_http_reply>
    mg_fs_close(fd);
 8004e24:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004e28:	f7fe f9ae 	bl	8003188 <mg_fs_close>
 8004e2c:	e173      	b.n	8005116 <mg_http_serve_file+0x51e>
    // NOTE: mg_http_etag() call should go first!
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004e2e:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8004e32:	e9d7 2328 	ldrd	r2, r3, [r7, #160]	; 0xa0
 8004e36:	f507 7088 	add.w	r0, r7, #272	; 0x110
 8004e3a:	e9cd 2300 	strd	r2, r3, [sp]
 8004e3e:	460a      	mov	r2, r1
 8004e40:	2140      	movs	r1, #64	; 0x40
 8004e42:	f7ff fd4f 	bl	80048e4 <mg_http_etag>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d02c      	beq.n	8004ea6 <mg_http_serve_file+0x2ae>
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004e4c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e50:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004e54:	494e      	ldr	r1, [pc, #312]	; (8004f90 <mg_http_serve_file+0x398>)
 8004e56:	6818      	ldr	r0, [r3, #0]
 8004e58:	f7fe fe1c 	bl	8003a94 <mg_http_get_header>
 8004e5c:	f8c7 0178 	str.w	r0, [r7, #376]	; 0x178
  } else if (mg_http_etag(etag, sizeof(etag), size, mtime) != NULL &&
 8004e60:	f8d7 3178 	ldr.w	r3, [r7, #376]	; 0x178
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d01e      	beq.n	8004ea6 <mg_http_serve_file+0x2ae>
             mg_vcasecmp(inm, etag) == 0) {
 8004e68:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8004e6c:	4619      	mov	r1, r3
 8004e6e:	f8d7 0178 	ldr.w	r0, [r7, #376]	; 0x178
 8004e72:	f004 fd3b 	bl	80098ec <mg_vcasecmp>
 8004e76:	4603      	mov	r3, r0
             (inm = mg_http_get_header(hm, "If-None-Match")) != NULL &&
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d114      	bne.n	8004ea6 <mg_http_serve_file+0x2ae>
    mg_fs_close(fd);
 8004e7c:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 8004e80:	f7fe f982 	bl	8003188 <mg_fs_close>
    mg_http_reply(c, 304, opts->extra_headers, "");
 8004e84:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e88:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	689a      	ldr	r2, [r3, #8]
 8004e90:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004e94:	f5a3 70b6 	sub.w	r0, r3, #364	; 0x16c
 8004e98:	4b3e      	ldr	r3, [pc, #248]	; (8004f94 <mg_http_serve_file+0x39c>)
 8004e9a:	f44f 7198 	mov.w	r1, #304	; 0x130
 8004e9e:	6800      	ldr	r0, [r0, #0]
 8004ea0:	f7ff fcac 	bl	80047fc <mg_http_reply>
 8004ea4:	e137      	b.n	8005116 <mg_http_serve_file+0x51e>
  } else {
    int n, status = 200;
 8004ea6:	23c8      	movs	r3, #200	; 0xc8
 8004ea8:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
    char range[100];
    size_t r1 = 0, r2 = 0, cl = size;
 8004eac:	2300      	movs	r3, #0
 8004eae:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004eb2:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004eb6:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004eba:	2200      	movs	r2, #0
 8004ebc:	601a      	str	r2, [r3, #0]
 8004ebe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004ec2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180

    // Handle Range header
    struct mg_str *rh = mg_http_get_header(hm, "Range");
 8004ec6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004eca:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8004ece:	4932      	ldr	r1, [pc, #200]	; (8004f98 <mg_http_serve_file+0x3a0>)
 8004ed0:	6818      	ldr	r0, [r3, #0]
 8004ed2:	f7fe fddf 	bl	8003a94 <mg_http_get_header>
 8004ed6:	f8c7 0170 	str.w	r0, [r7, #368]	; 0x170
    range[0] = '\0';
 8004eda:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004ede:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	701a      	strb	r2, [r3, #0]
    if (rh != NULL && (n = getrange(rh, &r1, &r2)) > 0) {
 8004ee6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	f000 8092 	beq.w	8005014 <mg_http_serve_file+0x41c>
 8004ef0:	f107 0290 	add.w	r2, r7, #144	; 0x90
 8004ef4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f8d7 0170 	ldr.w	r0, [r7, #368]	; 0x170
 8004efe:	f7ff fde9 	bl	8004ad4 <getrange>
 8004f02:	f8c7 016c 	str.w	r0, [r7, #364]	; 0x16c
 8004f06:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	f340 8082 	ble.w	8005014 <mg_http_serve_file+0x41c>
      // If range is specified like "400-", set second limit to content len
      if (n == 1) r2 = cl - 1;
 8004f10:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d107      	bne.n	8004f28 <mg_http_serve_file+0x330>
 8004f18:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004f1c:	1e5a      	subs	r2, r3, #1
 8004f1e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f22:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f26:	601a      	str	r2, [r3, #0]
      if (r1 > r2 || r2 >= cl) {
 8004f28:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004f2c:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f30:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	429a      	cmp	r2, r3
 8004f38:	d808      	bhi.n	8004f4c <mg_http_serve_file+0x354>
 8004f3a:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004f3e:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8004f48:	429a      	cmp	r2, r3
 8004f4a:	d829      	bhi.n	8004fa0 <mg_http_serve_file+0x3a8>
        status = 416;
 8004f4c:	f44f 73d0 	mov.w	r3, #416	; 0x1a0
 8004f50:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        cl = 0;
 8004f54:	2300      	movs	r3, #0
 8004f56:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        mg_snprintf(range, sizeof(range), "Content-Range: bytes */%lld\r\n",
 8004f5a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004f5e:	2200      	movs	r2, #0
 8004f60:	60bb      	str	r3, [r7, #8]
 8004f62:	60fa      	str	r2, [r7, #12]
 8004f64:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004f68:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004f6c:	e9cd 1200 	strd	r1, r2, [sp]
 8004f70:	4a0a      	ldr	r2, [pc, #40]	; (8004f9c <mg_http_serve_file+0x3a4>)
 8004f72:	2164      	movs	r1, #100	; 0x64
 8004f74:	4618      	mov	r0, r3
 8004f76:	f003 fe41 	bl	8008bfc <mg_snprintf>
 8004f7a:	e04b      	b.n	8005014 <mg_http_serve_file+0x41c>
 8004f7c:	24000034 	.word	0x24000034
 8004f80:	08015d9c 	.word	0x08015d9c
 8004f84:	08015dac 	.word	0x08015dac
 8004f88:	08015db4 	.word	0x08015db4
 8004f8c:	08015dbc 	.word	0x08015dbc
 8004f90:	08015dc8 	.word	0x08015dc8
 8004f94:	08015ae8 	.word	0x08015ae8
 8004f98:	08015dd8 	.word	0x08015dd8
 8004f9c:	08015de0 	.word	0x08015de0
                    (int64_t) size);
      } else {
        status = 206;
 8004fa0:	23ce      	movs	r3, #206	; 0xce
 8004fa2:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
        cl = r2 - r1 + 1;
 8004fa6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8004faa:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8004fae:	681a      	ldr	r2, [r3, #0]
 8004fb0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fb4:	1ad3      	subs	r3, r2, r3
 8004fb6:	3301      	adds	r3, #1
 8004fb8:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
        mg_snprintf(range, sizeof(range),
 8004fbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004fc0:	2200      	movs	r2, #0
 8004fc2:	469a      	mov	sl, r3
 8004fc4:	4693      	mov	fp, r2
                    "Content-Range: bytes %llu-%llu/%llu\r\n", (uint64_t) r1,
                    (uint64_t) (r1 + cl - 1), (uint64_t) size);
 8004fc6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004fca:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8004fce:	4413      	add	r3, r2
 8004fd0:	3b01      	subs	r3, #1
        mg_snprintf(range, sizeof(range),
 8004fd2:	2200      	movs	r2, #0
 8004fd4:	461d      	mov	r5, r3
 8004fd6:	4616      	mov	r6, r2
 8004fd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004fdc:	2200      	movs	r2, #0
 8004fde:	603b      	str	r3, [r7, #0]
 8004fe0:	607a      	str	r2, [r7, #4]
 8004fe2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004fe6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8004fea:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004fee:	e9cd 5602 	strd	r5, r6, [sp, #8]
 8004ff2:	e9cd ab00 	strd	sl, fp, [sp]
 8004ff6:	4a4b      	ldr	r2, [pc, #300]	; (8005124 <mg_http_serve_file+0x52c>)
 8004ff8:	2164      	movs	r1, #100	; 0x64
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f003 fdfe 	bl	8008bfc <mg_snprintf>
        fs->sk(fd->fd, r1);
 8005000:	f8d7 317c 	ldr.w	r3, [r7, #380]	; 0x17c
 8005004:	699b      	ldr	r3, [r3, #24]
 8005006:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 800500a:	6812      	ldr	r2, [r2, #0]
 800500c:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8005010:	4610      	mov	r0, r2
 8005012:	4798      	blx	r3
      }
    }
    mg_printf(c,
 8005014:	f8d7 0184 	ldr.w	r0, [r7, #388]	; 0x184
 8005018:	f7fe fef4 	bl	8003e04 <mg_http_status_code_str>
 800501c:	4604      	mov	r4, r0
              "HTTP/1.1 %d %s\r\n"
              "Content-Type: %.*s\r\n"
              "Etag: %s\r\n"
              "Content-Length: %llu\r\n"
              "%s%s%s\r\n",
              status, mg_http_status_code_str(status), (int) mime.len, mime.ptr,
 800501e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
    mg_printf(c,
 8005022:	461d      	mov	r5, r3
 8005024:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8005028:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 800502c:	2100      	movs	r1, #0
 800502e:	4698      	mov	r8, r3
 8005030:	4689      	mov	r9, r1
 8005032:	f897 318b 	ldrb.w	r3, [r7, #395]	; 0x18b
 8005036:	2b00      	cmp	r3, #0
 8005038:	d001      	beq.n	800503e <mg_http_serve_file+0x446>
 800503a:	493b      	ldr	r1, [pc, #236]	; (8005128 <mg_http_serve_file+0x530>)
 800503c:	e000      	b.n	8005040 <mg_http_serve_file+0x448>
 800503e:	493b      	ldr	r1, [pc, #236]	; (800512c <mg_http_serve_file+0x534>)
              etag, (uint64_t) cl, gzip ? "Content-Encoding: gzip\r\n" : "",
              range, opts->extra_headers ? opts->extra_headers : "");
 8005040:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005044:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	689b      	ldr	r3, [r3, #8]
    mg_printf(c,
 800504c:	2b00      	cmp	r3, #0
 800504e:	d006      	beq.n	800505e <mg_http_serve_file+0x466>
 8005050:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005054:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	e000      	b.n	8005060 <mg_http_serve_file+0x468>
 800505e:	4b33      	ldr	r3, [pc, #204]	; (800512c <mg_http_serve_file+0x534>)
 8005060:	f507 70c8 	add.w	r0, r7, #400	; 0x190
 8005064:	f5a0 70b6 	sub.w	r0, r0, #364	; 0x16c
 8005068:	9308      	str	r3, [sp, #32]
 800506a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800506e:	9307      	str	r3, [sp, #28]
 8005070:	9106      	str	r1, [sp, #24]
 8005072:	e9cd 8904 	strd	r8, r9, [sp, #16]
 8005076:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800507a:	9302      	str	r3, [sp, #8]
 800507c:	9201      	str	r2, [sp, #4]
 800507e:	9500      	str	r5, [sp, #0]
 8005080:	4623      	mov	r3, r4
 8005082:	f8d7 2184 	ldr.w	r2, [r7, #388]	; 0x184
 8005086:	492a      	ldr	r1, [pc, #168]	; (8005130 <mg_http_serve_file+0x538>)
 8005088:	6800      	ldr	r0, [r0, #0]
 800508a:	f003 f8e1 	bl	8008250 <mg_printf>
    if (mg_vcasecmp(&hm->method, "HEAD") == 0) {
 800508e:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 8005092:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4926      	ldr	r1, [pc, #152]	; (8005134 <mg_http_serve_file+0x53c>)
 800509a:	4618      	mov	r0, r3
 800509c:	f004 fc26 	bl	80098ec <mg_vcasecmp>
 80050a0:	4603      	mov	r3, r0
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d11a      	bne.n	80050dc <mg_http_serve_file+0x4e4>
      c->is_draining = 1;
 80050a6:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80050aa:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80050b4:	f043 0310 	orr.w	r3, r3, #16
 80050b8:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      c->is_resp = 0;
 80050bc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80050c0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80050c4:	681a      	ldr	r2, [r3, #0]
 80050c6:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80050ca:	f36f 13c7 	bfc	r3, #7, #1
 80050ce:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_fs_close(fd);
 80050d2:	f8d7 018c 	ldr.w	r0, [r7, #396]	; 0x18c
 80050d6:	f7fe f857 	bl	8003188 <mg_fs_close>
      c->pfn = static_cb;
      c->pfn_data = fd;
      *clp = cl;
    }
  }
}
 80050da:	e01c      	b.n	8005116 <mg_http_serve_file+0x51e>
      size_t *clp = (size_t *) &c->data[(sizeof(c->data) - sizeof(size_t)) /
 80050dc:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80050e0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	3384      	adds	r3, #132	; 0x84
 80050e8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
      c->pfn = static_cb;
 80050ec:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80050f0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	4a10      	ldr	r2, [pc, #64]	; (8005138 <mg_http_serve_file+0x540>)
 80050f8:	661a      	str	r2, [r3, #96]	; 0x60
      c->pfn_data = fd;
 80050fa:	f507 73c8 	add.w	r3, r7, #400	; 0x190
 80050fe:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f8d7 218c 	ldr.w	r2, [r7, #396]	; 0x18c
 8005108:	665a      	str	r2, [r3, #100]	; 0x64
      *clp = cl;
 800510a:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 800510e:	f8d7 2180 	ldr.w	r2, [r7, #384]	; 0x180
 8005112:	601a      	str	r2, [r3, #0]
}
 8005114:	e7ff      	b.n	8005116 <mg_http_serve_file+0x51e>
 8005116:	bf00      	nop
 8005118:	f507 77ca 	add.w	r7, r7, #404	; 0x194
 800511c:	46bd      	mov	sp, r7
 800511e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005122:	bf00      	nop
 8005124:	08015e00 	.word	0x08015e00
 8005128:	08015e28 	.word	0x08015e28
 800512c:	08015ae8 	.word	0x08015ae8
 8005130:	08015e44 	.word	0x08015e44
 8005134:	08015e94 	.word	0x08015e94
 8005138:	0800491d 	.word	0x0800491d

0800513c <uri_to_path2>:
#endif

// Resolve requested file into `path` and return its fs->st() result
static int uri_to_path2(struct mg_connection *c, struct mg_http_message *hm,
                        struct mg_fs *fs, struct mg_str url, struct mg_str dir,
                        char *path, size_t path_size) {
 800513c:	b082      	sub	sp, #8
 800513e:	b590      	push	{r4, r7, lr}
 8005140:	b08b      	sub	sp, #44	; 0x2c
 8005142:	af02      	add	r7, sp, #8
 8005144:	60f8      	str	r0, [r7, #12]
 8005146:	60b9      	str	r1, [r7, #8]
 8005148:	607a      	str	r2, [r7, #4]
 800514a:	637b      	str	r3, [r7, #52]	; 0x34
  int flags, tmp;
  // Append URI to the root_dir, and sanitize it
  size_t n = mg_snprintf(path, path_size, "%.*s", (int) dir.len, dir.ptr);
 800514c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800514e:	461a      	mov	r2, r3
 8005150:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005152:	9300      	str	r3, [sp, #0]
 8005154:	4613      	mov	r3, r2
 8005156:	4a97      	ldr	r2, [pc, #604]	; (80053b4 <uri_to_path2+0x278>)
 8005158:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800515a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800515c:	f003 fd4e 	bl	8008bfc <mg_snprintf>
 8005160:	6178      	str	r0, [r7, #20]
  if (n > path_size) {
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005166:	429a      	cmp	r2, r3
 8005168:	d909      	bls.n	800517e <uri_to_path2+0x42>
    mg_http_reply(c, 400, "", "Exceeded path size");
 800516a:	4b93      	ldr	r3, [pc, #588]	; (80053b8 <uri_to_path2+0x27c>)
 800516c:	4a93      	ldr	r2, [pc, #588]	; (80053bc <uri_to_path2+0x280>)
 800516e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005172:	68f8      	ldr	r0, [r7, #12]
 8005174:	f7ff fb42 	bl	80047fc <mg_http_reply>
    return -1;
 8005178:	f04f 33ff 	mov.w	r3, #4294967295
 800517c:	e113      	b.n	80053a6 <uri_to_path2+0x26a>
  }
  path[path_size - 1] = '\0';
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	3b01      	subs	r3, #1
 8005182:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005184:	4413      	add	r3, r2
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
  // Terminate root dir with /
  if (n + 2 < path_size && path[n-1] != '/') path[n++] = '/', path[n] = '\0';
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	3302      	adds	r3, #2
 800518e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005190:	429a      	cmp	r2, r3
 8005192:	d912      	bls.n	80051ba <uri_to_path2+0x7e>
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	3b01      	subs	r3, #1
 8005198:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800519a:	4413      	add	r3, r2
 800519c:	781b      	ldrb	r3, [r3, #0]
 800519e:	2b2f      	cmp	r3, #47	; 0x2f
 80051a0:	d00b      	beq.n	80051ba <uri_to_path2+0x7e>
 80051a2:	697b      	ldr	r3, [r7, #20]
 80051a4:	1c5a      	adds	r2, r3, #1
 80051a6:	617a      	str	r2, [r7, #20]
 80051a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051aa:	4413      	add	r3, r2
 80051ac:	222f      	movs	r2, #47	; 0x2f
 80051ae:	701a      	strb	r2, [r3, #0]
 80051b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051b2:	697b      	ldr	r3, [r7, #20]
 80051b4:	4413      	add	r3, r2
 80051b6:	2200      	movs	r2, #0
 80051b8:	701a      	strb	r2, [r3, #0]
  mg_url_decode(hm->uri.ptr + url.len, hm->uri.len - url.len, path + n,
 80051ba:	68bb      	ldr	r3, [r7, #8]
 80051bc:	689a      	ldr	r2, [r3, #8]
 80051be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c0:	18d0      	adds	r0, r2, r3
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	68da      	ldr	r2, [r3, #12]
 80051c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c8:	1ad1      	subs	r1, r2, r3
 80051ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	18d4      	adds	r4, r2, r3
 80051d0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80051d2:	697b      	ldr	r3, [r7, #20]
 80051d4:	1ad3      	subs	r3, r2, r3
 80051d6:	2200      	movs	r2, #0
 80051d8:	9200      	str	r2, [sp, #0]
 80051da:	4622      	mov	r2, r4
 80051dc:	f7fe fb38 	bl	8003850 <mg_url_decode>
                path_size - n, 0);
  path[path_size - 1] = '\0';  // Double-check
 80051e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80051e2:	3b01      	subs	r3, #1
 80051e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e6:	4413      	add	r3, r2
 80051e8:	2200      	movs	r2, #0
 80051ea:	701a      	strb	r2, [r3, #0]
  if (!mg_path_is_sane(path)) {
 80051ec:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80051ee:	f004 febb 	bl	8009f68 <mg_path_is_sane>
 80051f2:	4603      	mov	r3, r0
 80051f4:	f083 0301 	eor.w	r3, r3, #1
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d009      	beq.n	8005212 <uri_to_path2+0xd6>
    mg_http_reply(c, 400, "", "Invalid path");
 80051fe:	4b70      	ldr	r3, [pc, #448]	; (80053c0 <uri_to_path2+0x284>)
 8005200:	4a6e      	ldr	r2, [pc, #440]	; (80053bc <uri_to_path2+0x280>)
 8005202:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f7ff faf8 	bl	80047fc <mg_http_reply>
    return -1;
 800520c:	f04f 33ff 	mov.w	r3, #4294967295
 8005210:	e0c9      	b.n	80053a6 <uri_to_path2+0x26a>
  }
  n = strlen(path);
 8005212:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005214:	f7fb f8dc 	bl	80003d0 <strlen>
 8005218:	6178      	str	r0, [r7, #20]
  while (n > 1 && path[n - 1] == '/') path[--n] = 0;  // Trim trailing slashes
 800521a:	e007      	b.n	800522c <uri_to_path2+0xf0>
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	3b01      	subs	r3, #1
 8005220:	617b      	str	r3, [r7, #20]
 8005222:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	4413      	add	r3, r2
 8005228:	2200      	movs	r2, #0
 800522a:	701a      	strb	r2, [r3, #0]
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	2b01      	cmp	r3, #1
 8005230:	d906      	bls.n	8005240 <uri_to_path2+0x104>
 8005232:	697b      	ldr	r3, [r7, #20]
 8005234:	3b01      	subs	r3, #1
 8005236:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005238:	4413      	add	r3, r2
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	2b2f      	cmp	r3, #47	; 0x2f
 800523e:	d0ed      	beq.n	800521c <uri_to_path2+0xe0>
  flags = mg_vcmp(&hm->uri, "/") == 0 ? MG_FS_DIR : fs->st(path, NULL, NULL);
 8005240:	68bb      	ldr	r3, [r7, #8]
 8005242:	3308      	adds	r3, #8
 8005244:	495f      	ldr	r1, [pc, #380]	; (80053c4 <uri_to_path2+0x288>)
 8005246:	4618      	mov	r0, r3
 8005248:	f004 fb2c 	bl	80098a4 <mg_vcmp>
 800524c:	4603      	mov	r3, r0
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <uri_to_path2+0x126>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	2200      	movs	r2, #0
 8005258:	2100      	movs	r1, #0
 800525a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800525c:	4798      	blx	r3
 800525e:	4603      	mov	r3, r0
 8005260:	e000      	b.n	8005264 <uri_to_path2+0x128>
 8005262:	2304      	movs	r3, #4
 8005264:	61fb      	str	r3, [r7, #28]
  MG_VERBOSE(("%lu %.*s -> %s %d", c->id, (int) hm->uri.len, hm->uri.ptr, path,
 8005266:	4b58      	ldr	r3, [pc, #352]	; (80053c8 <uri_to_path2+0x28c>)
 8005268:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800526c:	4957      	ldr	r1, [pc, #348]	; (80053cc <uri_to_path2+0x290>)
 800526e:	2004      	movs	r0, #4
 8005270:	f001 fed0 	bl	8007014 <mg_log_prefix>
 8005274:	4603      	mov	r3, r0
 8005276:	2b00      	cmp	r3, #0
 8005278:	d00f      	beq.n	800529a <uri_to_path2+0x15e>
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	4618      	mov	r0, r3
 8005284:	68bb      	ldr	r3, [r7, #8]
 8005286:	689a      	ldr	r2, [r3, #8]
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	9301      	str	r3, [sp, #4]
 800528c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800528e:	9300      	str	r3, [sp, #0]
 8005290:	4613      	mov	r3, r2
 8005292:	4602      	mov	r2, r0
 8005294:	484e      	ldr	r0, [pc, #312]	; (80053d0 <uri_to_path2+0x294>)
 8005296:	f001 ff17 	bl	80070c8 <mg_log>
              flags));
  if (flags == 0) {
 800529a:	69fb      	ldr	r3, [r7, #28]
 800529c:	2b00      	cmp	r3, #0
 800529e:	f000 8081 	beq.w	80053a4 <uri_to_path2+0x268>
    // Do nothing - let's caller decide
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80052a2:	69fb      	ldr	r3, [r7, #28]
 80052a4:	f003 0304 	and.w	r3, r3, #4
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d020      	beq.n	80052ee <uri_to_path2+0x1b2>
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d01c      	beq.n	80052ee <uri_to_path2+0x1b2>
             hm->uri.ptr[hm->uri.len - 1] != '/') {
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	68bb      	ldr	r3, [r7, #8]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	3b01      	subs	r3, #1
 80052be:	4413      	add	r3, r2
 80052c0:	781b      	ldrb	r3, [r3, #0]
  } else if ((flags & MG_FS_DIR) && hm->uri.len > 0 &&
 80052c2:	2b2f      	cmp	r3, #47	; 0x2f
 80052c4:	d013      	beq.n	80052ee <uri_to_path2+0x1b2>
    mg_printf(c,
              "HTTP/1.1 301 Moved\r\n"
              "Location: %.*s/\r\n"
              "Content-Length: 0\r\n"
              "\r\n",
              (int) hm->uri.len, hm->uri.ptr);
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	68db      	ldr	r3, [r3, #12]
    mg_printf(c,
 80052ca:	461a      	mov	r2, r3
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	4940      	ldr	r1, [pc, #256]	; (80053d4 <uri_to_path2+0x298>)
 80052d2:	68f8      	ldr	r0, [r7, #12]
 80052d4:	f002 ffbc 	bl	8008250 <mg_printf>
    c->is_resp = 0;
 80052d8:	68fa      	ldr	r2, [r7, #12]
 80052da:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80052de:	f36f 13c7 	bfc	r3, #7, #1
 80052e2:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    flags = -1;
 80052e6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ea:	61fb      	str	r3, [r7, #28]
 80052ec:	e05a      	b.n	80053a4 <uri_to_path2+0x268>
  } else if (flags & MG_FS_DIR) {
 80052ee:	69fb      	ldr	r3, [r7, #28]
 80052f0:	f003 0304 	and.w	r3, r3, #4
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d055      	beq.n	80053a4 <uri_to_path2+0x268>
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 80052f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80052fa:	697b      	ldr	r3, [r7, #20]
 80052fc:	18d0      	adds	r0, r2, r3
 80052fe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	4a34      	ldr	r2, [pc, #208]	; (80053d8 <uri_to_path2+0x29c>)
 8005306:	4619      	mov	r1, r3
 8005308:	f003 fc78 	bl	8008bfc <mg_snprintf>
 800530c:	4603      	mov	r3, r0
 800530e:	2b00      	cmp	r3, #0
 8005310:	d009      	beq.n	8005326 <uri_to_path2+0x1ea>
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2200      	movs	r2, #0
 8005318:	2100      	movs	r1, #0
 800531a:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800531c:	4798      	blx	r3
 800531e:	61b8      	str	r0, [r7, #24]
    if (((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX) > 0 &&
 8005320:	69bb      	ldr	r3, [r7, #24]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d116      	bne.n	8005354 <uri_to_path2+0x218>
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 8005326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005328:	697b      	ldr	r3, [r7, #20]
 800532a:	18d0      	adds	r0, r2, r3
 800532c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800532e:	697b      	ldr	r3, [r7, #20]
 8005330:	1ad3      	subs	r3, r2, r3
 8005332:	4a2a      	ldr	r2, [pc, #168]	; (80053dc <uri_to_path2+0x2a0>)
 8005334:	4619      	mov	r1, r3
 8005336:	f003 fc61 	bl	8008bfc <mg_snprintf>
 800533a:	4603      	mov	r3, r0
          (tmp = fs->st(path, NULL, NULL)) != 0) ||
 800533c:	2b00      	cmp	r3, #0
 800533e:	d00c      	beq.n	800535a <uri_to_path2+0x21e>
          (tmp = fs->st(path, NULL, NULL)) != 0))) {
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	2200      	movs	r2, #0
 8005346:	2100      	movs	r1, #0
 8005348:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800534a:	4798      	blx	r3
 800534c:	61b8      	str	r0, [r7, #24]
         (mg_snprintf(path + n, path_size - n, "/index.shtml") > 0 &&
 800534e:	69bb      	ldr	r3, [r7, #24]
 8005350:	2b00      	cmp	r3, #0
 8005352:	d002      	beq.n	800535a <uri_to_path2+0x21e>
      flags = tmp;
 8005354:	69bb      	ldr	r3, [r7, #24]
 8005356:	61fb      	str	r3, [r7, #28]
 8005358:	e024      	b.n	80053a4 <uri_to_path2+0x268>
    } else if ((mg_snprintf(path + n, path_size - n, "/" MG_HTTP_INDEX ".gz") >
 800535a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800535c:	697b      	ldr	r3, [r7, #20]
 800535e:	18d0      	adds	r0, r2, r3
 8005360:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	1ad3      	subs	r3, r2, r3
 8005366:	4a1e      	ldr	r2, [pc, #120]	; (80053e0 <uri_to_path2+0x2a4>)
 8005368:	4619      	mov	r1, r3
 800536a:	f003 fc47 	bl	8008bfc <mg_snprintf>
 800536e:	4603      	mov	r3, r0
 8005370:	2b00      	cmp	r3, #0
 8005372:	d012      	beq.n	800539a <uri_to_path2+0x25e>
                    0 &&
                (tmp = fs->st(path, NULL, NULL)) !=
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2200      	movs	r2, #0
 800537a:	2100      	movs	r1, #0
 800537c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800537e:	4798      	blx	r3
 8005380:	61b8      	str	r0, [r7, #24]
                    0 &&
 8005382:	69bb      	ldr	r3, [r7, #24]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d008      	beq.n	800539a <uri_to_path2+0x25e>
                    0)) {  // check for gzipped index
      flags = tmp;
 8005388:	69bb      	ldr	r3, [r7, #24]
 800538a:	61fb      	str	r3, [r7, #28]
      path[n + 1 + strlen(MG_HTTP_INDEX)] =
 800538c:	697b      	ldr	r3, [r7, #20]
 800538e:	330b      	adds	r3, #11
 8005390:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005392:	4413      	add	r3, r2
 8005394:	2200      	movs	r2, #0
 8005396:	701a      	strb	r2, [r3, #0]
 8005398:	e004      	b.n	80053a4 <uri_to_path2+0x268>
          '\0';  // Remove appended .gz in index file name
    } else {
      path[n] = '\0';  // Remove appended index file name
 800539a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	4413      	add	r3, r2
 80053a0:	2200      	movs	r2, #0
 80053a2:	701a      	strb	r2, [r3, #0]
    }
  }
  return flags;
 80053a4:	69fb      	ldr	r3, [r7, #28]
}
 80053a6:	4618      	mov	r0, r3
 80053a8:	3724      	adds	r7, #36	; 0x24
 80053aa:	46bd      	mov	sp, r7
 80053ac:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 80053b0:	b002      	add	sp, #8
 80053b2:	4770      	bx	lr
 80053b4:	0801557c 	.word	0x0801557c
 80053b8:	08015e9c 	.word	0x08015e9c
 80053bc:	08015ae8 	.word	0x08015ae8
 80053c0:	08015eb0 	.word	0x08015eb0
 80053c4:	08015ec0 	.word	0x08015ec0
 80053c8:	080173e4 	.word	0x080173e4
 80053cc:	0801544c 	.word	0x0801544c
 80053d0:	08015ec4 	.word	0x08015ec4
 80053d4:	08015ed8 	.word	0x08015ed8
 80053d8:	08015f14 	.word	0x08015f14
 80053dc:	08015f20 	.word	0x08015f20
 80053e0:	08015f30 	.word	0x08015f30

080053e4 <uri_to_path>:

static int uri_to_path(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts, char *path,
                       size_t path_size) {
 80053e4:	b580      	push	{r7, lr}
 80053e6:	b09a      	sub	sp, #104	; 0x68
 80053e8:	af06      	add	r7, sp, #24
 80053ea:	6178      	str	r0, [r7, #20]
 80053ec:	6139      	str	r1, [r7, #16]
 80053ee:	60fa      	str	r2, [r7, #12]
 80053f0:	60bb      	str	r3, [r7, #8]
  struct mg_fs *fs = opts->fs == NULL ? &mg_fs_posix : opts->fs;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d002      	beq.n	8005400 <uri_to_path+0x1c>
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	695b      	ldr	r3, [r3, #20]
 80053fe:	e000      	b.n	8005402 <uri_to_path+0x1e>
 8005400:	4b3b      	ldr	r3, [pc, #236]	; (80054f0 <uri_to_path+0x10c>)
 8005402:	64fb      	str	r3, [r7, #76]	; 0x4c
  struct mg_str k, v, s = mg_str(opts->root_dir), u = {0, 0}, p = {0, 0};
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	681a      	ldr	r2, [r3, #0]
 8005408:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800540c:	4611      	mov	r1, r2
 800540e:	4618      	mov	r0, r3
 8005410:	f004 f9ce 	bl	80097b0 <mg_str_s>
 8005414:	2300      	movs	r3, #0
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
 8005418:	2300      	movs	r3, #0
 800541a:	62bb      	str	r3, [r7, #40]	; 0x28
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	2300      	movs	r3, #0
 8005422:	623b      	str	r3, [r7, #32]
  while (mg_commalist(&s, &k, &v)) {
 8005424:	e040      	b.n	80054a8 <uri_to_path+0xc4>
    if (v.len == 0) v = k, k = mg_str("/");
 8005426:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005428:	2b00      	cmp	r3, #0
 800542a:	d113      	bne.n	8005454 <uri_to_path+0x70>
 800542c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005430:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005434:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005438:	e883 0003 	stmia.w	r3, {r0, r1}
 800543c:	463b      	mov	r3, r7
 800543e:	492d      	ldr	r1, [pc, #180]	; (80054f4 <uri_to_path+0x110>)
 8005440:	4618      	mov	r0, r3
 8005442:	f004 f9b5 	bl	80097b0 <mg_str_s>
 8005446:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800544a:	463a      	mov	r2, r7
 800544c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005450:	e883 0003 	stmia.w	r3, {r0, r1}
    if (hm->uri.len < k.len) continue;
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800545a:	429a      	cmp	r2, r3
 800545c:	d200      	bcs.n	8005460 <uri_to_path+0x7c>
 800545e:	e023      	b.n	80054a8 <uri_to_path+0xc4>
    if (mg_strcmp(k, mg_str_n(hm->uri.ptr, k.len)) != 0) continue;
 8005460:	693b      	ldr	r3, [r7, #16]
 8005462:	6899      	ldr	r1, [r3, #8]
 8005464:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005466:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800546a:	4618      	mov	r0, r3
 800546c:	f004 f9bd 	bl	80097ea <mg_str_n>
 8005470:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8005474:	cb0c      	ldmia	r3, {r2, r3}
 8005476:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 800547a:	c903      	ldmia	r1, {r0, r1}
 800547c:	f004 fa5a 	bl	8009934 <mg_strcmp>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d000      	beq.n	8005488 <uri_to_path+0xa4>
 8005486:	e00f      	b.n	80054a8 <uri_to_path+0xc4>
    u = k, p = v;
 8005488:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800548c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8005490:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005494:	e883 0003 	stmia.w	r3, {r0, r1}
 8005498:	f107 031c 	add.w	r3, r7, #28
 800549c:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80054a0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80054a4:	e883 0003 	stmia.w	r3, {r0, r1}
  while (mg_commalist(&s, &k, &v)) {
 80054a8:	f107 0234 	add.w	r2, r7, #52	; 0x34
 80054ac:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80054b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80054b4:	4618      	mov	r0, r3
 80054b6:	f004 fc9c 	bl	8009df2 <mg_commalist>
 80054ba:	4603      	mov	r3, r0
 80054bc:	2b00      	cmp	r3, #0
 80054be:	d1b2      	bne.n	8005426 <uri_to_path+0x42>
  }
  return uri_to_path2(c, hm, fs, u, p, path, path_size);
 80054c0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80054c2:	9304      	str	r3, [sp, #16]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	9303      	str	r3, [sp, #12]
 80054c8:	aa01      	add	r2, sp, #4
 80054ca:	f107 031c 	add.w	r3, r7, #28
 80054ce:	e893 0003 	ldmia.w	r3, {r0, r1}
 80054d2:	e882 0003 	stmia.w	r2, {r0, r1}
 80054d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054dc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80054de:	6939      	ldr	r1, [r7, #16]
 80054e0:	6978      	ldr	r0, [r7, #20]
 80054e2:	f7ff fe2b 	bl	800513c <uri_to_path2>
 80054e6:	4603      	mov	r3, r0
}
 80054e8:	4618      	mov	r0, r3
 80054ea:	3750      	adds	r7, #80	; 0x50
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bd80      	pop	{r7, pc}
 80054f0:	24000034 	.word	0x24000034
 80054f4:	08015ec0 	.word	0x08015ec0

080054f8 <mg_http_serve_dir>:

void mg_http_serve_dir(struct mg_connection *c, struct mg_http_message *hm,
                       const struct mg_http_serve_opts *opts) {
 80054f8:	b590      	push	{r4, r7, lr}
 80054fa:	b0a3      	sub	sp, #140	; 0x8c
 80054fc:	af02      	add	r7, sp, #8
 80054fe:	60f8      	str	r0, [r7, #12]
 8005500:	60b9      	str	r1, [r7, #8]
 8005502:	607a      	str	r2, [r7, #4]
  char path[MG_PATH_MAX];
  const char *sp = opts->ssi_pattern;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	685b      	ldr	r3, [r3, #4]
 8005508:	67fb      	str	r3, [r7, #124]	; 0x7c
  int flags = uri_to_path(c, hm, opts, path, sizeof(path));
 800550a:	f107 0314 	add.w	r3, r7, #20
 800550e:	2264      	movs	r2, #100	; 0x64
 8005510:	9200      	str	r2, [sp, #0]
 8005512:	687a      	ldr	r2, [r7, #4]
 8005514:	68b9      	ldr	r1, [r7, #8]
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f7ff ff64 	bl	80053e4 <uri_to_path>
 800551c:	67b8      	str	r0, [r7, #120]	; 0x78
  if (flags < 0) {
 800551e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005520:	2b00      	cmp	r3, #0
 8005522:	db35      	blt.n	8005590 <mg_http_serve_dir+0x98>
    // Do nothing: the response has already been sent by uri_to_path()
  } else if (flags & MG_FS_DIR) {
 8005524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005526:	f003 0304 	and.w	r3, r3, #4
 800552a:	2b00      	cmp	r3, #0
 800552c:	d007      	beq.n	800553e <mg_http_serve_dir+0x46>
#if MG_ENABLE_DIRLIST
    listdir(c, hm, opts, path);
#else
    mg_http_reply(c, 403, "", "Forbidden\n");
 800552e:	4b1a      	ldr	r3, [pc, #104]	; (8005598 <mg_http_serve_dir+0xa0>)
 8005530:	4a1a      	ldr	r2, [pc, #104]	; (800559c <mg_http_serve_dir+0xa4>)
 8005532:	f240 1193 	movw	r1, #403	; 0x193
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f7ff f960 	bl	80047fc <mg_http_reply>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
    mg_http_serve_ssi(c, opts->root_dir, path);
  } else {
    mg_http_serve_file(c, hm, path, opts);
  }
}
 800553c:	e028      	b.n	8005590 <mg_http_serve_dir+0x98>
  } else if (flags && sp != NULL &&
 800553e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005540:	2b00      	cmp	r3, #0
 8005542:	d01e      	beq.n	8005582 <mg_http_serve_dir+0x8a>
 8005544:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005546:	2b00      	cmp	r3, #0
 8005548:	d01b      	beq.n	8005582 <mg_http_serve_dir+0x8a>
             mg_globmatch(sp, strlen(sp), path, strlen(path))) {
 800554a:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800554c:	f7fa ff40 	bl	80003d0 <strlen>
 8005550:	4604      	mov	r4, r0
 8005552:	f107 0314 	add.w	r3, r7, #20
 8005556:	4618      	mov	r0, r3
 8005558:	f7fa ff3a 	bl	80003d0 <strlen>
 800555c:	4603      	mov	r3, r0
 800555e:	f107 0214 	add.w	r2, r7, #20
 8005562:	4621      	mov	r1, r4
 8005564:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 8005566:	f004 fb43 	bl	8009bf0 <mg_globmatch>
 800556a:	4603      	mov	r3, r0
  } else if (flags && sp != NULL &&
 800556c:	2b00      	cmp	r3, #0
 800556e:	d008      	beq.n	8005582 <mg_http_serve_dir+0x8a>
    mg_http_serve_ssi(c, opts->root_dir, path);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f107 0214 	add.w	r2, r7, #20
 8005578:	4619      	mov	r1, r3
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f004 f904 	bl	8009788 <mg_http_serve_ssi>
}
 8005580:	e006      	b.n	8005590 <mg_http_serve_dir+0x98>
    mg_http_serve_file(c, hm, path, opts);
 8005582:	f107 0214 	add.w	r2, r7, #20
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f7ff fb34 	bl	8004bf8 <mg_http_serve_file>
}
 8005590:	bf00      	nop
 8005592:	3784      	adds	r7, #132	; 0x84
 8005594:	46bd      	mov	sp, r7
 8005596:	bd90      	pop	{r4, r7, pc}
 8005598:	08015f40 	.word	0x08015f40
 800559c:	08015ae8 	.word	0x08015ae8

080055a0 <mg_http_creds>:
  if (len > 0) buf[len - 1] = '\0';           // Always.
  return n;
}

void mg_http_creds(struct mg_http_message *hm, char *user, size_t userlen,
                   char *pass, size_t passlen) {
 80055a0:	b590      	push	{r4, r7, lr}
 80055a2:	b0cf      	sub	sp, #316	; 0x13c
 80055a4:	af02      	add	r7, sp, #8
 80055a6:	f507 7498 	add.w	r4, r7, #304	; 0x130
 80055aa:	f5a4 7492 	sub.w	r4, r4, #292	; 0x124
 80055ae:	6020      	str	r0, [r4, #0]
 80055b0:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80055b4:	f5a0 7094 	sub.w	r0, r0, #296	; 0x128
 80055b8:	6001      	str	r1, [r0, #0]
 80055ba:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80055be:	f5a1 7196 	sub.w	r1, r1, #300	; 0x12c
 80055c2:	600a      	str	r2, [r1, #0]
 80055c4:	f507 7298 	add.w	r2, r7, #304	; 0x130
 80055c8:	f5a2 7298 	sub.w	r2, r2, #304	; 0x130
 80055cc:	6013      	str	r3, [r2, #0]
  struct mg_str *v = mg_http_get_header(hm, "Authorization");
 80055ce:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055d2:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 80055d6:	497a      	ldr	r1, [pc, #488]	; (80057c0 <mg_http_creds+0x220>)
 80055d8:	6818      	ldr	r0, [r3, #0]
 80055da:	f7fe fa5b 	bl	8003a94 <mg_http_get_header>
 80055de:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
  user[0] = pass[0] = '\0';
 80055e2:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055e6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	2200      	movs	r2, #0
 80055ee:	701a      	strb	r2, [r3, #0]
 80055f0:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80055f4:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	781a      	ldrb	r2, [r3, #0]
 80055fc:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005600:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	701a      	strb	r2, [r3, #0]
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 8005608:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800560c:	2b00      	cmp	r3, #0
 800560e:	d05f      	beq.n	80056d0 <mg_http_creds+0x130>
 8005610:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2b06      	cmp	r3, #6
 8005618:	d95a      	bls.n	80056d0 <mg_http_creds+0x130>
 800561a:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2206      	movs	r2, #6
 8005622:	4968      	ldr	r1, [pc, #416]	; (80057c4 <mg_http_creds+0x224>)
 8005624:	4618      	mov	r0, r3
 8005626:	f00f f85b 	bl	80146e0 <memcmp>
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d14f      	bne.n	80056d0 <mg_http_creds+0x130>
    char buf[256];
    int n = mg_base64_decode(v->ptr + 6, (int) v->len - 6, buf);
 8005630:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	1d98      	adds	r0, r3, #6
 8005638:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800563c:	685b      	ldr	r3, [r3, #4]
 800563e:	3b06      	subs	r3, #6
 8005640:	f107 0214 	add.w	r2, r7, #20
 8005644:	4619      	mov	r1, r3
 8005646:	f7fb fec4 	bl	80013d2 <mg_base64_decode>
 800564a:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128
    const char *p = (const char *) memchr(buf, ':', n > 0 ? (size_t) n : 0);
 800564e:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8005652:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005656:	461a      	mov	r2, r3
 8005658:	f107 0314 	add.w	r3, r7, #20
 800565c:	213a      	movs	r1, #58	; 0x3a
 800565e:	4618      	mov	r0, r3
 8005660:	f7fa fe66 	bl	8000330 <memchr>
 8005664:	f8c7 0124 	str.w	r0, [r7, #292]	; 0x124
    if (p != NULL) {
 8005668:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 80a1 	beq.w	80057b4 <mg_http_creds+0x214>
      mg_snprintf(user, userlen, "%.*s", (int) (p - buf), buf);
 8005672:	f107 0314 	add.w	r3, r7, #20
 8005676:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 800567a:	1ad2      	subs	r2, r2, r3
 800567c:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005680:	f5a3 7196 	sub.w	r1, r3, #300	; 0x12c
 8005684:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005688:	f5a3 7094 	sub.w	r0, r3, #296	; 0x128
 800568c:	f107 0314 	add.w	r3, r7, #20
 8005690:	9300      	str	r3, [sp, #0]
 8005692:	4613      	mov	r3, r2
 8005694:	4a4c      	ldr	r2, [pc, #304]	; (80057c8 <mg_http_creds+0x228>)
 8005696:	6809      	ldr	r1, [r1, #0]
 8005698:	6800      	ldr	r0, [r0, #0]
 800569a:	f003 faaf 	bl	8008bfc <mg_snprintf>
      mg_snprintf(pass, passlen, "%.*s", n - (int) (p - buf) - 1, p + 1);
 800569e:	f107 0314 	add.w	r3, r7, #20
 80056a2:	f8d7 2124 	ldr.w	r2, [r7, #292]	; 0x124
 80056a6:	1ad3      	subs	r3, r2, r3
 80056a8:	f8d7 2128 	ldr.w	r2, [r7, #296]	; 0x128
 80056ac:	1ad3      	subs	r3, r2, r3
 80056ae:	1e5a      	subs	r2, r3, #1
 80056b0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80056b4:	3301      	adds	r3, #1
 80056b6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80056ba:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 80056be:	9300      	str	r3, [sp, #0]
 80056c0:	4613      	mov	r3, r2
 80056c2:	4a41      	ldr	r2, [pc, #260]	; (80057c8 <mg_http_creds+0x228>)
 80056c4:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80056c8:	6800      	ldr	r0, [r0, #0]
 80056ca:	f003 fa97 	bl	8008bfc <mg_snprintf>
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 80056ce:	e071      	b.n	80057b4 <mg_http_creds+0x214>
    }
  } else if (v != NULL && v->len > 7 && memcmp(v->ptr, "Bearer ", 7) == 0) {
 80056d0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d024      	beq.n	8005722 <mg_http_creds+0x182>
 80056d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b07      	cmp	r3, #7
 80056e0:	d91f      	bls.n	8005722 <mg_http_creds+0x182>
 80056e2:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2207      	movs	r2, #7
 80056ea:	4938      	ldr	r1, [pc, #224]	; (80057cc <mg_http_creds+0x22c>)
 80056ec:	4618      	mov	r0, r3
 80056ee:	f00e fff7 	bl	80146e0 <memcmp>
 80056f2:	4603      	mov	r3, r0
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d114      	bne.n	8005722 <mg_http_creds+0x182>
    mg_snprintf(pass, passlen, "%.*s", (int) v->len - 7, v->ptr + 7);
 80056f8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80056fc:	685b      	ldr	r3, [r3, #4]
 80056fe:	1fda      	subs	r2, r3, #7
 8005700:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	3307      	adds	r3, #7
 8005708:	f507 7198 	add.w	r1, r7, #304	; 0x130
 800570c:	f5a1 7098 	sub.w	r0, r1, #304	; 0x130
 8005710:	9300      	str	r3, [sp, #0]
 8005712:	4613      	mov	r3, r2
 8005714:	4a2c      	ldr	r2, [pc, #176]	; (80057c8 <mg_http_creds+0x228>)
 8005716:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 800571a:	6800      	ldr	r0, [r0, #0]
 800571c:	f003 fa6e 	bl	8008bfc <mg_snprintf>
 8005720:	e049      	b.n	80057b6 <mg_http_creds+0x216>
  } else if ((v = mg_http_get_header(hm, "Cookie")) != NULL) {
 8005722:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005726:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800572a:	4929      	ldr	r1, [pc, #164]	; (80057d0 <mg_http_creds+0x230>)
 800572c:	6818      	ldr	r0, [r3, #0]
 800572e:	f7fe f9b1 	bl	8003a94 <mg_http_get_header>
 8005732:	f8c7 012c 	str.w	r0, [r7, #300]	; 0x12c
 8005736:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800573a:	2b00      	cmp	r3, #0
 800573c:	d028      	beq.n	8005790 <mg_http_creds+0x1f0>
    struct mg_str t = mg_http_get_header_var(*v, mg_str_n("access_token", 12));
 800573e:	f507 738e 	add.w	r3, r7, #284	; 0x11c
 8005742:	220c      	movs	r2, #12
 8005744:	4923      	ldr	r1, [pc, #140]	; (80057d4 <mg_http_creds+0x234>)
 8005746:	4618      	mov	r0, r3
 8005748:	f004 f84f 	bl	80097ea <mg_str_n>
 800574c:	f507 708a 	add.w	r0, r7, #276	; 0x114
 8005750:	f8d7 212c 	ldr.w	r2, [r7, #300]	; 0x12c
 8005754:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8005758:	9300      	str	r3, [sp, #0]
 800575a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800575e:	ca06      	ldmia	r2, {r1, r2}
 8005760:	f000 f863 	bl	800582a <mg_http_get_header_var>
    if (t.len > 0) mg_snprintf(pass, passlen, "%.*s", (int) t.len, t.ptr);
 8005764:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005768:	2b00      	cmp	r3, #0
 800576a:	d024      	beq.n	80057b6 <mg_http_creds+0x216>
 800576c:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8005770:	4619      	mov	r1, r3
 8005772:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8005776:	f507 7298 	add.w	r2, r7, #304	; 0x130
 800577a:	f5a2 7098 	sub.w	r0, r2, #304	; 0x130
 800577e:	9300      	str	r3, [sp, #0]
 8005780:	460b      	mov	r3, r1
 8005782:	4a11      	ldr	r2, [pc, #68]	; (80057c8 <mg_http_creds+0x228>)
 8005784:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8005788:	6800      	ldr	r0, [r0, #0]
 800578a:	f003 fa37 	bl	8008bfc <mg_snprintf>
  } else {
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
  }
}
 800578e:	e012      	b.n	80057b6 <mg_http_creds+0x216>
    mg_http_get_var(&hm->query, "access_token", pass, passlen);
 8005790:	f507 7398 	add.w	r3, r7, #304	; 0x130
 8005794:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	f103 0010 	add.w	r0, r3, #16
 800579e:	f507 7398 	add.w	r3, r7, #304	; 0x130
 80057a2:	f5a3 7298 	sub.w	r2, r3, #304	; 0x130
 80057a6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80057aa:	6812      	ldr	r2, [r2, #0]
 80057ac:	4909      	ldr	r1, [pc, #36]	; (80057d4 <mg_http_creds+0x234>)
 80057ae:	f7fd ffe0 	bl	8003772 <mg_http_get_var>
}
 80057b2:	e000      	b.n	80057b6 <mg_http_creds+0x216>
  if (v != NULL && v->len > 6 && memcmp(v->ptr, "Basic ", 6) == 0) {
 80057b4:	bf00      	nop
}
 80057b6:	bf00      	nop
 80057b8:	f507 779a 	add.w	r7, r7, #308	; 0x134
 80057bc:	46bd      	mov	sp, r7
 80057be:	bd90      	pop	{r4, r7, pc}
 80057c0:	08015f4c 	.word	0x08015f4c
 80057c4:	08015f5c 	.word	0x08015f5c
 80057c8:	0801557c 	.word	0x0801557c
 80057cc:	08015f64 	.word	0x08015f64
 80057d0:	08015f6c 	.word	0x08015f6c
 80057d4:	08015f74 	.word	0x08015f74

080057d8 <stripquotes>:

static struct mg_str stripquotes(struct mg_str s) {
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	1d3b      	adds	r3, r7, #4
 80057e2:	e883 0006 	stmia.w	r3, {r1, r2}
  return s.len > 1 && s.ptr[0] == '"' && s.ptr[s.len - 1] == '"'
 80057e6:	68bb      	ldr	r3, [r7, #8]
             ? mg_str_n(s.ptr + 1, s.len - 2)
             : s;
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d913      	bls.n	8005814 <stripquotes+0x3c>
  return s.len > 1 && s.ptr[0] == '"' && s.ptr[s.len - 1] == '"'
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	781b      	ldrb	r3, [r3, #0]
 80057f0:	2b22      	cmp	r3, #34	; 0x22
 80057f2:	d10f      	bne.n	8005814 <stripquotes+0x3c>
 80057f4:	687a      	ldr	r2, [r7, #4]
 80057f6:	68bb      	ldr	r3, [r7, #8]
 80057f8:	3b01      	subs	r3, #1
 80057fa:	4413      	add	r3, r2
 80057fc:	781b      	ldrb	r3, [r3, #0]
 80057fe:	2b22      	cmp	r3, #34	; 0x22
 8005800:	d108      	bne.n	8005814 <stripquotes+0x3c>
             ? mg_str_n(s.ptr + 1, s.len - 2)
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	1c59      	adds	r1, r3, #1
 8005806:	68bb      	ldr	r3, [r7, #8]
 8005808:	1e9a      	subs	r2, r3, #2
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	4618      	mov	r0, r3
 800580e:	f003 ffec 	bl	80097ea <mg_str_n>
             : s;
 8005812:	e006      	b.n	8005822 <stripquotes+0x4a>
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	461a      	mov	r2, r3
 8005818:	1d3b      	adds	r3, r7, #4
 800581a:	e893 0003 	ldmia.w	r3, {r0, r1}
 800581e:	e882 0003 	stmia.w	r2, {r0, r1}
}
 8005822:	68f8      	ldr	r0, [r7, #12]
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <mg_http_get_header_var>:

struct mg_str mg_http_get_header_var(struct mg_str s, struct mg_str v) {
 800582a:	b082      	sub	sp, #8
 800582c:	b580      	push	{r7, lr}
 800582e:	b08c      	sub	sp, #48	; 0x30
 8005830:	af00      	add	r7, sp, #0
 8005832:	60f8      	str	r0, [r7, #12]
 8005834:	1d38      	adds	r0, r7, #4
 8005836:	e880 0006 	stmia.w	r0, {r1, r2}
 800583a:	63fb      	str	r3, [r7, #60]	; 0x3c
  size_t i;
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 800583c:	2300      	movs	r3, #0
 800583e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005840:	e072      	b.n	8005928 <mg_http_get_header_var+0xfe>
    if (s.ptr[i + v.len] == '=' && memcmp(&s.ptr[i], v.ptr, v.len) == 0) {
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005846:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005848:	440b      	add	r3, r1
 800584a:	4413      	add	r3, r2
 800584c:	781b      	ldrb	r3, [r3, #0]
 800584e:	2b3d      	cmp	r3, #61	; 0x3d
 8005850:	d167      	bne.n	8005922 <mg_http_get_header_var+0xf8>
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005856:	4413      	add	r3, r2
 8005858:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800585a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800585c:	4618      	mov	r0, r3
 800585e:	f00e ff3f 	bl	80146e0 <memcmp>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d15c      	bne.n	8005922 <mg_http_get_header_var+0xf8>
      const char *p = &s.ptr[i + v.len + 1], *b = p, *x = &s.ptr[s.len];
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800586c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800586e:	440b      	add	r3, r1
 8005870:	3301      	adds	r3, #1
 8005872:	4413      	add	r3, r2
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
 8005876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005878:	627b      	str	r3, [r7, #36]	; 0x24
 800587a:	687a      	ldr	r2, [r7, #4]
 800587c:	68bb      	ldr	r3, [r7, #8]
 800587e:	4413      	add	r3, r2
 8005880:	623b      	str	r3, [r7, #32]
      int q = p < x && *p == '"' ? 1 : 0;
 8005882:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005884:	6a3b      	ldr	r3, [r7, #32]
 8005886:	429a      	cmp	r2, r3
 8005888:	d205      	bcs.n	8005896 <mg_http_get_header_var+0x6c>
 800588a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800588c:	781b      	ldrb	r3, [r3, #0]
 800588e:	2b22      	cmp	r3, #34	; 0x22
 8005890:	d101      	bne.n	8005896 <mg_http_get_header_var+0x6c>
 8005892:	2301      	movs	r3, #1
 8005894:	e000      	b.n	8005898 <mg_http_get_header_var+0x6e>
 8005896:	2300      	movs	r3, #0
 8005898:	61fb      	str	r3, [r7, #28]
      while (p < x &&
 800589a:	e002      	b.n	80058a2 <mg_http_get_header_var+0x78>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
        p++;
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	3301      	adds	r3, #1
 80058a0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (p < x &&
 80058a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058a4:	6a3b      	ldr	r3, [r7, #32]
 80058a6:	429a      	cmp	r2, r3
 80058a8:	d227      	bcs.n	80058fa <mg_http_get_header_var+0xd0>
 80058aa:	69fb      	ldr	r3, [r7, #28]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d010      	beq.n	80058d2 <mg_http_get_header_var+0xa8>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80058b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d003      	beq.n	80058c0 <mg_http_get_header_var+0x96>
 80058b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ba:	781b      	ldrb	r3, [r3, #0]
 80058bc:	2b22      	cmp	r3, #34	; 0x22
 80058be:	d001      	beq.n	80058c4 <mg_http_get_header_var+0x9a>
 80058c0:	2301      	movs	r3, #1
 80058c2:	e000      	b.n	80058c6 <mg_http_get_header_var+0x9c>
 80058c4:	2300      	movs	r3, #0
      while (p < x &&
 80058c6:	f003 0301 	and.w	r3, r3, #1
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d1e5      	bne.n	800589c <mg_http_get_header_var+0x72>
 80058d0:	e013      	b.n	80058fa <mg_http_get_header_var+0xd0>
             (q ? p == b || *p != '"' : *p != ';' && *p != ' ' && *p != ','))
 80058d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d4:	781b      	ldrb	r3, [r3, #0]
 80058d6:	2b3b      	cmp	r3, #59	; 0x3b
 80058d8:	d009      	beq.n	80058ee <mg_http_get_header_var+0xc4>
 80058da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058dc:	781b      	ldrb	r3, [r3, #0]
 80058de:	2b20      	cmp	r3, #32
 80058e0:	d005      	beq.n	80058ee <mg_http_get_header_var+0xc4>
 80058e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058e4:	781b      	ldrb	r3, [r3, #0]
 80058e6:	2b2c      	cmp	r3, #44	; 0x2c
 80058e8:	d001      	beq.n	80058ee <mg_http_get_header_var+0xc4>
 80058ea:	2301      	movs	r3, #1
 80058ec:	e000      	b.n	80058f0 <mg_http_get_header_var+0xc6>
 80058ee:	2300      	movs	r3, #0
      while (p < x &&
 80058f0:	f003 0301 	and.w	r3, r3, #1
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d1d0      	bne.n	800589c <mg_http_get_header_var+0x72>
      // MG_INFO(("[%.*s] [%.*s] [%.*s]", (int) s.len, s.ptr, (int) v.len,
      // v.ptr, (int) (p - b), b));
      return stripquotes(mg_str_n(b, (size_t) (p - b + q)));
 80058fa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80058fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fe:	1ad2      	subs	r2, r2, r3
 8005900:	69fb      	ldr	r3, [r7, #28]
 8005902:	4413      	add	r3, r2
 8005904:	461a      	mov	r2, r3
 8005906:	f107 0314 	add.w	r3, r7, #20
 800590a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800590c:	4618      	mov	r0, r3
 800590e:	f003 ff6c 	bl	80097ea <mg_str_n>
 8005912:	68f8      	ldr	r0, [r7, #12]
 8005914:	f107 0314 	add.w	r3, r7, #20
 8005918:	e893 0006 	ldmia.w	r3, {r1, r2}
 800591c:	f7ff ff5c 	bl	80057d8 <stripquotes>
 8005920:	e012      	b.n	8005948 <mg_http_get_header_var+0x11e>
  for (i = 0; v.len > 0 && i + v.len + 2 < s.len; i++) {
 8005922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005924:	3301      	adds	r3, #1
 8005926:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005928:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d006      	beq.n	800593c <mg_http_get_header_var+0x112>
 800592e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005930:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005932:	4413      	add	r3, r2
 8005934:	1c9a      	adds	r2, r3, #2
 8005936:	68bb      	ldr	r3, [r7, #8]
 8005938:	429a      	cmp	r2, r3
 800593a:	d382      	bcc.n	8005842 <mg_http_get_header_var+0x18>
    }
  }
  return mg_str_n(NULL, 0);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	2100      	movs	r1, #0
 8005942:	4618      	mov	r0, r3
 8005944:	f003 ff51 	bl	80097ea <mg_str_n>
}
 8005948:	68f8      	ldr	r0, [r7, #12]
 800594a:	3730      	adds	r7, #48	; 0x30
 800594c:	46bd      	mov	sp, r7
 800594e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005952:	b002      	add	sp, #8
 8005954:	4770      	bx	lr

08005956 <mg_http_match_uri>:

bool mg_http_match_uri(const struct mg_http_message *hm, const char *glob) {
 8005956:	b580      	push	{r7, lr}
 8005958:	b086      	sub	sp, #24
 800595a:	af02      	add	r7, sp, #8
 800595c:	6078      	str	r0, [r7, #4]
 800595e:	6039      	str	r1, [r7, #0]
  return mg_match(hm->uri, mg_str(glob), NULL);
 8005960:	f107 0308 	add.w	r3, r7, #8
 8005964:	6839      	ldr	r1, [r7, #0]
 8005966:	4618      	mov	r0, r3
 8005968:	f003 ff22 	bl	80097b0 <mg_str_s>
 800596c:	6879      	ldr	r1, [r7, #4]
 800596e:	2300      	movs	r3, #0
 8005970:	9300      	str	r3, [sp, #0]
 8005972:	f107 0308 	add.w	r3, r7, #8
 8005976:	cb0c      	ldmia	r3, {r2, r3}
 8005978:	3108      	adds	r1, #8
 800597a:	c903      	ldmia	r1, {r0, r1}
 800597c:	f004 f851 	bl	8009a22 <mg_match>
 8005980:	4603      	mov	r3, r0
}
 8005982:	4618      	mov	r0, r3
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}

0800598a <getchunk>:
// MG_EV_HTTP_CHUNK events for every received piece of data, and then we fire
// MG_EV_HTTP_MSG event in the end.
//
// We track total processed length in the c->pfn_data, which is a void *
// pointer: we store a size_t value there.
static bool getchunk(struct mg_str s, size_t *prefixlen, size_t *datalen) {
 800598a:	b590      	push	{r4, r7, lr}
 800598c:	b087      	sub	sp, #28
 800598e:	af00      	add	r7, sp, #0
 8005990:	f107 0408 	add.w	r4, r7, #8
 8005994:	e884 0003 	stmia.w	r4, {r0, r1}
 8005998:	607a      	str	r2, [r7, #4]
 800599a:	603b      	str	r3, [r7, #0]
  size_t i = 0, n;
 800599c:	2300      	movs	r3, #0
 800599e:	617b      	str	r3, [r7, #20]
  while (i < s.len && s.ptr[i] != '\r' && s.ptr[i] != '\n') i++;
 80059a0:	e002      	b.n	80059a8 <getchunk+0x1e>
 80059a2:	697b      	ldr	r3, [r7, #20]
 80059a4:	3301      	adds	r3, #1
 80059a6:	617b      	str	r3, [r7, #20]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	697a      	ldr	r2, [r7, #20]
 80059ac:	429a      	cmp	r2, r3
 80059ae:	d20b      	bcs.n	80059c8 <getchunk+0x3e>
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	4413      	add	r3, r2
 80059b6:	781b      	ldrb	r3, [r3, #0]
 80059b8:	2b0d      	cmp	r3, #13
 80059ba:	d005      	beq.n	80059c8 <getchunk+0x3e>
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	4413      	add	r3, r2
 80059c2:	781b      	ldrb	r3, [r3, #0]
 80059c4:	2b0a      	cmp	r3, #10
 80059c6:	d1ec      	bne.n	80059a2 <getchunk+0x18>
  n = mg_unhexn(s.ptr, i);
 80059c8:	68bb      	ldr	r3, [r7, #8]
 80059ca:	6979      	ldr	r1, [r7, #20]
 80059cc:	4618      	mov	r0, r3
 80059ce:	f004 fa81 	bl	8009ed4 <mg_unhexn>
 80059d2:	6138      	str	r0, [r7, #16]
  // MG_INFO(("%d %d", (int) (i + n + 4), (int) s.len));
  if (s.len < i + n + 4) return false;  // Chunk not yet fully buffered
 80059d4:	68fa      	ldr	r2, [r7, #12]
 80059d6:	6979      	ldr	r1, [r7, #20]
 80059d8:	693b      	ldr	r3, [r7, #16]
 80059da:	440b      	add	r3, r1
 80059dc:	3304      	adds	r3, #4
 80059de:	429a      	cmp	r2, r3
 80059e0:	d201      	bcs.n	80059e6 <getchunk+0x5c>
 80059e2:	2300      	movs	r3, #0
 80059e4:	e02a      	b.n	8005a3c <getchunk+0xb2>
  if (s.ptr[i] != '\r' || s.ptr[i + 1] != '\n') return false;
 80059e6:	68ba      	ldr	r2, [r7, #8]
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	4413      	add	r3, r2
 80059ec:	781b      	ldrb	r3, [r3, #0]
 80059ee:	2b0d      	cmp	r3, #13
 80059f0:	d106      	bne.n	8005a00 <getchunk+0x76>
 80059f2:	68ba      	ldr	r2, [r7, #8]
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	3301      	adds	r3, #1
 80059f8:	4413      	add	r3, r2
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	2b0a      	cmp	r3, #10
 80059fe:	d001      	beq.n	8005a04 <getchunk+0x7a>
 8005a00:	2300      	movs	r3, #0
 8005a02:	e01b      	b.n	8005a3c <getchunk+0xb2>
  if (s.ptr[i + n + 2] != '\r' || s.ptr[i + n + 3] != '\n') return false;
 8005a04:	68ba      	ldr	r2, [r7, #8]
 8005a06:	6979      	ldr	r1, [r7, #20]
 8005a08:	693b      	ldr	r3, [r7, #16]
 8005a0a:	440b      	add	r3, r1
 8005a0c:	3302      	adds	r3, #2
 8005a0e:	4413      	add	r3, r2
 8005a10:	781b      	ldrb	r3, [r3, #0]
 8005a12:	2b0d      	cmp	r3, #13
 8005a14:	d108      	bne.n	8005a28 <getchunk+0x9e>
 8005a16:	68ba      	ldr	r2, [r7, #8]
 8005a18:	6979      	ldr	r1, [r7, #20]
 8005a1a:	693b      	ldr	r3, [r7, #16]
 8005a1c:	440b      	add	r3, r1
 8005a1e:	3303      	adds	r3, #3
 8005a20:	4413      	add	r3, r2
 8005a22:	781b      	ldrb	r3, [r3, #0]
 8005a24:	2b0a      	cmp	r3, #10
 8005a26:	d001      	beq.n	8005a2c <getchunk+0xa2>
 8005a28:	2300      	movs	r3, #0
 8005a2a:	e007      	b.n	8005a3c <getchunk+0xb2>
  *prefixlen = i + 2;
 8005a2c:	697b      	ldr	r3, [r7, #20]
 8005a2e:	1c9a      	adds	r2, r3, #2
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	601a      	str	r2, [r3, #0]
  *datalen = n;
 8005a34:	683b      	ldr	r3, [r7, #0]
 8005a36:	693a      	ldr	r2, [r7, #16]
 8005a38:	601a      	str	r2, [r3, #0]
  return true;
 8005a3a:	2301      	movs	r3, #1
}
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	371c      	adds	r7, #28
 8005a40:	46bd      	mov	sp, r7
 8005a42:	bd90      	pop	{r4, r7, pc}

08005a44 <mg_is_chunked>:

static bool mg_is_chunked(struct mg_http_message *hm) {
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
  const char *needle = "chunked";
 8005a4c:	4b0d      	ldr	r3, [pc, #52]	; (8005a84 <mg_is_chunked+0x40>)
 8005a4e:	60fb      	str	r3, [r7, #12]
  struct mg_str *te = mg_http_get_header(hm, "Transfer-Encoding");
 8005a50:	490d      	ldr	r1, [pc, #52]	; (8005a88 <mg_is_chunked+0x44>)
 8005a52:	6878      	ldr	r0, [r7, #4]
 8005a54:	f7fe f81e 	bl	8003a94 <mg_http_get_header>
 8005a58:	60b8      	str	r0, [r7, #8]
  return te != NULL && mg_vcasecmp(te, needle) == 0;
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d008      	beq.n	8005a72 <mg_is_chunked+0x2e>
 8005a60:	68f9      	ldr	r1, [r7, #12]
 8005a62:	68b8      	ldr	r0, [r7, #8]
 8005a64:	f003 ff42 	bl	80098ec <mg_vcasecmp>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d101      	bne.n	8005a72 <mg_is_chunked+0x2e>
 8005a6e:	2301      	movs	r3, #1
 8005a70:	e000      	b.n	8005a74 <mg_is_chunked+0x30>
 8005a72:	2300      	movs	r3, #0
 8005a74:	f003 0301 	and.w	r3, r3, #1
 8005a78:	b2db      	uxtb	r3, r3
}
 8005a7a:	4618      	mov	r0, r3
 8005a7c:	3710      	adds	r7, #16
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	08015ff8 	.word	0x08015ff8
 8005a88:	08016000 	.word	0x08016000

08005a8c <deliver_chunked_chunks>:
  mg_iobuf_del(&c->recv, ofs, hm->chunk.len);
  c->pfn_data = (void *) ((size_t) c->pfn_data | MG_DMARK);
}

static void deliver_chunked_chunks(struct mg_connection *c, size_t hlen,
                                   struct mg_http_message *hm, bool *next) {
 8005a8c:	b590      	push	{r4, r7, lr}
 8005a8e:	b095      	sub	sp, #84	; 0x54
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6178      	str	r0, [r7, #20]
 8005a94:	6139      	str	r1, [r7, #16]
 8005a96:	60fa      	str	r2, [r7, #12]
 8005a98:	60bb      	str	r3, [r7, #8]
  //  |  ... headers ... | HEXNUM\r\n ..data.. \r\n | ......
  //  +------------------+--------------------------+----
  //  |      hlen        |           chunk1         | ......
  char *buf = (char *) &c->recv.buf[hlen], *p = buf;
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a9e:	693b      	ldr	r3, [r7, #16]
 8005aa0:	4413      	add	r3, r2
 8005aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005aa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aa6:	637b      	str	r3, [r7, #52]	; 0x34
  size_t len = c->recv.len - hlen;
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	1ad3      	subs	r3, r2, r3
 8005ab0:	64bb      	str	r3, [r7, #72]	; 0x48
  size_t processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005ab2:	697b      	ldr	r3, [r7, #20]
 8005ab4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005ab6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005aba:	647b      	str	r3, [r7, #68]	; 0x44
  size_t mark, pl, dl, del = 0, ofs = 0;
 8005abc:	2300      	movs	r3, #0
 8005abe:	643b      	str	r3, [r7, #64]	; 0x40
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	63fb      	str	r3, [r7, #60]	; 0x3c
  bool last = false;
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  if (processed <= len) len -= processed, buf += processed;
 8005aca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005acc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	d851      	bhi.n	8005b76 <deliver_chunked_chunks+0xea>
 8005ad2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005ad4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ad6:	1ad3      	subs	r3, r2, r3
 8005ad8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005ada:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005adc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005ade:	4413      	add	r3, r2
 8005ae0:	64fb      	str	r3, [r7, #76]	; 0x4c
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005ae2:	e048      	b.n	8005b76 <deliver_chunked_chunks+0xea>
    size_t saved = c->recv.len;
 8005ae4:	697b      	ldr	r3, [r7, #20]
 8005ae6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ae8:	633b      	str	r3, [r7, #48]	; 0x30
    memmove(p + processed, buf + ofs + pl, dl);
 8005aea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005aec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005aee:	18d0      	adds	r0, r2, r3
 8005af0:	6a3a      	ldr	r2, [r7, #32]
 8005af2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005af4:	4413      	add	r3, r2
 8005af6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005af8:	4413      	add	r3, r2
 8005afa:	69fa      	ldr	r2, [r7, #28]
 8005afc:	4619      	mov	r1, r3
 8005afe:	f00e fdff 	bl	8014700 <memmove>
    // MG_INFO(("P2 [%.*s]", (int) (processed + dl), p));
    hm->chunk = mg_str_n(p + processed, dl);
 8005b02:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b06:	18d1      	adds	r1, r2, r3
 8005b08:	69fa      	ldr	r2, [r7, #28]
 8005b0a:	68fc      	ldr	r4, [r7, #12]
 8005b0c:	463b      	mov	r3, r7
 8005b0e:	4618      	mov	r0, r3
 8005b10:	f003 fe6b 	bl	80097ea <mg_str_n>
 8005b14:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005b18:	463a      	mov	r2, r7
 8005b1a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b1e:	e883 0003 	stmia.w	r3, {r0, r1}
    mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005b22:	68fa      	ldr	r2, [r7, #12]
 8005b24:	210b      	movs	r1, #11
 8005b26:	6978      	ldr	r0, [r7, #20]
 8005b28:	f7fc fa94 	bl	8002054 <mg_call>
    ofs += pl + dl + 2, del += pl + 2;  // 2 is for \r\n suffix
 8005b2c:	6a3a      	ldr	r2, [r7, #32]
 8005b2e:	69fb      	ldr	r3, [r7, #28]
 8005b30:	441a      	add	r2, r3
 8005b32:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b34:	4413      	add	r3, r2
 8005b36:	3302      	adds	r3, #2
 8005b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b3a:	6a3a      	ldr	r2, [r7, #32]
 8005b3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b3e:	4413      	add	r3, r2
 8005b40:	3302      	adds	r3, #2
 8005b42:	643b      	str	r3, [r7, #64]	; 0x40
    processed += dl;
 8005b44:	69fb      	ldr	r3, [r7, #28]
 8005b46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b48:	4413      	add	r3, r2
 8005b4a:	647b      	str	r3, [r7, #68]	; 0x44
    if (c->recv.len != saved) processed -= dl, buf -= dl;
 8005b4c:	697b      	ldr	r3, [r7, #20]
 8005b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d008      	beq.n	8005b68 <deliver_chunked_chunks+0xdc>
 8005b56:	69fb      	ldr	r3, [r7, #28]
 8005b58:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b5a:	1ad3      	subs	r3, r2, r3
 8005b5c:	647b      	str	r3, [r7, #68]	; 0x44
 8005b5e:	69fb      	ldr	r3, [r7, #28]
 8005b60:	425b      	negs	r3, r3
 8005b62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b64:	4413      	add	r3, r2
 8005b66:	64fb      	str	r3, [r7, #76]	; 0x4c
    // mg_hexdump(c->recv.buf, hlen + processed);
    last = (dl == 0);
 8005b68:	69fb      	ldr	r3, [r7, #28]
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	bf0c      	ite	eq
 8005b6e:	2301      	moveq	r3, #1
 8005b70:	2300      	movne	r3, #0
 8005b72:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  while (!last && getchunk(mg_str_n(buf + ofs, len - ofs), &pl, &dl)) {
 8005b76:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005b7a:	f083 0301 	eor.w	r3, r3, #1
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d016      	beq.n	8005bb2 <deliver_chunked_chunks+0x126>
 8005b84:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005b86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b88:	18d1      	adds	r1, r2, r3
 8005b8a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b8e:	1ad2      	subs	r2, r2, r3
 8005b90:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005b94:	4618      	mov	r0, r3
 8005b96:	f003 fe28 	bl	80097ea <mg_str_n>
 8005b9a:	f107 031c 	add.w	r3, r7, #28
 8005b9e:	f107 0220 	add.w	r2, r7, #32
 8005ba2:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8005ba6:	c903      	ldmia	r1, {r0, r1}
 8005ba8:	f7ff feef 	bl	800598a <getchunk>
 8005bac:	4603      	mov	r3, r0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d198      	bne.n	8005ae4 <deliver_chunked_chunks+0x58>
  }
  mg_iobuf_del(&c->recv, hlen + processed, del);
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bbc:	4413      	add	r3, r2
 8005bbe:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005bc0:	4619      	mov	r1, r3
 8005bc2:	f000 fb13 	bl	80061ec <mg_iobuf_del>
  mark = ((size_t) c->pfn_data) & MG_DMARK;
 8005bc6:	697b      	ldr	r3, [r7, #20]
 8005bc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005bca:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  c->pfn_data = (void *) (processed | mark);
 8005bd0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005bd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bd4:	4313      	orrs	r3, r2
 8005bd6:	461a      	mov	r2, r3
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	665a      	str	r2, [r3, #100]	; 0x64
  if (last) {
 8005bdc:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d019      	beq.n	8005c18 <deliver_chunked_chunks+0x18c>
    hm->body.len = processed;
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005be8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    hm->message.len = hlen + processed;
 8005bec:	693a      	ldr	r2, [r7, #16]
 8005bee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf0:	441a      	add	r2, r3
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    c->pfn_data = NULL;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	665a      	str	r2, [r3, #100]	; 0x64
    if (mark) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005bfe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d009      	beq.n	8005c18 <deliver_chunked_chunks+0x18c>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	3338      	adds	r3, #56	; 0x38
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	2100      	movs	r1, #0
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f000 faed 	bl	80061ec <mg_iobuf_del>
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	2201      	movs	r2, #1
 8005c16:	701a      	strb	r2, [r3, #0]
    // MG_INFO(("LAST, mark: %lx", mark));
    // mg_hexdump(c->recv.buf, c->recv.len);
  }
}
 8005c18:	bf00      	nop
 8005c1a:	3754      	adds	r7, #84	; 0x54
 8005c1c:	46bd      	mov	sp, r7
 8005c1e:	bd90      	pop	{r4, r7, pc}

08005c20 <deliver_normal_chunks>:

static void deliver_normal_chunks(struct mg_connection *c, size_t hlen,
                                  struct mg_http_message *hm, bool *next) {
 8005c20:	b590      	push	{r4, r7, lr}
 8005c22:	b08b      	sub	sp, #44	; 0x2c
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6178      	str	r0, [r7, #20]
 8005c28:	6139      	str	r1, [r7, #16]
 8005c2a:	60fa      	str	r2, [r7, #12]
 8005c2c:	60bb      	str	r3, [r7, #8]
  size_t left, processed = ((size_t) c->pfn_data) & ~MG_DMARK;
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c32:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c36:	627b      	str	r3, [r7, #36]	; 0x24
  size_t deleted = ((size_t) c->pfn_data) & MG_DMARK;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005c3c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005c40:	623b      	str	r3, [r7, #32]
  hm->chunk = mg_str_n((char *) &c->recv.buf[hlen], c->recv.len - hlen);
 8005c42:	697b      	ldr	r3, [r7, #20]
 8005c44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005c46:	693b      	ldr	r3, [r7, #16]
 8005c48:	18d1      	adds	r1, r2, r3
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c4e:	693b      	ldr	r3, [r7, #16]
 8005c50:	1ad2      	subs	r2, r2, r3
 8005c52:	68fc      	ldr	r4, [r7, #12]
 8005c54:	463b      	mov	r3, r7
 8005c56:	4618      	mov	r0, r3
 8005c58:	f003 fdc7 	bl	80097ea <mg_str_n>
 8005c5c:	f504 7304 	add.w	r3, r4, #528	; 0x210
 8005c60:	463a      	mov	r2, r7
 8005c62:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005c66:	e883 0003 	stmia.w	r3, {r0, r1}
  if (processed <= hm->chunk.len && !deleted) {
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005c72:	429a      	cmp	r2, r3
 8005c74:	d812      	bhi.n	8005c9c <deliver_normal_chunks+0x7c>
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d10f      	bne.n	8005c9c <deliver_normal_chunks+0x7c>
    hm->chunk.len -= processed;
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c84:	1ad2      	subs	r2, r2, r3
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    hm->chunk.ptr += processed;
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	f8d3 2210 	ldr.w	r2, [r3, #528]	; 0x210
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	441a      	add	r2, r3
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
  }
  left = hm->body.len < processed ? 0 : hm->body.len - processed;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d805      	bhi.n	8005cb4 <deliver_normal_chunks+0x94>
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8005cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cb0:	1ad3      	subs	r3, r2, r3
 8005cb2:	e000      	b.n	8005cb6 <deliver_normal_chunks+0x96>
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	61fb      	str	r3, [r7, #28]
  if (hm->chunk.len > left) hm->chunk.len = left;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cbe:	69fa      	ldr	r2, [r7, #28]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d203      	bcs.n	8005ccc <deliver_normal_chunks+0xac>
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	69fa      	ldr	r2, [r7, #28]
 8005cc8:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  if (hm->chunk.len > 0) mg_call(c, MG_EV_HTTP_CHUNK, hm);
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	d004      	beq.n	8005ce0 <deliver_normal_chunks+0xc0>
 8005cd6:	68fa      	ldr	r2, [r7, #12]
 8005cd8:	210b      	movs	r1, #11
 8005cda:	6978      	ldr	r0, [r7, #20]
 8005cdc:	f7fc f9ba 	bl	8002054 <mg_call>
  processed += hm->chunk.len;
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
 8005ce6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ce8:	4413      	add	r3, r2
 8005cea:	627b      	str	r3, [r7, #36]	; 0x24
  deleted = ((size_t) c->pfn_data) & MG_DMARK;  // Re-evaluate after user call
 8005cec:	697b      	ldr	r3, [r7, #20]
 8005cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005cf0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005cf4:	623b      	str	r3, [r7, #32]
  if (processed >= hm->body.len) {              // Last, 0-len chunk
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8005cfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005cfe:	429a      	cmp	r2, r3
 8005d00:	d31c      	bcc.n	8005d3c <deliver_normal_chunks+0x11c>
    hm->chunk.len = 0;                          // Reset length
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2200      	movs	r2, #0
 8005d06:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    mg_call(c, MG_EV_HTTP_CHUNK, hm);           // Call user handler
 8005d0a:	68fa      	ldr	r2, [r7, #12]
 8005d0c:	210b      	movs	r1, #11
 8005d0e:	6978      	ldr	r0, [r7, #20]
 8005d10:	f7fc f9a0 	bl	8002054 <mg_call>
    c->pfn_data = NULL;                         // Reset processed counter
 8005d14:	697b      	ldr	r3, [r7, #20]
 8005d16:	2200      	movs	r2, #0
 8005d18:	665a      	str	r2, [r3, #100]	; 0x64
    if (processed && deleted) mg_iobuf_del(&c->recv, 0, hlen), *next = true;
 8005d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d013      	beq.n	8005d48 <deliver_normal_chunks+0x128>
 8005d20:	6a3b      	ldr	r3, [r7, #32]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d010      	beq.n	8005d48 <deliver_normal_chunks+0x128>
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	3338      	adds	r3, #56	; 0x38
 8005d2a:	693a      	ldr	r2, [r7, #16]
 8005d2c:	2100      	movs	r1, #0
 8005d2e:	4618      	mov	r0, r3
 8005d30:	f000 fa5c 	bl	80061ec <mg_iobuf_del>
 8005d34:	68bb      	ldr	r3, [r7, #8]
 8005d36:	2201      	movs	r2, #1
 8005d38:	701a      	strb	r2, [r3, #0]
  } else {
    c->pfn_data = (void *) (processed | deleted);  // if it is set
  }
}
 8005d3a:	e005      	b.n	8005d48 <deliver_normal_chunks+0x128>
    c->pfn_data = (void *) (processed | deleted);  // if it is set
 8005d3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d3e:	6a3b      	ldr	r3, [r7, #32]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	461a      	mov	r2, r3
 8005d44:	697b      	ldr	r3, [r7, #20]
 8005d46:	665a      	str	r2, [r3, #100]	; 0x64
}
 8005d48:	bf00      	nop
 8005d4a:	372c      	adds	r7, #44	; 0x2c
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd90      	pop	{r4, r7, pc}

08005d50 <http_cb>:

static void http_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 8005d50:	b590      	push	{r4, r7, lr}
 8005d52:	f5ad 7d0f 	sub.w	sp, sp, #572	; 0x23c
 8005d56:	af00      	add	r7, sp, #0
 8005d58:	f507 740e 	add.w	r4, r7, #568	; 0x238
 8005d5c:	f5a4 740b 	sub.w	r4, r4, #556	; 0x22c
 8005d60:	6020      	str	r0, [r4, #0]
 8005d62:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005d66:	f5a0 700c 	sub.w	r0, r0, #560	; 0x230
 8005d6a:	6001      	str	r1, [r0, #0]
 8005d6c:	f507 710e 	add.w	r1, r7, #568	; 0x238
 8005d70:	f5a1 710d 	sub.w	r1, r1, #564	; 0x234
 8005d74:	600a      	str	r2, [r1, #0]
 8005d76:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005d7a:	f5a2 720e 	sub.w	r2, r2, #568	; 0x238
 8005d7e:	6013      	str	r3, [r2, #0]
  if (ev == MG_EV_READ || ev == MG_EV_CLOSE) {
 8005d80:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d84:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2b07      	cmp	r3, #7
 8005d8c:	f000 80e9 	beq.w	8005f62 <http_cb+0x212>
 8005d90:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005d94:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2b09      	cmp	r3, #9
 8005d9c:	f040 80f2 	bne.w	8005f84 <http_cb+0x234>
    struct mg_http_message hm;
    // mg_hexdump(c->recv.buf, c->recv.len);
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005da0:	e0df      	b.n	8005f62 <http_cb+0x212>
      bool next = false;
 8005da2:	2300      	movs	r3, #0
 8005da4:	f887 3233 	strb.w	r3, [r7, #563]	; 0x233
      int hlen = mg_http_parse((char *) c->recv.buf, c->recv.len, &hm);
 8005da8:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005dac:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8005db4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005db8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc0:	f107 0210 	add.w	r2, r7, #16
 8005dc4:	4619      	mov	r1, r3
 8005dc6:	f7fd ff0b 	bl	8003be0 <mg_http_parse>
 8005dca:	f8c7 0234 	str.w	r0, [r7, #564]	; 0x234
      if (hlen < 0) {
 8005dce:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	da17      	bge.n	8005e06 <http_cb+0xb6>
        mg_error(c, "HTTP parse:\n%.*s", (int) c->recv.len, c->recv.buf);
 8005dd6:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005dda:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005de2:	4619      	mov	r1, r3
 8005de4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005de8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005df0:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005df4:	f5a2 700b 	sub.w	r0, r2, #556	; 0x22c
 8005df8:	460a      	mov	r2, r1
 8005dfa:	4965      	ldr	r1, [pc, #404]	; (8005f90 <http_cb+0x240>)
 8005dfc:	6800      	ldr	r0, [r0, #0]
 8005dfe:	f7fc f94b 	bl	8002098 <mg_error>
        break;
 8005e02:	bf00      	nop
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
      mg_iobuf_del(&c->recv, 0, hm.message.len);
    }
  }
  (void) evd, (void) fnd;
}
 8005e04:	e0be      	b.n	8005f84 <http_cb+0x234>
      if (c->is_resp) break;           // Response is still generated
 8005e06:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e0a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8005e14:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005e18:	b2db      	uxtb	r3, r3
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	f040 809b 	bne.w	8005f56 <http_cb+0x206>
      if (hlen == 0) break;            // Request is not buffered yet
 8005e20:	f8d7 3234 	ldr.w	r3, [r7, #564]	; 0x234
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8098 	beq.w	8005f5a <http_cb+0x20a>
      if (ev == MG_EV_CLOSE) {         // If client did not set Content-Length
 8005e2a:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e2e:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2b09      	cmp	r3, #9
 8005e36:	d125      	bne.n	8005e84 <http_cb+0x134>
        hm.message.len = c->recv.len;  // and closes now, deliver a MSG
 8005e38:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e3c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005e44:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e48:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005e4c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
        hm.body.len = hm.message.len - (size_t) (hm.body.ptr - hm.message.ptr);
 8005e50:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e54:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005e58:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005e5c:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005e60:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8005e64:	f8d2 1200 	ldr.w	r1, [r2, #512]	; 0x200
 8005e68:	f507 720e 	add.w	r2, r7, #568	; 0x238
 8005e6c:	f5a2 720a 	sub.w	r2, r2, #552	; 0x228
 8005e70:	f8d2 2218 	ldr.w	r2, [r2, #536]	; 0x218
 8005e74:	1a8a      	subs	r2, r1, r2
 8005e76:	1a9a      	subs	r2, r3, r2
 8005e78:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005e7c:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005e80:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      if (mg_is_chunked(&hm)) {
 8005e84:	f107 0310 	add.w	r3, r7, #16
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f7ff fddb 	bl	8005a44 <mg_is_chunked>
 8005e8e:	4603      	mov	r3, r0
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d00d      	beq.n	8005eb0 <http_cb+0x160>
        deliver_chunked_chunks(c, (size_t) hlen, &hm, &next);
 8005e94:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8005e98:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005e9c:	f107 0210 	add.w	r2, r7, #16
 8005ea0:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005ea4:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8005ea8:	6800      	ldr	r0, [r0, #0]
 8005eaa:	f7ff fdef 	bl	8005a8c <deliver_chunked_chunks>
 8005eae:	e00c      	b.n	8005eca <http_cb+0x17a>
        deliver_normal_chunks(c, (size_t) hlen, &hm, &next);
 8005eb0:	f8d7 1234 	ldr.w	r1, [r7, #564]	; 0x234
 8005eb4:	f207 2333 	addw	r3, r7, #563	; 0x233
 8005eb8:	f107 0210 	add.w	r2, r7, #16
 8005ebc:	f507 700e 	add.w	r0, r7, #568	; 0x238
 8005ec0:	f5a0 700b 	sub.w	r0, r0, #556	; 0x22c
 8005ec4:	6800      	ldr	r0, [r0, #0]
 8005ec6:	f7ff feab 	bl	8005c20 <deliver_normal_chunks>
      if (next) continue;  // Chunks & request were deleted
 8005eca:	f897 3233 	ldrb.w	r3, [r7, #563]	; 0x233
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d000      	beq.n	8005ed4 <http_cb+0x184>
 8005ed2:	e046      	b.n	8005f62 <http_cb+0x212>
      if (c->recv.len < hm.message.len) break;
 8005ed4:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ed8:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005ee0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ee4:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005ee8:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005eec:	429a      	cmp	r2, r3
 8005eee:	d336      	bcc.n	8005f5e <http_cb+0x20e>
      if (c->is_accepted) c->is_resp = 1;  // Start generating response
 8005ef0:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005ef4:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8005efe:	f003 0304 	and.w	r3, r3, #4
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d00a      	beq.n	8005f1e <http_cb+0x1ce>
 8005f08:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f0c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8005f16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f1a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      mg_call(c, MG_EV_HTTP_MSG, &hm);     // User handler can clear is_resp
 8005f1e:	f107 0210 	add.w	r2, r7, #16
 8005f22:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f26:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005f2a:	210a      	movs	r1, #10
 8005f2c:	6818      	ldr	r0, [r3, #0]
 8005f2e:	f7fc f891 	bl	8002054 <mg_call>
      mg_iobuf_del(&c->recv, 0, hm.message.len);
 8005f32:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f36:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8005f40:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f44:	f5a3 730a 	sub.w	r3, r3, #552	; 0x228
 8005f48:	f8d3 321c 	ldr.w	r3, [r3, #540]	; 0x21c
 8005f4c:	461a      	mov	r2, r3
 8005f4e:	2100      	movs	r1, #0
 8005f50:	f000 f94c 	bl	80061ec <mg_iobuf_del>
 8005f54:	e005      	b.n	8005f62 <http_cb+0x212>
      if (c->is_resp) break;           // Response is still generated
 8005f56:	bf00      	nop
 8005f58:	e014      	b.n	8005f84 <http_cb+0x234>
      if (hlen == 0) break;            // Request is not buffered yet
 8005f5a:	bf00      	nop
 8005f5c:	e012      	b.n	8005f84 <http_cb+0x234>
      if (c->recv.len < hm.message.len) break;
 8005f5e:	bf00      	nop
}
 8005f60:	e010      	b.n	8005f84 <http_cb+0x234>
    while (c->recv.buf != NULL && c->recv.len > 0) {
 8005f62:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f66:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d008      	beq.n	8005f84 <http_cb+0x234>
 8005f72:	f507 730e 	add.w	r3, r7, #568	; 0x238
 8005f76:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	f47f af0f 	bne.w	8005da2 <http_cb+0x52>
}
 8005f84:	bf00      	nop
 8005f86:	f507 770f 	add.w	r7, r7, #572	; 0x23c
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd90      	pop	{r4, r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	08016014 	.word	0x08016014

08005f94 <mg_http_listen>:
  if (c != NULL) c->pfn = http_cb;
  return c;
}

struct mg_connection *mg_http_listen(struct mg_mgr *mgr, const char *url,
                                     mg_event_handler_t fn, void *fn_data) {
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
 8005fa0:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_listen(mgr, url, fn, fn_data);
 8005fa2:	683b      	ldr	r3, [r7, #0]
 8005fa4:	687a      	ldr	r2, [r7, #4]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	68f8      	ldr	r0, [r7, #12]
 8005faa:	f002 fcbd 	bl	8008928 <mg_listen>
 8005fae:	6178      	str	r0, [r7, #20]
  if (c != NULL) c->pfn = http_cb;
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d002      	beq.n	8005fbc <mg_http_listen+0x28>
 8005fb6:	697b      	ldr	r3, [r7, #20]
 8005fb8:	4a03      	ldr	r2, [pc, #12]	; (8005fc8 <mg_http_listen+0x34>)
 8005fba:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 8005fbc:	697b      	ldr	r3, [r7, #20]
}
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	3718      	adds	r7, #24
 8005fc2:	46bd      	mov	sp, r7
 8005fc4:	bd80      	pop	{r7, pc}
 8005fc6:	bf00      	nop
 8005fc8:	08005d51 	.word	0x08005d51

08005fcc <zeromem>:



// Not using memset for zeroing memory, cause it can be dropped by compiler
// See https://github.com/cesanta/mongoose/pull/1265
static void zeromem(volatile unsigned char *buf, size_t len) {
 8005fcc:	b480      	push	{r7}
 8005fce:	b083      	sub	sp, #12
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
 8005fd4:	6039      	str	r1, [r7, #0]
  if (buf != NULL) {
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d00a      	beq.n	8005ff2 <zeromem+0x26>
    while (len--) *buf++ = 0;
 8005fdc:	e004      	b.n	8005fe8 <zeromem+0x1c>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	1c5a      	adds	r2, r3, #1
 8005fe2:	607a      	str	r2, [r7, #4]
 8005fe4:	2200      	movs	r2, #0
 8005fe6:	701a      	strb	r2, [r3, #0]
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	1e5a      	subs	r2, r3, #1
 8005fec:	603a      	str	r2, [r7, #0]
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d1f5      	bne.n	8005fde <zeromem+0x12>
  }
}
 8005ff2:	bf00      	nop
 8005ff4:	370c      	adds	r7, #12
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr

08005ffe <roundup>:

static size_t roundup(size_t size, size_t align) {
 8005ffe:	b480      	push	{r7}
 8006000:	b083      	sub	sp, #12
 8006002:	af00      	add	r7, sp, #0
 8006004:	6078      	str	r0, [r7, #4]
 8006006:	6039      	str	r1, [r7, #0]
  return align == 0 ? size : (size + align - 1) / align * align;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d00a      	beq.n	8006024 <roundup+0x26>
 800600e:	687a      	ldr	r2, [r7, #4]
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	4413      	add	r3, r2
 8006014:	1e5a      	subs	r2, r3, #1
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	fbb2 f3f3 	udiv	r3, r2, r3
 800601c:	683a      	ldr	r2, [r7, #0]
 800601e:	fb02 f303 	mul.w	r3, r2, r3
 8006022:	e000      	b.n	8006026 <roundup+0x28>
 8006024:	687b      	ldr	r3, [r7, #4]
}
 8006026:	4618      	mov	r0, r3
 8006028:	370c      	adds	r7, #12
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
	...

08006034 <mg_iobuf_resize>:

int mg_iobuf_resize(struct mg_iobuf *io, size_t new_size) {
 8006034:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006038:	b088      	sub	sp, #32
 800603a:	af02      	add	r7, sp, #8
 800603c:	6078      	str	r0, [r7, #4]
 800603e:	6039      	str	r1, [r7, #0]
  int ok = 1;
 8006040:	2301      	movs	r3, #1
 8006042:	617b      	str	r3, [r7, #20]
  new_size = roundup(new_size, io->align);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	4619      	mov	r1, r3
 800604a:	6838      	ldr	r0, [r7, #0]
 800604c:	f7ff ffd7 	bl	8005ffe <roundup>
 8006050:	6038      	str	r0, [r7, #0]
  if (new_size == 0) {
 8006052:	683b      	ldr	r3, [r7, #0]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d117      	bne.n	8006088 <mg_iobuf_resize+0x54>
    zeromem(io->buf, io->size);
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	685b      	ldr	r3, [r3, #4]
 8006060:	4619      	mov	r1, r3
 8006062:	4610      	mov	r0, r2
 8006064:	f7ff ffb2 	bl	8005fcc <zeromem>
    free(io->buf);
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	4618      	mov	r0, r3
 800606e:	f00d ff8d 	bl	8013f8c <free>
    io->buf = NULL;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	2200      	movs	r2, #0
 8006076:	601a      	str	r2, [r3, #0]
    io->len = io->size = 0;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2200      	movs	r2, #0
 800607c:	605a      	str	r2, [r3, #4]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	685a      	ldr	r2, [r3, #4]
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	609a      	str	r2, [r3, #8]
 8006086:	e052      	b.n	800612e <mg_iobuf_resize+0xfa>
  } else if (new_size != io->size) {
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	683a      	ldr	r2, [r7, #0]
 800608e:	429a      	cmp	r2, r3
 8006090:	d04d      	beq.n	800612e <mg_iobuf_resize+0xfa>
    // NOTE(lsm): do not use realloc here. Use calloc/free only, to ease the
    // porting to some obscure platforms like FreeRTOS
    void *p = calloc(1, new_size);
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	2001      	movs	r0, #1
 8006096:	f00d ff53 	bl	8013f40 <calloc>
 800609a:	4603      	mov	r3, r0
 800609c:	613b      	str	r3, [r7, #16]
    if (p != NULL) {
 800609e:	693b      	ldr	r3, [r7, #16]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d028      	beq.n	80060f6 <mg_iobuf_resize+0xc2>
      size_t len = new_size < io->len ? new_size : io->len;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	689b      	ldr	r3, [r3, #8]
 80060a8:	683a      	ldr	r2, [r7, #0]
 80060aa:	4293      	cmp	r3, r2
 80060ac:	bf28      	it	cs
 80060ae:	4613      	movcs	r3, r2
 80060b0:	60fb      	str	r3, [r7, #12]
      if (len > 0 && io->buf != NULL) memmove(p, io->buf, len);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00a      	beq.n	80060ce <mg_iobuf_resize+0x9a>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d006      	beq.n	80060ce <mg_iobuf_resize+0x9a>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	68fa      	ldr	r2, [r7, #12]
 80060c6:	4619      	mov	r1, r3
 80060c8:	6938      	ldr	r0, [r7, #16]
 80060ca:	f00e fb19 	bl	8014700 <memmove>
      zeromem(io->buf, io->size);
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	685b      	ldr	r3, [r3, #4]
 80060d6:	4619      	mov	r1, r3
 80060d8:	4610      	mov	r0, r2
 80060da:	f7ff ff77 	bl	8005fcc <zeromem>
      free(io->buf);
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	4618      	mov	r0, r3
 80060e4:	f00d ff52 	bl	8013f8c <free>
      io->buf = (unsigned char *) p;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	693a      	ldr	r2, [r7, #16]
 80060ec:	601a      	str	r2, [r3, #0]
      io->size = new_size;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	605a      	str	r2, [r3, #4]
 80060f4:	e01b      	b.n	800612e <mg_iobuf_resize+0xfa>
    } else {
      ok = 0;
 80060f6:	2300      	movs	r3, #0
 80060f8:	617b      	str	r3, [r7, #20]
      MG_ERROR(("%lld->%lld", (uint64_t) io->size, (uint64_t) new_size));
 80060fa:	4b10      	ldr	r3, [pc, #64]	; (800613c <mg_iobuf_resize+0x108>)
 80060fc:	f640 1246 	movw	r2, #2374	; 0x946
 8006100:	490f      	ldr	r1, [pc, #60]	; (8006140 <mg_iobuf_resize+0x10c>)
 8006102:	2001      	movs	r0, #1
 8006104:	f000 ff86 	bl	8007014 <mg_log_prefix>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00f      	beq.n	800612e <mg_iobuf_resize+0xfa>
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	685b      	ldr	r3, [r3, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	4698      	mov	r8, r3
 8006116:	4691      	mov	r9, r2
 8006118:	683b      	ldr	r3, [r7, #0]
 800611a:	2200      	movs	r2, #0
 800611c:	461c      	mov	r4, r3
 800611e:	4615      	mov	r5, r2
 8006120:	e9cd 4500 	strd	r4, r5, [sp]
 8006124:	4642      	mov	r2, r8
 8006126:	464b      	mov	r3, r9
 8006128:	4806      	ldr	r0, [pc, #24]	; (8006144 <mg_iobuf_resize+0x110>)
 800612a:	f000 ffcd 	bl	80070c8 <mg_log>
    }
  }
  return ok;
 800612e:	697b      	ldr	r3, [r7, #20]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800613a:	bf00      	nop
 800613c:	080173f4 	.word	0x080173f4
 8006140:	0801544c 	.word	0x0801544c
 8006144:	08016060 	.word	0x08016060

08006148 <mg_iobuf_add>:
  io->size = io->len = 0;
  return mg_iobuf_resize(io, size);
}

size_t mg_iobuf_add(struct mg_iobuf *io, size_t ofs, const void *buf,
                    size_t len) {
 8006148:	b580      	push	{r7, lr}
 800614a:	b086      	sub	sp, #24
 800614c:	af00      	add	r7, sp, #0
 800614e:	60f8      	str	r0, [r7, #12]
 8006150:	60b9      	str	r1, [r7, #8]
 8006152:	607a      	str	r2, [r7, #4]
 8006154:	603b      	str	r3, [r7, #0]
  size_t new_size = roundup(io->len + len, io->align);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	689a      	ldr	r2, [r3, #8]
 800615a:	683b      	ldr	r3, [r7, #0]
 800615c:	441a      	add	r2, r3
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	68db      	ldr	r3, [r3, #12]
 8006162:	4619      	mov	r1, r3
 8006164:	4610      	mov	r0, r2
 8006166:	f7ff ff4a 	bl	8005ffe <roundup>
 800616a:	6178      	str	r0, [r7, #20]
  mg_iobuf_resize(io, new_size);      // Attempt to resize
 800616c:	6979      	ldr	r1, [r7, #20]
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f7ff ff60 	bl	8006034 <mg_iobuf_resize>
  if (new_size != io->size) len = 0;  // Resize failure, append nothing
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	697a      	ldr	r2, [r7, #20]
 800617a:	429a      	cmp	r2, r3
 800617c:	d001      	beq.n	8006182 <mg_iobuf_add+0x3a>
 800617e:	2300      	movs	r3, #0
 8006180:	603b      	str	r3, [r7, #0]
  if (ofs < io->len) memmove(io->buf + ofs + len, io->buf + ofs, io->len - ofs);
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	689b      	ldr	r3, [r3, #8]
 8006186:	68ba      	ldr	r2, [r7, #8]
 8006188:	429a      	cmp	r2, r3
 800618a:	d210      	bcs.n	80061ae <mg_iobuf_add+0x66>
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	681a      	ldr	r2, [r3, #0]
 8006190:	68b9      	ldr	r1, [r7, #8]
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	440b      	add	r3, r1
 8006196:	18d0      	adds	r0, r2, r3
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	18d1      	adds	r1, r2, r3
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	689a      	ldr	r2, [r3, #8]
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	1ad3      	subs	r3, r2, r3
 80061a8:	461a      	mov	r2, r3
 80061aa:	f00e faa9 	bl	8014700 <memmove>
  if (buf != NULL) memmove(io->buf + ofs, buf, len);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d008      	beq.n	80061c6 <mg_iobuf_add+0x7e>
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681a      	ldr	r2, [r3, #0]
 80061b8:	68bb      	ldr	r3, [r7, #8]
 80061ba:	4413      	add	r3, r2
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	6879      	ldr	r1, [r7, #4]
 80061c0:	4618      	mov	r0, r3
 80061c2:	f00e fa9d 	bl	8014700 <memmove>
  if (ofs > io->len) io->len += ofs - io->len;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	689b      	ldr	r3, [r3, #8]
 80061ca:	68ba      	ldr	r2, [r7, #8]
 80061cc:	429a      	cmp	r2, r3
 80061ce:	d902      	bls.n	80061d6 <mg_iobuf_add+0x8e>
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	68ba      	ldr	r2, [r7, #8]
 80061d4:	609a      	str	r2, [r3, #8]
  io->len += len;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	689a      	ldr	r2, [r3, #8]
 80061da:	683b      	ldr	r3, [r7, #0]
 80061dc:	441a      	add	r2, r3
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	609a      	str	r2, [r3, #8]
  return len;
 80061e2:	683b      	ldr	r3, [r7, #0]
}
 80061e4:	4618      	mov	r0, r3
 80061e6:	3718      	adds	r7, #24
 80061e8:	46bd      	mov	sp, r7
 80061ea:	bd80      	pop	{r7, pc}

080061ec <mg_iobuf_del>:

size_t mg_iobuf_del(struct mg_iobuf *io, size_t ofs, size_t len) {
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	60f8      	str	r0, [r7, #12]
 80061f4:	60b9      	str	r1, [r7, #8]
 80061f6:	607a      	str	r2, [r7, #4]
  if (ofs > io->len) ofs = io->len;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	689b      	ldr	r3, [r3, #8]
 80061fc:	68ba      	ldr	r2, [r7, #8]
 80061fe:	429a      	cmp	r2, r3
 8006200:	d902      	bls.n	8006208 <mg_iobuf_del+0x1c>
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	689b      	ldr	r3, [r3, #8]
 8006206:	60bb      	str	r3, [r7, #8]
  if (ofs + len > io->len) len = io->len - ofs;
 8006208:	68ba      	ldr	r2, [r7, #8]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	441a      	add	r2, r3
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	689b      	ldr	r3, [r3, #8]
 8006212:	429a      	cmp	r2, r3
 8006214:	d904      	bls.n	8006220 <mg_iobuf_del+0x34>
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	689a      	ldr	r2, [r3, #8]
 800621a:	68bb      	ldr	r3, [r7, #8]
 800621c:	1ad3      	subs	r3, r2, r3
 800621e:	607b      	str	r3, [r7, #4]
  if (io->buf) memmove(io->buf + ofs, io->buf + ofs + len, io->len - ofs - len);
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d012      	beq.n	800624e <mg_iobuf_del+0x62>
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	18d0      	adds	r0, r2, r3
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681a      	ldr	r2, [r3, #0]
 8006234:	68b9      	ldr	r1, [r7, #8]
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	440b      	add	r3, r1
 800623a:	18d1      	adds	r1, r2, r3
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	689a      	ldr	r2, [r3, #8]
 8006240:	68bb      	ldr	r3, [r7, #8]
 8006242:	1ad2      	subs	r2, r2, r3
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	1ad3      	subs	r3, r2, r3
 8006248:	461a      	mov	r2, r3
 800624a:	f00e fa59 	bl	8014700 <memmove>
  if (io->buf) zeromem(io->buf + io->len - len, len);
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00a      	beq.n	800626c <mg_iobuf_del+0x80>
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	6899      	ldr	r1, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	1acb      	subs	r3, r1, r3
 8006262:	4413      	add	r3, r2
 8006264:	6879      	ldr	r1, [r7, #4]
 8006266:	4618      	mov	r0, r3
 8006268:	f7ff feb0 	bl	8005fcc <zeromem>
  io->len -= len;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	689a      	ldr	r2, [r3, #8]
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	1ad2      	subs	r2, r2, r3
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	609a      	str	r2, [r3, #8]
  return len;
 8006278:	687b      	ldr	r3, [r7, #4]
}
 800627a:	4618      	mov	r0, r3
 800627c:	3710      	adds	r7, #16
 800627e:	46bd      	mov	sp, r7
 8006280:	bd80      	pop	{r7, pc}

08006282 <mg_iobuf_free>:

void mg_iobuf_free(struct mg_iobuf *io) {
 8006282:	b580      	push	{r7, lr}
 8006284:	b082      	sub	sp, #8
 8006286:	af00      	add	r7, sp, #0
 8006288:	6078      	str	r0, [r7, #4]
  mg_iobuf_resize(io, 0);
 800628a:	2100      	movs	r1, #0
 800628c:	6878      	ldr	r0, [r7, #4]
 800628e:	f7ff fed1 	bl	8006034 <mg_iobuf_resize>
}
 8006292:	bf00      	nop
 8006294:	3708      	adds	r7, #8
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}
	...

0800629c <escapeseq>:
#endif




static const char *escapeseq(int esc) {
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  return esc ? "\b\f\n\r\t\\\"" : "bfnrt\\\"";
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d001      	beq.n	80062ae <escapeseq+0x12>
 80062aa:	4b04      	ldr	r3, [pc, #16]	; (80062bc <escapeseq+0x20>)
 80062ac:	e000      	b.n	80062b0 <escapeseq+0x14>
 80062ae:	4b04      	ldr	r3, [pc, #16]	; (80062c0 <escapeseq+0x24>)
}
 80062b0:	4618      	mov	r0, r3
 80062b2:	370c      	adds	r7, #12
 80062b4:	46bd      	mov	sp, r7
 80062b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ba:	4770      	bx	lr
 80062bc:	0801606c 	.word	0x0801606c
 80062c0:	08016074 	.word	0x08016074

080062c4 <json_esc>:

static char json_esc(int c, int esc) {
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b086      	sub	sp, #24
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
 80062cc:	6039      	str	r1, [r7, #0]
  const char *p, *esc1 = escapeseq(esc), *esc2 = escapeseq(!esc);
 80062ce:	6838      	ldr	r0, [r7, #0]
 80062d0:	f7ff ffe4 	bl	800629c <escapeseq>
 80062d4:	6138      	str	r0, [r7, #16]
 80062d6:	683b      	ldr	r3, [r7, #0]
 80062d8:	2b00      	cmp	r3, #0
 80062da:	bf0c      	ite	eq
 80062dc:	2301      	moveq	r3, #1
 80062de:	2300      	movne	r3, #0
 80062e0:	b2db      	uxtb	r3, r3
 80062e2:	4618      	mov	r0, r3
 80062e4:	f7ff ffda 	bl	800629c <escapeseq>
 80062e8:	60f8      	str	r0, [r7, #12]
  for (p = esc1; *p != '\0'; p++) {
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	617b      	str	r3, [r7, #20]
 80062ee:	e010      	b.n	8006312 <json_esc+0x4e>
    if (*p == c) return esc2[p - esc1];
 80062f0:	697b      	ldr	r3, [r7, #20]
 80062f2:	781b      	ldrb	r3, [r3, #0]
 80062f4:	461a      	mov	r2, r3
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d107      	bne.n	800630c <json_esc+0x48>
 80062fc:	697a      	ldr	r2, [r7, #20]
 80062fe:	693b      	ldr	r3, [r7, #16]
 8006300:	1ad3      	subs	r3, r2, r3
 8006302:	461a      	mov	r2, r3
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	781b      	ldrb	r3, [r3, #0]
 800630a:	e007      	b.n	800631c <json_esc+0x58>
  for (p = esc1; *p != '\0'; p++) {
 800630c:	697b      	ldr	r3, [r7, #20]
 800630e:	3301      	adds	r3, #1
 8006310:	617b      	str	r3, [r7, #20]
 8006312:	697b      	ldr	r3, [r7, #20]
 8006314:	781b      	ldrb	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	d1ea      	bne.n	80062f0 <json_esc+0x2c>
  }
  return 0;
 800631a:	2300      	movs	r3, #0
}
 800631c:	4618      	mov	r0, r3
 800631e:	3718      	adds	r7, #24
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <mg_pass_string>:

static int mg_pass_string(const char *s, int len) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
 800632c:	6039      	str	r1, [r7, #0]
  int i;
  for (i = 0; i < len; i++) {
 800632e:	2300      	movs	r3, #0
 8006330:	60fb      	str	r3, [r7, #12]
 8006332:	e02e      	b.n	8006392 <mg_pass_string+0x6e>
    if (s[i] == '\\' && i + 1 < len && json_esc(s[i + 1], 1)) {
 8006334:	68fb      	ldr	r3, [r7, #12]
 8006336:	687a      	ldr	r2, [r7, #4]
 8006338:	4413      	add	r3, r2
 800633a:	781b      	ldrb	r3, [r3, #0]
 800633c:	2b5c      	cmp	r3, #92	; 0x5c
 800633e:	d114      	bne.n	800636a <mg_pass_string+0x46>
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	3301      	adds	r3, #1
 8006344:	683a      	ldr	r2, [r7, #0]
 8006346:	429a      	cmp	r2, r3
 8006348:	dd0f      	ble.n	800636a <mg_pass_string+0x46>
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	3301      	adds	r3, #1
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	4413      	add	r3, r2
 8006352:	781b      	ldrb	r3, [r3, #0]
 8006354:	2101      	movs	r1, #1
 8006356:	4618      	mov	r0, r3
 8006358:	f7ff ffb4 	bl	80062c4 <json_esc>
 800635c:	4603      	mov	r3, r0
 800635e:	2b00      	cmp	r3, #0
 8006360:	d003      	beq.n	800636a <mg_pass_string+0x46>
      i++;
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	3301      	adds	r3, #1
 8006366:	60fb      	str	r3, [r7, #12]
 8006368:	e010      	b.n	800638c <mg_pass_string+0x68>
    } else if (s[i] == '\0') {
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	687a      	ldr	r2, [r7, #4]
 800636e:	4413      	add	r3, r2
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d102      	bne.n	800637c <mg_pass_string+0x58>
      return MG_JSON_INVALID;
 8006376:	f06f 0301 	mvn.w	r3, #1
 800637a:	e010      	b.n	800639e <mg_pass_string+0x7a>
    } else if (s[i] == '"') {
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	687a      	ldr	r2, [r7, #4]
 8006380:	4413      	add	r3, r2
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b22      	cmp	r3, #34	; 0x22
 8006386:	d101      	bne.n	800638c <mg_pass_string+0x68>
      return i;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	e008      	b.n	800639e <mg_pass_string+0x7a>
  for (i = 0; i < len; i++) {
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	3301      	adds	r3, #1
 8006390:	60fb      	str	r3, [r7, #12]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	429a      	cmp	r2, r3
 8006398:	dbcc      	blt.n	8006334 <mg_pass_string+0x10>
    }
  }
  return MG_JSON_INVALID;
 800639a:	f06f 0301 	mvn.w	r3, #1
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}
	...

080063a8 <mg_atod>:

static double mg_atod(const char *p, int len, int *numlen) {
 80063a8:	b480      	push	{r7}
 80063aa:	b091      	sub	sp, #68	; 0x44
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
  double d = 0.0;
 80063b4:	f04f 0200 	mov.w	r2, #0
 80063b8:	f04f 0300 	mov.w	r3, #0
 80063bc:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
  int i = 0, sign = 1;
 80063c0:	2300      	movs	r3, #0
 80063c2:	637b      	str	r3, [r7, #52]	; 0x34
 80063c4:	2301      	movs	r3, #1
 80063c6:	633b      	str	r3, [r7, #48]	; 0x30

  // Sign
  if (i < len && *p == '-') {
 80063c8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	429a      	cmp	r2, r3
 80063ce:	da0a      	bge.n	80063e6 <mg_atod+0x3e>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	781b      	ldrb	r3, [r3, #0]
 80063d4:	2b2d      	cmp	r3, #45	; 0x2d
 80063d6:	d106      	bne.n	80063e6 <mg_atod+0x3e>
    sign = -1, i++;
 80063d8:	f04f 33ff 	mov.w	r3, #4294967295
 80063dc:	633b      	str	r3, [r7, #48]	; 0x30
 80063de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063e0:	3301      	adds	r3, #1
 80063e2:	637b      	str	r3, [r7, #52]	; 0x34
 80063e4:	e00a      	b.n	80063fc <mg_atod+0x54>
  } else if (i < len && *p == '+') {
 80063e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063e8:	68bb      	ldr	r3, [r7, #8]
 80063ea:	429a      	cmp	r2, r3
 80063ec:	da21      	bge.n	8006432 <mg_atod+0x8a>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	781b      	ldrb	r3, [r3, #0]
 80063f2:	2b2b      	cmp	r3, #43	; 0x2b
 80063f4:	d11d      	bne.n	8006432 <mg_atod+0x8a>
    i++;
 80063f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063f8:	3301      	adds	r3, #1
 80063fa:	637b      	str	r3, [r7, #52]	; 0x34
  }

  // Decimal
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80063fc:	e019      	b.n	8006432 <mg_atod+0x8a>
    d *= 10.0;
 80063fe:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8006402:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 8006406:	ee27 7b06 	vmul.f64	d7, d7, d6
 800640a:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    d += p[i] - '0';
 800640e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006410:	68fa      	ldr	r2, [r7, #12]
 8006412:	4413      	add	r3, r2
 8006414:	781b      	ldrb	r3, [r3, #0]
 8006416:	3b30      	subs	r3, #48	; 0x30
 8006418:	ee07 3a90 	vmov	s15, r3
 800641c:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8006420:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8006424:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006428:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 800642c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800642e:	3301      	adds	r3, #1
 8006430:	637b      	str	r3, [r7, #52]	; 0x34
 8006432:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	429a      	cmp	r2, r3
 8006438:	da0b      	bge.n	8006452 <mg_atod+0xaa>
 800643a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800643c:	68fa      	ldr	r2, [r7, #12]
 800643e:	4413      	add	r3, r2
 8006440:	781b      	ldrb	r3, [r3, #0]
 8006442:	2b2f      	cmp	r3, #47	; 0x2f
 8006444:	d905      	bls.n	8006452 <mg_atod+0xaa>
 8006446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006448:	68fa      	ldr	r2, [r7, #12]
 800644a:	4413      	add	r3, r2
 800644c:	781b      	ldrb	r3, [r3, #0]
 800644e:	2b39      	cmp	r3, #57	; 0x39
 8006450:	d9d5      	bls.n	80063fe <mg_atod+0x56>
  }
  d *= sign;
 8006452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 800645c:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 8006460:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006464:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38

  // Fractional
  if (i < len && p[i] == '.') {
 8006468:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	429a      	cmp	r2, r3
 800646e:	da51      	bge.n	8006514 <mg_atod+0x16c>
 8006470:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006472:	68fa      	ldr	r2, [r7, #12]
 8006474:	4413      	add	r3, r2
 8006476:	781b      	ldrb	r3, [r3, #0]
 8006478:	2b2e      	cmp	r3, #46	; 0x2e
 800647a:	d14b      	bne.n	8006514 <mg_atod+0x16c>
    double frac = 0.0, base = 0.1;
 800647c:	f04f 0200 	mov.w	r2, #0
 8006480:	f04f 0300 	mov.w	r3, #0
 8006484:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8006488:	a36d      	add	r3, pc, #436	; (adr r3, 8006640 <mg_atod+0x298>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    i++;
 8006492:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006494:	3301      	adds	r3, #1
 8006496:	637b      	str	r3, [r7, #52]	; 0x34
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 8006498:	e01d      	b.n	80064d6 <mg_atod+0x12e>
      frac += base * (p[i] - '0');
 800649a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800649c:	68fa      	ldr	r2, [r7, #12]
 800649e:	4413      	add	r3, r2
 80064a0:	781b      	ldrb	r3, [r3, #0]
 80064a2:	3b30      	subs	r3, #48	; 0x30
 80064a4:	ee07 3a90 	vmov	s15, r3
 80064a8:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80064ac:	ed97 7b08 	vldr	d7, [r7, #32]
 80064b0:	ee26 7b07 	vmul.f64	d7, d6, d7
 80064b4:	ed97 6b0a 	vldr	d6, [r7, #40]	; 0x28
 80064b8:	ee36 7b07 	vadd.f64	d7, d6, d7
 80064bc:	ed87 7b0a 	vstr	d7, [r7, #40]	; 0x28
      base /= 10.0;
 80064c0:	ed97 6b08 	vldr	d6, [r7, #32]
 80064c4:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 80064c8:	ee86 7b05 	vdiv.f64	d7, d6, d5
 80064cc:	ed87 7b08 	vstr	d7, [r7, #32]
    for (; i < len && p[i] >= '0' && p[i] <= '9'; i++) {
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	3301      	adds	r3, #1
 80064d4:	637b      	str	r3, [r7, #52]	; 0x34
 80064d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064d8:	68bb      	ldr	r3, [r7, #8]
 80064da:	429a      	cmp	r2, r3
 80064dc:	da0b      	bge.n	80064f6 <mg_atod+0x14e>
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	68fa      	ldr	r2, [r7, #12]
 80064e2:	4413      	add	r3, r2
 80064e4:	781b      	ldrb	r3, [r3, #0]
 80064e6:	2b2f      	cmp	r3, #47	; 0x2f
 80064e8:	d905      	bls.n	80064f6 <mg_atod+0x14e>
 80064ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ec:	68fa      	ldr	r2, [r7, #12]
 80064ee:	4413      	add	r3, r2
 80064f0:	781b      	ldrb	r3, [r3, #0]
 80064f2:	2b39      	cmp	r3, #57	; 0x39
 80064f4:	d9d1      	bls.n	800649a <mg_atod+0xf2>
    }
    d += frac * sign;
 80064f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064f8:	ee07 3a90 	vmov	s15, r3
 80064fc:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8006500:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8006504:	ee26 7b07 	vmul.f64	d7, d6, d7
 8006508:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 800650c:	ee36 7b07 	vadd.f64	d7, d6, d7
 8006510:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
  }

  // Exponential
  if (i < len && (p[i] == 'e' || p[i] == 'E')) {
 8006514:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	429a      	cmp	r2, r3
 800651a:	da7e      	bge.n	800661a <mg_atod+0x272>
 800651c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800651e:	68fa      	ldr	r2, [r7, #12]
 8006520:	4413      	add	r3, r2
 8006522:	781b      	ldrb	r3, [r3, #0]
 8006524:	2b65      	cmp	r3, #101	; 0x65
 8006526:	d005      	beq.n	8006534 <mg_atod+0x18c>
 8006528:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800652a:	68fa      	ldr	r2, [r7, #12]
 800652c:	4413      	add	r3, r2
 800652e:	781b      	ldrb	r3, [r3, #0]
 8006530:	2b45      	cmp	r3, #69	; 0x45
 8006532:	d172      	bne.n	800661a <mg_atod+0x272>
    int j, exp = 0, minus = 0;
 8006534:	2300      	movs	r3, #0
 8006536:	61bb      	str	r3, [r7, #24]
 8006538:	2300      	movs	r3, #0
 800653a:	617b      	str	r3, [r7, #20]
    i++;
 800653c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800653e:	3301      	adds	r3, #1
 8006540:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '-') minus = 1, i++;
 8006542:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	429a      	cmp	r2, r3
 8006548:	da0a      	bge.n	8006560 <mg_atod+0x1b8>
 800654a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800654c:	68fa      	ldr	r2, [r7, #12]
 800654e:	4413      	add	r3, r2
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b2d      	cmp	r3, #45	; 0x2d
 8006554:	d104      	bne.n	8006560 <mg_atod+0x1b8>
 8006556:	2301      	movs	r3, #1
 8006558:	617b      	str	r3, [r7, #20]
 800655a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655c:	3301      	adds	r3, #1
 800655e:	637b      	str	r3, [r7, #52]	; 0x34
    if (i < len && p[i] == '+') i++;
 8006560:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006562:	68bb      	ldr	r3, [r7, #8]
 8006564:	429a      	cmp	r2, r3
 8006566:	da19      	bge.n	800659c <mg_atod+0x1f4>
 8006568:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800656a:	68fa      	ldr	r2, [r7, #12]
 800656c:	4413      	add	r3, r2
 800656e:	781b      	ldrb	r3, [r3, #0]
 8006570:	2b2b      	cmp	r3, #43	; 0x2b
 8006572:	d113      	bne.n	800659c <mg_atod+0x1f4>
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	3301      	adds	r3, #1
 8006578:	637b      	str	r3, [r7, #52]	; 0x34
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800657a:	e00f      	b.n	800659c <mg_atod+0x1f4>
      exp = exp * 10 + (p[i++] - '0');
 800657c:	69ba      	ldr	r2, [r7, #24]
 800657e:	4613      	mov	r3, r2
 8006580:	009b      	lsls	r3, r3, #2
 8006582:	4413      	add	r3, r2
 8006584:	005b      	lsls	r3, r3, #1
 8006586:	4619      	mov	r1, r3
 8006588:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800658a:	1c5a      	adds	r2, r3, #1
 800658c:	637a      	str	r2, [r7, #52]	; 0x34
 800658e:	461a      	mov	r2, r3
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	4413      	add	r3, r2
 8006594:	781b      	ldrb	r3, [r3, #0]
 8006596:	3b30      	subs	r3, #48	; 0x30
 8006598:	440b      	add	r3, r1
 800659a:	61bb      	str	r3, [r7, #24]
    while (i < len && p[i] >= '0' && p[i] <= '9' && exp < 308)
 800659c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	429a      	cmp	r2, r3
 80065a2:	da0f      	bge.n	80065c4 <mg_atod+0x21c>
 80065a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065a6:	68fa      	ldr	r2, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	781b      	ldrb	r3, [r3, #0]
 80065ac:	2b2f      	cmp	r3, #47	; 0x2f
 80065ae:	d909      	bls.n	80065c4 <mg_atod+0x21c>
 80065b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80065b2:	68fa      	ldr	r2, [r7, #12]
 80065b4:	4413      	add	r3, r2
 80065b6:	781b      	ldrb	r3, [r3, #0]
 80065b8:	2b39      	cmp	r3, #57	; 0x39
 80065ba:	d803      	bhi.n	80065c4 <mg_atod+0x21c>
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	f5b3 7f9a 	cmp.w	r3, #308	; 0x134
 80065c2:	dbdb      	blt.n	800657c <mg_atod+0x1d4>
    if (minus) exp = -exp;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d002      	beq.n	80065d0 <mg_atod+0x228>
 80065ca:	69bb      	ldr	r3, [r7, #24]
 80065cc:	425b      	negs	r3, r3
 80065ce:	61bb      	str	r3, [r7, #24]
    for (j = 0; j < exp; j++) d *= 10.0;
 80065d0:	2300      	movs	r3, #0
 80065d2:	61fb      	str	r3, [r7, #28]
 80065d4:	e00a      	b.n	80065ec <mg_atod+0x244>
 80065d6:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80065da:	eeb2 6b04 	vmov.f64	d6, #36	; 0x41200000  10.0
 80065de:	ee27 7b06 	vmul.f64	d7, d7, d6
 80065e2:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 80065e6:	69fb      	ldr	r3, [r7, #28]
 80065e8:	3301      	adds	r3, #1
 80065ea:	61fb      	str	r3, [r7, #28]
 80065ec:	69fa      	ldr	r2, [r7, #28]
 80065ee:	69bb      	ldr	r3, [r7, #24]
 80065f0:	429a      	cmp	r2, r3
 80065f2:	dbf0      	blt.n	80065d6 <mg_atod+0x22e>
    for (j = 0; j < -exp; j++) d /= 10.0;
 80065f4:	2300      	movs	r3, #0
 80065f6:	61fb      	str	r3, [r7, #28]
 80065f8:	e00a      	b.n	8006610 <mg_atod+0x268>
 80065fa:	ed97 6b0e 	vldr	d6, [r7, #56]	; 0x38
 80065fe:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
 8006602:	ee86 7b05 	vdiv.f64	d7, d6, d5
 8006606:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
 800660a:	69fb      	ldr	r3, [r7, #28]
 800660c:	3301      	adds	r3, #1
 800660e:	61fb      	str	r3, [r7, #28]
 8006610:	69bb      	ldr	r3, [r7, #24]
 8006612:	425b      	negs	r3, r3
 8006614:	69fa      	ldr	r2, [r7, #28]
 8006616:	429a      	cmp	r2, r3
 8006618:	dbef      	blt.n	80065fa <mg_atod+0x252>
  }

  if (numlen != NULL) *numlen = i;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d002      	beq.n	8006626 <mg_atod+0x27e>
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006624:	601a      	str	r2, [r3, #0]
  return d;
 8006626:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800662a:	ec43 2b17 	vmov	d7, r2, r3
}
 800662e:	eeb0 0b47 	vmov.f64	d0, d7
 8006632:	3744      	adds	r7, #68	; 0x44
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	f3af 8000 	nop.w
 8006640:	9999999a 	.word	0x9999999a
 8006644:	3fb99999 	.word	0x3fb99999

08006648 <mg_json_get>:

int mg_json_get(struct mg_str json, const char *path, int *toklen) {
 8006648:	b590      	push	{r4, r7, lr}
 800664a:	b09b      	sub	sp, #108	; 0x6c
 800664c:	af00      	add	r7, sp, #0
 800664e:	f107 0408 	add.w	r4, r7, #8
 8006652:	e884 0003 	stmia.w	r4, {r0, r1}
 8006656:	607a      	str	r2, [r7, #4]
 8006658:	603b      	str	r3, [r7, #0]
  const char *s = json.ptr;
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	647b      	str	r3, [r7, #68]	; 0x44
  int len = (int) json.len;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	643b      	str	r3, [r7, #64]	; 0x40
  enum { S_VALUE, S_KEY, S_COLON, S_COMMA_OR_EOO } expecting = S_VALUE;
 8006662:	2300      	movs	r3, #0
 8006664:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  unsigned char nesting[MG_JSON_MAX_DEPTH];
  int i = 0;             // Current offset in `s`
 8006668:	2300      	movs	r3, #0
 800666a:	663b      	str	r3, [r7, #96]	; 0x60
  int j = 0;             // Offset in `s` we're looking for (return value)
 800666c:	2300      	movs	r3, #0
 800666e:	65fb      	str	r3, [r7, #92]	; 0x5c
  int depth = 0;         // Current depth (nesting level)
 8006670:	2300      	movs	r3, #0
 8006672:	65bb      	str	r3, [r7, #88]	; 0x58
  int ed = 0;            // Expected depth
 8006674:	2300      	movs	r3, #0
 8006676:	657b      	str	r3, [r7, #84]	; 0x54
  int pos = 1;           // Current position in `path`
 8006678:	2301      	movs	r3, #1
 800667a:	653b      	str	r3, [r7, #80]	; 0x50
  int ci = -1, ei = -1;  // Current and expected index in array
 800667c:	f04f 33ff 	mov.w	r3, #4294967295
 8006680:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006682:	f04f 33ff 	mov.w	r3, #4294967295
 8006686:	64bb      	str	r3, [r7, #72]	; 0x48

  if (toklen) *toklen = 0;
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d002      	beq.n	8006694 <mg_json_get+0x4c>
 800668e:	683b      	ldr	r3, [r7, #0]
 8006690:	2200      	movs	r2, #0
 8006692:	601a      	str	r2, [r3, #0]
  if (path[0] != '$') return MG_JSON_INVALID;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b24      	cmp	r3, #36	; 0x24
 800669a:	d002      	beq.n	80066a2 <mg_json_get+0x5a>
 800669c:	f06f 0301 	mvn.w	r3, #1
 80066a0:	e2e2      	b.n	8006c68 <mg_json_get+0x620>
    if (c != nesting[depth - 1] + 2) return MG_JSON_INVALID; \
    depth--;                                                 \
    MG_CHECKRET(x);                                          \
  } while (0)

  for (i = 0; i < len; i++) {
 80066a2:	2300      	movs	r3, #0
 80066a4:	663b      	str	r3, [r7, #96]	; 0x60
 80066a6:	e2d8      	b.n	8006c5a <mg_json_get+0x612>
    unsigned char c = ((unsigned char *) s)[i];
 80066a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80066aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80066ac:	4413      	add	r3, r2
 80066ae:	781b      	ldrb	r3, [r3, #0]
 80066b0:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 80066b4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	f000 82c8 	beq.w	8006c4e <mg_json_get+0x606>
 80066be:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066c2:	2b09      	cmp	r3, #9
 80066c4:	f000 82c3 	beq.w	8006c4e <mg_json_get+0x606>
 80066c8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066cc:	2b0a      	cmp	r3, #10
 80066ce:	f000 82be 	beq.w	8006c4e <mg_json_get+0x606>
 80066d2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80066d6:	2b0d      	cmp	r3, #13
 80066d8:	f000 82b9 	beq.w	8006c4e <mg_json_get+0x606>
    switch (expecting) {
 80066dc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80066e0:	2b03      	cmp	r3, #3
 80066e2:	f200 82b7 	bhi.w	8006c54 <mg_json_get+0x60c>
 80066e6:	a201      	add	r2, pc, #4	; (adr r2, 80066ec <mg_json_get+0xa4>)
 80066e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066ec:	080066fd 	.word	0x080066fd
 80066f0:	080069e5 	.word	0x080069e5
 80066f4:	08006b6f 	.word	0x08006b6f
 80066f8:	08006b85 	.word	0x08006b85
      case S_VALUE:
        // p("V %s [%.*s] %d %d %d %d\n", path, pos, path, depth, ed, ci, ei);
        if (depth == ed) j = i;
 80066fc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80066fe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006700:	429a      	cmp	r2, r3
 8006702:	d101      	bne.n	8006708 <mg_json_get+0xc0>
 8006704:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006706:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (c == '{') {
 8006708:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800670c:	2b7b      	cmp	r3, #123	; 0x7b
 800670e:	d12b      	bne.n	8006768 <mg_json_get+0x120>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8006710:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006712:	2b1d      	cmp	r3, #29
 8006714:	dd02      	ble.n	800671c <mg_json_get+0xd4>
 8006716:	f04f 33ff 	mov.w	r3, #4294967295
 800671a:	e2a5      	b.n	8006c68 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '.' && ci == ei) {
 800671c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800671e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006720:	429a      	cmp	r2, r3
 8006722:	d114      	bne.n	800674e <mg_json_get+0x106>
 8006724:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006726:	687a      	ldr	r2, [r7, #4]
 8006728:	4413      	add	r3, r2
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	2b2e      	cmp	r3, #46	; 0x2e
 800672e:	d10e      	bne.n	800674e <mg_json_get+0x106>
 8006730:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006732:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006734:	429a      	cmp	r2, r3
 8006736:	d10a      	bne.n	800674e <mg_json_get+0x106>
            // If we start the object, reset array indices
            ed++, pos++, ci = ei = -1;
 8006738:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800673a:	3301      	adds	r3, #1
 800673c:	657b      	str	r3, [r7, #84]	; 0x54
 800673e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006740:	3301      	adds	r3, #1
 8006742:	653b      	str	r3, [r7, #80]	; 0x50
 8006744:	f04f 33ff 	mov.w	r3, #4294967295
 8006748:	64bb      	str	r3, [r7, #72]	; 0x48
 800674a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800674c:	64fb      	str	r3, [r7, #76]	; 0x4c
          }
          nesting[depth++] = c;
 800674e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006750:	1c5a      	adds	r2, r3, #1
 8006752:	65ba      	str	r2, [r7, #88]	; 0x58
 8006754:	3368      	adds	r3, #104	; 0x68
 8006756:	443b      	add	r3, r7
 8006758:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 800675c:	f803 2c54 	strb.w	r2, [r3, #-84]
          expecting = S_KEY;
 8006760:	2301      	movs	r3, #1
 8006762:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          break;
 8006766:	e275      	b.n	8006c54 <mg_json_get+0x60c>
        } else if (c == '[') {
 8006768:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800676c:	2b5b      	cmp	r3, #91	; 0x5b
 800676e:	d14e      	bne.n	800680e <mg_json_get+0x1c6>
          if (depth >= (int) sizeof(nesting)) return MG_JSON_TOO_DEEP;
 8006770:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006772:	2b1d      	cmp	r3, #29
 8006774:	dd02      	ble.n	800677c <mg_json_get+0x134>
 8006776:	f04f 33ff 	mov.w	r3, #4294967295
 800677a:	e275      	b.n	8006c68 <mg_json_get+0x620>
          if (depth == ed && path[pos] == '[' && ei == ci) {
 800677c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800677e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006780:	429a      	cmp	r2, r3
 8006782:	d13a      	bne.n	80067fa <mg_json_get+0x1b2>
 8006784:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006786:	687a      	ldr	r2, [r7, #4]
 8006788:	4413      	add	r3, r2
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	2b5b      	cmp	r3, #91	; 0x5b
 800678e:	d134      	bne.n	80067fa <mg_json_get+0x1b2>
 8006790:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006792:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006794:	429a      	cmp	r2, r3
 8006796:	d130      	bne.n	80067fa <mg_json_get+0x1b2>
            ed++, pos++, ci = 0;
 8006798:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800679a:	3301      	adds	r3, #1
 800679c:	657b      	str	r3, [r7, #84]	; 0x54
 800679e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067a0:	3301      	adds	r3, #1
 80067a2:	653b      	str	r3, [r7, #80]	; 0x50
 80067a4:	2300      	movs	r3, #0
 80067a6:	64fb      	str	r3, [r7, #76]	; 0x4c
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80067a8:	2300      	movs	r3, #0
 80067aa:	64bb      	str	r3, [r7, #72]	; 0x48
 80067ac:	e010      	b.n	80067d0 <mg_json_get+0x188>
              ei *= 10;
 80067ae:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067b0:	4613      	mov	r3, r2
 80067b2:	009b      	lsls	r3, r3, #2
 80067b4:	4413      	add	r3, r2
 80067b6:	005b      	lsls	r3, r3, #1
 80067b8:	64bb      	str	r3, [r7, #72]	; 0x48
              ei += path[pos] - '0';
 80067ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	4413      	add	r3, r2
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	3b30      	subs	r3, #48	; 0x30
 80067c4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80067c6:	4413      	add	r3, r2
 80067c8:	64bb      	str	r3, [r7, #72]	; 0x48
            for (ei = 0; path[pos] != ']' && path[pos] != '\0'; pos++) {
 80067ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067cc:	3301      	adds	r3, #1
 80067ce:	653b      	str	r3, [r7, #80]	; 0x50
 80067d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067d2:	687a      	ldr	r2, [r7, #4]
 80067d4:	4413      	add	r3, r2
 80067d6:	781b      	ldrb	r3, [r3, #0]
 80067d8:	2b5d      	cmp	r3, #93	; 0x5d
 80067da:	d005      	beq.n	80067e8 <mg_json_get+0x1a0>
 80067dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	4413      	add	r3, r2
 80067e2:	781b      	ldrb	r3, [r3, #0]
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d1e2      	bne.n	80067ae <mg_json_get+0x166>
            }
            if (path[pos] != 0) pos++;
 80067e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067ea:	687a      	ldr	r2, [r7, #4]
 80067ec:	4413      	add	r3, r2
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	2b00      	cmp	r3, #0
 80067f2:	d002      	beq.n	80067fa <mg_json_get+0x1b2>
 80067f4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80067f6:	3301      	adds	r3, #1
 80067f8:	653b      	str	r3, [r7, #80]	; 0x50
          }
          nesting[depth++] = c;
 80067fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80067fc:	1c5a      	adds	r2, r3, #1
 80067fe:	65ba      	str	r2, [r7, #88]	; 0x58
 8006800:	3368      	adds	r3, #104	; 0x68
 8006802:	443b      	add	r3, r7
 8006804:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006808:	f803 2c54 	strb.w	r2, [r3, #-84]
          break;
 800680c:	e222      	b.n	8006c54 <mg_json_get+0x60c>
        } else if (c == ']' && depth > 0) {  // Empty array
 800680e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006812:	2b5d      	cmp	r3, #93	; 0x5d
 8006814:	d13a      	bne.n	800688c <mg_json_get+0x244>
 8006816:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006818:	2b00      	cmp	r3, #0
 800681a:	dd37      	ble.n	800688c <mg_json_get+0x244>
          MG_EOO(']');
 800681c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800681e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006820:	429a      	cmp	r2, r3
 8006822:	d106      	bne.n	8006832 <mg_json_get+0x1ea>
 8006824:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006826:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006828:	429a      	cmp	r2, r3
 800682a:	d002      	beq.n	8006832 <mg_json_get+0x1ea>
 800682c:	f06f 0302 	mvn.w	r3, #2
 8006830:	e21a      	b.n	8006c68 <mg_json_get+0x620>
 8006832:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006836:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006838:	3b01      	subs	r3, #1
 800683a:	3368      	adds	r3, #104	; 0x68
 800683c:	443b      	add	r3, r7
 800683e:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006842:	3302      	adds	r3, #2
 8006844:	429a      	cmp	r2, r3
 8006846:	d002      	beq.n	800684e <mg_json_get+0x206>
 8006848:	f06f 0301 	mvn.w	r3, #1
 800684c:	e20c      	b.n	8006c68 <mg_json_get+0x620>
 800684e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006850:	3b01      	subs	r3, #1
 8006852:	65bb      	str	r3, [r7, #88]	; 0x58
 8006854:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006856:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006858:	429a      	cmp	r2, r3
 800685a:	f040 809c 	bne.w	8006996 <mg_json_get+0x34e>
 800685e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006860:	687a      	ldr	r2, [r7, #4]
 8006862:	4413      	add	r3, r2
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b00      	cmp	r3, #0
 8006868:	f040 8095 	bne.w	8006996 <mg_json_get+0x34e>
 800686c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800686e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006870:	429a      	cmp	r2, r3
 8006872:	f040 8090 	bne.w	8006996 <mg_json_get+0x34e>
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d005      	beq.n	8006888 <mg_json_get+0x240>
 800687c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800687e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006880:	1ad3      	subs	r3, r2, r3
 8006882:	1c5a      	adds	r2, r3, #1
 8006884:	683b      	ldr	r3, [r7, #0]
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800688a:	e1ed      	b.n	8006c68 <mg_json_get+0x620>
        } else if (c == 't' && i + 3 < len && memcmp(&s[i], "true", 4) == 0) {
 800688c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006890:	2b74      	cmp	r3, #116	; 0x74
 8006892:	d113      	bne.n	80068bc <mg_json_get+0x274>
 8006894:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006896:	3303      	adds	r3, #3
 8006898:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800689a:	429a      	cmp	r2, r3
 800689c:	dd0e      	ble.n	80068bc <mg_json_get+0x274>
 800689e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068a0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068a2:	4413      	add	r3, r2
 80068a4:	2204      	movs	r2, #4
 80068a6:	4998      	ldr	r1, [pc, #608]	; (8006b08 <mg_json_get+0x4c0>)
 80068a8:	4618      	mov	r0, r3
 80068aa:	f00d ff19 	bl	80146e0 <memcmp>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d103      	bne.n	80068bc <mg_json_get+0x274>
          i += 3;
 80068b4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068b6:	3303      	adds	r3, #3
 80068b8:	663b      	str	r3, [r7, #96]	; 0x60
 80068ba:	e06c      	b.n	8006996 <mg_json_get+0x34e>
        } else if (c == 'n' && i + 3 < len && memcmp(&s[i], "null", 4) == 0) {
 80068bc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068c0:	2b6e      	cmp	r3, #110	; 0x6e
 80068c2:	d113      	bne.n	80068ec <mg_json_get+0x2a4>
 80068c4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068c6:	3303      	adds	r3, #3
 80068c8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068ca:	429a      	cmp	r2, r3
 80068cc:	dd0e      	ble.n	80068ec <mg_json_get+0x2a4>
 80068ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068d0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80068d2:	4413      	add	r3, r2
 80068d4:	2204      	movs	r2, #4
 80068d6:	498d      	ldr	r1, [pc, #564]	; (8006b0c <mg_json_get+0x4c4>)
 80068d8:	4618      	mov	r0, r3
 80068da:	f00d ff01 	bl	80146e0 <memcmp>
 80068de:	4603      	mov	r3, r0
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d103      	bne.n	80068ec <mg_json_get+0x2a4>
          i += 3;
 80068e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068e6:	3303      	adds	r3, #3
 80068e8:	663b      	str	r3, [r7, #96]	; 0x60
 80068ea:	e054      	b.n	8006996 <mg_json_get+0x34e>
        } else if (c == 'f' && i + 4 < len && memcmp(&s[i], "false", 5) == 0) {
 80068ec:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80068f0:	2b66      	cmp	r3, #102	; 0x66
 80068f2:	d113      	bne.n	800691c <mg_json_get+0x2d4>
 80068f4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80068f6:	3304      	adds	r3, #4
 80068f8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80068fa:	429a      	cmp	r2, r3
 80068fc:	dd0e      	ble.n	800691c <mg_json_get+0x2d4>
 80068fe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006900:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006902:	4413      	add	r3, r2
 8006904:	2205      	movs	r2, #5
 8006906:	4982      	ldr	r1, [pc, #520]	; (8006b10 <mg_json_get+0x4c8>)
 8006908:	4618      	mov	r0, r3
 800690a:	f00d fee9 	bl	80146e0 <memcmp>
 800690e:	4603      	mov	r3, r0
 8006910:	2b00      	cmp	r3, #0
 8006912:	d103      	bne.n	800691c <mg_json_get+0x2d4>
          i += 4;
 8006914:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006916:	3304      	adds	r3, #4
 8006918:	663b      	str	r3, [r7, #96]	; 0x60
 800691a:	e03c      	b.n	8006996 <mg_json_get+0x34e>
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 800691c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006920:	2b2d      	cmp	r3, #45	; 0x2d
 8006922:	d007      	beq.n	8006934 <mg_json_get+0x2ec>
 8006924:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006928:	2b2f      	cmp	r3, #47	; 0x2f
 800692a:	d916      	bls.n	800695a <mg_json_get+0x312>
 800692c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006930:	2b39      	cmp	r3, #57	; 0x39
 8006932:	d812      	bhi.n	800695a <mg_json_get+0x312>
          int numlen = 0;
 8006934:	2300      	movs	r3, #0
 8006936:	613b      	str	r3, [r7, #16]
          mg_atod(&s[i], len - i, &numlen);
 8006938:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800693a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800693c:	18d0      	adds	r0, r2, r3
 800693e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006940:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006942:	1ad3      	subs	r3, r2, r3
 8006944:	f107 0210 	add.w	r2, r7, #16
 8006948:	4619      	mov	r1, r3
 800694a:	f7ff fd2d 	bl	80063a8 <mg_atod>
          i += numlen - 1;
 800694e:	693b      	ldr	r3, [r7, #16]
 8006950:	3b01      	subs	r3, #1
 8006952:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006954:	4413      	add	r3, r2
 8006956:	663b      	str	r3, [r7, #96]	; 0x60
        } else if (c == '-' || ((c >= '0' && c <= '9'))) {
 8006958:	e01d      	b.n	8006996 <mg_json_get+0x34e>
        } else if (c == '"') {
 800695a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800695e:	2b22      	cmp	r3, #34	; 0x22
 8006960:	d116      	bne.n	8006990 <mg_json_get+0x348>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 8006962:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006964:	3301      	adds	r3, #1
 8006966:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006968:	18d0      	adds	r0, r2, r3
 800696a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800696c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800696e:	1ad3      	subs	r3, r2, r3
 8006970:	3b01      	subs	r3, #1
 8006972:	4619      	mov	r1, r3
 8006974:	f7ff fcd6 	bl	8006324 <mg_pass_string>
 8006978:	6378      	str	r0, [r7, #52]	; 0x34
          if (n < 0) return n;
 800697a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800697c:	2b00      	cmp	r3, #0
 800697e:	da01      	bge.n	8006984 <mg_json_get+0x33c>
 8006980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006982:	e171      	b.n	8006c68 <mg_json_get+0x620>
          i += n + 1;
 8006984:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006986:	3301      	adds	r3, #1
 8006988:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800698a:	4413      	add	r3, r2
 800698c:	663b      	str	r3, [r7, #96]	; 0x60
 800698e:	e002      	b.n	8006996 <mg_json_get+0x34e>
        } else {
          return MG_JSON_INVALID;
 8006990:	f06f 0301 	mvn.w	r3, #1
 8006994:	e168      	b.n	8006c68 <mg_json_get+0x620>
        }
        MG_CHECKRET('V');
 8006996:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006998:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800699a:	429a      	cmp	r2, r3
 800699c:	d114      	bne.n	80069c8 <mg_json_get+0x380>
 800699e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80069a0:	687a      	ldr	r2, [r7, #4]
 80069a2:	4413      	add	r3, r2
 80069a4:	781b      	ldrb	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d10e      	bne.n	80069c8 <mg_json_get+0x380>
 80069aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80069ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d10a      	bne.n	80069c8 <mg_json_get+0x380>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d005      	beq.n	80069c4 <mg_json_get+0x37c>
 80069b8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80069ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069bc:	1ad3      	subs	r3, r2, r3
 80069be:	1c5a      	adds	r2, r3, #1
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	601a      	str	r2, [r3, #0]
 80069c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80069c6:	e14f      	b.n	8006c68 <mg_json_get+0x620>
        if (depth == ed && ei >= 0) ci++;
 80069c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069cc:	429a      	cmp	r2, r3
 80069ce:	d105      	bne.n	80069dc <mg_json_get+0x394>
 80069d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	db02      	blt.n	80069dc <mg_json_get+0x394>
 80069d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80069d8:	3301      	adds	r3, #1
 80069da:	64fb      	str	r3, [r7, #76]	; 0x4c
        expecting = S_COMMA_OR_EOO;
 80069dc:	2303      	movs	r3, #3
 80069de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        break;
 80069e2:	e137      	b.n	8006c54 <mg_json_get+0x60c>

      case S_KEY:
        if (c == '"') {
 80069e4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80069e8:	2b22      	cmp	r3, #34	; 0x22
 80069ea:	d170      	bne.n	8006ace <mg_json_get+0x486>
          int n = mg_pass_string(&s[i + 1], len - i - 1);
 80069ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069ee:	3301      	adds	r3, #1
 80069f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80069f2:	18d0      	adds	r0, r2, r3
 80069f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80069f6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80069f8:	1ad3      	subs	r3, r2, r3
 80069fa:	3b01      	subs	r3, #1
 80069fc:	4619      	mov	r1, r3
 80069fe:	f7ff fc91 	bl	8006324 <mg_pass_string>
 8006a02:	63b8      	str	r0, [r7, #56]	; 0x38
          if (n < 0) return n;
 8006a04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	da01      	bge.n	8006a0e <mg_json_get+0x3c6>
 8006a0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a0c:	e12c      	b.n	8006c68 <mg_json_get+0x620>
          if (i + 1 + n >= len) return MG_JSON_NOT_FOUND;
 8006a0e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a10:	1c5a      	adds	r2, r3, #1
 8006a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a14:	4413      	add	r3, r2
 8006a16:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	dc02      	bgt.n	8006a22 <mg_json_get+0x3da>
 8006a1c:	f06f 0302 	mvn.w	r3, #2
 8006a20:	e122      	b.n	8006c68 <mg_json_get+0x620>
          if (depth < ed) return MG_JSON_NOT_FOUND;
 8006a22:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a26:	429a      	cmp	r2, r3
 8006a28:	da02      	bge.n	8006a30 <mg_json_get+0x3e8>
 8006a2a:	f06f 0302 	mvn.w	r3, #2
 8006a2e:	e11b      	b.n	8006c68 <mg_json_get+0x620>
          if (depth == ed && path[pos - 1] != '.') return MG_JSON_NOT_FOUND;
 8006a30:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a34:	429a      	cmp	r2, r3
 8006a36:	d109      	bne.n	8006a4c <mg_json_get+0x404>
 8006a38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a3a:	3b01      	subs	r3, #1
 8006a3c:	687a      	ldr	r2, [r7, #4]
 8006a3e:	4413      	add	r3, r2
 8006a40:	781b      	ldrb	r3, [r3, #0]
 8006a42:	2b2e      	cmp	r3, #46	; 0x2e
 8006a44:	d002      	beq.n	8006a4c <mg_json_get+0x404>
 8006a46:	f06f 0302 	mvn.w	r3, #2
 8006a4a:	e10d      	b.n	8006c68 <mg_json_get+0x620>
          // printf("K %s [%.*s] [%.*s] %d %d %d\n", path, pos, path, n,
          //  &s[i + 1], n, depth, ed);
          // NOTE(cpq): in the check sequence below is important.
          // strncmp() must go first: it fails fast if the remaining length of
          // the path is smaller than `n`.
          if (depth == ed && path[pos - 1] == '.' &&
 8006a4c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006a4e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d133      	bne.n	8006abc <mg_json_get+0x474>
 8006a54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a56:	3b01      	subs	r3, #1
 8006a58:	687a      	ldr	r2, [r7, #4]
 8006a5a:	4413      	add	r3, r2
 8006a5c:	781b      	ldrb	r3, [r3, #0]
 8006a5e:	2b2e      	cmp	r3, #46	; 0x2e
 8006a60:	d12c      	bne.n	8006abc <mg_json_get+0x474>
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8006a62:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a64:	3301      	adds	r3, #1
 8006a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006a68:	18d0      	adds	r0, r2, r3
 8006a6a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006a6c:	687a      	ldr	r2, [r7, #4]
 8006a6e:	4413      	add	r3, r2
 8006a70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006a72:	4619      	mov	r1, r3
 8006a74:	f00d fe91 	bl	801479a <strncmp>
 8006a78:	4603      	mov	r3, r0
          if (depth == ed && path[pos - 1] == '.' &&
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d11e      	bne.n	8006abc <mg_json_get+0x474>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006a7e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a82:	4413      	add	r3, r2
 8006a84:	461a      	mov	r2, r3
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	4413      	add	r3, r2
 8006a8a:	781b      	ldrb	r3, [r3, #0]
              strncmp(&s[i + 1], &path[pos], (size_t) n) == 0 &&
 8006a8c:	2b00      	cmp	r3, #0
 8006a8e:	d011      	beq.n	8006ab4 <mg_json_get+0x46c>
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006a90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006a92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a94:	4413      	add	r3, r2
 8006a96:	461a      	mov	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	2b2e      	cmp	r3, #46	; 0x2e
 8006aa0:	d008      	beq.n	8006ab4 <mg_json_get+0x46c>
               path[pos + n] == '[')) {
 8006aa2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006aa4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006aa6:	4413      	add	r3, r2
 8006aa8:	461a      	mov	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	4413      	add	r3, r2
 8006aae:	781b      	ldrb	r3, [r3, #0]
              (path[pos + n] == '\0' || path[pos + n] == '.' ||
 8006ab0:	2b5b      	cmp	r3, #91	; 0x5b
 8006ab2:	d103      	bne.n	8006abc <mg_json_get+0x474>
            pos += n;
 8006ab4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ab8:	4413      	add	r3, r2
 8006aba:	653b      	str	r3, [r7, #80]	; 0x50
          }
          i += n + 1;
 8006abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abe:	3301      	adds	r3, #1
 8006ac0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006ac2:	4413      	add	r3, r2
 8006ac4:	663b      	str	r3, [r7, #96]	; 0x60
          expecting = S_COLON;
 8006ac6:	2302      	movs	r3, #2
 8006ac8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          expecting = S_COMMA_OR_EOO;
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006acc:	e0c1      	b.n	8006c52 <mg_json_get+0x60a>
        } else if (c == '}') {  // Empty object
 8006ace:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ad2:	2b7d      	cmp	r3, #125	; 0x7d
 8006ad4:	d148      	bne.n	8006b68 <mg_json_get+0x520>
          MG_EOO('}');
 8006ad6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ad8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d106      	bne.n	8006aec <mg_json_get+0x4a4>
 8006ade:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ae0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006ae2:	429a      	cmp	r2, r3
 8006ae4:	d002      	beq.n	8006aec <mg_json_get+0x4a4>
 8006ae6:	f06f 0302 	mvn.w	r3, #2
 8006aea:	e0bd      	b.n	8006c68 <mg_json_get+0x620>
 8006aec:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006af0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006af2:	3b01      	subs	r3, #1
 8006af4:	3368      	adds	r3, #104	; 0x68
 8006af6:	443b      	add	r3, r7
 8006af8:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006afc:	3302      	adds	r3, #2
 8006afe:	429a      	cmp	r2, r3
 8006b00:	d008      	beq.n	8006b14 <mg_json_get+0x4cc>
 8006b02:	f06f 0301 	mvn.w	r3, #1
 8006b06:	e0af      	b.n	8006c68 <mg_json_get+0x620>
 8006b08:	0801607c 	.word	0x0801607c
 8006b0c:	08016084 	.word	0x08016084
 8006b10:	0801608c 	.word	0x0801608c
 8006b14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b16:	3b01      	subs	r3, #1
 8006b18:	65bb      	str	r3, [r7, #88]	; 0x58
 8006b1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b1c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d114      	bne.n	8006b4c <mg_json_get+0x504>
 8006b22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b24:	687a      	ldr	r2, [r7, #4]
 8006b26:	4413      	add	r3, r2
 8006b28:	781b      	ldrb	r3, [r3, #0]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d10e      	bne.n	8006b4c <mg_json_get+0x504>
 8006b2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006b30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d10a      	bne.n	8006b4c <mg_json_get+0x504>
 8006b36:	683b      	ldr	r3, [r7, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d005      	beq.n	8006b48 <mg_json_get+0x500>
 8006b3c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006b3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	1c5a      	adds	r2, r3, #1
 8006b44:	683b      	ldr	r3, [r7, #0]
 8006b46:	601a      	str	r2, [r3, #0]
 8006b48:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b4a:	e08d      	b.n	8006c68 <mg_json_get+0x620>
          expecting = S_COMMA_OR_EOO;
 8006b4c:	2303      	movs	r3, #3
 8006b4e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          if (depth == ed && ei >= 0) ci++;
 8006b52:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006b56:	429a      	cmp	r2, r3
 8006b58:	d17b      	bne.n	8006c52 <mg_json_get+0x60a>
 8006b5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	db78      	blt.n	8006c52 <mg_json_get+0x60a>
 8006b60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b62:	3301      	adds	r3, #1
 8006b64:	64fb      	str	r3, [r7, #76]	; 0x4c
        break;
 8006b66:	e074      	b.n	8006c52 <mg_json_get+0x60a>
          return MG_JSON_INVALID;
 8006b68:	f06f 0301 	mvn.w	r3, #1
 8006b6c:	e07c      	b.n	8006c68 <mg_json_get+0x620>

      case S_COLON:
        if (c == ':') {
 8006b6e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b72:	2b3a      	cmp	r3, #58	; 0x3a
 8006b74:	d103      	bne.n	8006b7e <mg_json_get+0x536>
          expecting = S_VALUE;
 8006b76:	2300      	movs	r3, #0
 8006b78:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006b7c:	e06a      	b.n	8006c54 <mg_json_get+0x60c>
          return MG_JSON_INVALID;
 8006b7e:	f06f 0301 	mvn.w	r3, #1
 8006b82:	e071      	b.n	8006c68 <mg_json_get+0x620>

      case S_COMMA_OR_EOO:
        if (depth <= 0) {
 8006b84:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dc02      	bgt.n	8006b90 <mg_json_get+0x548>
          return MG_JSON_INVALID;
 8006b8a:	f06f 0301 	mvn.w	r3, #1
 8006b8e:	e06b      	b.n	8006c68 <mg_json_get+0x620>
        } else if (c == ',') {
 8006b90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006b94:	2b2c      	cmp	r3, #44	; 0x2c
 8006b96:	d10d      	bne.n	8006bb4 <mg_json_get+0x56c>
          expecting = (nesting[depth - 1] == '{') ? S_KEY : S_VALUE;
 8006b98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006b9a:	3b01      	subs	r3, #1
 8006b9c:	3368      	adds	r3, #104	; 0x68
 8006b9e:	443b      	add	r3, r7
 8006ba0:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006ba4:	2b7b      	cmp	r3, #123	; 0x7b
 8006ba6:	bf0c      	ite	eq
 8006ba8:	2301      	moveq	r3, #1
 8006baa:	2300      	movne	r3, #0
 8006bac:	b2db      	uxtb	r3, r3
 8006bae:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
          MG_EOO('O');
          if (depth == ed && ei >= 0) ci++;
        } else {
          return MG_JSON_INVALID;
        }
        break;
 8006bb2:	e04f      	b.n	8006c54 <mg_json_get+0x60c>
        } else if (c == ']' || c == '}') {
 8006bb4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bb8:	2b5d      	cmp	r3, #93	; 0x5d
 8006bba:	d003      	beq.n	8006bc4 <mg_json_get+0x57c>
 8006bbc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006bc0:	2b7d      	cmp	r3, #125	; 0x7d
 8006bc2:	d13f      	bne.n	8006c44 <mg_json_get+0x5fc>
          MG_EOO('O');
 8006bc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	d106      	bne.n	8006bda <mg_json_get+0x592>
 8006bcc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006bce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006bd0:	429a      	cmp	r2, r3
 8006bd2:	d002      	beq.n	8006bda <mg_json_get+0x592>
 8006bd4:	f06f 0302 	mvn.w	r3, #2
 8006bd8:	e046      	b.n	8006c68 <mg_json_get+0x620>
 8006bda:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8006bde:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006be0:	3b01      	subs	r3, #1
 8006be2:	3368      	adds	r3, #104	; 0x68
 8006be4:	443b      	add	r3, r7
 8006be6:	f813 3c54 	ldrb.w	r3, [r3, #-84]
 8006bea:	3302      	adds	r3, #2
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d002      	beq.n	8006bf6 <mg_json_get+0x5ae>
 8006bf0:	f06f 0301 	mvn.w	r3, #1
 8006bf4:	e038      	b.n	8006c68 <mg_json_get+0x620>
 8006bf6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006bf8:	3b01      	subs	r3, #1
 8006bfa:	65bb      	str	r3, [r7, #88]	; 0x58
 8006bfc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006bfe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c00:	429a      	cmp	r2, r3
 8006c02:	d114      	bne.n	8006c2e <mg_json_get+0x5e6>
 8006c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	781b      	ldrb	r3, [r3, #0]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d10e      	bne.n	8006c2e <mg_json_get+0x5e6>
 8006c10:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006c12:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c14:	429a      	cmp	r2, r3
 8006c16:	d10a      	bne.n	8006c2e <mg_json_get+0x5e6>
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d005      	beq.n	8006c2a <mg_json_get+0x5e2>
 8006c1e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c20:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c22:	1ad3      	subs	r3, r2, r3
 8006c24:	1c5a      	adds	r2, r3, #1
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	601a      	str	r2, [r3, #0]
 8006c2a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006c2c:	e01c      	b.n	8006c68 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006c2e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006c30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006c32:	429a      	cmp	r2, r3
 8006c34:	d109      	bne.n	8006c4a <mg_json_get+0x602>
 8006c36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	db06      	blt.n	8006c4a <mg_json_get+0x602>
 8006c3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c3e:	3301      	adds	r3, #1
 8006c40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c42:	e002      	b.n	8006c4a <mg_json_get+0x602>
          return MG_JSON_INVALID;
 8006c44:	f06f 0301 	mvn.w	r3, #1
 8006c48:	e00e      	b.n	8006c68 <mg_json_get+0x620>
          if (depth == ed && ei >= 0) ci++;
 8006c4a:	bf00      	nop
        break;
 8006c4c:	e002      	b.n	8006c54 <mg_json_get+0x60c>
    if (c == ' ' || c == '\t' || c == '\n' || c == '\r') continue;
 8006c4e:	bf00      	nop
 8006c50:	e000      	b.n	8006c54 <mg_json_get+0x60c>
        break;
 8006c52:	bf00      	nop
  for (i = 0; i < len; i++) {
 8006c54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006c56:	3301      	adds	r3, #1
 8006c58:	663b      	str	r3, [r7, #96]	; 0x60
 8006c5a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006c5c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	f6ff ad22 	blt.w	80066a8 <mg_json_get+0x60>
    }
  }
  return MG_JSON_NOT_FOUND;
 8006c64:	f06f 0302 	mvn.w	r3, #2
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	376c      	adds	r7, #108	; 0x6c
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd90      	pop	{r4, r7, pc}

08006c70 <mg_json_get_num>:

bool mg_json_get_num(struct mg_str json, const char *path, double *v) {
 8006c70:	b590      	push	{r4, r7, lr}
 8006c72:	b089      	sub	sp, #36	; 0x24
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	f107 0408 	add.w	r4, r7, #8
 8006c7a:	e884 0003 	stmia.w	r4, {r0, r1}
 8006c7e:	607a      	str	r2, [r7, #4]
 8006c80:	603b      	str	r3, [r7, #0]
  int n, toklen, found = 0;
 8006c82:	2300      	movs	r3, #0
 8006c84:	61fb      	str	r3, [r7, #28]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006c86:	f107 0314 	add.w	r3, r7, #20
 8006c8a:	687a      	ldr	r2, [r7, #4]
 8006c8c:	f107 0108 	add.w	r1, r7, #8
 8006c90:	c903      	ldmia	r1, {r0, r1}
 8006c92:	f7ff fcd9 	bl	8006648 <mg_json_get>
 8006c96:	61b8      	str	r0, [r7, #24]
 8006c98:	69bb      	ldr	r3, [r7, #24]
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	db23      	blt.n	8006ce6 <mg_json_get_num+0x76>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006c9e:	68ba      	ldr	r2, [r7, #8]
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	781b      	ldrb	r3, [r3, #0]
  if ((n = mg_json_get(json, path, &toklen)) >= 0 &&
 8006ca6:	2b2d      	cmp	r3, #45	; 0x2d
 8006ca8:	d00b      	beq.n	8006cc2 <mg_json_get_num+0x52>
      (json.ptr[n] == '-' || (json.ptr[n] >= '0' && json.ptr[n] <= '9'))) {
 8006caa:	68ba      	ldr	r2, [r7, #8]
 8006cac:	69bb      	ldr	r3, [r7, #24]
 8006cae:	4413      	add	r3, r2
 8006cb0:	781b      	ldrb	r3, [r3, #0]
 8006cb2:	2b2f      	cmp	r3, #47	; 0x2f
 8006cb4:	d917      	bls.n	8006ce6 <mg_json_get_num+0x76>
 8006cb6:	68ba      	ldr	r2, [r7, #8]
 8006cb8:	69bb      	ldr	r3, [r7, #24]
 8006cba:	4413      	add	r3, r2
 8006cbc:	781b      	ldrb	r3, [r3, #0]
 8006cbe:	2b39      	cmp	r3, #57	; 0x39
 8006cc0:	d811      	bhi.n	8006ce6 <mg_json_get_num+0x76>
    if (v != NULL) *v = mg_atod(json.ptr + n, toklen, NULL);
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00c      	beq.n	8006ce2 <mg_json_get_num+0x72>
 8006cc8:	68ba      	ldr	r2, [r7, #8]
 8006cca:	69bb      	ldr	r3, [r7, #24]
 8006ccc:	4413      	add	r3, r2
 8006cce:	6979      	ldr	r1, [r7, #20]
 8006cd0:	2200      	movs	r2, #0
 8006cd2:	4618      	mov	r0, r3
 8006cd4:	f7ff fb68 	bl	80063a8 <mg_atod>
 8006cd8:	eeb0 7b40 	vmov.f64	d7, d0
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	ed83 7b00 	vstr	d7, [r3]
    found = 1;
 8006ce2:	2301      	movs	r3, #1
 8006ce4:	61fb      	str	r3, [r7, #28]
  }
  return found;
 8006ce6:	69fb      	ldr	r3, [r7, #28]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	bf14      	ite	ne
 8006cec:	2301      	movne	r3, #1
 8006cee:	2300      	moveq	r3, #0
 8006cf0:	b2db      	uxtb	r3, r3
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3724      	adds	r7, #36	; 0x24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd90      	pop	{r4, r7, pc}

08006cfa <mg_json_get_bool>:

bool mg_json_get_bool(struct mg_str json, const char *path, bool *v) {
 8006cfa:	b590      	push	{r4, r7, lr}
 8006cfc:	b087      	sub	sp, #28
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	f107 0408 	add.w	r4, r7, #8
 8006d04:	e884 0003 	stmia.w	r4, {r0, r1}
 8006d08:	607a      	str	r2, [r7, #4]
 8006d0a:	603b      	str	r3, [r7, #0]
  int found = 0, off = mg_json_get(json, path, NULL);
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	617b      	str	r3, [r7, #20]
 8006d10:	2300      	movs	r3, #0
 8006d12:	687a      	ldr	r2, [r7, #4]
 8006d14:	f107 0108 	add.w	r1, r7, #8
 8006d18:	c903      	ldmia	r1, {r0, r1}
 8006d1a:	f7ff fc95 	bl	8006648 <mg_json_get>
 8006d1e:	6138      	str	r0, [r7, #16]
  if (off >= 0 && (json.ptr[off] == 't' || json.ptr[off] == 'f')) {
 8006d20:	693b      	ldr	r3, [r7, #16]
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	db1b      	blt.n	8006d5e <mg_json_get_bool+0x64>
 8006d26:	68ba      	ldr	r2, [r7, #8]
 8006d28:	693b      	ldr	r3, [r7, #16]
 8006d2a:	4413      	add	r3, r2
 8006d2c:	781b      	ldrb	r3, [r3, #0]
 8006d2e:	2b74      	cmp	r3, #116	; 0x74
 8006d30:	d005      	beq.n	8006d3e <mg_json_get_bool+0x44>
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	693b      	ldr	r3, [r7, #16]
 8006d36:	4413      	add	r3, r2
 8006d38:	781b      	ldrb	r3, [r3, #0]
 8006d3a:	2b66      	cmp	r3, #102	; 0x66
 8006d3c:	d10f      	bne.n	8006d5e <mg_json_get_bool+0x64>
    if (v != NULL) *v = json.ptr[off] == 't';
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d00a      	beq.n	8006d5a <mg_json_get_bool+0x60>
 8006d44:	68ba      	ldr	r2, [r7, #8]
 8006d46:	693b      	ldr	r3, [r7, #16]
 8006d48:	4413      	add	r3, r2
 8006d4a:	781b      	ldrb	r3, [r3, #0]
 8006d4c:	2b74      	cmp	r3, #116	; 0x74
 8006d4e:	bf0c      	ite	eq
 8006d50:	2301      	moveq	r3, #1
 8006d52:	2300      	movne	r3, #0
 8006d54:	b2da      	uxtb	r2, r3
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	701a      	strb	r2, [r3, #0]
    found = 1;
 8006d5a:	2301      	movs	r3, #1
 8006d5c:	617b      	str	r3, [r7, #20]
  }
  return found;
 8006d5e:	697b      	ldr	r3, [r7, #20]
 8006d60:	2b00      	cmp	r3, #0
 8006d62:	bf14      	ite	ne
 8006d64:	2301      	movne	r3, #1
 8006d66:	2300      	moveq	r3, #0
 8006d68:	b2db      	uxtb	r3, r3
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	371c      	adds	r7, #28
 8006d6e:	46bd      	mov	sp, r7
 8006d70:	bd90      	pop	{r4, r7, pc}

08006d72 <mg_json_unescape>:

bool mg_json_unescape(struct mg_str s, char *to, size_t n) {
 8006d72:	b590      	push	{r4, r7, lr}
 8006d74:	b089      	sub	sp, #36	; 0x24
 8006d76:	af00      	add	r7, sp, #0
 8006d78:	f107 0408 	add.w	r4, r7, #8
 8006d7c:	e884 0003 	stmia.w	r4, {r0, r1}
 8006d80:	607a      	str	r2, [r7, #4]
 8006d82:	603b      	str	r3, [r7, #0]
  size_t i, j;
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8006d84:	2300      	movs	r3, #0
 8006d86:	61fb      	str	r3, [r7, #28]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	61bb      	str	r3, [r7, #24]
 8006d8c:	e065      	b.n	8006e5a <mg_json_unescape+0xe8>
    if (s.ptr[i] == '\\' && i + 5 < s.len && s.ptr[i + 1] == 'u') {
 8006d8e:	68ba      	ldr	r2, [r7, #8]
 8006d90:	69fb      	ldr	r3, [r7, #28]
 8006d92:	4413      	add	r3, r2
 8006d94:	781b      	ldrb	r3, [r3, #0]
 8006d96:	2b5c      	cmp	r3, #92	; 0x5c
 8006d98:	d12d      	bne.n	8006df6 <mg_json_unescape+0x84>
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	1d5a      	adds	r2, r3, #5
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	429a      	cmp	r2, r3
 8006da2:	d228      	bcs.n	8006df6 <mg_json_unescape+0x84>
 8006da4:	68ba      	ldr	r2, [r7, #8]
 8006da6:	69fb      	ldr	r3, [r7, #28]
 8006da8:	3301      	adds	r3, #1
 8006daa:	4413      	add	r3, r2
 8006dac:	781b      	ldrb	r3, [r3, #0]
 8006dae:	2b75      	cmp	r3, #117	; 0x75
 8006db0:	d121      	bne.n	8006df6 <mg_json_unescape+0x84>
      //  \uXXXX escape. We could process a simple one-byte chars
      // \u00xx from the ASCII range. More complex chars would require
      // dragging in a UTF8 library, which is too much for us
      if (s.ptr[i + 2] != '0' || s.ptr[i + 3] != '0') return false;  // Give up
 8006db2:	68ba      	ldr	r2, [r7, #8]
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	3302      	adds	r3, #2
 8006db8:	4413      	add	r3, r2
 8006dba:	781b      	ldrb	r3, [r3, #0]
 8006dbc:	2b30      	cmp	r3, #48	; 0x30
 8006dbe:	d106      	bne.n	8006dce <mg_json_unescape+0x5c>
 8006dc0:	68ba      	ldr	r2, [r7, #8]
 8006dc2:	69fb      	ldr	r3, [r7, #28]
 8006dc4:	3303      	adds	r3, #3
 8006dc6:	4413      	add	r3, r2
 8006dc8:	781b      	ldrb	r3, [r3, #0]
 8006dca:	2b30      	cmp	r3, #48	; 0x30
 8006dcc:	d001      	beq.n	8006dd2 <mg_json_unescape+0x60>
 8006dce:	2300      	movs	r3, #0
 8006dd0:	e05a      	b.n	8006e88 <mg_json_unescape+0x116>
      ((unsigned char *) to)[j] = (unsigned char) mg_unhexn(s.ptr + i + 4, 2);
 8006dd2:	68ba      	ldr	r2, [r7, #8]
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	3304      	adds	r3, #4
 8006dd8:	4413      	add	r3, r2
 8006dda:	2102      	movs	r1, #2
 8006ddc:	4618      	mov	r0, r3
 8006dde:	f003 f879 	bl	8009ed4 <mg_unhexn>
 8006de2:	4601      	mov	r1, r0
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	69bb      	ldr	r3, [r7, #24]
 8006de8:	4413      	add	r3, r2
 8006dea:	b2ca      	uxtb	r2, r1
 8006dec:	701a      	strb	r2, [r3, #0]

      i += 5;
 8006dee:	69fb      	ldr	r3, [r7, #28]
 8006df0:	3305      	adds	r3, #5
 8006df2:	61fb      	str	r3, [r7, #28]
 8006df4:	e02b      	b.n	8006e4e <mg_json_unescape+0xdc>
    } else if (s.ptr[i] == '\\' && i + 1 < s.len) {
 8006df6:	68ba      	ldr	r2, [r7, #8]
 8006df8:	69fb      	ldr	r3, [r7, #28]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	781b      	ldrb	r3, [r3, #0]
 8006dfe:	2b5c      	cmp	r3, #92	; 0x5c
 8006e00:	d11d      	bne.n	8006e3e <mg_json_unescape+0xcc>
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	1c5a      	adds	r2, r3, #1
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d218      	bcs.n	8006e3e <mg_json_unescape+0xcc>
      char c = json_esc(s.ptr[i + 1], 0);
 8006e0c:	68ba      	ldr	r2, [r7, #8]
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	3301      	adds	r3, #1
 8006e12:	4413      	add	r3, r2
 8006e14:	781b      	ldrb	r3, [r3, #0]
 8006e16:	2100      	movs	r1, #0
 8006e18:	4618      	mov	r0, r3
 8006e1a:	f7ff fa53 	bl	80062c4 <json_esc>
 8006e1e:	4603      	mov	r3, r0
 8006e20:	75fb      	strb	r3, [r7, #23]
      if (c == 0) return false;
 8006e22:	7dfb      	ldrb	r3, [r7, #23]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d101      	bne.n	8006e2c <mg_json_unescape+0xba>
 8006e28:	2300      	movs	r3, #0
 8006e2a:	e02d      	b.n	8006e88 <mg_json_unescape+0x116>
      to[j] = c;
 8006e2c:	687a      	ldr	r2, [r7, #4]
 8006e2e:	69bb      	ldr	r3, [r7, #24]
 8006e30:	4413      	add	r3, r2
 8006e32:	7dfa      	ldrb	r2, [r7, #23]
 8006e34:	701a      	strb	r2, [r3, #0]
      i++;
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	3301      	adds	r3, #1
 8006e3a:	61fb      	str	r3, [r7, #28]
    } else if (s.ptr[i] == '\\' && i + 1 < s.len) {
 8006e3c:	e007      	b.n	8006e4e <mg_json_unescape+0xdc>
    } else {
      to[j] = s.ptr[i];
 8006e3e:	68ba      	ldr	r2, [r7, #8]
 8006e40:	69fb      	ldr	r3, [r7, #28]
 8006e42:	441a      	add	r2, r3
 8006e44:	6879      	ldr	r1, [r7, #4]
 8006e46:	69bb      	ldr	r3, [r7, #24]
 8006e48:	440b      	add	r3, r1
 8006e4a:	7812      	ldrb	r2, [r2, #0]
 8006e4c:	701a      	strb	r2, [r3, #0]
  for (i = 0, j = 0; i < s.len && j < n; i++, j++) {
 8006e4e:	69fb      	ldr	r3, [r7, #28]
 8006e50:	3301      	adds	r3, #1
 8006e52:	61fb      	str	r3, [r7, #28]
 8006e54:	69bb      	ldr	r3, [r7, #24]
 8006e56:	3301      	adds	r3, #1
 8006e58:	61bb      	str	r3, [r7, #24]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	69fa      	ldr	r2, [r7, #28]
 8006e5e:	429a      	cmp	r2, r3
 8006e60:	d203      	bcs.n	8006e6a <mg_json_unescape+0xf8>
 8006e62:	69ba      	ldr	r2, [r7, #24]
 8006e64:	683b      	ldr	r3, [r7, #0]
 8006e66:	429a      	cmp	r2, r3
 8006e68:	d391      	bcc.n	8006d8e <mg_json_unescape+0x1c>
    }
  }
  if (j >= n) return false;
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	429a      	cmp	r2, r3
 8006e70:	d301      	bcc.n	8006e76 <mg_json_unescape+0x104>
 8006e72:	2300      	movs	r3, #0
 8006e74:	e008      	b.n	8006e88 <mg_json_unescape+0x116>
  if (n > 0) to[j] = '\0';
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d004      	beq.n	8006e86 <mg_json_unescape+0x114>
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	69bb      	ldr	r3, [r7, #24]
 8006e80:	4413      	add	r3, r2
 8006e82:	2200      	movs	r2, #0
 8006e84:	701a      	strb	r2, [r3, #0]
  return true;
 8006e86:	2301      	movs	r3, #1
}
 8006e88:	4618      	mov	r0, r3
 8006e8a:	3724      	adds	r7, #36	; 0x24
 8006e8c:	46bd      	mov	sp, r7
 8006e8e:	bd90      	pop	{r4, r7, pc}

08006e90 <mg_json_get_str>:

char *mg_json_get_str(struct mg_str json, const char *path) {
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b08a      	sub	sp, #40	; 0x28
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	f107 0308 	add.w	r3, r7, #8
 8006e9a:	e883 0003 	stmia.w	r3, {r0, r1}
 8006e9e:	607a      	str	r2, [r7, #4]
  char *result = NULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
  int len = 0, off = mg_json_get(json, path, &len);
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	617b      	str	r3, [r7, #20]
 8006ea8:	f107 0314 	add.w	r3, r7, #20
 8006eac:	687a      	ldr	r2, [r7, #4]
 8006eae:	f107 0108 	add.w	r1, r7, #8
 8006eb2:	c903      	ldmia	r1, {r0, r1}
 8006eb4:	f7ff fbc8 	bl	8006648 <mg_json_get>
 8006eb8:	6238      	str	r0, [r7, #32]
  if (off >= 0 && len > 1 && json.ptr[off] == '"') {
 8006eba:	6a3b      	ldr	r3, [r7, #32]
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	db30      	blt.n	8006f22 <mg_json_get_str+0x92>
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	2b01      	cmp	r3, #1
 8006ec4:	dd2d      	ble.n	8006f22 <mg_json_get_str+0x92>
 8006ec6:	68ba      	ldr	r2, [r7, #8]
 8006ec8:	6a3b      	ldr	r3, [r7, #32]
 8006eca:	4413      	add	r3, r2
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	2b22      	cmp	r3, #34	; 0x22
 8006ed0:	d127      	bne.n	8006f22 <mg_json_get_str+0x92>
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8006ed2:	697b      	ldr	r3, [r7, #20]
 8006ed4:	4619      	mov	r1, r3
 8006ed6:	2001      	movs	r0, #1
 8006ed8:	f00d f832 	bl	8013f40 <calloc>
 8006edc:	4603      	mov	r3, r0
 8006ede:	627b      	str	r3, [r7, #36]	; 0x24
 8006ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d01d      	beq.n	8006f22 <mg_json_get_str+0x92>
        !mg_json_unescape(mg_str_n(json.ptr + off + 1, (size_t) (len - 2)),
 8006ee6:	68ba      	ldr	r2, [r7, #8]
 8006ee8:	6a3b      	ldr	r3, [r7, #32]
 8006eea:	3301      	adds	r3, #1
 8006eec:	18d1      	adds	r1, r2, r3
 8006eee:	697b      	ldr	r3, [r7, #20]
 8006ef0:	3b02      	subs	r3, #2
 8006ef2:	461a      	mov	r2, r3
 8006ef4:	f107 0318 	add.w	r3, r7, #24
 8006ef8:	4618      	mov	r0, r3
 8006efa:	f002 fc76 	bl	80097ea <mg_str_n>
 8006efe:	697b      	ldr	r3, [r7, #20]
 8006f00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f02:	f107 0118 	add.w	r1, r7, #24
 8006f06:	c903      	ldmia	r1, {r0, r1}
 8006f08:	f7ff ff33 	bl	8006d72 <mg_json_unescape>
 8006f0c:	4603      	mov	r3, r0
 8006f0e:	f083 0301 	eor.w	r3, r3, #1
 8006f12:	b2db      	uxtb	r3, r3
    if ((result = (char *) calloc(1, (size_t) len)) != NULL &&
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d004      	beq.n	8006f22 <mg_json_get_str+0x92>
                          result, (size_t) len)) {
      free(result);
 8006f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006f1a:	f00d f837 	bl	8013f8c <free>
      result = NULL;
 8006f1e:	2300      	movs	r3, #0
 8006f20:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  return result;
 8006f22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3728      	adds	r7, #40	; 0x28
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}

08006f2c <mg_json_get_long>:
    if (slen != NULL) *slen = len / 2 - 1;
  }
  return result;
}

long mg_json_get_long(struct mg_str json, const char *path, long dflt) {
 8006f2c:	b590      	push	{r4, r7, lr}
 8006f2e:	b089      	sub	sp, #36	; 0x24
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	f107 0408 	add.w	r4, r7, #8
 8006f36:	e884 0003 	stmia.w	r4, {r0, r1}
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
  double dv;
  long result = dflt;
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	61fb      	str	r3, [r7, #28]
  if (mg_json_get_num(json, path, &dv)) result = (long) dv;
 8006f42:	f107 0310 	add.w	r3, r7, #16
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	f107 0108 	add.w	r1, r7, #8
 8006f4c:	c903      	ldmia	r1, {r0, r1}
 8006f4e:	f7ff fe8f 	bl	8006c70 <mg_json_get_num>
 8006f52:	4603      	mov	r3, r0
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	d006      	beq.n	8006f66 <mg_json_get_long+0x3a>
 8006f58:	ed97 7b04 	vldr	d7, [r7, #16]
 8006f5c:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8006f60:	ee17 3a90 	vmov	r3, s15
 8006f64:	61fb      	str	r3, [r7, #28]
  return result;
 8006f66:	69fb      	ldr	r3, [r7, #28]
}
 8006f68:	4618      	mov	r0, r3
 8006f6a:	3724      	adds	r7, #36	; 0x24
 8006f6c:	46bd      	mov	sp, r7
 8006f6e:	bd90      	pop	{r4, r7, pc}

08006f70 <logc>:
void mg_log_set_fn(mg_pfn_t fn, void *param) {
  s_log_func = fn;
  s_log_func_param = param;
}

static void logc(unsigned char c) {
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b082      	sub	sp, #8
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	4603      	mov	r3, r0
 8006f78:	71fb      	strb	r3, [r7, #7]
  s_log_func((char) c, s_log_func_param);
 8006f7a:	4b05      	ldr	r3, [pc, #20]	; (8006f90 <logc+0x20>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	4a05      	ldr	r2, [pc, #20]	; (8006f94 <logc+0x24>)
 8006f80:	6811      	ldr	r1, [r2, #0]
 8006f82:	79fa      	ldrb	r2, [r7, #7]
 8006f84:	4610      	mov	r0, r2
 8006f86:	4798      	blx	r3
}
 8006f88:	bf00      	nop
 8006f8a:	3708      	adds	r7, #8
 8006f8c:	46bd      	mov	sp, r7
 8006f8e:	bd80      	pop	{r7, pc}
 8006f90:	24000248 	.word	0x24000248
 8006f94:	24000590 	.word	0x24000590

08006f98 <logs>:

static void logs(const char *buf, size_t len) {
 8006f98:	b580      	push	{r7, lr}
 8006f9a:	b084      	sub	sp, #16
 8006f9c:	af00      	add	r7, sp, #0
 8006f9e:	6078      	str	r0, [r7, #4]
 8006fa0:	6039      	str	r1, [r7, #0]
  size_t i;
  for (i = 0; i < len; i++) logc(((unsigned char *) buf)[i]);
 8006fa2:	2300      	movs	r3, #0
 8006fa4:	60fb      	str	r3, [r7, #12]
 8006fa6:	e009      	b.n	8006fbc <logs+0x24>
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	4413      	add	r3, r2
 8006fae:	781b      	ldrb	r3, [r3, #0]
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	f7ff ffdd 	bl	8006f70 <logc>
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	3301      	adds	r3, #1
 8006fba:	60fb      	str	r3, [r7, #12]
 8006fbc:	68fa      	ldr	r2, [r7, #12]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	429a      	cmp	r2, r3
 8006fc2:	d3f1      	bcc.n	8006fa8 <logs+0x10>
}
 8006fc4:	bf00      	nop
 8006fc6:	bf00      	nop
 8006fc8:	3710      	adds	r7, #16
 8006fca:	46bd      	mov	sp, r7
 8006fcc:	bd80      	pop	{r7, pc}
	...

08006fd0 <mg_log_set>:

void mg_log_set(int log_level) {
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b082      	sub	sp, #8
 8006fd4:	af00      	add	r7, sp, #0
 8006fd6:	6078      	str	r0, [r7, #4]
  MG_DEBUG(("Setting log level to %d", log_level));
 8006fd8:	4b0a      	ldr	r3, [pc, #40]	; (8007004 <mg_log_set+0x34>)
 8006fda:	f640 22b9 	movw	r2, #2745	; 0xab9
 8006fde:	490a      	ldr	r1, [pc, #40]	; (8007008 <mg_log_set+0x38>)
 8006fe0:	2003      	movs	r0, #3
 8006fe2:	f000 f817 	bl	8007014 <mg_log_prefix>
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d003      	beq.n	8006ff4 <mg_log_set+0x24>
 8006fec:	6879      	ldr	r1, [r7, #4]
 8006fee:	4807      	ldr	r0, [pc, #28]	; (800700c <mg_log_set+0x3c>)
 8006ff0:	f000 f86a 	bl	80070c8 <mg_log>
  s_level = log_level;
 8006ff4:	4a06      	ldr	r2, [pc, #24]	; (8007010 <mg_log_set+0x40>)
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6013      	str	r3, [r2, #0]
}
 8006ffa:	bf00      	nop
 8006ffc:	3708      	adds	r7, #8
 8006ffe:	46bd      	mov	sp, r7
 8007000:	bd80      	pop	{r7, pc}
 8007002:	bf00      	nop
 8007004:	08017404 	.word	0x08017404
 8007008:	0801544c 	.word	0x0801544c
 800700c:	08016094 	.word	0x08016094
 8007010:	24000244 	.word	0x24000244

08007014 <mg_log_prefix>:

bool mg_log_prefix(int level, const char *file, int line, const char *fname) {
 8007014:	b590      	push	{r4, r7, lr}
 8007016:	b099      	sub	sp, #100	; 0x64
 8007018:	af06      	add	r7, sp, #24
 800701a:	60f8      	str	r0, [r7, #12]
 800701c:	60b9      	str	r1, [r7, #8]
 800701e:	607a      	str	r2, [r7, #4]
 8007020:	603b      	str	r3, [r7, #0]
  if (level <= s_level) {
 8007022:	4b27      	ldr	r3, [pc, #156]	; (80070c0 <mg_log_prefix+0xac>)
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	429a      	cmp	r2, r3
 800702a:	dc43      	bgt.n	80070b4 <mg_log_prefix+0xa0>
    const char *p = strrchr(file, '/');
 800702c:	212f      	movs	r1, #47	; 0x2f
 800702e:	68b8      	ldr	r0, [r7, #8]
 8007030:	f00d fbc5 	bl	80147be <strrchr>
 8007034:	6478      	str	r0, [r7, #68]	; 0x44
    char buf[41];
    size_t n;
    if (p == NULL) p = strrchr(file, '\\');
 8007036:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007038:	2b00      	cmp	r3, #0
 800703a:	d104      	bne.n	8007046 <mg_log_prefix+0x32>
 800703c:	215c      	movs	r1, #92	; 0x5c
 800703e:	68b8      	ldr	r0, [r7, #8]
 8007040:	f00d fbbd 	bl	80147be <strrchr>
 8007044:	6478      	str	r0, [r7, #68]	; 0x44
    n = mg_snprintf(buf, sizeof(buf), "%-6llx %d %s:%d:%s", mg_millis(), level,
 8007046:	f7f9 fdef 	bl	8000c28 <mg_millis>
 800704a:	4602      	mov	r2, r0
 800704c:	460b      	mov	r3, r1
 800704e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007050:	2900      	cmp	r1, #0
 8007052:	d002      	beq.n	800705a <mg_log_prefix+0x46>
 8007054:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007056:	3101      	adds	r1, #1
 8007058:	e000      	b.n	800705c <mg_log_prefix+0x48>
 800705a:	68b9      	ldr	r1, [r7, #8]
 800705c:	f107 0414 	add.w	r4, r7, #20
 8007060:	6838      	ldr	r0, [r7, #0]
 8007062:	9005      	str	r0, [sp, #20]
 8007064:	6878      	ldr	r0, [r7, #4]
 8007066:	9004      	str	r0, [sp, #16]
 8007068:	9103      	str	r1, [sp, #12]
 800706a:	68f9      	ldr	r1, [r7, #12]
 800706c:	9102      	str	r1, [sp, #8]
 800706e:	e9cd 2300 	strd	r2, r3, [sp]
 8007072:	4a14      	ldr	r2, [pc, #80]	; (80070c4 <mg_log_prefix+0xb0>)
 8007074:	2129      	movs	r1, #41	; 0x29
 8007076:	4620      	mov	r0, r4
 8007078:	f001 fdc0 	bl	8008bfc <mg_snprintf>
 800707c:	6438      	str	r0, [r7, #64]	; 0x40
                    p == NULL ? file : p + 1, line, fname);
    if (n > sizeof(buf) - 2) n = sizeof(buf) - 2;
 800707e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007080:	2b27      	cmp	r3, #39	; 0x27
 8007082:	d90a      	bls.n	800709a <mg_log_prefix+0x86>
 8007084:	2327      	movs	r3, #39	; 0x27
 8007086:	643b      	str	r3, [r7, #64]	; 0x40
    while (n < sizeof(buf)) buf[n++] = ' ';
 8007088:	e007      	b.n	800709a <mg_log_prefix+0x86>
 800708a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800708c:	1c5a      	adds	r2, r3, #1
 800708e:	643a      	str	r2, [r7, #64]	; 0x40
 8007090:	3348      	adds	r3, #72	; 0x48
 8007092:	443b      	add	r3, r7
 8007094:	2220      	movs	r2, #32
 8007096:	f803 2c34 	strb.w	r2, [r3, #-52]
 800709a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800709c:	2b28      	cmp	r3, #40	; 0x28
 800709e:	d9f4      	bls.n	800708a <mg_log_prefix+0x76>
    logs(buf, n - 1);
 80070a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80070a2:	1e5a      	subs	r2, r3, #1
 80070a4:	f107 0314 	add.w	r3, r7, #20
 80070a8:	4611      	mov	r1, r2
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff ff74 	bl	8006f98 <logs>
    return true;
 80070b0:	2301      	movs	r3, #1
 80070b2:	e000      	b.n	80070b6 <mg_log_prefix+0xa2>
  } else {
    return false;
 80070b4:	2300      	movs	r3, #0
  }
}
 80070b6:	4618      	mov	r0, r3
 80070b8:	374c      	adds	r7, #76	; 0x4c
 80070ba:	46bd      	mov	sp, r7
 80070bc:	bd90      	pop	{r4, r7, pc}
 80070be:	bf00      	nop
 80070c0:	24000244 	.word	0x24000244
 80070c4:	080160ac 	.word	0x080160ac

080070c8 <mg_log>:

void mg_log(const char *fmt, ...) {
 80070c8:	b40f      	push	{r0, r1, r2, r3}
 80070ca:	b580      	push	{r7, lr}
 80070cc:	b082      	sub	sp, #8
 80070ce:	af00      	add	r7, sp, #0
  va_list ap;
  va_start(ap, fmt);
 80070d0:	f107 0314 	add.w	r3, r7, #20
 80070d4:	607b      	str	r3, [r7, #4]
  mg_vxprintf(s_log_func, s_log_func_param, fmt, &ap);
 80070d6:	4b09      	ldr	r3, [pc, #36]	; (80070fc <mg_log+0x34>)
 80070d8:	6818      	ldr	r0, [r3, #0]
 80070da:	4b09      	ldr	r3, [pc, #36]	; (8007100 <mg_log+0x38>)
 80070dc:	6819      	ldr	r1, [r3, #0]
 80070de:	1d3b      	adds	r3, r7, #4
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	f7fb fc85 	bl	80029f0 <mg_vxprintf>
  va_end(ap);
  logc((unsigned char) '\n');
 80070e6:	200a      	movs	r0, #10
 80070e8:	f7ff ff42 	bl	8006f70 <logc>
}
 80070ec:	bf00      	nop
 80070ee:	3708      	adds	r7, #8
 80070f0:	46bd      	mov	sp, r7
 80070f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80070f6:	b004      	add	sp, #16
 80070f8:	4770      	bx	lr
 80070fa:	bf00      	nop
 80070fc:	24000248 	.word	0x24000248
 8007100:	24000590 	.word	0x24000590

08007104 <nibble>:

static unsigned char nibble(unsigned c) {
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
 800710a:	6078      	str	r0, [r7, #4]
  return (unsigned char) (c < 10 ? c + '0' : c + 'W');
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b09      	cmp	r3, #9
 8007110:	d804      	bhi.n	800711c <nibble+0x18>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	b2db      	uxtb	r3, r3
 8007116:	3330      	adds	r3, #48	; 0x30
 8007118:	b2db      	uxtb	r3, r3
 800711a:	e003      	b.n	8007124 <nibble+0x20>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	b2db      	uxtb	r3, r3
 8007120:	3357      	adds	r3, #87	; 0x57
 8007122:	b2db      	uxtb	r3, r3
}
 8007124:	4618      	mov	r0, r3
 8007126:	370c      	adds	r7, #12
 8007128:	46bd      	mov	sp, r7
 800712a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712e:	4770      	bx	lr

08007130 <mg_hexdump>:

#define ISPRINT(x) ((x) >= ' ' && (x) <= '~')
void mg_hexdump(const void *buf, size_t len) {
 8007130:	b580      	push	{r7, lr}
 8007132:	b08a      	sub	sp, #40	; 0x28
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
 8007138:	6039      	str	r1, [r7, #0]
  const unsigned char *p = (const unsigned char *) buf;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	61fb      	str	r3, [r7, #28]
  unsigned char ascii[16], alen = 0;
 800713e:	2300      	movs	r3, #0
 8007140:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  size_t i;
  for (i = 0; i < len; i++) {
 8007144:	2300      	movs	r3, #0
 8007146:	623b      	str	r3, [r7, #32]
 8007148:	e07a      	b.n	8007240 <mg_hexdump+0x110>
    if ((i % 16) == 0) {
 800714a:	6a3b      	ldr	r3, [r7, #32]
 800714c:	f003 030f 	and.w	r3, r3, #15
 8007150:	2b00      	cmp	r3, #0
 8007152:	d13a      	bne.n	80071ca <mg_hexdump+0x9a>
      // Print buffered ascii chars
      if (i > 0) logs("  ", 2), logs((char *) ascii, 16), logc('\n'), alen = 0;
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d00f      	beq.n	800717a <mg_hexdump+0x4a>
 800715a:	2102      	movs	r1, #2
 800715c:	484c      	ldr	r0, [pc, #304]	; (8007290 <mg_hexdump+0x160>)
 800715e:	f7ff ff1b 	bl	8006f98 <logs>
 8007162:	f107 030c 	add.w	r3, r7, #12
 8007166:	2110      	movs	r1, #16
 8007168:	4618      	mov	r0, r3
 800716a:	f7ff ff15 	bl	8006f98 <logs>
 800716e:	200a      	movs	r0, #10
 8007170:	f7ff fefe 	bl	8006f70 <logc>
 8007174:	2300      	movs	r3, #0
 8007176:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      // Print hex address, then \t
      logc(nibble((i >> 12) & 15)), logc(nibble((i >> 8) & 15)),
 800717a:	6a3b      	ldr	r3, [r7, #32]
 800717c:	0b1b      	lsrs	r3, r3, #12
 800717e:	f003 030f 	and.w	r3, r3, #15
 8007182:	4618      	mov	r0, r3
 8007184:	f7ff ffbe 	bl	8007104 <nibble>
 8007188:	4603      	mov	r3, r0
 800718a:	4618      	mov	r0, r3
 800718c:	f7ff fef0 	bl	8006f70 <logc>
 8007190:	6a3b      	ldr	r3, [r7, #32]
 8007192:	0a1b      	lsrs	r3, r3, #8
 8007194:	f003 030f 	and.w	r3, r3, #15
 8007198:	4618      	mov	r0, r3
 800719a:	f7ff ffb3 	bl	8007104 <nibble>
 800719e:	4603      	mov	r3, r0
 80071a0:	4618      	mov	r0, r3
 80071a2:	f7ff fee5 	bl	8006f70 <logc>
          logc(nibble((i >> 4) & 15)), logc('0'), logs("   ", 3);
 80071a6:	6a3b      	ldr	r3, [r7, #32]
 80071a8:	091b      	lsrs	r3, r3, #4
 80071aa:	f003 030f 	and.w	r3, r3, #15
 80071ae:	4618      	mov	r0, r3
 80071b0:	f7ff ffa8 	bl	8007104 <nibble>
 80071b4:	4603      	mov	r3, r0
 80071b6:	4618      	mov	r0, r3
 80071b8:	f7ff feda 	bl	8006f70 <logc>
 80071bc:	2030      	movs	r0, #48	; 0x30
 80071be:	f7ff fed7 	bl	8006f70 <logc>
 80071c2:	2103      	movs	r1, #3
 80071c4:	4833      	ldr	r0, [pc, #204]	; (8007294 <mg_hexdump+0x164>)
 80071c6:	f7ff fee7 	bl	8006f98 <logs>
    }
    logc(nibble(p[i] >> 4)), logc(nibble(p[i] & 15));  // Two nibbles, e.g. c5
 80071ca:	69fa      	ldr	r2, [r7, #28]
 80071cc:	6a3b      	ldr	r3, [r7, #32]
 80071ce:	4413      	add	r3, r2
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	091b      	lsrs	r3, r3, #4
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	4618      	mov	r0, r3
 80071d8:	f7ff ff94 	bl	8007104 <nibble>
 80071dc:	4603      	mov	r3, r0
 80071de:	4618      	mov	r0, r3
 80071e0:	f7ff fec6 	bl	8006f70 <logc>
 80071e4:	69fa      	ldr	r2, [r7, #28]
 80071e6:	6a3b      	ldr	r3, [r7, #32]
 80071e8:	4413      	add	r3, r2
 80071ea:	781b      	ldrb	r3, [r3, #0]
 80071ec:	f003 030f 	and.w	r3, r3, #15
 80071f0:	4618      	mov	r0, r3
 80071f2:	f7ff ff87 	bl	8007104 <nibble>
 80071f6:	4603      	mov	r3, r0
 80071f8:	4618      	mov	r0, r3
 80071fa:	f7ff feb9 	bl	8006f70 <logc>
    logc(' ');                                         // Space after hex number
 80071fe:	2020      	movs	r0, #32
 8007200:	f7ff feb6 	bl	8006f70 <logc>
    ascii[alen++] = ISPRINT(p[i]) ? p[i] : '.';        // Add to the ascii buf
 8007204:	69fa      	ldr	r2, [r7, #28]
 8007206:	6a3b      	ldr	r3, [r7, #32]
 8007208:	4413      	add	r3, r2
 800720a:	781b      	ldrb	r3, [r3, #0]
 800720c:	2b1f      	cmp	r3, #31
 800720e:	d90a      	bls.n	8007226 <mg_hexdump+0xf6>
 8007210:	69fa      	ldr	r2, [r7, #28]
 8007212:	6a3b      	ldr	r3, [r7, #32]
 8007214:	4413      	add	r3, r2
 8007216:	781b      	ldrb	r3, [r3, #0]
 8007218:	2b7e      	cmp	r3, #126	; 0x7e
 800721a:	d804      	bhi.n	8007226 <mg_hexdump+0xf6>
 800721c:	69fa      	ldr	r2, [r7, #28]
 800721e:	6a3b      	ldr	r3, [r7, #32]
 8007220:	4413      	add	r3, r2
 8007222:	781a      	ldrb	r2, [r3, #0]
 8007224:	e000      	b.n	8007228 <mg_hexdump+0xf8>
 8007226:	222e      	movs	r2, #46	; 0x2e
 8007228:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800722c:	1c59      	adds	r1, r3, #1
 800722e:	f887 1027 	strb.w	r1, [r7, #39]	; 0x27
 8007232:	3328      	adds	r3, #40	; 0x28
 8007234:	443b      	add	r3, r7
 8007236:	f803 2c1c 	strb.w	r2, [r3, #-28]
  for (i = 0; i < len; i++) {
 800723a:	6a3b      	ldr	r3, [r7, #32]
 800723c:	3301      	adds	r3, #1
 800723e:	623b      	str	r3, [r7, #32]
 8007240:	6a3a      	ldr	r2, [r7, #32]
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	429a      	cmp	r2, r3
 8007246:	d380      	bcc.n	800714a <mg_hexdump+0x1a>
  }
  while (alen < 16) logs("   ", 3), ascii[alen++] = ' ';
 8007248:	e00d      	b.n	8007266 <mg_hexdump+0x136>
 800724a:	2103      	movs	r1, #3
 800724c:	4811      	ldr	r0, [pc, #68]	; (8007294 <mg_hexdump+0x164>)
 800724e:	f7ff fea3 	bl	8006f98 <logs>
 8007252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007256:	1c5a      	adds	r2, r3, #1
 8007258:	f887 2027 	strb.w	r2, [r7, #39]	; 0x27
 800725c:	3328      	adds	r3, #40	; 0x28
 800725e:	443b      	add	r3, r7
 8007260:	2220      	movs	r2, #32
 8007262:	f803 2c1c 	strb.w	r2, [r3, #-28]
 8007266:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800726a:	2b0f      	cmp	r3, #15
 800726c:	d9ed      	bls.n	800724a <mg_hexdump+0x11a>
  logs("  ", 2), logs((char *) ascii, 16), logc('\n');
 800726e:	2102      	movs	r1, #2
 8007270:	4807      	ldr	r0, [pc, #28]	; (8007290 <mg_hexdump+0x160>)
 8007272:	f7ff fe91 	bl	8006f98 <logs>
 8007276:	f107 030c 	add.w	r3, r7, #12
 800727a:	2110      	movs	r1, #16
 800727c:	4618      	mov	r0, r3
 800727e:	f7ff fe8b 	bl	8006f98 <logs>
 8007282:	200a      	movs	r0, #10
 8007284:	f7ff fe74 	bl	8006f70 <logc>
}
 8007288:	bf00      	nop
 800728a:	3728      	adds	r7, #40	; 0x28
 800728c:	46bd      	mov	sp, r7
 800728e:	bd80      	pop	{r7, pc}
 8007290:	080160c0 	.word	0x080160c0
 8007294:	080160c4 	.word	0x080160c4

08007298 <mg_mqtt_send_header>:
    {MQTT_PROP_WILDCARD_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SUBSCRIPTION_IDENTIFIER_AVAILABLE, MQTT_PROP_TYPE_BYTE},
    {MQTT_PROP_SHARED_SUBSCRIPTION_AVAILABLE, MQTT_PROP_TYPE_BYTE}};

void mg_mqtt_send_header(struct mg_connection *c, uint8_t cmd, uint8_t flags,
                         uint32_t len) {
 8007298:	b580      	push	{r7, lr}
 800729a:	b088      	sub	sp, #32
 800729c:	af00      	add	r7, sp, #0
 800729e:	60f8      	str	r0, [r7, #12]
 80072a0:	607b      	str	r3, [r7, #4]
 80072a2:	460b      	mov	r3, r1
 80072a4:	72fb      	strb	r3, [r7, #11]
 80072a6:	4613      	mov	r3, r2
 80072a8:	72bb      	strb	r3, [r7, #10]
  uint8_t buf[1 + sizeof(len)], *vlen = &buf[1];
 80072aa:	f107 0314 	add.w	r3, r7, #20
 80072ae:	3301      	adds	r3, #1
 80072b0:	61fb      	str	r3, [r7, #28]
  buf[0] = (uint8_t) ((cmd << 4) | flags);
 80072b2:	7afb      	ldrb	r3, [r7, #11]
 80072b4:	011b      	lsls	r3, r3, #4
 80072b6:	b25a      	sxtb	r2, r3
 80072b8:	f997 300a 	ldrsb.w	r3, [r7, #10]
 80072bc:	4313      	orrs	r3, r2
 80072be:	b25b      	sxtb	r3, r3
 80072c0:	b2db      	uxtb	r3, r3
 80072c2:	753b      	strb	r3, [r7, #20]
  do {
    *vlen = len % 0x80;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072cc:	b2da      	uxtb	r2, r3
 80072ce:	69fb      	ldr	r3, [r7, #28]
 80072d0:	701a      	strb	r2, [r3, #0]
    len /= 0x80;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	09db      	lsrs	r3, r3, #7
 80072d6:	607b      	str	r3, [r7, #4]
    if (len > 0) *vlen |= 0x80;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d006      	beq.n	80072ec <mg_mqtt_send_header+0x54>
 80072de:	69fb      	ldr	r3, [r7, #28]
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80072e6:	b2da      	uxtb	r2, r3
 80072e8:	69fb      	ldr	r3, [r7, #28]
 80072ea:	701a      	strb	r2, [r3, #0]
    vlen++;
 80072ec:	69fb      	ldr	r3, [r7, #28]
 80072ee:	3301      	adds	r3, #1
 80072f0:	61fb      	str	r3, [r7, #28]
  } while (len > 0 && vlen < &buf[sizeof(buf)]);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d005      	beq.n	8007304 <mg_mqtt_send_header+0x6c>
 80072f8:	f107 0314 	add.w	r3, r7, #20
 80072fc:	3305      	adds	r3, #5
 80072fe:	69fa      	ldr	r2, [r7, #28]
 8007300:	429a      	cmp	r2, r3
 8007302:	d3df      	bcc.n	80072c4 <mg_mqtt_send_header+0x2c>
  mg_send(c, buf, (size_t) (vlen - buf));
 8007304:	f107 0314 	add.w	r3, r7, #20
 8007308:	69fa      	ldr	r2, [r7, #28]
 800730a:	1ad3      	subs	r3, r2, r3
 800730c:	461a      	mov	r2, r3
 800730e:	f107 0314 	add.w	r3, r7, #20
 8007312:	4619      	mov	r1, r3
 8007314:	68f8      	ldr	r0, [r7, #12]
 8007316:	f006 fb81 	bl	800da1c <mg_send>
}
 800731a:	bf00      	nop
 800731c:	3720      	adds	r7, #32
 800731e:	46bd      	mov	sp, r7
 8007320:	bd80      	pop	{r7, pc}

08007322 <mg_send_u16>:

static void mg_send_u16(struct mg_connection *c, uint16_t value) {
 8007322:	b580      	push	{r7, lr}
 8007324:	b082      	sub	sp, #8
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	807b      	strh	r3, [r7, #2]
  mg_send(c, &value, sizeof(value));
 800732e:	1cbb      	adds	r3, r7, #2
 8007330:	2202      	movs	r2, #2
 8007332:	4619      	mov	r1, r3
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f006 fb71 	bl	800da1c <mg_send>
}
 800733a:	bf00      	nop
 800733c:	3708      	adds	r7, #8
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}

08007342 <mg_send_u32>:

static void mg_send_u32(struct mg_connection *c, uint32_t value) {
 8007342:	b580      	push	{r7, lr}
 8007344:	b082      	sub	sp, #8
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	6039      	str	r1, [r7, #0]
  mg_send(c, &value, sizeof(value));
 800734c:	463b      	mov	r3, r7
 800734e:	2204      	movs	r2, #4
 8007350:	4619      	mov	r1, r3
 8007352:	6878      	ldr	r0, [r7, #4]
 8007354:	f006 fb62 	bl	800da1c <mg_send>
}
 8007358:	bf00      	nop
 800735a:	3708      	adds	r7, #8
 800735c:	46bd      	mov	sp, r7
 800735e:	bd80      	pop	{r7, pc}

08007360 <compute_variable_length_size>:

static uint8_t compute_variable_length_size(size_t length) {
 8007360:	b480      	push	{r7}
 8007362:	b085      	sub	sp, #20
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  uint8_t bytes_needed = 0;
 8007368:	2300      	movs	r3, #0
 800736a:	73fb      	strb	r3, [r7, #15]
  do {
    bytes_needed++;
 800736c:	7bfb      	ldrb	r3, [r7, #15]
 800736e:	3301      	adds	r3, #1
 8007370:	73fb      	strb	r3, [r7, #15]
    length /= 0x80;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	09db      	lsrs	r3, r3, #7
 8007376:	607b      	str	r3, [r7, #4]
  } while (length > 0);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2b00      	cmp	r3, #0
 800737c:	d1f6      	bne.n	800736c <compute_variable_length_size+0xc>
  return bytes_needed;
 800737e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007380:	4618      	mov	r0, r3
 8007382:	3714      	adds	r7, #20
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <encode_variable_length>:

static int encode_variable_length(uint8_t *buf, size_t value) {
 800738c:	b480      	push	{r7}
 800738e:	b085      	sub	sp, #20
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
 8007394:	6039      	str	r1, [r7, #0]
  int len = 0;
 8007396:	2300      	movs	r3, #0
 8007398:	60fb      	str	r3, [r7, #12]

  do {
    uint8_t byte = (uint8_t) (value % 128);
 800739a:	683b      	ldr	r3, [r7, #0]
 800739c:	b2db      	uxtb	r3, r3
 800739e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80073a2:	72fb      	strb	r3, [r7, #11]
    value /= 128;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	09db      	lsrs	r3, r3, #7
 80073a8:	603b      	str	r3, [r7, #0]
    if (value > 0) byte |= 0x80;
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d003      	beq.n	80073b8 <encode_variable_length+0x2c>
 80073b0:	7afb      	ldrb	r3, [r7, #11]
 80073b2:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80073b6:	72fb      	strb	r3, [r7, #11]
    buf[len++] = byte;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	60fa      	str	r2, [r7, #12]
 80073be:	461a      	mov	r2, r3
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	4413      	add	r3, r2
 80073c4:	7afa      	ldrb	r2, [r7, #11]
 80073c6:	701a      	strb	r2, [r3, #0]
  } while (value > 0);
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d1e5      	bne.n	800739a <encode_variable_length+0xe>

  return len;
 80073ce:	68fb      	ldr	r3, [r7, #12]
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	3714      	adds	r7, #20
 80073d4:	46bd      	mov	sp, r7
 80073d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073da:	4770      	bx	lr

080073dc <decode_varint>:

static size_t decode_varint(const uint8_t *buf, size_t len, size_t *value) {
 80073dc:	b480      	push	{r7}
 80073de:	b089      	sub	sp, #36	; 0x24
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	60f8      	str	r0, [r7, #12]
 80073e4:	60b9      	str	r1, [r7, #8]
 80073e6:	607a      	str	r2, [r7, #4]
  uint32_t multiplier = 1;
 80073e8:	2301      	movs	r3, #1
 80073ea:	61fb      	str	r3, [r7, #28]
  size_t offset;
  *value = 0;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2200      	movs	r2, #0
 80073f0:	601a      	str	r2, [r3, #0]

  for (offset = 0; offset < 4 && offset < len; offset++) {
 80073f2:	2300      	movs	r3, #0
 80073f4:	61bb      	str	r3, [r7, #24]
 80073f6:	e01c      	b.n	8007432 <decode_varint+0x56>
    uint8_t encoded_byte = buf[offset];
 80073f8:	68fa      	ldr	r2, [r7, #12]
 80073fa:	69bb      	ldr	r3, [r7, #24]
 80073fc:	4413      	add	r3, r2
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	75fb      	strb	r3, [r7, #23]
    *value += (encoded_byte & 0x7F) * multiplier;
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	7dfb      	ldrb	r3, [r7, #23]
 8007408:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800740c:	69f9      	ldr	r1, [r7, #28]
 800740e:	fb01 f303 	mul.w	r3, r1, r3
 8007412:	441a      	add	r2, r3
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	601a      	str	r2, [r3, #0]
    multiplier *= 128;
 8007418:	69fb      	ldr	r3, [r7, #28]
 800741a:	01db      	lsls	r3, r3, #7
 800741c:	61fb      	str	r3, [r7, #28]

    if (!(encoded_byte & 0x80)) return offset + 1;
 800741e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8007422:	2b00      	cmp	r3, #0
 8007424:	db02      	blt.n	800742c <decode_varint+0x50>
 8007426:	69bb      	ldr	r3, [r7, #24]
 8007428:	3301      	adds	r3, #1
 800742a:	e00a      	b.n	8007442 <decode_varint+0x66>
  for (offset = 0; offset < 4 && offset < len; offset++) {
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	3301      	adds	r3, #1
 8007430:	61bb      	str	r3, [r7, #24]
 8007432:	69bb      	ldr	r3, [r7, #24]
 8007434:	2b03      	cmp	r3, #3
 8007436:	d803      	bhi.n	8007440 <decode_varint+0x64>
 8007438:	69ba      	ldr	r2, [r7, #24]
 800743a:	68bb      	ldr	r3, [r7, #8]
 800743c:	429a      	cmp	r2, r3
 800743e:	d3db      	bcc.n	80073f8 <decode_varint+0x1c>
  }

  return 0;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3724      	adds	r7, #36	; 0x24
 8007446:	46bd      	mov	sp, r7
 8007448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800744c:	4770      	bx	lr
	...

08007450 <mqtt_prop_type_by_id>:

static int mqtt_prop_type_by_id(uint8_t prop_id) {
 8007450:	b480      	push	{r7}
 8007452:	b085      	sub	sp, #20
 8007454:	af00      	add	r7, sp, #0
 8007456:	4603      	mov	r3, r0
 8007458:	71fb      	strb	r3, [r7, #7]
  size_t i, num_properties = sizeof(s_prop_map) / sizeof(s_prop_map[0]);
 800745a:	231b      	movs	r3, #27
 800745c:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < num_properties; ++i) {
 800745e:	2300      	movs	r3, #0
 8007460:	60fb      	str	r3, [r7, #12]
 8007462:	e00f      	b.n	8007484 <mqtt_prop_type_by_id+0x34>
    if (s_prop_map[i].id == prop_id) return s_prop_map[i].type;
 8007464:	4a0d      	ldr	r2, [pc, #52]	; (800749c <mqtt_prop_type_by_id+0x4c>)
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 800746c:	79fa      	ldrb	r2, [r7, #7]
 800746e:	429a      	cmp	r2, r3
 8007470:	d105      	bne.n	800747e <mqtt_prop_type_by_id+0x2e>
 8007472:	4a0a      	ldr	r2, [pc, #40]	; (800749c <mqtt_prop_type_by_id+0x4c>)
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	005b      	lsls	r3, r3, #1
 8007478:	4413      	add	r3, r2
 800747a:	785b      	ldrb	r3, [r3, #1]
 800747c:	e008      	b.n	8007490 <mqtt_prop_type_by_id+0x40>
  for (i = 0; i < num_properties; ++i) {
 800747e:	68fb      	ldr	r3, [r7, #12]
 8007480:	3301      	adds	r3, #1
 8007482:	60fb      	str	r3, [r7, #12]
 8007484:	68fa      	ldr	r2, [r7, #12]
 8007486:	68bb      	ldr	r3, [r7, #8]
 8007488:	429a      	cmp	r2, r3
 800748a:	d3eb      	bcc.n	8007464 <mqtt_prop_type_by_id+0x14>
  }
  return -1;  // Property ID not found
 800748c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007490:	4618      	mov	r0, r3
 8007492:	3714      	adds	r7, #20
 8007494:	46bd      	mov	sp, r7
 8007496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749a:	4770      	bx	lr
 800749c:	08017380 	.word	0x08017380

080074a0 <get_properties_length>:

// Returns the size of the properties section, without the
// size of the content's length
static size_t get_properties_length(struct mg_mqtt_prop *props, size_t count) {
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  size_t i, size = 0;
 80074aa:	2300      	movs	r3, #0
 80074ac:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < count; i++) {
 80074ae:	2300      	movs	r3, #0
 80074b0:	60fb      	str	r3, [r7, #12]
 80074b2:	e07a      	b.n	80075aa <get_properties_length+0x10a>
    size++;  // identifier
 80074b4:	68bb      	ldr	r3, [r7, #8]
 80074b6:	3301      	adds	r3, #1
 80074b8:	60bb      	str	r3, [r7, #8]
    switch (mqtt_prop_type_by_id(props[i].id)) {
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	4613      	mov	r3, r2
 80074be:	005b      	lsls	r3, r3, #1
 80074c0:	4413      	add	r3, r2
 80074c2:	00db      	lsls	r3, r3, #3
 80074c4:	461a      	mov	r2, r3
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	4413      	add	r3, r2
 80074ca:	781b      	ldrb	r3, [r3, #0]
 80074cc:	4618      	mov	r0, r3
 80074ce:	f7ff ffbf 	bl	8007450 <mqtt_prop_type_by_id>
 80074d2:	4603      	mov	r3, r0
 80074d4:	2b06      	cmp	r3, #6
 80074d6:	d863      	bhi.n	80075a0 <get_properties_length+0x100>
 80074d8:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <get_properties_length+0x40>)
 80074da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074de:	bf00      	nop
 80074e0:	08007599 	.word	0x08007599
 80074e4:	0800752d 	.word	0x0800752d
 80074e8:	080074fd 	.word	0x080074fd
 80074ec:	08007549 	.word	0x08007549
 80074f0:	08007565 	.word	0x08007565
 80074f4:	08007589 	.word	0x08007589
 80074f8:	08007591 	.word	0x08007591
      case MQTT_PROP_TYPE_STRING_PAIR:
        size += (uint32_t) (props[i].val.len + props[i].key.len +
 80074fc:	68fa      	ldr	r2, [r7, #12]
 80074fe:	4613      	mov	r3, r2
 8007500:	005b      	lsls	r3, r3, #1
 8007502:	4413      	add	r3, r2
 8007504:	00db      	lsls	r3, r3, #3
 8007506:	461a      	mov	r2, r3
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	4413      	add	r3, r2
 800750c:	6959      	ldr	r1, [r3, #20]
 800750e:	68fa      	ldr	r2, [r7, #12]
 8007510:	4613      	mov	r3, r2
 8007512:	005b      	lsls	r3, r3, #1
 8007514:	4413      	add	r3, r2
 8007516:	00db      	lsls	r3, r3, #3
 8007518:	461a      	mov	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	4413      	add	r3, r2
 800751e:	68db      	ldr	r3, [r3, #12]
 8007520:	18ca      	adds	r2, r1, r3
 8007522:	68bb      	ldr	r3, [r7, #8]
 8007524:	4413      	add	r3, r2
 8007526:	3304      	adds	r3, #4
 8007528:	60bb      	str	r3, [r7, #8]
                            2 * sizeof(uint16_t));
        break;
 800752a:	e03b      	b.n	80075a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_STRING:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 800752c:	68fa      	ldr	r2, [r7, #12]
 800752e:	4613      	mov	r3, r2
 8007530:	005b      	lsls	r3, r3, #1
 8007532:	4413      	add	r3, r2
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	461a      	mov	r2, r3
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	4413      	add	r3, r2
 800753c:	695a      	ldr	r2, [r3, #20]
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	4413      	add	r3, r2
 8007542:	3302      	adds	r3, #2
 8007544:	60bb      	str	r3, [r7, #8]
        break;
 8007546:	e02d      	b.n	80075a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BINARY_DATA:
        size += (uint32_t) (props[i].val.len + sizeof(uint16_t));
 8007548:	68fa      	ldr	r2, [r7, #12]
 800754a:	4613      	mov	r3, r2
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	4413      	add	r3, r2
 8007550:	00db      	lsls	r3, r3, #3
 8007552:	461a      	mov	r2, r3
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	4413      	add	r3, r2
 8007558:	695a      	ldr	r2, [r3, #20]
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	4413      	add	r3, r2
 800755e:	3302      	adds	r3, #2
 8007560:	60bb      	str	r3, [r7, #8]
        break;
 8007562:	e01f      	b.n	80075a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        size += compute_variable_length_size((uint32_t) props[i].iv);
 8007564:	68fa      	ldr	r2, [r7, #12]
 8007566:	4613      	mov	r3, r2
 8007568:	005b      	lsls	r3, r3, #1
 800756a:	4413      	add	r3, r2
 800756c:	00db      	lsls	r3, r3, #3
 800756e:	461a      	mov	r2, r3
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4413      	add	r3, r2
 8007574:	685b      	ldr	r3, [r3, #4]
 8007576:	4618      	mov	r0, r3
 8007578:	f7ff fef2 	bl	8007360 <compute_variable_length_size>
 800757c:	4603      	mov	r3, r0
 800757e:	461a      	mov	r2, r3
 8007580:	68bb      	ldr	r3, [r7, #8]
 8007582:	4413      	add	r3, r2
 8007584:	60bb      	str	r3, [r7, #8]
        break;
 8007586:	e00d      	b.n	80075a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_INT:
        size += (uint32_t) sizeof(uint32_t);
 8007588:	68bb      	ldr	r3, [r7, #8]
 800758a:	3304      	adds	r3, #4
 800758c:	60bb      	str	r3, [r7, #8]
        break;
 800758e:	e009      	b.n	80075a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_SHORT:
        size += (uint32_t) sizeof(uint16_t);
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	3302      	adds	r3, #2
 8007594:	60bb      	str	r3, [r7, #8]
        break;
 8007596:	e005      	b.n	80075a4 <get_properties_length+0x104>
      case MQTT_PROP_TYPE_BYTE:
        size += (uint32_t) sizeof(uint8_t);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	3301      	adds	r3, #1
 800759c:	60bb      	str	r3, [r7, #8]
        break;
 800759e:	e001      	b.n	80075a4 <get_properties_length+0x104>
      default:
        return size;  // cannot parse further down
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	e007      	b.n	80075b4 <get_properties_length+0x114>
  for (i = 0; i < count; i++) {
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	3301      	adds	r3, #1
 80075a8:	60fb      	str	r3, [r7, #12]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	429a      	cmp	r2, r3
 80075b0:	d380      	bcc.n	80074b4 <get_properties_length+0x14>
    }
  }

  return size;
 80075b2:	68bb      	ldr	r3, [r7, #8]
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	3710      	adds	r7, #16
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd80      	pop	{r7, pc}

080075bc <get_props_size>:

// returns the entire size of the properties section, including the
// size of the variable length of the content
static size_t get_props_size(struct mg_mqtt_prop *props, size_t count) {
 80075bc:	b580      	push	{r7, lr}
 80075be:	b084      	sub	sp, #16
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
 80075c4:	6039      	str	r1, [r7, #0]
  size_t size = get_properties_length(props, count);
 80075c6:	6839      	ldr	r1, [r7, #0]
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f7ff ff69 	bl	80074a0 <get_properties_length>
 80075ce:	60f8      	str	r0, [r7, #12]
  size += compute_variable_length_size(size);
 80075d0:	68f8      	ldr	r0, [r7, #12]
 80075d2:	f7ff fec5 	bl	8007360 <compute_variable_length_size>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461a      	mov	r2, r3
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	4413      	add	r3, r2
 80075de:	60fb      	str	r3, [r7, #12]
  return size;
 80075e0:	68fb      	ldr	r3, [r7, #12]
}
 80075e2:	4618      	mov	r0, r3
 80075e4:	3710      	adds	r7, #16
 80075e6:	46bd      	mov	sp, r7
 80075e8:	bd80      	pop	{r7, pc}
	...

080075ec <mg_send_mqtt_properties>:

static void mg_send_mqtt_properties(struct mg_connection *c,
                                    struct mg_mqtt_prop *props, size_t nprops) {
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b08a      	sub	sp, #40	; 0x28
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  size_t total_size = get_properties_length(props, nprops);
 80075f8:	6879      	ldr	r1, [r7, #4]
 80075fa:	68b8      	ldr	r0, [r7, #8]
 80075fc:	f7ff ff50 	bl	80074a0 <get_properties_length>
 8007600:	6238      	str	r0, [r7, #32]
  uint8_t buf_v[4] = {0, 0, 0, 0};
 8007602:	2300      	movs	r3, #0
 8007604:	61bb      	str	r3, [r7, #24]
  uint8_t buf[4] = {0, 0, 0, 0};
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]
  int i, len = encode_variable_length(buf, total_size);
 800760a:	f107 0314 	add.w	r3, r7, #20
 800760e:	6a39      	ldr	r1, [r7, #32]
 8007610:	4618      	mov	r0, r3
 8007612:	f7ff febb 	bl	800738c <encode_variable_length>
 8007616:	61f8      	str	r0, [r7, #28]

  mg_send(c, buf, (size_t) len);
 8007618:	69fa      	ldr	r2, [r7, #28]
 800761a:	f107 0314 	add.w	r3, r7, #20
 800761e:	4619      	mov	r1, r3
 8007620:	68f8      	ldr	r0, [r7, #12]
 8007622:	f006 f9fb 	bl	800da1c <mg_send>
  for (i = 0; i < (int) nprops; i++) {
 8007626:	2300      	movs	r3, #0
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
 800762a:	e11f      	b.n	800786c <mg_send_mqtt_properties+0x280>
    mg_send(c, &props[i].id, sizeof(props[i].id));
 800762c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800762e:	4613      	mov	r3, r2
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	4413      	add	r3, r2
 8007634:	00db      	lsls	r3, r3, #3
 8007636:	461a      	mov	r2, r3
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	4413      	add	r3, r2
 800763c:	2201      	movs	r2, #1
 800763e:	4619      	mov	r1, r3
 8007640:	68f8      	ldr	r0, [r7, #12]
 8007642:	f006 f9eb 	bl	800da1c <mg_send>
    switch (mqtt_prop_type_by_id(props[i].id)) {
 8007646:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007648:	4613      	mov	r3, r2
 800764a:	005b      	lsls	r3, r3, #1
 800764c:	4413      	add	r3, r2
 800764e:	00db      	lsls	r3, r3, #3
 8007650:	461a      	mov	r2, r3
 8007652:	68bb      	ldr	r3, [r7, #8]
 8007654:	4413      	add	r3, r2
 8007656:	781b      	ldrb	r3, [r3, #0]
 8007658:	4618      	mov	r0, r3
 800765a:	f7ff fef9 	bl	8007450 <mqtt_prop_type_by_id>
 800765e:	4603      	mov	r3, r0
 8007660:	2b06      	cmp	r3, #6
 8007662:	f200 8100 	bhi.w	8007866 <mg_send_mqtt_properties+0x27a>
 8007666:	a201      	add	r2, pc, #4	; (adr r2, 800766c <mg_send_mqtt_properties+0x80>)
 8007668:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800766c:	0800772b 	.word	0x0800772b
 8007670:	08007793 	.word	0x08007793
 8007674:	08007689 	.word	0x08007689
 8007678:	080077e5 	.word	0x080077e5
 800767c:	08007837 	.word	0x08007837
 8007680:	0800776f 	.word	0x0800776f
 8007684:	08007749 	.word	0x08007749
      case MQTT_PROP_TYPE_STRING_PAIR:
        mg_send_u16(c, mg_htons((uint16_t) props[i].key.len));
 8007688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800768a:	4613      	mov	r3, r2
 800768c:	005b      	lsls	r3, r3, #1
 800768e:	4413      	add	r3, r2
 8007690:	00db      	lsls	r3, r3, #3
 8007692:	461a      	mov	r2, r3
 8007694:	68bb      	ldr	r3, [r7, #8]
 8007696:	4413      	add	r3, r2
 8007698:	68db      	ldr	r3, [r3, #12]
 800769a:	b29b      	uxth	r3, r3
 800769c:	4618      	mov	r0, r3
 800769e:	f002 ff0e 	bl	800a4be <mg_ntohs>
 80076a2:	4603      	mov	r3, r0
 80076a4:	4619      	mov	r1, r3
 80076a6:	68f8      	ldr	r0, [r7, #12]
 80076a8:	f7ff fe3b 	bl	8007322 <mg_send_u16>
        mg_send(c, props[i].key.ptr, props[i].key.len);
 80076ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076ae:	4613      	mov	r3, r2
 80076b0:	005b      	lsls	r3, r3, #1
 80076b2:	4413      	add	r3, r2
 80076b4:	00db      	lsls	r3, r3, #3
 80076b6:	461a      	mov	r2, r3
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	4413      	add	r3, r2
 80076bc:	6899      	ldr	r1, [r3, #8]
 80076be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076c0:	4613      	mov	r3, r2
 80076c2:	005b      	lsls	r3, r3, #1
 80076c4:	4413      	add	r3, r2
 80076c6:	00db      	lsls	r3, r3, #3
 80076c8:	461a      	mov	r2, r3
 80076ca:	68bb      	ldr	r3, [r7, #8]
 80076cc:	4413      	add	r3, r2
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	461a      	mov	r2, r3
 80076d2:	68f8      	ldr	r0, [r7, #12]
 80076d4:	f006 f9a2 	bl	800da1c <mg_send>
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80076d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076da:	4613      	mov	r3, r2
 80076dc:	005b      	lsls	r3, r3, #1
 80076de:	4413      	add	r3, r2
 80076e0:	00db      	lsls	r3, r3, #3
 80076e2:	461a      	mov	r2, r3
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	4413      	add	r3, r2
 80076e8:	695b      	ldr	r3, [r3, #20]
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	4618      	mov	r0, r3
 80076ee:	f002 fee6 	bl	800a4be <mg_ntohs>
 80076f2:	4603      	mov	r3, r0
 80076f4:	4619      	mov	r1, r3
 80076f6:	68f8      	ldr	r0, [r7, #12]
 80076f8:	f7ff fe13 	bl	8007322 <mg_send_u16>
        mg_send(c, props[i].val.ptr, props[i].val.len);
 80076fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80076fe:	4613      	mov	r3, r2
 8007700:	005b      	lsls	r3, r3, #1
 8007702:	4413      	add	r3, r2
 8007704:	00db      	lsls	r3, r3, #3
 8007706:	461a      	mov	r2, r3
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	4413      	add	r3, r2
 800770c:	6919      	ldr	r1, [r3, #16]
 800770e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007710:	4613      	mov	r3, r2
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	4413      	add	r3, r2
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	461a      	mov	r2, r3
 800771a:	68bb      	ldr	r3, [r7, #8]
 800771c:	4413      	add	r3, r2
 800771e:	695b      	ldr	r3, [r3, #20]
 8007720:	461a      	mov	r2, r3
 8007722:	68f8      	ldr	r0, [r7, #12]
 8007724:	f006 f97a 	bl	800da1c <mg_send>
        break;
 8007728:	e09d      	b.n	8007866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BYTE:
        mg_send(c, &props[i].iv, sizeof(uint8_t));
 800772a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800772c:	4613      	mov	r3, r2
 800772e:	005b      	lsls	r3, r3, #1
 8007730:	4413      	add	r3, r2
 8007732:	00db      	lsls	r3, r3, #3
 8007734:	461a      	mov	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	4413      	add	r3, r2
 800773a:	3304      	adds	r3, #4
 800773c:	2201      	movs	r2, #1
 800773e:	4619      	mov	r1, r3
 8007740:	68f8      	ldr	r0, [r7, #12]
 8007742:	f006 f96b 	bl	800da1c <mg_send>
        break;
 8007746:	e08e      	b.n	8007866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_SHORT:
        mg_send_u16(c, mg_htons((uint16_t) props[i].iv));
 8007748:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800774a:	4613      	mov	r3, r2
 800774c:	005b      	lsls	r3, r3, #1
 800774e:	4413      	add	r3, r2
 8007750:	00db      	lsls	r3, r3, #3
 8007752:	461a      	mov	r2, r3
 8007754:	68bb      	ldr	r3, [r7, #8]
 8007756:	4413      	add	r3, r2
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	b29b      	uxth	r3, r3
 800775c:	4618      	mov	r0, r3
 800775e:	f002 feae 	bl	800a4be <mg_ntohs>
 8007762:	4603      	mov	r3, r0
 8007764:	4619      	mov	r1, r3
 8007766:	68f8      	ldr	r0, [r7, #12]
 8007768:	f7ff fddb 	bl	8007322 <mg_send_u16>
        break;
 800776c:	e07b      	b.n	8007866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_INT:
        mg_send_u32(c, mg_htonl((uint32_t) props[i].iv));
 800776e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007770:	4613      	mov	r3, r2
 8007772:	005b      	lsls	r3, r3, #1
 8007774:	4413      	add	r3, r2
 8007776:	00db      	lsls	r3, r3, #3
 8007778:	461a      	mov	r2, r3
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	4413      	add	r3, r2
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	4618      	mov	r0, r3
 8007782:	f002 fe83 	bl	800a48c <mg_ntohl>
 8007786:	4603      	mov	r3, r0
 8007788:	4619      	mov	r1, r3
 800778a:	68f8      	ldr	r0, [r7, #12]
 800778c:	f7ff fdd9 	bl	8007342 <mg_send_u32>
        break;
 8007790:	e069      	b.n	8007866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_STRING:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 8007792:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007794:	4613      	mov	r3, r2
 8007796:	005b      	lsls	r3, r3, #1
 8007798:	4413      	add	r3, r2
 800779a:	00db      	lsls	r3, r3, #3
 800779c:	461a      	mov	r2, r3
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	4413      	add	r3, r2
 80077a2:	695b      	ldr	r3, [r3, #20]
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	4618      	mov	r0, r3
 80077a8:	f002 fe89 	bl	800a4be <mg_ntohs>
 80077ac:	4603      	mov	r3, r0
 80077ae:	4619      	mov	r1, r3
 80077b0:	68f8      	ldr	r0, [r7, #12]
 80077b2:	f7ff fdb6 	bl	8007322 <mg_send_u16>
        mg_send(c, props[i].val.ptr, props[i].val.len);
 80077b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077b8:	4613      	mov	r3, r2
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	4413      	add	r3, r2
 80077be:	00db      	lsls	r3, r3, #3
 80077c0:	461a      	mov	r2, r3
 80077c2:	68bb      	ldr	r3, [r7, #8]
 80077c4:	4413      	add	r3, r2
 80077c6:	6919      	ldr	r1, [r3, #16]
 80077c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ca:	4613      	mov	r3, r2
 80077cc:	005b      	lsls	r3, r3, #1
 80077ce:	4413      	add	r3, r2
 80077d0:	00db      	lsls	r3, r3, #3
 80077d2:	461a      	mov	r2, r3
 80077d4:	68bb      	ldr	r3, [r7, #8]
 80077d6:	4413      	add	r3, r2
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	461a      	mov	r2, r3
 80077dc:	68f8      	ldr	r0, [r7, #12]
 80077de:	f006 f91d 	bl	800da1c <mg_send>
        break;
 80077e2:	e040      	b.n	8007866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_BINARY_DATA:
        mg_send_u16(c, mg_htons((uint16_t) props[i].val.len));
 80077e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077e6:	4613      	mov	r3, r2
 80077e8:	005b      	lsls	r3, r3, #1
 80077ea:	4413      	add	r3, r2
 80077ec:	00db      	lsls	r3, r3, #3
 80077ee:	461a      	mov	r2, r3
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	4413      	add	r3, r2
 80077f4:	695b      	ldr	r3, [r3, #20]
 80077f6:	b29b      	uxth	r3, r3
 80077f8:	4618      	mov	r0, r3
 80077fa:	f002 fe60 	bl	800a4be <mg_ntohs>
 80077fe:	4603      	mov	r3, r0
 8007800:	4619      	mov	r1, r3
 8007802:	68f8      	ldr	r0, [r7, #12]
 8007804:	f7ff fd8d 	bl	8007322 <mg_send_u16>
        mg_send(c, props[i].val.ptr, props[i].val.len);
 8007808:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800780a:	4613      	mov	r3, r2
 800780c:	005b      	lsls	r3, r3, #1
 800780e:	4413      	add	r3, r2
 8007810:	00db      	lsls	r3, r3, #3
 8007812:	461a      	mov	r2, r3
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	4413      	add	r3, r2
 8007818:	6919      	ldr	r1, [r3, #16]
 800781a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800781c:	4613      	mov	r3, r2
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	4413      	add	r3, r2
 8007822:	00db      	lsls	r3, r3, #3
 8007824:	461a      	mov	r2, r3
 8007826:	68bb      	ldr	r3, [r7, #8]
 8007828:	4413      	add	r3, r2
 800782a:	695b      	ldr	r3, [r3, #20]
 800782c:	461a      	mov	r2, r3
 800782e:	68f8      	ldr	r0, [r7, #12]
 8007830:	f006 f8f4 	bl	800da1c <mg_send>
        break;
 8007834:	e017      	b.n	8007866 <mg_send_mqtt_properties+0x27a>
      case MQTT_PROP_TYPE_VARIABLE_INT:
        len = encode_variable_length(buf_v, props[i].iv);
 8007836:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007838:	4613      	mov	r3, r2
 800783a:	005b      	lsls	r3, r3, #1
 800783c:	4413      	add	r3, r2
 800783e:	00db      	lsls	r3, r3, #3
 8007840:	461a      	mov	r2, r3
 8007842:	68bb      	ldr	r3, [r7, #8]
 8007844:	4413      	add	r3, r2
 8007846:	685a      	ldr	r2, [r3, #4]
 8007848:	f107 0318 	add.w	r3, r7, #24
 800784c:	4611      	mov	r1, r2
 800784e:	4618      	mov	r0, r3
 8007850:	f7ff fd9c 	bl	800738c <encode_variable_length>
 8007854:	61f8      	str	r0, [r7, #28]
        mg_send(c, buf_v, (size_t) len);
 8007856:	69fa      	ldr	r2, [r7, #28]
 8007858:	f107 0318 	add.w	r3, r7, #24
 800785c:	4619      	mov	r1, r3
 800785e:	68f8      	ldr	r0, [r7, #12]
 8007860:	f006 f8dc 	bl	800da1c <mg_send>
        break;
 8007864:	bf00      	nop
  for (i = 0; i < (int) nprops; i++) {
 8007866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007868:	3301      	adds	r3, #1
 800786a:	627b      	str	r3, [r7, #36]	; 0x24
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007870:	429a      	cmp	r2, r3
 8007872:	f6ff aedb 	blt.w	800762c <mg_send_mqtt_properties+0x40>
    }
  }
}
 8007876:	bf00      	nop
 8007878:	bf00      	nop
 800787a:	3728      	adds	r7, #40	; 0x28
 800787c:	46bd      	mov	sp, r7
 800787e:	bd80      	pop	{r7, pc}

08007880 <mg_mqtt_login>:
  }

  return new_pos;
}

void mg_mqtt_login(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8007880:	b580      	push	{r7, lr}
 8007882:	b090      	sub	sp, #64	; 0x40
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
 8007888:	6039      	str	r1, [r7, #0]
  char rnd[10], client_id[21];
  struct mg_str cid = opts->client_id;
 800788a:	683a      	ldr	r2, [r7, #0]
 800788c:	f107 0310 	add.w	r3, r7, #16
 8007890:	3210      	adds	r2, #16
 8007892:	e892 0003 	ldmia.w	r2, {r0, r1}
 8007896:	e883 0003 	stmia.w	r3, {r0, r1}
  size_t total_len = 7 + 1 + 2 + 2;
 800789a:	230c      	movs	r3, #12
 800789c:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint8_t hdr[8] = {0, 4, 'M', 'Q', 'T', 'T', opts->version, 0};
 800789e:	2300      	movs	r3, #0
 80078a0:	723b      	strb	r3, [r7, #8]
 80078a2:	2304      	movs	r3, #4
 80078a4:	727b      	strb	r3, [r7, #9]
 80078a6:	234d      	movs	r3, #77	; 0x4d
 80078a8:	72bb      	strb	r3, [r7, #10]
 80078aa:	2351      	movs	r3, #81	; 0x51
 80078ac:	72fb      	strb	r3, [r7, #11]
 80078ae:	2354      	movs	r3, #84	; 0x54
 80078b0:	733b      	strb	r3, [r7, #12]
 80078b2:	2354      	movs	r3, #84	; 0x54
 80078b4:	737b      	strb	r3, [r7, #13]
 80078b6:	683b      	ldr	r3, [r7, #0]
 80078b8:	f893 3029 	ldrb.w	r3, [r3, #41]	; 0x29
 80078bc:	73bb      	strb	r3, [r7, #14]
 80078be:	2300      	movs	r3, #0
 80078c0:	73fb      	strb	r3, [r7, #15]

  if (cid.len == 0) {
 80078c2:	697b      	ldr	r3, [r7, #20]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d118      	bne.n	80078fa <mg_mqtt_login+0x7a>
    mg_random(rnd, sizeof(rnd));
 80078c8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078cc:	210a      	movs	r1, #10
 80078ce:	4618      	mov	r0, r3
 80078d0:	f7f9 f9b8 	bl	8000c44 <mg_random>
    mg_hex(rnd, sizeof(rnd), client_id);
 80078d4:	f107 0218 	add.w	r2, r7, #24
 80078d8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80078dc:	210a      	movs	r1, #10
 80078de:	4618      	mov	r0, r3
 80078e0:	f002 fa98 	bl	8009e14 <mg_hex>
    client_id[sizeof(client_id) - 1] = '\0';
 80078e4:	2300      	movs	r3, #0
 80078e6:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
    cid = mg_str(client_id);
 80078ea:	f107 0310 	add.w	r3, r7, #16
 80078ee:	f107 0218 	add.w	r2, r7, #24
 80078f2:	4611      	mov	r1, r2
 80078f4:	4618      	mov	r0, r3
 80078f6:	f001 ff5b 	bl	80097b0 <mg_str_s>
  }

  if (hdr[6] == 0) hdr[6] = 4;  // If version is not set, use 4 (3.1.1)
 80078fa:	7bbb      	ldrb	r3, [r7, #14]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d101      	bne.n	8007904 <mg_mqtt_login+0x84>
 8007900:	2304      	movs	r3, #4
 8007902:	73bb      	strb	r3, [r7, #14]
  c->is_mqtt5 = hdr[6] == 5;    // Set version 5 flag
 8007904:	7bbb      	ldrb	r3, [r7, #14]
 8007906:	2b05      	cmp	r3, #5
 8007908:	bf0c      	ite	eq
 800790a:	2301      	moveq	r3, #1
 800790c:	2300      	movne	r3, #0
 800790e:	b2d9      	uxtb	r1, r3
 8007910:	687a      	ldr	r2, [r7, #4]
 8007912:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8007916:	f361 0382 	bfi	r3, r1, #2, #1
 800791a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  hdr[7] = (uint8_t) ((opts->qos & 3) << 3);  // Connection flags
 800791e:	683b      	ldr	r3, [r7, #0]
 8007920:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007924:	00db      	lsls	r3, r3, #3
 8007926:	b2db      	uxtb	r3, r3
 8007928:	f003 0318 	and.w	r3, r3, #24
 800792c:	b2db      	uxtb	r3, r3
 800792e:	73fb      	strb	r3, [r7, #15]
  if (opts->user.len > 0) {
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	685b      	ldr	r3, [r3, #4]
 8007934:	2b00      	cmp	r3, #0
 8007936:	d00a      	beq.n	800794e <mg_mqtt_login+0xce>
    total_len += 2 + (uint32_t) opts->user.len;
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800793e:	4413      	add	r3, r2
 8007940:	3302      	adds	r3, #2
 8007942:	63fb      	str	r3, [r7, #60]	; 0x3c
    hdr[7] |= MQTT_HAS_USER_NAME;
 8007944:	7bfb      	ldrb	r3, [r7, #15]
 8007946:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800794a:	b2db      	uxtb	r3, r3
 800794c:	73fb      	strb	r3, [r7, #15]
  }
  if (opts->pass.len > 0) {
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	68db      	ldr	r3, [r3, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	d00a      	beq.n	800796c <mg_mqtt_login+0xec>
    total_len += 2 + (uint32_t) opts->pass.len;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	68da      	ldr	r2, [r3, #12]
 800795a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800795c:	4413      	add	r3, r2
 800795e:	3302      	adds	r3, #2
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
    hdr[7] |= MQTT_HAS_PASSWORD;
 8007962:	7bfb      	ldrb	r3, [r7, #15]
 8007964:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007968:	b2db      	uxtb	r3, r3
 800796a:	73fb      	strb	r3, [r7, #15]
  }
  if (opts->topic.len > 0 && opts->message.len > 0) {
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	69db      	ldr	r3, [r3, #28]
 8007970:	2b00      	cmp	r3, #0
 8007972:	d011      	beq.n	8007998 <mg_mqtt_login+0x118>
 8007974:	683b      	ldr	r3, [r7, #0]
 8007976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007978:	2b00      	cmp	r3, #0
 800797a:	d00d      	beq.n	8007998 <mg_mqtt_login+0x118>
    total_len += 4 + (uint32_t) opts->topic.len + (uint32_t) opts->message.len;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	69da      	ldr	r2, [r3, #28]
 8007980:	683b      	ldr	r3, [r7, #0]
 8007982:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007984:	441a      	add	r2, r3
 8007986:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007988:	4413      	add	r3, r2
 800798a:	3304      	adds	r3, #4
 800798c:	63fb      	str	r3, [r7, #60]	; 0x3c
    hdr[7] |= MQTT_HAS_WILL;
 800798e:	7bfb      	ldrb	r3, [r7, #15]
 8007990:	f043 0304 	orr.w	r3, r3, #4
 8007994:	b2db      	uxtb	r3, r3
 8007996:	73fb      	strb	r3, [r7, #15]
  }
  if (opts->clean || cid.len == 0) hdr[7] |= MQTT_CLEAN_SESSION;
 8007998:	683b      	ldr	r3, [r7, #0]
 800799a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d102      	bne.n	80079a8 <mg_mqtt_login+0x128>
 80079a2:	697b      	ldr	r3, [r7, #20]
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d104      	bne.n	80079b2 <mg_mqtt_login+0x132>
 80079a8:	7bfb      	ldrb	r3, [r7, #15]
 80079aa:	f043 0302 	orr.w	r3, r3, #2
 80079ae:	b2db      	uxtb	r3, r3
 80079b0:	73fb      	strb	r3, [r7, #15]
  if (opts->retain) hdr[7] |= MQTT_WILL_RETAIN;
 80079b2:	683b      	ldr	r3, [r7, #0]
 80079b4:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	d004      	beq.n	80079c6 <mg_mqtt_login+0x146>
 80079bc:	7bfb      	ldrb	r3, [r7, #15]
 80079be:	f043 0320 	orr.w	r3, r3, #32
 80079c2:	b2db      	uxtb	r3, r3
 80079c4:	73fb      	strb	r3, [r7, #15]
  total_len += (uint32_t) cid.len;
 80079c6:	697b      	ldr	r3, [r7, #20]
 80079c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80079ca:	4413      	add	r3, r2
 80079cc:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (c->is_mqtt5) {
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80079d4:	f003 0304 	and.w	r3, r3, #4
 80079d8:	b2db      	uxtb	r3, r3
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d01c      	beq.n	8007a18 <mg_mqtt_login+0x198>
    total_len += get_props_size(opts->props, opts->num_props);
 80079de:	683b      	ldr	r3, [r7, #0]
 80079e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80079e2:	683b      	ldr	r3, [r7, #0]
 80079e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80079e6:	4619      	mov	r1, r3
 80079e8:	4610      	mov	r0, r2
 80079ea:	f7ff fde7 	bl	80075bc <get_props_size>
 80079ee:	4602      	mov	r2, r0
 80079f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079f2:	4413      	add	r3, r2
 80079f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (hdr[7] & MQTT_HAS_WILL)
 80079f6:	7bfb      	ldrb	r3, [r7, #15]
 80079f8:	f003 0304 	and.w	r3, r3, #4
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d00b      	beq.n	8007a18 <mg_mqtt_login+0x198>
      total_len += get_props_size(opts->will_props, opts->num_will_props);
 8007a00:	683b      	ldr	r3, [r7, #0]
 8007a02:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007a04:	683b      	ldr	r3, [r7, #0]
 8007a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007a08:	4619      	mov	r1, r3
 8007a0a:	4610      	mov	r0, r2
 8007a0c:	f7ff fdd6 	bl	80075bc <get_props_size>
 8007a10:	4602      	mov	r2, r0
 8007a12:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a14:	4413      	add	r3, r2
 8007a16:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  mg_mqtt_send_header(c, MQTT_CMD_CONNECT, 0, (uint32_t) total_len);
 8007a18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	2101      	movs	r1, #1
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f7ff fc3a 	bl	8007298 <mg_mqtt_send_header>
  mg_send(c, hdr, sizeof(hdr));
 8007a24:	f107 0308 	add.w	r3, r7, #8
 8007a28:	2208      	movs	r2, #8
 8007a2a:	4619      	mov	r1, r3
 8007a2c:	6878      	ldr	r0, [r7, #4]
 8007a2e:	f005 fff5 	bl	800da1c <mg_send>
  // keepalive == 0 means "do not disconnect us!"
  mg_send_u16(c, mg_htons((uint16_t) opts->keepalive));
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a36:	4618      	mov	r0, r3
 8007a38:	f002 fd41 	bl	800a4be <mg_ntohs>
 8007a3c:	4603      	mov	r3, r0
 8007a3e:	4619      	mov	r1, r3
 8007a40:	6878      	ldr	r0, [r7, #4]
 8007a42:	f7ff fc6e 	bl	8007322 <mg_send_u16>

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007a4c:	f003 0304 	and.w	r3, r3, #4
 8007a50:	b2db      	uxtb	r3, r3
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <mg_mqtt_login+0x1e6>
 8007a56:	683b      	ldr	r3, [r7, #0]
 8007a58:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007a5a:	683b      	ldr	r3, [r7, #0]
 8007a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a5e:	461a      	mov	r2, r3
 8007a60:	6878      	ldr	r0, [r7, #4]
 8007a62:	f7ff fdc3 	bl	80075ec <mg_send_mqtt_properties>

  mg_send_u16(c, mg_htons((uint16_t) cid.len));
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	b29b      	uxth	r3, r3
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f002 fd27 	bl	800a4be <mg_ntohs>
 8007a70:	4603      	mov	r3, r0
 8007a72:	4619      	mov	r1, r3
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f7ff fc54 	bl	8007322 <mg_send_u16>
  mg_send(c, cid.ptr, cid.len);
 8007a7a:	693b      	ldr	r3, [r7, #16]
 8007a7c:	697a      	ldr	r2, [r7, #20]
 8007a7e:	4619      	mov	r1, r3
 8007a80:	6878      	ldr	r0, [r7, #4]
 8007a82:	f005 ffcb 	bl	800da1c <mg_send>

  if (hdr[7] & MQTT_HAS_WILL) {
 8007a86:	7bfb      	ldrb	r3, [r7, #15]
 8007a88:	f003 0304 	and.w	r3, r3, #4
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d035      	beq.n	8007afc <mg_mqtt_login+0x27c>
    if (c->is_mqtt5)
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007a96:	f003 0304 	and.w	r3, r3, #4
 8007a9a:	b2db      	uxtb	r3, r3
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d007      	beq.n	8007ab0 <mg_mqtt_login+0x230>
      mg_send_mqtt_properties(c, opts->will_props, opts->num_will_props);
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8007aa4:	683b      	ldr	r3, [r7, #0]
 8007aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa8:	461a      	mov	r2, r3
 8007aaa:	6878      	ldr	r0, [r7, #4]
 8007aac:	f7ff fd9e 	bl	80075ec <mg_send_mqtt_properties>

    mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8007ab0:	683b      	ldr	r3, [r7, #0]
 8007ab2:	69db      	ldr	r3, [r3, #28]
 8007ab4:	b29b      	uxth	r3, r3
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f002 fd01 	bl	800a4be <mg_ntohs>
 8007abc:	4603      	mov	r3, r0
 8007abe:	4619      	mov	r1, r3
 8007ac0:	6878      	ldr	r0, [r7, #4]
 8007ac2:	f7ff fc2e 	bl	8007322 <mg_send_u16>
    mg_send(c, opts->topic.ptr, opts->topic.len);
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	6999      	ldr	r1, [r3, #24]
 8007aca:	683b      	ldr	r3, [r7, #0]
 8007acc:	69db      	ldr	r3, [r3, #28]
 8007ace:	461a      	mov	r2, r3
 8007ad0:	6878      	ldr	r0, [r7, #4]
 8007ad2:	f005 ffa3 	bl	800da1c <mg_send>
    mg_send_u16(c, mg_htons((uint16_t) opts->message.len));
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ada:	b29b      	uxth	r3, r3
 8007adc:	4618      	mov	r0, r3
 8007ade:	f002 fcee 	bl	800a4be <mg_ntohs>
 8007ae2:	4603      	mov	r3, r0
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	6878      	ldr	r0, [r7, #4]
 8007ae8:	f7ff fc1b 	bl	8007322 <mg_send_u16>
    mg_send(c, opts->message.ptr, opts->message.len);
 8007aec:	683b      	ldr	r3, [r7, #0]
 8007aee:	6a19      	ldr	r1, [r3, #32]
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af4:	461a      	mov	r2, r3
 8007af6:	6878      	ldr	r0, [r7, #4]
 8007af8:	f005 ff90 	bl	800da1c <mg_send>
  }
  if (opts->user.len > 0) {
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d012      	beq.n	8007b2a <mg_mqtt_login+0x2aa>
    mg_send_u16(c, mg_htons((uint16_t) opts->user.len));
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	b29b      	uxth	r3, r3
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f002 fcd7 	bl	800a4be <mg_ntohs>
 8007b10:	4603      	mov	r3, r0
 8007b12:	4619      	mov	r1, r3
 8007b14:	6878      	ldr	r0, [r7, #4]
 8007b16:	f7ff fc04 	bl	8007322 <mg_send_u16>
    mg_send(c, opts->user.ptr, opts->user.len);
 8007b1a:	683b      	ldr	r3, [r7, #0]
 8007b1c:	6819      	ldr	r1, [r3, #0]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	685b      	ldr	r3, [r3, #4]
 8007b22:	461a      	mov	r2, r3
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f005 ff79 	bl	800da1c <mg_send>
  }
  if (opts->pass.len > 0) {
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68db      	ldr	r3, [r3, #12]
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d012      	beq.n	8007b58 <mg_mqtt_login+0x2d8>
    mg_send_u16(c, mg_htons((uint16_t) opts->pass.len));
 8007b32:	683b      	ldr	r3, [r7, #0]
 8007b34:	68db      	ldr	r3, [r3, #12]
 8007b36:	b29b      	uxth	r3, r3
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f002 fcc0 	bl	800a4be <mg_ntohs>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	4619      	mov	r1, r3
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7ff fbed 	bl	8007322 <mg_send_u16>
    mg_send(c, opts->pass.ptr, opts->pass.len);
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	6899      	ldr	r1, [r3, #8]
 8007b4c:	683b      	ldr	r3, [r7, #0]
 8007b4e:	68db      	ldr	r3, [r3, #12]
 8007b50:	461a      	mov	r2, r3
 8007b52:	6878      	ldr	r0, [r7, #4]
 8007b54:	f005 ff62 	bl	800da1c <mg_send>
  }
}
 8007b58:	bf00      	nop
 8007b5a:	3740      	adds	r7, #64	; 0x40
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}

08007b60 <mg_mqtt_pub>:

void mg_mqtt_pub(struct mg_connection *c, const struct mg_mqtt_opts *opts) {
 8007b60:	b590      	push	{r4, r7, lr}
 8007b62:	b087      	sub	sp, #28
 8007b64:	af02      	add	r7, sp, #8
 8007b66:	6078      	str	r0, [r7, #4]
 8007b68:	6039      	str	r1, [r7, #0]
  uint8_t flags = (uint8_t) (((opts->qos & 3) << 1) | (opts->retain ? 1 : 0));
 8007b6a:	683b      	ldr	r3, [r7, #0]
 8007b6c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007b70:	005b      	lsls	r3, r3, #1
 8007b72:	b25b      	sxtb	r3, r3
 8007b74:	f003 0306 	and.w	r3, r3, #6
 8007b78:	b25b      	sxtb	r3, r3
 8007b7a:	683a      	ldr	r2, [r7, #0]
 8007b7c:	f892 202c 	ldrb.w	r2, [r2, #44]	; 0x2c
 8007b80:	2a00      	cmp	r2, #0
 8007b82:	d001      	beq.n	8007b88 <mg_mqtt_pub+0x28>
 8007b84:	2201      	movs	r2, #1
 8007b86:	e000      	b.n	8007b8a <mg_mqtt_pub+0x2a>
 8007b88:	2200      	movs	r2, #0
 8007b8a:	4313      	orrs	r3, r2
 8007b8c:	b25b      	sxtb	r3, r3
 8007b8e:	72fb      	strb	r3, [r7, #11]
  size_t len = 2 + opts->topic.len + opts->message.len;
 8007b90:	683b      	ldr	r3, [r7, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	683b      	ldr	r3, [r7, #0]
 8007b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b98:	4413      	add	r3, r2
 8007b9a:	3302      	adds	r3, #2
 8007b9c:	60fb      	str	r3, [r7, #12]
  MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) opts->topic.len,
 8007b9e:	4b46      	ldr	r3, [pc, #280]	; (8007cb8 <mg_mqtt_pub+0x158>)
 8007ba0:	f640 42f6 	movw	r2, #3318	; 0xcf6
 8007ba4:	4945      	ldr	r1, [pc, #276]	; (8007cbc <mg_mqtt_pub+0x15c>)
 8007ba6:	2003      	movs	r0, #3
 8007ba8:	f7ff fa34 	bl	8007014 <mg_log_prefix>
 8007bac:	4603      	mov	r3, r0
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d012      	beq.n	8007bd8 <mg_mqtt_pub+0x78>
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007bb6:	683b      	ldr	r3, [r7, #0]
 8007bb8:	69db      	ldr	r3, [r3, #28]
 8007bba:	461c      	mov	r4, r3
 8007bbc:	683b      	ldr	r3, [r7, #0]
 8007bbe:	699a      	ldr	r2, [r3, #24]
 8007bc0:	683b      	ldr	r3, [r7, #0]
 8007bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	683b      	ldr	r3, [r7, #0]
 8007bc8:	6a1b      	ldr	r3, [r3, #32]
 8007bca:	9301      	str	r3, [sp, #4]
 8007bcc:	9000      	str	r0, [sp, #0]
 8007bce:	4613      	mov	r3, r2
 8007bd0:	4622      	mov	r2, r4
 8007bd2:	483b      	ldr	r0, [pc, #236]	; (8007cc0 <mg_mqtt_pub+0x160>)
 8007bd4:	f7ff fa78 	bl	80070c8 <mg_log>
            (char *) opts->topic.ptr, (int) opts->message.len,
            (char *) opts->message.ptr));
  if (opts->qos > 0) len += 2;
 8007bd8:	683b      	ldr	r3, [r7, #0]
 8007bda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d002      	beq.n	8007be8 <mg_mqtt_pub+0x88>
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	3302      	adds	r3, #2
 8007be6:	60fb      	str	r3, [r7, #12]
  if (c->is_mqtt5) len += get_props_size(opts->props, opts->num_props);
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007bee:	f003 0304 	and.w	r3, r3, #4
 8007bf2:	b2db      	uxtb	r3, r3
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d00b      	beq.n	8007c10 <mg_mqtt_pub+0xb0>
 8007bf8:	683b      	ldr	r3, [r7, #0]
 8007bfa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bfc:	683b      	ldr	r3, [r7, #0]
 8007bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c00:	4619      	mov	r1, r3
 8007c02:	4610      	mov	r0, r2
 8007c04:	f7ff fcda 	bl	80075bc <get_props_size>
 8007c08:	4602      	mov	r2, r0
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	4413      	add	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]

  mg_mqtt_send_header(c, MQTT_CMD_PUBLISH, flags, (uint32_t) len);
 8007c10:	7afa      	ldrb	r2, [r7, #11]
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	2103      	movs	r1, #3
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7ff fb3e 	bl	8007298 <mg_mqtt_send_header>
  mg_send_u16(c, mg_htons((uint16_t) opts->topic.len));
 8007c1c:	683b      	ldr	r3, [r7, #0]
 8007c1e:	69db      	ldr	r3, [r3, #28]
 8007c20:	b29b      	uxth	r3, r3
 8007c22:	4618      	mov	r0, r3
 8007c24:	f002 fc4b 	bl	800a4be <mg_ntohs>
 8007c28:	4603      	mov	r3, r0
 8007c2a:	4619      	mov	r1, r3
 8007c2c:	6878      	ldr	r0, [r7, #4]
 8007c2e:	f7ff fb78 	bl	8007322 <mg_send_u16>
  mg_send(c, opts->topic.ptr, opts->topic.len);
 8007c32:	683b      	ldr	r3, [r7, #0]
 8007c34:	6999      	ldr	r1, [r3, #24]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	69db      	ldr	r3, [r3, #28]
 8007c3a:	461a      	mov	r2, r3
 8007c3c:	6878      	ldr	r0, [r7, #4]
 8007c3e:	f005 feed 	bl	800da1c <mg_send>
  if (opts->qos > 0) {
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007c48:	2b00      	cmp	r3, #0
 8007c4a:	d019      	beq.n	8007c80 <mg_mqtt_pub+0x120>
    if (++c->mgr->mqtt_id == 0) ++c->mgr->mqtt_id;
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c52:	3201      	adds	r2, #1
 8007c54:	b292      	uxth	r2, r2
 8007c56:	859a      	strh	r2, [r3, #44]	; 0x2c
 8007c58:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d105      	bne.n	8007c6a <mg_mqtt_pub+0x10a>
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	685b      	ldr	r3, [r3, #4]
 8007c62:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c64:	3201      	adds	r2, #1
 8007c66:	b292      	uxth	r2, r2
 8007c68:	859a      	strh	r2, [r3, #44]	; 0x2c
    mg_send_u16(c, mg_htons(c->mgr->mqtt_id));
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	685b      	ldr	r3, [r3, #4]
 8007c6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c70:	4618      	mov	r0, r3
 8007c72:	f002 fc24 	bl	800a4be <mg_ntohs>
 8007c76:	4603      	mov	r3, r0
 8007c78:	4619      	mov	r1, r3
 8007c7a:	6878      	ldr	r0, [r7, #4]
 8007c7c:	f7ff fb51 	bl	8007322 <mg_send_u16>
  }

  if (c->is_mqtt5) mg_send_mqtt_properties(c, opts->props, opts->num_props);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007c86:	f003 0304 	and.w	r3, r3, #4
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d007      	beq.n	8007ca0 <mg_mqtt_pub+0x140>
 8007c90:	683b      	ldr	r3, [r7, #0]
 8007c92:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007c94:	683b      	ldr	r3, [r7, #0]
 8007c96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c98:	461a      	mov	r2, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f7ff fca6 	bl	80075ec <mg_send_mqtt_properties>

  mg_send(c, opts->message.ptr, opts->message.len);
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	6a19      	ldr	r1, [r3, #32]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ca8:	461a      	mov	r2, r3
 8007caa:	6878      	ldr	r0, [r7, #4]
 8007cac:	f005 feb6 	bl	800da1c <mg_send>
}
 8007cb0:	bf00      	nop
 8007cb2:	3714      	adds	r7, #20
 8007cb4:	46bd      	mov	sp, r7
 8007cb6:	bd90      	pop	{r4, r7, pc}
 8007cb8:	08017410 	.word	0x08017410
 8007cbc:	0801544c 	.word	0x0801544c
 8007cc0:	080160cc 	.word	0x080160cc

08007cc4 <mg_mqtt_parse>:
  mg_send(c, opts->topic.ptr, opts->topic.len);
  mg_send(c, &qos_, sizeof(qos_));
}

int mg_mqtt_parse(const uint8_t *buf, size_t len, uint8_t version,
                  struct mg_mqtt_message *m) {
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b08a      	sub	sp, #40	; 0x28
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	60f8      	str	r0, [r7, #12]
 8007ccc:	60b9      	str	r1, [r7, #8]
 8007cce:	603b      	str	r3, [r7, #0]
 8007cd0:	4613      	mov	r3, r2
 8007cd2:	71fb      	strb	r3, [r7, #7]
  uint8_t lc = 0, *p, *end;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t n = 0, len_len = 0;
 8007cda:	2300      	movs	r3, #0
 8007cdc:	61fb      	str	r3, [r7, #28]
 8007cde:	2300      	movs	r3, #0
 8007ce0:	61bb      	str	r3, [r7, #24]

  memset(m, 0, sizeof(*m));
 8007ce2:	2228      	movs	r2, #40	; 0x28
 8007ce4:	2100      	movs	r1, #0
 8007ce6:	6838      	ldr	r0, [r7, #0]
 8007ce8:	f00c fd24 	bl	8014734 <memset>
  m->dgram.ptr = (char *) buf;
 8007cec:	683b      	ldr	r3, [r7, #0]
 8007cee:	68fa      	ldr	r2, [r7, #12]
 8007cf0:	611a      	str	r2, [r3, #16]
  if (len < 2) return MQTT_INCOMPLETE;
 8007cf2:	68bb      	ldr	r3, [r7, #8]
 8007cf4:	2b01      	cmp	r3, #1
 8007cf6:	d801      	bhi.n	8007cfc <mg_mqtt_parse+0x38>
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e104      	b.n	8007f06 <mg_mqtt_parse+0x242>
  m->cmd = (uint8_t) (buf[0] >> 4);
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	781b      	ldrb	r3, [r3, #0]
 8007d00:	091b      	lsrs	r3, r3, #4
 8007d02:	b2da      	uxtb	r2, r3
 8007d04:	683b      	ldr	r3, [r7, #0]
 8007d06:	769a      	strb	r2, [r3, #26]
  m->qos = (buf[0] >> 1) & 3;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	085b      	lsrs	r3, r3, #1
 8007d0e:	b2db      	uxtb	r3, r3
 8007d10:	f003 0303 	and.w	r3, r3, #3
 8007d14:	b2da      	uxtb	r2, r3
 8007d16:	683b      	ldr	r3, [r7, #0]
 8007d18:	76da      	strb	r2, [r3, #27]

  n = len_len = 0;
 8007d1a:	2300      	movs	r3, #0
 8007d1c:	61bb      	str	r3, [r7, #24]
 8007d1e:	69bb      	ldr	r3, [r7, #24]
 8007d20:	61fb      	str	r3, [r7, #28]
  p = (uint8_t *) buf + 1;
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	3301      	adds	r3, #1
 8007d26:	623b      	str	r3, [r7, #32]
  while ((size_t) (p - buf) < len) {
 8007d28:	e01f      	b.n	8007d6a <mg_mqtt_parse+0xa6>
    lc = *((uint8_t *) p++);
 8007d2a:	6a3b      	ldr	r3, [r7, #32]
 8007d2c:	1c5a      	adds	r2, r3, #1
 8007d2e:	623a      	str	r2, [r7, #32]
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    n += (uint32_t) ((lc & 0x7f) << 7 * len_len);
 8007d36:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007d3a:	f003 017f 	and.w	r1, r3, #127	; 0x7f
 8007d3e:	69ba      	ldr	r2, [r7, #24]
 8007d40:	4613      	mov	r3, r2
 8007d42:	00db      	lsls	r3, r3, #3
 8007d44:	1a9b      	subs	r3, r3, r2
 8007d46:	fa01 f303 	lsl.w	r3, r1, r3
 8007d4a:	461a      	mov	r2, r3
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	4413      	add	r3, r2
 8007d50:	61fb      	str	r3, [r7, #28]
    len_len++;
 8007d52:	69bb      	ldr	r3, [r7, #24]
 8007d54:	3301      	adds	r3, #1
 8007d56:	61bb      	str	r3, [r7, #24]
    if (!(lc & 0x80)) break;
 8007d58:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	da0c      	bge.n	8007d7a <mg_mqtt_parse+0xb6>
    if (len_len >= 4) return MQTT_MALFORMED;
 8007d60:	69bb      	ldr	r3, [r7, #24]
 8007d62:	2b03      	cmp	r3, #3
 8007d64:	d901      	bls.n	8007d6a <mg_mqtt_parse+0xa6>
 8007d66:	2302      	movs	r3, #2
 8007d68:	e0cd      	b.n	8007f06 <mg_mqtt_parse+0x242>
  while ((size_t) (p - buf) < len) {
 8007d6a:	6a3a      	ldr	r2, [r7, #32]
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	1ad3      	subs	r3, r2, r3
 8007d70:	461a      	mov	r2, r3
 8007d72:	68bb      	ldr	r3, [r7, #8]
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d8d8      	bhi.n	8007d2a <mg_mqtt_parse+0x66>
 8007d78:	e000      	b.n	8007d7c <mg_mqtt_parse+0xb8>
    if (!(lc & 0x80)) break;
 8007d7a:	bf00      	nop
  }
  end = p + n;
 8007d7c:	6a3a      	ldr	r2, [r7, #32]
 8007d7e:	69fb      	ldr	r3, [r7, #28]
 8007d80:	4413      	add	r3, r2
 8007d82:	617b      	str	r3, [r7, #20]
  if ((lc & 0x80) || (end > buf + len)) return MQTT_INCOMPLETE;
 8007d84:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	db05      	blt.n	8007d98 <mg_mqtt_parse+0xd4>
 8007d8c:	68fa      	ldr	r2, [r7, #12]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	4413      	add	r3, r2
 8007d92:	697a      	ldr	r2, [r7, #20]
 8007d94:	429a      	cmp	r2, r3
 8007d96:	d901      	bls.n	8007d9c <mg_mqtt_parse+0xd8>
 8007d98:	2301      	movs	r3, #1
 8007d9a:	e0b4      	b.n	8007f06 <mg_mqtt_parse+0x242>
  m->dgram.len = (size_t) (end - buf);
 8007d9c:	697a      	ldr	r2, [r7, #20]
 8007d9e:	68fb      	ldr	r3, [r7, #12]
 8007da0:	1ad3      	subs	r3, r2, r3
 8007da2:	461a      	mov	r2, r3
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	615a      	str	r2, [r3, #20]

  switch (m->cmd) {
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	7e9b      	ldrb	r3, [r3, #26]
 8007dac:	2b0b      	cmp	r3, #11
 8007dae:	f300 80a8 	bgt.w	8007f02 <mg_mqtt_parse+0x23e>
 8007db2:	2b04      	cmp	r3, #4
 8007db4:	da10      	bge.n	8007dd8 <mg_mqtt_parse+0x114>
 8007db6:	2b02      	cmp	r3, #2
 8007db8:	d002      	beq.n	8007dc0 <mg_mqtt_parse+0xfc>
 8007dba:	2b03      	cmp	r3, #3
 8007dbc:	d024      	beq.n	8007e08 <mg_mqtt_parse+0x144>
      m->data.ptr = (char *) p;
      m->data.len = (size_t) (end - p);
      break;
    }
    default:
      break;
 8007dbe:	e0a0      	b.n	8007f02 <mg_mqtt_parse+0x23e>
      if (end - p < 2) return MQTT_MALFORMED;
 8007dc0:	697a      	ldr	r2, [r7, #20]
 8007dc2:	6a3b      	ldr	r3, [r7, #32]
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	2b01      	cmp	r3, #1
 8007dc8:	dc01      	bgt.n	8007dce <mg_mqtt_parse+0x10a>
 8007dca:	2302      	movs	r3, #2
 8007dcc:	e09b      	b.n	8007f06 <mg_mqtt_parse+0x242>
      m->ack = p[1];
 8007dce:	6a3b      	ldr	r3, [r7, #32]
 8007dd0:	785a      	ldrb	r2, [r3, #1]
 8007dd2:	683b      	ldr	r3, [r7, #0]
 8007dd4:	771a      	strb	r2, [r3, #28]
      break;
 8007dd6:	e095      	b.n	8007f04 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8007dd8:	6a3b      	ldr	r3, [r7, #32]
 8007dda:	3302      	adds	r3, #2
 8007ddc:	697a      	ldr	r2, [r7, #20]
 8007dde:	429a      	cmp	r2, r3
 8007de0:	d201      	bcs.n	8007de6 <mg_mqtt_parse+0x122>
 8007de2:	2302      	movs	r3, #2
 8007de4:	e08f      	b.n	8007f06 <mg_mqtt_parse+0x242>
      m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8007de6:	6a3b      	ldr	r3, [r7, #32]
 8007de8:	781b      	ldrb	r3, [r3, #0]
 8007dea:	021b      	lsls	r3, r3, #8
 8007dec:	b21a      	sxth	r2, r3
 8007dee:	6a3b      	ldr	r3, [r7, #32]
 8007df0:	3301      	adds	r3, #1
 8007df2:	781b      	ldrb	r3, [r3, #0]
 8007df4:	b21b      	sxth	r3, r3
 8007df6:	4313      	orrs	r3, r2
 8007df8:	b21b      	sxth	r3, r3
 8007dfa:	b29a      	uxth	r2, r3
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	831a      	strh	r2, [r3, #24]
      p += 2;
 8007e00:	6a3b      	ldr	r3, [r7, #32]
 8007e02:	3302      	adds	r3, #2
 8007e04:	623b      	str	r3, [r7, #32]
      break;
 8007e06:	e07d      	b.n	8007f04 <mg_mqtt_parse+0x240>
      if (p + 2 > end) return MQTT_MALFORMED;
 8007e08:	6a3b      	ldr	r3, [r7, #32]
 8007e0a:	3302      	adds	r3, #2
 8007e0c:	697a      	ldr	r2, [r7, #20]
 8007e0e:	429a      	cmp	r2, r3
 8007e10:	d201      	bcs.n	8007e16 <mg_mqtt_parse+0x152>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e077      	b.n	8007f06 <mg_mqtt_parse+0x242>
      m->topic.len = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8007e16:	6a3b      	ldr	r3, [r7, #32]
 8007e18:	781b      	ldrb	r3, [r3, #0]
 8007e1a:	021b      	lsls	r3, r3, #8
 8007e1c:	b21a      	sxth	r2, r3
 8007e1e:	6a3b      	ldr	r3, [r7, #32]
 8007e20:	3301      	adds	r3, #1
 8007e22:	781b      	ldrb	r3, [r3, #0]
 8007e24:	b21b      	sxth	r3, r3
 8007e26:	4313      	orrs	r3, r2
 8007e28:	b21b      	sxth	r3, r3
 8007e2a:	b29b      	uxth	r3, r3
 8007e2c:	461a      	mov	r2, r3
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	605a      	str	r2, [r3, #4]
      m->topic.ptr = (char *) p + 2;
 8007e32:	6a3b      	ldr	r3, [r7, #32]
 8007e34:	1c9a      	adds	r2, r3, #2
 8007e36:	683b      	ldr	r3, [r7, #0]
 8007e38:	601a      	str	r2, [r3, #0]
      p += 2 + m->topic.len;
 8007e3a:	683b      	ldr	r3, [r7, #0]
 8007e3c:	685b      	ldr	r3, [r3, #4]
 8007e3e:	3302      	adds	r3, #2
 8007e40:	6a3a      	ldr	r2, [r7, #32]
 8007e42:	4413      	add	r3, r2
 8007e44:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8007e46:	6a3a      	ldr	r2, [r7, #32]
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d901      	bls.n	8007e52 <mg_mqtt_parse+0x18e>
 8007e4e:	2302      	movs	r3, #2
 8007e50:	e059      	b.n	8007f06 <mg_mqtt_parse+0x242>
      if (m->qos > 0) {
 8007e52:	683b      	ldr	r3, [r7, #0]
 8007e54:	7edb      	ldrb	r3, [r3, #27]
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d016      	beq.n	8007e88 <mg_mqtt_parse+0x1c4>
        if (p + 2 > end) return MQTT_MALFORMED;
 8007e5a:	6a3b      	ldr	r3, [r7, #32]
 8007e5c:	3302      	adds	r3, #2
 8007e5e:	697a      	ldr	r2, [r7, #20]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d201      	bcs.n	8007e68 <mg_mqtt_parse+0x1a4>
 8007e64:	2302      	movs	r3, #2
 8007e66:	e04e      	b.n	8007f06 <mg_mqtt_parse+0x242>
        m->id = (uint16_t) ((((uint16_t) p[0]) << 8) | p[1]);
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	781b      	ldrb	r3, [r3, #0]
 8007e6c:	021b      	lsls	r3, r3, #8
 8007e6e:	b21a      	sxth	r2, r3
 8007e70:	6a3b      	ldr	r3, [r7, #32]
 8007e72:	3301      	adds	r3, #1
 8007e74:	781b      	ldrb	r3, [r3, #0]
 8007e76:	b21b      	sxth	r3, r3
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	b21b      	sxth	r3, r3
 8007e7c:	b29a      	uxth	r2, r3
 8007e7e:	683b      	ldr	r3, [r7, #0]
 8007e80:	831a      	strh	r2, [r3, #24]
        p += 2;
 8007e82:	6a3b      	ldr	r3, [r7, #32]
 8007e84:	3302      	adds	r3, #2
 8007e86:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8007e88:	6a3a      	ldr	r2, [r7, #32]
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	429a      	cmp	r2, r3
 8007e8e:	d901      	bls.n	8007e94 <mg_mqtt_parse+0x1d0>
 8007e90:	2302      	movs	r3, #2
 8007e92:	e038      	b.n	8007f06 <mg_mqtt_parse+0x242>
      if (version == 5 && p + 2 < end) {
 8007e94:	79fb      	ldrb	r3, [r7, #7]
 8007e96:	2b05      	cmp	r3, #5
 8007e98:	d123      	bne.n	8007ee2 <mg_mqtt_parse+0x21e>
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	3302      	adds	r3, #2
 8007e9e:	697a      	ldr	r2, [r7, #20]
 8007ea0:	429a      	cmp	r2, r3
 8007ea2:	d91e      	bls.n	8007ee2 <mg_mqtt_parse+0x21e>
        len_len = (uint32_t) decode_varint(p, (size_t) (end - p), &m->props_size);
 8007ea4:	697a      	ldr	r2, [r7, #20]
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	1ad3      	subs	r3, r2, r3
 8007eaa:	4619      	mov	r1, r3
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	3324      	adds	r3, #36	; 0x24
 8007eb0:	461a      	mov	r2, r3
 8007eb2:	6a38      	ldr	r0, [r7, #32]
 8007eb4:	f7ff fa92 	bl	80073dc <decode_varint>
 8007eb8:	61b8      	str	r0, [r7, #24]
        if (!len_len) return MQTT_MALFORMED;
 8007eba:	69bb      	ldr	r3, [r7, #24]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d101      	bne.n	8007ec4 <mg_mqtt_parse+0x200>
 8007ec0:	2302      	movs	r3, #2
 8007ec2:	e020      	b.n	8007f06 <mg_mqtt_parse+0x242>
        m->props_start = (size_t) (p + len_len - buf);
 8007ec4:	6a3a      	ldr	r2, [r7, #32]
 8007ec6:	69bb      	ldr	r3, [r7, #24]
 8007ec8:	441a      	add	r2, r3
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	461a      	mov	r2, r3
 8007ed0:	683b      	ldr	r3, [r7, #0]
 8007ed2:	621a      	str	r2, [r3, #32]
        p += len_len + m->props_size;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007ed8:	69bb      	ldr	r3, [r7, #24]
 8007eda:	4413      	add	r3, r2
 8007edc:	6a3a      	ldr	r2, [r7, #32]
 8007ede:	4413      	add	r3, r2
 8007ee0:	623b      	str	r3, [r7, #32]
      if (p > end) return MQTT_MALFORMED;
 8007ee2:	6a3a      	ldr	r2, [r7, #32]
 8007ee4:	697b      	ldr	r3, [r7, #20]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d901      	bls.n	8007eee <mg_mqtt_parse+0x22a>
 8007eea:	2302      	movs	r3, #2
 8007eec:	e00b      	b.n	8007f06 <mg_mqtt_parse+0x242>
      m->data.ptr = (char *) p;
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	6a3a      	ldr	r2, [r7, #32]
 8007ef2:	609a      	str	r2, [r3, #8]
      m->data.len = (size_t) (end - p);
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	6a3b      	ldr	r3, [r7, #32]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	461a      	mov	r2, r3
 8007efc:	683b      	ldr	r3, [r7, #0]
 8007efe:	60da      	str	r2, [r3, #12]
      break;
 8007f00:	e000      	b.n	8007f04 <mg_mqtt_parse+0x240>
      break;
 8007f02:	bf00      	nop
  }
  return MQTT_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3728      	adds	r7, #40	; 0x28
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}
	...

08007f10 <mqtt_cb>:

static void mqtt_cb(struct mg_connection *c, int ev, void *ev_data,
                    void *fn_data) {
 8007f10:	b590      	push	{r4, r7, lr}
 8007f12:	b099      	sub	sp, #100	; 0x64
 8007f14:	af02      	add	r7, sp, #8
 8007f16:	60f8      	str	r0, [r7, #12]
 8007f18:	60b9      	str	r1, [r7, #8]
 8007f1a:	607a      	str	r2, [r7, #4]
 8007f1c:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_READ) {
 8007f1e:	68bb      	ldr	r3, [r7, #8]
 8007f20:	2b07      	cmp	r3, #7
 8007f22:	f040 8138 	bne.w	8008196 <mqtt_cb+0x286>
    for (;;) {
      uint8_t version = c->is_mqtt5 ? 5 : 4;
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8007f2c:	f003 0304 	and.w	r3, r3, #4
 8007f30:	b2db      	uxtb	r3, r3
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d001      	beq.n	8007f3a <mqtt_cb+0x2a>
 8007f36:	2305      	movs	r3, #5
 8007f38:	e000      	b.n	8007f3c <mqtt_cb+0x2c>
 8007f3a:	2304      	movs	r3, #4
 8007f3c:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
      struct mg_mqtt_message mm;
      int rc = mg_mqtt_parse(c->recv.buf, c->recv.len, version, &mm);
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	6c19      	ldr	r1, [r3, #64]	; 0x40
 8007f48:	f107 0314 	add.w	r3, r7, #20
 8007f4c:	f897 2053 	ldrb.w	r2, [r7, #83]	; 0x53
 8007f50:	f7ff feb8 	bl	8007cc4 <mg_mqtt_parse>
 8007f54:	64f8      	str	r0, [r7, #76]	; 0x4c
      if (rc == MQTT_MALFORMED) {
 8007f56:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f58:	2b02      	cmp	r3, #2
 8007f5a:	d117      	bne.n	8007f8c <mqtt_cb+0x7c>
        MG_ERROR(("%lu MQTT malformed message", c->id));
 8007f5c:	4b90      	ldr	r3, [pc, #576]	; (80081a0 <mqtt_cb+0x290>)
 8007f5e:	f640 5266 	movw	r2, #3430	; 0xd66
 8007f62:	4990      	ldr	r1, [pc, #576]	; (80081a4 <mqtt_cb+0x294>)
 8007f64:	2001      	movs	r0, #1
 8007f66:	f7ff f855 	bl	8007014 <mg_log_prefix>
 8007f6a:	4603      	mov	r3, r0
 8007f6c:	2b00      	cmp	r3, #0
 8007f6e:	d005      	beq.n	8007f7c <mqtt_cb+0x6c>
 8007f70:	68fb      	ldr	r3, [r7, #12]
 8007f72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f74:	4619      	mov	r1, r3
 8007f76:	488c      	ldr	r0, [pc, #560]	; (80081a8 <mqtt_cb+0x298>)
 8007f78:	f7ff f8a6 	bl	80070c8 <mg_log>
        c->is_closing = 1;
 8007f7c:	68fa      	ldr	r2, [r7, #12]
 8007f7e:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8007f82:	f043 0320 	orr.w	r3, r3, #32
 8007f86:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
        break;
 8007f8a:	e104      	b.n	8008196 <mqtt_cb+0x286>
      } else if (rc == MQTT_OK) {
 8007f8c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	f040 8100 	bne.w	8008194 <mqtt_cb+0x284>
        MG_VERBOSE(("%lu MQTT CMD %d len %d [%.*s]", c->id, mm.cmd,
 8007f94:	4b82      	ldr	r3, [pc, #520]	; (80081a0 <mqtt_cb+0x290>)
 8007f96:	f640 526a 	movw	r2, #3434	; 0xd6a
 8007f9a:	4982      	ldr	r1, [pc, #520]	; (80081a4 <mqtt_cb+0x294>)
 8007f9c:	2004      	movs	r0, #4
 8007f9e:	f7ff f839 	bl	8007014 <mg_log_prefix>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d010      	beq.n	8007fca <mqtt_cb+0xba>
 8007fa8:	68fb      	ldr	r3, [r7, #12]
 8007faa:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007fac:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007fb0:	4618      	mov	r0, r3
 8007fb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007fb4:	461c      	mov	r4, r3
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	461a      	mov	r2, r3
 8007fba:	69fb      	ldr	r3, [r7, #28]
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	9200      	str	r2, [sp, #0]
 8007fc0:	4623      	mov	r3, r4
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	4879      	ldr	r0, [pc, #484]	; (80081ac <mqtt_cb+0x29c>)
 8007fc6:	f7ff f87f 	bl	80070c8 <mg_log>
                    (int) mm.dgram.len, (int) mm.data.len, mm.data.ptr));
        switch (mm.cmd) {
 8007fca:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8007fce:	3b02      	subs	r3, #2
 8007fd0:	2b04      	cmp	r3, #4
 8007fd2:	f200 80d0 	bhi.w	8008176 <mqtt_cb+0x266>
 8007fd6:	a201      	add	r2, pc, #4	; (adr r2, 8007fdc <mqtt_cb+0xcc>)
 8007fd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007fdc:	08007ff1 	.word	0x08007ff1
 8007fe0:	08008061 	.word	0x08008061
 8007fe4:	08008177 	.word	0x08008177
 8007fe8:	0800811d 	.word	0x0800811d
 8007fec:	08008149 	.word	0x08008149
          case MQTT_CMD_CONNACK:
            mg_call(c, MG_EV_MQTT_OPEN, &mm.ack);
 8007ff0:	f107 0314 	add.w	r3, r7, #20
 8007ff4:	331c      	adds	r3, #28
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	2111      	movs	r1, #17
 8007ffa:	68f8      	ldr	r0, [r7, #12]
 8007ffc:	f7fa f82a 	bl	8002054 <mg_call>
            if (mm.ack == 0) {
 8008000:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8008004:	2b00      	cmp	r3, #0
 8008006:	d111      	bne.n	800802c <mqtt_cb+0x11c>
              MG_DEBUG(("%lu Connected", c->id));
 8008008:	4b65      	ldr	r3, [pc, #404]	; (80081a0 <mqtt_cb+0x290>)
 800800a:	f44f 6257 	mov.w	r2, #3440	; 0xd70
 800800e:	4965      	ldr	r1, [pc, #404]	; (80081a4 <mqtt_cb+0x294>)
 8008010:	2003      	movs	r0, #3
 8008012:	f7fe ffff 	bl	8007014 <mg_log_prefix>
 8008016:	4603      	mov	r3, r0
 8008018:	2b00      	cmp	r3, #0
 800801a:	f000 80ab 	beq.w	8008174 <mqtt_cb+0x264>
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008022:	4619      	mov	r1, r3
 8008024:	4862      	ldr	r0, [pc, #392]	; (80081b0 <mqtt_cb+0x2a0>)
 8008026:	f7ff f84f 	bl	80070c8 <mg_log>
            } else {
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
              c->is_closing = 1;
            }
            break;
 800802a:	e0a3      	b.n	8008174 <mqtt_cb+0x264>
              MG_ERROR(("%lu MQTT auth failed, code %d", c->id, mm.ack));
 800802c:	4b5c      	ldr	r3, [pc, #368]	; (80081a0 <mqtt_cb+0x290>)
 800802e:	f640 5272 	movw	r2, #3442	; 0xd72
 8008032:	495c      	ldr	r1, [pc, #368]	; (80081a4 <mqtt_cb+0x294>)
 8008034:	2001      	movs	r0, #1
 8008036:	f7fe ffed 	bl	8007014 <mg_log_prefix>
 800803a:	4603      	mov	r3, r0
 800803c:	2b00      	cmp	r3, #0
 800803e:	d007      	beq.n	8008050 <mqtt_cb+0x140>
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008044:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8008048:	4619      	mov	r1, r3
 800804a:	485a      	ldr	r0, [pc, #360]	; (80081b4 <mqtt_cb+0x2a4>)
 800804c:	f7ff f83c 	bl	80070c8 <mg_log>
              c->is_closing = 1;
 8008050:	68fa      	ldr	r2, [r7, #12]
 8008052:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 8008056:	f043 0320 	orr.w	r3, r3, #32
 800805a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
            break;
 800805e:	e089      	b.n	8008174 <mqtt_cb+0x264>
          case MQTT_CMD_PUBLISH: {
            MG_DEBUG(("%lu [%.*s] -> [%.*s]", c->id, (int) mm.topic.len,
 8008060:	4b4f      	ldr	r3, [pc, #316]	; (80081a0 <mqtt_cb+0x290>)
 8008062:	f640 5277 	movw	r2, #3447	; 0xd77
 8008066:	494f      	ldr	r1, [pc, #316]	; (80081a4 <mqtt_cb+0x294>)
 8008068:	2003      	movs	r0, #3
 800806a:	f7fe ffd3 	bl	8007014 <mg_log_prefix>
 800806e:	4603      	mov	r3, r0
 8008070:	2b00      	cmp	r3, #0
 8008072:	d00e      	beq.n	8008092 <mqtt_cb+0x182>
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	461c      	mov	r4, r3
 800807c:	697a      	ldr	r2, [r7, #20]
 800807e:	6a3b      	ldr	r3, [r7, #32]
 8008080:	4618      	mov	r0, r3
 8008082:	69fb      	ldr	r3, [r7, #28]
 8008084:	9301      	str	r3, [sp, #4]
 8008086:	9000      	str	r0, [sp, #0]
 8008088:	4613      	mov	r3, r2
 800808a:	4622      	mov	r2, r4
 800808c:	484a      	ldr	r0, [pc, #296]	; (80081b8 <mqtt_cb+0x2a8>)
 800808e:	f7ff f81b 	bl	80070c8 <mg_log>
                      mm.topic.ptr, (int) mm.data.len, mm.data.ptr));
            if (mm.qos > 0) {
 8008092:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8008096:	2b00      	cmp	r3, #0
 8008098:	d038      	beq.n	800810c <mqtt_cb+0x1fc>
              uint16_t id = mg_ntohs(mm.id);
 800809a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800809c:	4618      	mov	r0, r3
 800809e:	f002 fa0e 	bl	800a4be <mg_ntohs>
 80080a2:	4603      	mov	r3, r0
 80080a4:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
              uint32_t remaining_len = sizeof(id);
 80080a8:	2302      	movs	r3, #2
 80080aa:	657b      	str	r3, [r7, #84]	; 0x54
              if (c->is_mqtt5) remaining_len += 2;  // 3.4.2
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80080b2:	f003 0304 	and.w	r3, r3, #4
 80080b6:	b2db      	uxtb	r3, r3
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d002      	beq.n	80080c2 <mqtt_cb+0x1b2>
 80080bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080be:	3302      	adds	r3, #2
 80080c0:	657b      	str	r3, [r7, #84]	; 0x54

              mg_mqtt_send_header(
                  c,
                  (uint8_t) (mm.qos == 2 ? MQTT_CMD_PUBREC : MQTT_CMD_PUBACK),
 80080c2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
              mg_mqtt_send_header(
 80080c6:	2b02      	cmp	r3, #2
 80080c8:	d101      	bne.n	80080ce <mqtt_cb+0x1be>
 80080ca:	2105      	movs	r1, #5
 80080cc:	e000      	b.n	80080d0 <mqtt_cb+0x1c0>
 80080ce:	2104      	movs	r1, #4
 80080d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80080d2:	2200      	movs	r2, #0
 80080d4:	68f8      	ldr	r0, [r7, #12]
 80080d6:	f7ff f8df 	bl	8007298 <mg_mqtt_send_header>
                  0, remaining_len);
              mg_send(c, &id, sizeof(id));
 80080da:	f107 0342 	add.w	r3, r7, #66	; 0x42
 80080de:	2202      	movs	r2, #2
 80080e0:	4619      	mov	r1, r3
 80080e2:	68f8      	ldr	r0, [r7, #12]
 80080e4:	f005 fc9a 	bl	800da1c <mg_send>

              if (c->is_mqtt5) {
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80080ee:	f003 0304 	and.w	r3, r3, #4
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d009      	beq.n	800810c <mqtt_cb+0x1fc>
                uint16_t zero = 0;
 80080f8:	2300      	movs	r3, #0
 80080fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                mg_send(c, &zero, sizeof(zero));
 80080fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8008102:	2202      	movs	r2, #2
 8008104:	4619      	mov	r1, r3
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	f005 fc88 	bl	800da1c <mg_send>
              }
            }
            mg_call(c, MG_EV_MQTT_MSG, &mm);  // let the app handle qos stuff
 800810c:	f107 0314 	add.w	r3, r7, #20
 8008110:	461a      	mov	r2, r3
 8008112:	2110      	movs	r1, #16
 8008114:	68f8      	ldr	r0, [r7, #12]
 8008116:	f7f9 ff9d 	bl	8002054 <mg_call>
            break;
 800811a:	e02c      	b.n	8008176 <mqtt_cb+0x266>
          }
          case MQTT_CMD_PUBREC: {  // MQTT5: 3.5.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 800811c:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800811e:	4618      	mov	r0, r3
 8008120:	f002 f9cd 	bl	800a4be <mg_ntohs>
 8008124:	4603      	mov	r3, r0
 8008126:	87fb      	strh	r3, [r7, #62]	; 0x3e
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.6.2-1
 8008128:	2302      	movs	r3, #2
 800812a:	647b      	str	r3, [r7, #68]	; 0x44
            mg_mqtt_send_header(c, MQTT_CMD_PUBREL, 2, remaining_len);
 800812c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800812e:	2202      	movs	r2, #2
 8008130:	2106      	movs	r1, #6
 8008132:	68f8      	ldr	r0, [r7, #12]
 8008134:	f7ff f8b0 	bl	8007298 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));  // MQTT5 3.6.1-1, flags = 2
 8008138:	f107 033e 	add.w	r3, r7, #62	; 0x3e
 800813c:	2202      	movs	r2, #2
 800813e:	4619      	mov	r1, r3
 8008140:	68f8      	ldr	r0, [r7, #12]
 8008142:	f005 fc6b 	bl	800da1c <mg_send>
            break;
 8008146:	e016      	b.n	8008176 <mqtt_cb+0x266>
          }
          case MQTT_CMD_PUBREL: {  // MQTT5: 3.6.2-1 TODO(): variable header rc
            uint16_t id = mg_ntohs(mm.id);
 8008148:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800814a:	4618      	mov	r0, r3
 800814c:	f002 f9b7 	bl	800a4be <mg_ntohs>
 8008150:	4603      	mov	r3, r0
 8008152:	87bb      	strh	r3, [r7, #60]	; 0x3c
            uint32_t remaining_len = sizeof(id);  // MQTT5 3.7.2-1
 8008154:	2302      	movs	r3, #2
 8008156:	64bb      	str	r3, [r7, #72]	; 0x48
            mg_mqtt_send_header(c, MQTT_CMD_PUBCOMP, 0, remaining_len);
 8008158:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800815a:	2200      	movs	r2, #0
 800815c:	2107      	movs	r1, #7
 800815e:	68f8      	ldr	r0, [r7, #12]
 8008160:	f7ff f89a 	bl	8007298 <mg_mqtt_send_header>
            mg_send(c, &id, sizeof(id));
 8008164:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8008168:	2202      	movs	r2, #2
 800816a:	4619      	mov	r1, r3
 800816c:	68f8      	ldr	r0, [r7, #12]
 800816e:	f005 fc55 	bl	800da1c <mg_send>
            break;
 8008172:	e000      	b.n	8008176 <mqtt_cb+0x266>
            break;
 8008174:	bf00      	nop
          }
        }
        mg_call(c, MG_EV_MQTT_CMD, &mm);
 8008176:	f107 0314 	add.w	r3, r7, #20
 800817a:	461a      	mov	r2, r3
 800817c:	210f      	movs	r1, #15
 800817e:	68f8      	ldr	r0, [r7, #12]
 8008180:	f7f9 ff68 	bl	8002054 <mg_call>
        mg_iobuf_del(&c->recv, 0, mm.dgram.len);
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	3338      	adds	r3, #56	; 0x38
 8008188:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800818a:	2100      	movs	r1, #0
 800818c:	4618      	mov	r0, r3
 800818e:	f7fe f82d 	bl	80061ec <mg_iobuf_del>
    for (;;) {
 8008192:	e6c8      	b.n	8007f26 <mqtt_cb+0x16>
      } else {
        break;
 8008194:	bf00      	nop
      }
    }
  }
  (void) ev_data;
  (void) fn_data;
}
 8008196:	bf00      	nop
 8008198:	375c      	adds	r7, #92	; 0x5c
 800819a:	46bd      	mov	sp, r7
 800819c:	bd90      	pop	{r4, r7, pc}
 800819e:	bf00      	nop
 80081a0:	0801741c 	.word	0x0801741c
 80081a4:	0801544c 	.word	0x0801544c
 80081a8:	080160e4 	.word	0x080160e4
 80081ac:	08016100 	.word	0x08016100
 80081b0:	08016120 	.word	0x08016120
 80081b4:	08016130 	.word	0x08016130
 80081b8:	080160cc 	.word	0x080160cc

080081bc <mg_mqtt_connect>:
  }
}

struct mg_connection *mg_mqtt_connect(struct mg_mgr *mgr, const char *url,
                                      const struct mg_mqtt_opts *opts,
                                      mg_event_handler_t fn, void *fn_data) {
 80081bc:	b580      	push	{r7, lr}
 80081be:	b096      	sub	sp, #88	; 0x58
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	60f8      	str	r0, [r7, #12]
 80081c4:	60b9      	str	r1, [r7, #8]
 80081c6:	607a      	str	r2, [r7, #4]
 80081c8:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = mg_connect(mgr, url, fn, fn_data);
 80081ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80081cc:	683a      	ldr	r2, [r7, #0]
 80081ce:	68b9      	ldr	r1, [r7, #8]
 80081d0:	68f8      	ldr	r0, [r7, #12]
 80081d2:	f000 fb1f 	bl	8008814 <mg_connect>
 80081d6:	6578      	str	r0, [r7, #84]	; 0x54
  if (c != NULL) {
 80081d8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d014      	beq.n	8008208 <mg_mqtt_connect+0x4c>
    struct mg_mqtt_opts empty;
    memset(&empty, 0, sizeof(empty));
 80081de:	f107 0314 	add.w	r3, r7, #20
 80081e2:	2240      	movs	r2, #64	; 0x40
 80081e4:	2100      	movs	r1, #0
 80081e6:	4618      	mov	r0, r3
 80081e8:	f00c faa4 	bl	8014734 <memset>
    mg_mqtt_login(c, opts == NULL ? &empty : opts);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d102      	bne.n	80081f8 <mg_mqtt_connect+0x3c>
 80081f2:	f107 0314 	add.w	r3, r7, #20
 80081f6:	e000      	b.n	80081fa <mg_mqtt_connect+0x3e>
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4619      	mov	r1, r3
 80081fc:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80081fe:	f7ff fb3f 	bl	8007880 <mg_mqtt_login>
    c->pfn = mqtt_cb;
 8008202:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008204:	4a03      	ldr	r2, [pc, #12]	; (8008214 <mg_mqtt_connect+0x58>)
 8008206:	661a      	str	r2, [r3, #96]	; 0x60
  }
  return c;
 8008208:	6d7b      	ldr	r3, [r7, #84]	; 0x54
}
 800820a:	4618      	mov	r0, r3
 800820c:	3758      	adds	r7, #88	; 0x58
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	08007f11 	.word	0x08007f11

08008218 <mg_vprintf>:





size_t mg_vprintf(struct mg_connection *c, const char *fmt, va_list *ap) {
 8008218:	b580      	push	{r7, lr}
 800821a:	b086      	sub	sp, #24
 800821c:	af00      	add	r7, sp, #0
 800821e:	60f8      	str	r0, [r7, #12]
 8008220:	60b9      	str	r1, [r7, #8]
 8008222:	607a      	str	r2, [r7, #4]
  size_t old = c->send.len;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008228:	617b      	str	r3, [r7, #20]
  mg_vxprintf(mg_pfn_iobuf, &c->send, fmt, ap);
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	f103 0148 	add.w	r1, r3, #72	; 0x48
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68ba      	ldr	r2, [r7, #8]
 8008234:	4805      	ldr	r0, [pc, #20]	; (800824c <mg_vprintf+0x34>)
 8008236:	f7fa fbdb 	bl	80029f0 <mg_vxprintf>
  return c->send.len - old;
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	1ad3      	subs	r3, r2, r3
}
 8008242:	4618      	mov	r0, r3
 8008244:	3718      	adds	r7, #24
 8008246:	46bd      	mov	sp, r7
 8008248:	bd80      	pop	{r7, pc}
 800824a:	bf00      	nop
 800824c:	08008b8d 	.word	0x08008b8d

08008250 <mg_printf>:

size_t mg_printf(struct mg_connection *c, const char *fmt, ...) {
 8008250:	b40e      	push	{r1, r2, r3}
 8008252:	b580      	push	{r7, lr}
 8008254:	b085      	sub	sp, #20
 8008256:	af00      	add	r7, sp, #0
 8008258:	6078      	str	r0, [r7, #4]
  size_t len = 0;
 800825a:	2300      	movs	r3, #0
 800825c:	60fb      	str	r3, [r7, #12]
  va_list ap;
  va_start(ap, fmt);
 800825e:	f107 0320 	add.w	r3, r7, #32
 8008262:	60bb      	str	r3, [r7, #8]
  len = mg_vprintf(c, fmt, &ap);
 8008264:	f107 0308 	add.w	r3, r7, #8
 8008268:	461a      	mov	r2, r3
 800826a:	69f9      	ldr	r1, [r7, #28]
 800826c:	6878      	ldr	r0, [r7, #4]
 800826e:	f7ff ffd3 	bl	8008218 <mg_vprintf>
 8008272:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return len;
 8008274:	68fb      	ldr	r3, [r7, #12]
}
 8008276:	4618      	mov	r0, r3
 8008278:	3714      	adds	r7, #20
 800827a:	46bd      	mov	sp, r7
 800827c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008280:	b003      	add	sp, #12
 8008282:	4770      	bx	lr

08008284 <mg_atonl>:

static bool mg_atonl(struct mg_str str, struct mg_addr *addr) {
 8008284:	b580      	push	{r7, lr}
 8008286:	b086      	sub	sp, #24
 8008288:	af00      	add	r7, sp, #0
 800828a:	f107 0308 	add.w	r3, r7, #8
 800828e:	e883 0003 	stmia.w	r3, {r0, r1}
 8008292:	607a      	str	r2, [r7, #4]
  uint32_t localhost = mg_htonl(0x7f000001);
 8008294:	480d      	ldr	r0, [pc, #52]	; (80082cc <mg_atonl+0x48>)
 8008296:	f002 f8f9 	bl	800a48c <mg_ntohl>
 800829a:	4603      	mov	r3, r0
 800829c:	617b      	str	r3, [r7, #20]
  if (mg_vcasecmp(&str, "localhost") != 0) return false;
 800829e:	f107 0308 	add.w	r3, r7, #8
 80082a2:	490b      	ldr	r1, [pc, #44]	; (80082d0 <mg_atonl+0x4c>)
 80082a4:	4618      	mov	r0, r3
 80082a6:	f001 fb21 	bl	80098ec <mg_vcasecmp>
 80082aa:	4603      	mov	r3, r0
 80082ac:	2b00      	cmp	r3, #0
 80082ae:	d001      	beq.n	80082b4 <mg_atonl+0x30>
 80082b0:	2300      	movs	r3, #0
 80082b2:	e006      	b.n	80082c2 <mg_atonl+0x3e>
  memcpy(addr->ip, &localhost, sizeof(uint32_t));
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2200      	movs	r2, #0
 80082be:	749a      	strb	r2, [r3, #18]
  return true;
 80082c0:	2301      	movs	r3, #1
}
 80082c2:	4618      	mov	r0, r3
 80082c4:	3718      	adds	r7, #24
 80082c6:	46bd      	mov	sp, r7
 80082c8:	bd80      	pop	{r7, pc}
 80082ca:	bf00      	nop
 80082cc:	7f000001 	.word	0x7f000001
 80082d0:	08016150 	.word	0x08016150

080082d4 <mg_atone>:

static bool mg_atone(struct mg_str str, struct mg_addr *addr) {
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b084      	sub	sp, #16
 80082d8:	af00      	add	r7, sp, #0
 80082da:	f107 0308 	add.w	r3, r7, #8
 80082de:	e883 0003 	stmia.w	r3, {r0, r1}
 80082e2:	607a      	str	r2, [r7, #4]
  if (str.len > 0) return false;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d001      	beq.n	80082ee <mg_atone+0x1a>
 80082ea:	2300      	movs	r3, #0
 80082ec:	e009      	b.n	8008302 <mg_atone+0x2e>
  memset(addr->ip, 0, sizeof(addr->ip));
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	2210      	movs	r2, #16
 80082f2:	2100      	movs	r1, #0
 80082f4:	4618      	mov	r0, r3
 80082f6:	f00c fa1d 	bl	8014734 <memset>
  addr->is_ip6 = false;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	2200      	movs	r2, #0
 80082fe:	749a      	strb	r2, [r3, #18]
  return true;
 8008300:	2301      	movs	r3, #1
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}

0800830a <mg_aton4>:

static bool mg_aton4(struct mg_str str, struct mg_addr *addr) {
 800830a:	b480      	push	{r7}
 800830c:	b089      	sub	sp, #36	; 0x24
 800830e:	af00      	add	r7, sp, #0
 8008310:	f107 0308 	add.w	r3, r7, #8
 8008314:	e883 0003 	stmia.w	r3, {r0, r1}
 8008318:	607a      	str	r2, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800831a:	2300      	movs	r3, #0
 800831c:	613b      	str	r3, [r7, #16]
  size_t i, num_dots = 0;
 800831e:	2300      	movs	r3, #0
 8008320:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < str.len; i++) {
 8008322:	2300      	movs	r3, #0
 8008324:	61fb      	str	r3, [r7, #28]
 8008326:	e049      	b.n	80083bc <mg_aton4+0xb2>
    if (str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 8008328:	68ba      	ldr	r2, [r7, #8]
 800832a:	69fb      	ldr	r3, [r7, #28]
 800832c:	4413      	add	r3, r2
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	2b2f      	cmp	r3, #47	; 0x2f
 8008332:	d925      	bls.n	8008380 <mg_aton4+0x76>
 8008334:	68ba      	ldr	r2, [r7, #8]
 8008336:	69fb      	ldr	r3, [r7, #28]
 8008338:	4413      	add	r3, r2
 800833a:	781b      	ldrb	r3, [r3, #0]
 800833c:	2b39      	cmp	r3, #57	; 0x39
 800833e:	d81f      	bhi.n	8008380 <mg_aton4+0x76>
      int octet = data[num_dots] * 10 + (str.ptr[i] - '0');
 8008340:	f107 0210 	add.w	r2, r7, #16
 8008344:	69bb      	ldr	r3, [r7, #24]
 8008346:	4413      	add	r3, r2
 8008348:	781b      	ldrb	r3, [r3, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	4613      	mov	r3, r2
 800834e:	009b      	lsls	r3, r3, #2
 8008350:	4413      	add	r3, r2
 8008352:	005b      	lsls	r3, r3, #1
 8008354:	4619      	mov	r1, r3
 8008356:	68ba      	ldr	r2, [r7, #8]
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	4413      	add	r3, r2
 800835c:	781b      	ldrb	r3, [r3, #0]
 800835e:	3b30      	subs	r3, #48	; 0x30
 8008360:	440b      	add	r3, r1
 8008362:	617b      	str	r3, [r7, #20]
      if (octet > 255) return false;
 8008364:	697b      	ldr	r3, [r7, #20]
 8008366:	2bff      	cmp	r3, #255	; 0xff
 8008368:	dd01      	ble.n	800836e <mg_aton4+0x64>
 800836a:	2300      	movs	r3, #0
 800836c:	e03d      	b.n	80083ea <mg_aton4+0xe0>
      data[num_dots] = (uint8_t) octet;
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	b2d9      	uxtb	r1, r3
 8008372:	f107 0210 	add.w	r2, r7, #16
 8008376:	69bb      	ldr	r3, [r7, #24]
 8008378:	4413      	add	r3, r2
 800837a:	460a      	mov	r2, r1
 800837c:	701a      	strb	r2, [r3, #0]
    if (str.ptr[i] >= '0' && str.ptr[i] <= '9') {
 800837e:	e01a      	b.n	80083b6 <mg_aton4+0xac>
    } else if (str.ptr[i] == '.') {
 8008380:	68ba      	ldr	r2, [r7, #8]
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	4413      	add	r3, r2
 8008386:	781b      	ldrb	r3, [r3, #0]
 8008388:	2b2e      	cmp	r3, #46	; 0x2e
 800838a:	d112      	bne.n	80083b2 <mg_aton4+0xa8>
      if (num_dots >= 3 || i == 0 || str.ptr[i - 1] == '.') return false;
 800838c:	69bb      	ldr	r3, [r7, #24]
 800838e:	2b02      	cmp	r3, #2
 8008390:	d809      	bhi.n	80083a6 <mg_aton4+0x9c>
 8008392:	69fb      	ldr	r3, [r7, #28]
 8008394:	2b00      	cmp	r3, #0
 8008396:	d006      	beq.n	80083a6 <mg_aton4+0x9c>
 8008398:	68ba      	ldr	r2, [r7, #8]
 800839a:	69fb      	ldr	r3, [r7, #28]
 800839c:	3b01      	subs	r3, #1
 800839e:	4413      	add	r3, r2
 80083a0:	781b      	ldrb	r3, [r3, #0]
 80083a2:	2b2e      	cmp	r3, #46	; 0x2e
 80083a4:	d101      	bne.n	80083aa <mg_aton4+0xa0>
 80083a6:	2300      	movs	r3, #0
 80083a8:	e01f      	b.n	80083ea <mg_aton4+0xe0>
      num_dots++;
 80083aa:	69bb      	ldr	r3, [r7, #24]
 80083ac:	3301      	adds	r3, #1
 80083ae:	61bb      	str	r3, [r7, #24]
 80083b0:	e001      	b.n	80083b6 <mg_aton4+0xac>
    } else {
      return false;
 80083b2:	2300      	movs	r3, #0
 80083b4:	e019      	b.n	80083ea <mg_aton4+0xe0>
  for (i = 0; i < str.len; i++) {
 80083b6:	69fb      	ldr	r3, [r7, #28]
 80083b8:	3301      	adds	r3, #1
 80083ba:	61fb      	str	r3, [r7, #28]
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	69fa      	ldr	r2, [r7, #28]
 80083c0:	429a      	cmp	r2, r3
 80083c2:	d3b1      	bcc.n	8008328 <mg_aton4+0x1e>
    }
  }
  if (num_dots != 3 || str.ptr[i - 1] == '.') return false;
 80083c4:	69bb      	ldr	r3, [r7, #24]
 80083c6:	2b03      	cmp	r3, #3
 80083c8:	d106      	bne.n	80083d8 <mg_aton4+0xce>
 80083ca:	68ba      	ldr	r2, [r7, #8]
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	3b01      	subs	r3, #1
 80083d0:	4413      	add	r3, r2
 80083d2:	781b      	ldrb	r3, [r3, #0]
 80083d4:	2b2e      	cmp	r3, #46	; 0x2e
 80083d6:	d101      	bne.n	80083dc <mg_aton4+0xd2>
 80083d8:	2300      	movs	r3, #0
 80083da:	e006      	b.n	80083ea <mg_aton4+0xe0>
  memcpy(&addr->ip, data, sizeof(data));
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	693a      	ldr	r2, [r7, #16]
 80083e0:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = false;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	749a      	strb	r2, [r3, #18]
  return true;
 80083e8:	2301      	movs	r3, #1
}
 80083ea:	4618      	mov	r0, r3
 80083ec:	3724      	adds	r7, #36	; 0x24
 80083ee:	46bd      	mov	sp, r7
 80083f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f4:	4770      	bx	lr

080083f6 <mg_v4mapped>:

static bool mg_v4mapped(struct mg_str str, struct mg_addr *addr) {
 80083f6:	b580      	push	{r7, lr}
 80083f8:	b088      	sub	sp, #32
 80083fa:	af00      	add	r7, sp, #0
 80083fc:	f107 0308 	add.w	r3, r7, #8
 8008400:	e883 0003 	stmia.w	r3, {r0, r1}
 8008404:	607a      	str	r2, [r7, #4]
  int i;
  uint32_t ipv4;
  if (str.len < 14) return false;
 8008406:	68fb      	ldr	r3, [r7, #12]
 8008408:	2b0d      	cmp	r3, #13
 800840a:	d801      	bhi.n	8008410 <mg_v4mapped+0x1a>
 800840c:	2300      	movs	r3, #0
 800840e:	e056      	b.n	80084be <mg_v4mapped+0xc8>
  if (str.ptr[0] != ':' || str.ptr[1] != ':' || str.ptr[6] != ':') return false;
 8008410:	68bb      	ldr	r3, [r7, #8]
 8008412:	781b      	ldrb	r3, [r3, #0]
 8008414:	2b3a      	cmp	r3, #58	; 0x3a
 8008416:	d109      	bne.n	800842c <mg_v4mapped+0x36>
 8008418:	68bb      	ldr	r3, [r7, #8]
 800841a:	3301      	adds	r3, #1
 800841c:	781b      	ldrb	r3, [r3, #0]
 800841e:	2b3a      	cmp	r3, #58	; 0x3a
 8008420:	d104      	bne.n	800842c <mg_v4mapped+0x36>
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	3306      	adds	r3, #6
 8008426:	781b      	ldrb	r3, [r3, #0]
 8008428:	2b3a      	cmp	r3, #58	; 0x3a
 800842a:	d001      	beq.n	8008430 <mg_v4mapped+0x3a>
 800842c:	2300      	movs	r3, #0
 800842e:	e046      	b.n	80084be <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8008430:	2302      	movs	r3, #2
 8008432:	61fb      	str	r3, [r7, #28]
 8008434:	e010      	b.n	8008458 <mg_v4mapped+0x62>
    if (str.ptr[i] != 'f' && str.ptr[i] != 'F') return false;
 8008436:	68ba      	ldr	r2, [r7, #8]
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	4413      	add	r3, r2
 800843c:	781b      	ldrb	r3, [r3, #0]
 800843e:	2b66      	cmp	r3, #102	; 0x66
 8008440:	d007      	beq.n	8008452 <mg_v4mapped+0x5c>
 8008442:	68ba      	ldr	r2, [r7, #8]
 8008444:	69fb      	ldr	r3, [r7, #28]
 8008446:	4413      	add	r3, r2
 8008448:	781b      	ldrb	r3, [r3, #0]
 800844a:	2b46      	cmp	r3, #70	; 0x46
 800844c:	d001      	beq.n	8008452 <mg_v4mapped+0x5c>
 800844e:	2300      	movs	r3, #0
 8008450:	e035      	b.n	80084be <mg_v4mapped+0xc8>
  for (i = 2; i < 6; i++) {
 8008452:	69fb      	ldr	r3, [r7, #28]
 8008454:	3301      	adds	r3, #1
 8008456:	61fb      	str	r3, [r7, #28]
 8008458:	69fb      	ldr	r3, [r7, #28]
 800845a:	2b05      	cmp	r3, #5
 800845c:	ddeb      	ble.n	8008436 <mg_v4mapped+0x40>
  }
  //struct mg_str s = mg_str_n(&str.ptr[7], str.len - 7);
  if (!mg_aton4(mg_str_n(&str.ptr[7], str.len - 7), addr)) return false;
 800845e:	68bb      	ldr	r3, [r7, #8]
 8008460:	1dd9      	adds	r1, r3, #7
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	1fda      	subs	r2, r3, #7
 8008466:	f107 0314 	add.w	r3, r7, #20
 800846a:	4618      	mov	r0, r3
 800846c:	f001 f9bd 	bl	80097ea <mg_str_n>
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	f107 0314 	add.w	r3, r7, #20
 8008476:	e893 0003 	ldmia.w	r3, {r0, r1}
 800847a:	f7ff ff46 	bl	800830a <mg_aton4>
 800847e:	4603      	mov	r3, r0
 8008480:	f083 0301 	eor.w	r3, r3, #1
 8008484:	b2db      	uxtb	r3, r3
 8008486:	2b00      	cmp	r3, #0
 8008488:	d001      	beq.n	800848e <mg_v4mapped+0x98>
 800848a:	2300      	movs	r3, #0
 800848c:	e017      	b.n	80084be <mg_v4mapped+0xc8>
  memcpy(&ipv4, addr->ip, sizeof(ipv4));
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	613b      	str	r3, [r7, #16]
  memset(addr->ip, 0, sizeof(addr->ip));
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	2210      	movs	r2, #16
 8008498:	2100      	movs	r1, #0
 800849a:	4618      	mov	r0, r3
 800849c:	f00c f94a 	bl	8014734 <memset>
  addr->ip[10] = addr->ip[11] = 255;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	22ff      	movs	r2, #255	; 0xff
 80084a4:	72da      	strb	r2, [r3, #11]
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	7ada      	ldrb	r2, [r3, #11]
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	729a      	strb	r2, [r3, #10]
  memcpy(&addr->ip[12], &ipv4, 4);
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	330c      	adds	r3, #12
 80084b2:	693a      	ldr	r2, [r7, #16]
 80084b4:	601a      	str	r2, [r3, #0]
  addr->is_ip6 = true;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2201      	movs	r2, #1
 80084ba:	749a      	strb	r2, [r3, #18]
  return true;
 80084bc:	2301      	movs	r3, #1
}
 80084be:	4618      	mov	r0, r3
 80084c0:	3720      	adds	r7, #32
 80084c2:	46bd      	mov	sp, r7
 80084c4:	bd80      	pop	{r7, pc}

080084c6 <mg_aton6>:

static bool mg_aton6(struct mg_str str, struct mg_addr *addr) {
 80084c6:	b580      	push	{r7, lr}
 80084c8:	b08a      	sub	sp, #40	; 0x28
 80084ca:	af00      	add	r7, sp, #0
 80084cc:	f107 0308 	add.w	r3, r7, #8
 80084d0:	e883 0003 	stmia.w	r3, {r0, r1}
 80084d4:	607a      	str	r2, [r7, #4]
  size_t i, j = 0, n = 0, dc = 42;
 80084d6:	2300      	movs	r3, #0
 80084d8:	623b      	str	r3, [r7, #32]
 80084da:	2300      	movs	r3, #0
 80084dc:	61fb      	str	r3, [r7, #28]
 80084de:	232a      	movs	r3, #42	; 0x2a
 80084e0:	61bb      	str	r3, [r7, #24]
  if (str.len > 2 && str.ptr[0] == '[') str.ptr++, str.len -= 2;
 80084e2:	68fb      	ldr	r3, [r7, #12]
 80084e4:	2b02      	cmp	r3, #2
 80084e6:	d909      	bls.n	80084fc <mg_aton6+0x36>
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	781b      	ldrb	r3, [r3, #0]
 80084ec:	2b5b      	cmp	r3, #91	; 0x5b
 80084ee:	d105      	bne.n	80084fc <mg_aton6+0x36>
 80084f0:	68bb      	ldr	r3, [r7, #8]
 80084f2:	3301      	adds	r3, #1
 80084f4:	60bb      	str	r3, [r7, #8]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	3b02      	subs	r3, #2
 80084fa:	60fb      	str	r3, [r7, #12]
  if (mg_v4mapped(str, addr)) return true;
 80084fc:	687a      	ldr	r2, [r7, #4]
 80084fe:	f107 0308 	add.w	r3, r7, #8
 8008502:	e893 0003 	ldmia.w	r3, {r0, r1}
 8008506:	f7ff ff76 	bl	80083f6 <mg_v4mapped>
 800850a:	4603      	mov	r3, r0
 800850c:	2b00      	cmp	r3, #0
 800850e:	d001      	beq.n	8008514 <mg_aton6+0x4e>
 8008510:	2301      	movs	r3, #1
 8008512:	e0b5      	b.n	8008680 <mg_aton6+0x1ba>
  for (i = 0; i < str.len; i++) {
 8008514:	2300      	movs	r3, #0
 8008516:	627b      	str	r3, [r7, #36]	; 0x24
 8008518:	e084      	b.n	8008624 <mg_aton6+0x15e>
    if ((str.ptr[i] >= '0' && str.ptr[i] <= '9') ||
 800851a:	68ba      	ldr	r2, [r7, #8]
 800851c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800851e:	4413      	add	r3, r2
 8008520:	781b      	ldrb	r3, [r3, #0]
 8008522:	2b2f      	cmp	r3, #47	; 0x2f
 8008524:	d905      	bls.n	8008532 <mg_aton6+0x6c>
 8008526:	68ba      	ldr	r2, [r7, #8]
 8008528:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800852a:	4413      	add	r3, r2
 800852c:	781b      	ldrb	r3, [r3, #0]
 800852e:	2b39      	cmp	r3, #57	; 0x39
 8008530:	d917      	bls.n	8008562 <mg_aton6+0x9c>
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 8008532:	68ba      	ldr	r2, [r7, #8]
 8008534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008536:	4413      	add	r3, r2
 8008538:	781b      	ldrb	r3, [r3, #0]
    if ((str.ptr[i] >= '0' && str.ptr[i] <= '9') ||
 800853a:	2b60      	cmp	r3, #96	; 0x60
 800853c:	d905      	bls.n	800854a <mg_aton6+0x84>
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 800853e:	68ba      	ldr	r2, [r7, #8]
 8008540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008542:	4413      	add	r3, r2
 8008544:	781b      	ldrb	r3, [r3, #0]
 8008546:	2b66      	cmp	r3, #102	; 0x66
 8008548:	d90b      	bls.n	8008562 <mg_aton6+0x9c>
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 800854a:	68ba      	ldr	r2, [r7, #8]
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	4413      	add	r3, r2
 8008550:	781b      	ldrb	r3, [r3, #0]
        (str.ptr[i] >= 'a' && str.ptr[i] <= 'f') ||
 8008552:	2b40      	cmp	r3, #64	; 0x40
 8008554:	d926      	bls.n	80085a4 <mg_aton6+0xde>
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 8008556:	68ba      	ldr	r2, [r7, #8]
 8008558:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800855a:	4413      	add	r3, r2
 800855c:	781b      	ldrb	r3, [r3, #0]
 800855e:	2b46      	cmp	r3, #70	; 0x46
 8008560:	d820      	bhi.n	80085a4 <mg_aton6+0xde>
      unsigned long val;
      if (i > j + 3) return false;
 8008562:	6a3b      	ldr	r3, [r7, #32]
 8008564:	3303      	adds	r3, #3
 8008566:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008568:	429a      	cmp	r2, r3
 800856a:	d901      	bls.n	8008570 <mg_aton6+0xaa>
 800856c:	2300      	movs	r3, #0
 800856e:	e087      	b.n	8008680 <mg_aton6+0x1ba>
      // MG_DEBUG(("%zu %zu [%.*s]", i, j, (int) (i - j + 1), &str.ptr[j]));
      val = mg_unhexn(&str.ptr[j], i - j + 1);
 8008570:	68ba      	ldr	r2, [r7, #8]
 8008572:	6a3b      	ldr	r3, [r7, #32]
 8008574:	18d0      	adds	r0, r2, r3
 8008576:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008578:	6a3b      	ldr	r3, [r7, #32]
 800857a:	1ad3      	subs	r3, r2, r3
 800857c:	3301      	adds	r3, #1
 800857e:	4619      	mov	r1, r3
 8008580:	f001 fca8 	bl	8009ed4 <mg_unhexn>
 8008584:	6178      	str	r0, [r7, #20]
      addr->ip[n] = (uint8_t) ((val >> 8) & 255);
 8008586:	697b      	ldr	r3, [r7, #20]
 8008588:	0a1b      	lsrs	r3, r3, #8
 800858a:	b2d9      	uxtb	r1, r3
 800858c:	687a      	ldr	r2, [r7, #4]
 800858e:	69fb      	ldr	r3, [r7, #28]
 8008590:	4413      	add	r3, r2
 8008592:	460a      	mov	r2, r1
 8008594:	701a      	strb	r2, [r3, #0]
      addr->ip[n + 1] = (uint8_t) (val & 255);
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	3301      	adds	r3, #1
 800859a:	697a      	ldr	r2, [r7, #20]
 800859c:	b2d1      	uxtb	r1, r2
 800859e:	687a      	ldr	r2, [r7, #4]
 80085a0:	54d1      	strb	r1, [r2, r3]
        (str.ptr[i] >= 'A' && str.ptr[i] <= 'F')) {
 80085a2:	e03c      	b.n	800861e <mg_aton6+0x158>
    } else if (str.ptr[i] == ':') {
 80085a4:	68ba      	ldr	r2, [r7, #8]
 80085a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a8:	4413      	add	r3, r2
 80085aa:	781b      	ldrb	r3, [r3, #0]
 80085ac:	2b3a      	cmp	r3, #58	; 0x3a
 80085ae:	d134      	bne.n	800861a <mg_aton6+0x154>
      j = i + 1;
 80085b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b2:	3301      	adds	r3, #1
 80085b4:	623b      	str	r3, [r7, #32]
      if (i > 0 && str.ptr[i - 1] == ':') {
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	2b00      	cmp	r3, #0
 80085ba:	d014      	beq.n	80085e6 <mg_aton6+0x120>
 80085bc:	68ba      	ldr	r2, [r7, #8]
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	3b01      	subs	r3, #1
 80085c2:	4413      	add	r3, r2
 80085c4:	781b      	ldrb	r3, [r3, #0]
 80085c6:	2b3a      	cmp	r3, #58	; 0x3a
 80085c8:	d10d      	bne.n	80085e6 <mg_aton6+0x120>
        dc = n;  // Double colon
 80085ca:	69fb      	ldr	r3, [r7, #28]
 80085cc:	61bb      	str	r3, [r7, #24]
        if (i > 1 && str.ptr[i - 2] == ':') return false;
 80085ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d90f      	bls.n	80085f4 <mg_aton6+0x12e>
 80085d4:	68ba      	ldr	r2, [r7, #8]
 80085d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d8:	3b02      	subs	r3, #2
 80085da:	4413      	add	r3, r2
 80085dc:	781b      	ldrb	r3, [r3, #0]
 80085de:	2b3a      	cmp	r3, #58	; 0x3a
 80085e0:	d108      	bne.n	80085f4 <mg_aton6+0x12e>
 80085e2:	2300      	movs	r3, #0
 80085e4:	e04c      	b.n	8008680 <mg_aton6+0x1ba>
      } else if (i > 0) {
 80085e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d004      	beq.n	80085f6 <mg_aton6+0x130>
        n += 2;
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	3302      	adds	r3, #2
 80085f0:	61fb      	str	r3, [r7, #28]
 80085f2:	e000      	b.n	80085f6 <mg_aton6+0x130>
        if (i > 1 && str.ptr[i - 2] == ':') return false;
 80085f4:	bf00      	nop
      }
      if (n > 14) return false;
 80085f6:	69fb      	ldr	r3, [r7, #28]
 80085f8:	2b0e      	cmp	r3, #14
 80085fa:	d901      	bls.n	8008600 <mg_aton6+0x13a>
 80085fc:	2300      	movs	r3, #0
 80085fe:	e03f      	b.n	8008680 <mg_aton6+0x1ba>
      addr->ip[n] = addr->ip[n + 1] = 0;  // For trailing ::
 8008600:	69fb      	ldr	r3, [r7, #28]
 8008602:	3301      	adds	r3, #1
 8008604:	687a      	ldr	r2, [r7, #4]
 8008606:	2100      	movs	r1, #0
 8008608:	54d1      	strb	r1, [r2, r3]
 800860a:	687a      	ldr	r2, [r7, #4]
 800860c:	5cd1      	ldrb	r1, [r2, r3]
 800860e:	687a      	ldr	r2, [r7, #4]
 8008610:	69fb      	ldr	r3, [r7, #28]
 8008612:	4413      	add	r3, r2
 8008614:	460a      	mov	r2, r1
 8008616:	701a      	strb	r2, [r3, #0]
 8008618:	e001      	b.n	800861e <mg_aton6+0x158>
    } else {
      return false;
 800861a:	2300      	movs	r3, #0
 800861c:	e030      	b.n	8008680 <mg_aton6+0x1ba>
  for (i = 0; i < str.len; i++) {
 800861e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008620:	3301      	adds	r3, #1
 8008622:	627b      	str	r3, [r7, #36]	; 0x24
 8008624:	68fb      	ldr	r3, [r7, #12]
 8008626:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008628:	429a      	cmp	r2, r3
 800862a:	f4ff af76 	bcc.w	800851a <mg_aton6+0x54>
    }
  }
  if (n < 14 && dc == 42) return false;
 800862e:	69fb      	ldr	r3, [r7, #28]
 8008630:	2b0d      	cmp	r3, #13
 8008632:	d804      	bhi.n	800863e <mg_aton6+0x178>
 8008634:	69bb      	ldr	r3, [r7, #24]
 8008636:	2b2a      	cmp	r3, #42	; 0x2a
 8008638:	d101      	bne.n	800863e <mg_aton6+0x178>
 800863a:	2300      	movs	r3, #0
 800863c:	e020      	b.n	8008680 <mg_aton6+0x1ba>
  if (n < 14) {
 800863e:	69fb      	ldr	r3, [r7, #28]
 8008640:	2b0d      	cmp	r3, #13
 8008642:	d819      	bhi.n	8008678 <mg_aton6+0x1b2>
    memmove(&addr->ip[dc + (14 - n)], &addr->ip[dc], n - dc + 2);
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	1ad3      	subs	r3, r2, r3
 800864a:	330e      	adds	r3, #14
 800864c:	687a      	ldr	r2, [r7, #4]
 800864e:	18d0      	adds	r0, r2, r3
 8008650:	687a      	ldr	r2, [r7, #4]
 8008652:	69bb      	ldr	r3, [r7, #24]
 8008654:	18d1      	adds	r1, r2, r3
 8008656:	69fa      	ldr	r2, [r7, #28]
 8008658:	69bb      	ldr	r3, [r7, #24]
 800865a:	1ad3      	subs	r3, r2, r3
 800865c:	3302      	adds	r3, #2
 800865e:	461a      	mov	r2, r3
 8008660:	f00c f84e 	bl	8014700 <memmove>
    memset(&addr->ip[dc], 0, 14 - n);
 8008664:	687a      	ldr	r2, [r7, #4]
 8008666:	69bb      	ldr	r3, [r7, #24]
 8008668:	18d0      	adds	r0, r2, r3
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f1c3 030e 	rsb	r3, r3, #14
 8008670:	461a      	mov	r2, r3
 8008672:	2100      	movs	r1, #0
 8008674:	f00c f85e 	bl	8014734 <memset>
  }

  addr->is_ip6 = true;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	2201      	movs	r2, #1
 800867c:	749a      	strb	r2, [r3, #18]
  return true;
 800867e:	2301      	movs	r3, #1
}
 8008680:	4618      	mov	r0, r3
 8008682:	3728      	adds	r7, #40	; 0x28
 8008684:	46bd      	mov	sp, r7
 8008686:	bd80      	pop	{r7, pc}

08008688 <mg_aton>:

bool mg_aton(struct mg_str str, struct mg_addr *addr) {
 8008688:	b580      	push	{r7, lr}
 800868a:	b084      	sub	sp, #16
 800868c:	af00      	add	r7, sp, #0
 800868e:	f107 0308 	add.w	r3, r7, #8
 8008692:	e883 0003 	stmia.w	r3, {r0, r1}
 8008696:	607a      	str	r2, [r7, #4]
  // MG_INFO(("[%.*s]", (int) str.len, str.ptr));
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 8008698:	687a      	ldr	r2, [r7, #4]
 800869a:	f107 0308 	add.w	r3, r7, #8
 800869e:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086a2:	f7ff fe17 	bl	80082d4 <mg_atone>
 80086a6:	4603      	mov	r3, r0
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	d11d      	bne.n	80086e8 <mg_aton+0x60>
 80086ac:	687a      	ldr	r2, [r7, #4]
 80086ae:	f107 0308 	add.w	r3, r7, #8
 80086b2:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086b6:	f7ff fde5 	bl	8008284 <mg_atonl>
 80086ba:	4603      	mov	r3, r0
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d113      	bne.n	80086e8 <mg_aton+0x60>
 80086c0:	687a      	ldr	r2, [r7, #4]
 80086c2:	f107 0308 	add.w	r3, r7, #8
 80086c6:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086ca:	f7ff fe1e 	bl	800830a <mg_aton4>
 80086ce:	4603      	mov	r3, r0
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d109      	bne.n	80086e8 <mg_aton+0x60>
         mg_aton6(str, addr);
 80086d4:	687a      	ldr	r2, [r7, #4]
 80086d6:	f107 0308 	add.w	r3, r7, #8
 80086da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80086de:	f7ff fef2 	bl	80084c6 <mg_aton6>
 80086e2:	4603      	mov	r3, r0
  return mg_atone(str, addr) || mg_atonl(str, addr) || mg_aton4(str, addr) ||
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d001      	beq.n	80086ec <mg_aton+0x64>
 80086e8:	2301      	movs	r3, #1
 80086ea:	e000      	b.n	80086ee <mg_aton+0x66>
 80086ec:	2300      	movs	r3, #0
 80086ee:	f003 0301 	and.w	r3, r3, #1
 80086f2:	b2db      	uxtb	r3, r3
}
 80086f4:	4618      	mov	r0, r3
 80086f6:	3710      	adds	r7, #16
 80086f8:	46bd      	mov	sp, r7
 80086fa:	bd80      	pop	{r7, pc}

080086fc <mg_alloc_conn>:

struct mg_connection *mg_alloc_conn(struct mg_mgr *mgr) {
 80086fc:	b580      	push	{r7, lr}
 80086fe:	b084      	sub	sp, #16
 8008700:	af00      	add	r7, sp, #0
 8008702:	6078      	str	r0, [r7, #4]
  struct mg_connection *c =
      (struct mg_connection *) calloc(1, sizeof(*c) + mgr->extraconnsize);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008708:	3390      	adds	r3, #144	; 0x90
 800870a:	4619      	mov	r1, r3
 800870c:	2001      	movs	r0, #1
 800870e:	f00b fc17 	bl	8013f40 <calloc>
 8008712:	4603      	mov	r3, r0
 8008714:	60fb      	str	r3, [r7, #12]
  if (c != NULL) {
 8008716:	68fb      	ldr	r3, [r7, #12]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d013      	beq.n	8008744 <mg_alloc_conn+0x48>
    c->mgr = mgr;
 800871c:	68fb      	ldr	r3, [r7, #12]
 800871e:	687a      	ldr	r2, [r7, #4]
 8008720:	605a      	str	r2, [r3, #4]
    c->send.align = c->recv.align = MG_IO_SIZE;
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008728:	645a      	str	r2, [r3, #68]	; 0x44
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	655a      	str	r2, [r3, #84]	; 0x54
    c->id = ++mgr->nextid;
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	1c5a      	adds	r2, r3, #1
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	61da      	str	r2, [r3, #28]
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	69da      	ldr	r2, [r3, #28]
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	635a      	str	r2, [r3, #52]	; 0x34
  }
  return c;
 8008744:	68fb      	ldr	r3, [r7, #12]
}
 8008746:	4618      	mov	r0, r3
 8008748:	3710      	adds	r7, #16
 800874a:	46bd      	mov	sp, r7
 800874c:	bd80      	pop	{r7, pc}
	...

08008750 <mg_close_conn>:

void mg_close_conn(struct mg_connection *c) {
 8008750:	b580      	push	{r7, lr}
 8008752:	b084      	sub	sp, #16
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  mg_resolve_cancel(c);  // Close any pending DNS query
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f7f8 fee6 	bl	800152a <mg_resolve_cancel>
  LIST_DELETE(struct mg_connection, &c->mgr->conns, c);
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	60fb      	str	r3, [r7, #12]
 8008764:	e002      	b.n	800876c <mg_close_conn+0x1c>
 8008766:	68fb      	ldr	r3, [r7, #12]
 8008768:	681b      	ldr	r3, [r3, #0]
 800876a:	60fb      	str	r3, [r7, #12]
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	687a      	ldr	r2, [r7, #4]
 8008772:	429a      	cmp	r2, r3
 8008774:	d1f7      	bne.n	8008766 <mg_close_conn+0x16>
 8008776:	687b      	ldr	r3, [r7, #4]
 8008778:	681a      	ldr	r2, [r3, #0]
 800877a:	68fb      	ldr	r3, [r7, #12]
 800877c:	601a      	str	r2, [r3, #0]
  if (c == c->mgr->dns4.c) c->mgr->dns4.c = NULL;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	689b      	ldr	r3, [r3, #8]
 8008784:	687a      	ldr	r2, [r7, #4]
 8008786:	429a      	cmp	r2, r3
 8008788:	d103      	bne.n	8008792 <mg_close_conn+0x42>
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	685b      	ldr	r3, [r3, #4]
 800878e:	2200      	movs	r2, #0
 8008790:	609a      	str	r2, [r3, #8]
  if (c == c->mgr->dns6.c) c->mgr->dns6.c = NULL;
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	685b      	ldr	r3, [r3, #4]
 8008796:	691b      	ldr	r3, [r3, #16]
 8008798:	687a      	ldr	r2, [r7, #4]
 800879a:	429a      	cmp	r2, r3
 800879c:	d103      	bne.n	80087a6 <mg_close_conn+0x56>
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	685b      	ldr	r3, [r3, #4]
 80087a2:	2200      	movs	r2, #0
 80087a4:	611a      	str	r2, [r3, #16]
  // Order of operations is important. `MG_EV_CLOSE` event must be fired
  // before we deallocate received data, see #1331
  mg_call(c, MG_EV_CLOSE, NULL);
 80087a6:	2200      	movs	r2, #0
 80087a8:	2109      	movs	r1, #9
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f7f9 fc52 	bl	8002054 <mg_call>
  MG_DEBUG(("%lu %p closed", c->id, c->fd));
 80087b0:	4b15      	ldr	r3, [pc, #84]	; (8008808 <mg_close_conn+0xb8>)
 80087b2:	f640 625e 	movw	r2, #3678	; 0xe5e
 80087b6:	4915      	ldr	r1, [pc, #84]	; (800880c <mg_close_conn+0xbc>)
 80087b8:	2003      	movs	r0, #3
 80087ba:	f7fe fc2b 	bl	8007014 <mg_log_prefix>
 80087be:	4603      	mov	r3, r0
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d007      	beq.n	80087d4 <mg_close_conn+0x84>
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087cc:	461a      	mov	r2, r3
 80087ce:	4810      	ldr	r0, [pc, #64]	; (8008810 <mg_close_conn+0xc0>)
 80087d0:	f7fe fc7a 	bl	80070c8 <mg_log>

  mg_tls_free(c);
 80087d4:	6878      	ldr	r0, [r7, #4]
 80087d6:	f001 fd05 	bl	800a1e4 <mg_tls_free>
  mg_iobuf_free(&c->recv);
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	3338      	adds	r3, #56	; 0x38
 80087de:	4618      	mov	r0, r3
 80087e0:	f7fd fd4f 	bl	8006282 <mg_iobuf_free>
  mg_iobuf_free(&c->send);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	3348      	adds	r3, #72	; 0x48
 80087e8:	4618      	mov	r0, r3
 80087ea:	f7fd fd4a 	bl	8006282 <mg_iobuf_free>
  memset(c, 0, sizeof(*c));
 80087ee:	2290      	movs	r2, #144	; 0x90
 80087f0:	2100      	movs	r1, #0
 80087f2:	6878      	ldr	r0, [r7, #4]
 80087f4:	f00b ff9e 	bl	8014734 <memset>
  free(c);
 80087f8:	6878      	ldr	r0, [r7, #4]
 80087fa:	f00b fbc7 	bl	8013f8c <free>
}
 80087fe:	bf00      	nop
 8008800:	3710      	adds	r7, #16
 8008802:	46bd      	mov	sp, r7
 8008804:	bd80      	pop	{r7, pc}
 8008806:	bf00      	nop
 8008808:	08017424 	.word	0x08017424
 800880c:	0801544c 	.word	0x0801544c
 8008810:	0801615c 	.word	0x0801615c

08008814 <mg_connect>:

struct mg_connection *mg_connect(struct mg_mgr *mgr, const char *url,
                                 mg_event_handler_t fn, void *fn_data) {
 8008814:	b580      	push	{r7, lr}
 8008816:	b086      	sub	sp, #24
 8008818:	af00      	add	r7, sp, #0
 800881a:	60f8      	str	r0, [r7, #12]
 800881c:	60b9      	str	r1, [r7, #8]
 800881e:	607a      	str	r2, [r7, #4]
 8008820:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8008822:	2300      	movs	r3, #0
 8008824:	617b      	str	r3, [r7, #20]
  if (url == NULL || url[0] == '\0') {
 8008826:	68bb      	ldr	r3, [r7, #8]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d003      	beq.n	8008834 <mg_connect+0x20>
 800882c:	68bb      	ldr	r3, [r7, #8]
 800882e:	781b      	ldrb	r3, [r3, #0]
 8008830:	2b00      	cmp	r3, #0
 8008832:	d10d      	bne.n	8008850 <mg_connect+0x3c>
    MG_ERROR(("null url"));
 8008834:	4b36      	ldr	r3, [pc, #216]	; (8008910 <mg_connect+0xfc>)
 8008836:	f640 626b 	movw	r2, #3691	; 0xe6b
 800883a:	4936      	ldr	r1, [pc, #216]	; (8008914 <mg_connect+0x100>)
 800883c:	2001      	movs	r0, #1
 800883e:	f7fe fbe9 	bl	8007014 <mg_log_prefix>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d05d      	beq.n	8008904 <mg_connect+0xf0>
 8008848:	4833      	ldr	r0, [pc, #204]	; (8008918 <mg_connect+0x104>)
 800884a:	f7fe fc3d 	bl	80070c8 <mg_log>
 800884e:	e059      	b.n	8008904 <mg_connect+0xf0>
  } else if ((c = mg_alloc_conn(mgr)) == NULL) {
 8008850:	68f8      	ldr	r0, [r7, #12]
 8008852:	f7ff ff53 	bl	80086fc <mg_alloc_conn>
 8008856:	6178      	str	r0, [r7, #20]
 8008858:	697b      	ldr	r3, [r7, #20]
 800885a:	2b00      	cmp	r3, #0
 800885c:	d10d      	bne.n	800887a <mg_connect+0x66>
    MG_ERROR(("OOM"));
 800885e:	4b2c      	ldr	r3, [pc, #176]	; (8008910 <mg_connect+0xfc>)
 8008860:	f640 626d 	movw	r2, #3693	; 0xe6d
 8008864:	492b      	ldr	r1, [pc, #172]	; (8008914 <mg_connect+0x100>)
 8008866:	2001      	movs	r0, #1
 8008868:	f7fe fbd4 	bl	8007014 <mg_log_prefix>
 800886c:	4603      	mov	r3, r0
 800886e:	2b00      	cmp	r3, #0
 8008870:	d048      	beq.n	8008904 <mg_connect+0xf0>
 8008872:	482a      	ldr	r0, [pc, #168]	; (800891c <mg_connect+0x108>)
 8008874:	f7fe fc28 	bl	80070c8 <mg_log>
 8008878:	e044      	b.n	8008904 <mg_connect+0xf0>
  } else {
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681a      	ldr	r2, [r3, #0]
 800887e:	697b      	ldr	r3, [r7, #20]
 8008880:	601a      	str	r2, [r3, #0]
 8008882:	68fb      	ldr	r3, [r7, #12]
 8008884:	697a      	ldr	r2, [r7, #20]
 8008886:	601a      	str	r2, [r3, #0]
    c->is_udp = (strncmp(url, "udp:", 4) == 0);
 8008888:	2204      	movs	r2, #4
 800888a:	4925      	ldr	r1, [pc, #148]	; (8008920 <mg_connect+0x10c>)
 800888c:	68b8      	ldr	r0, [r7, #8]
 800888e:	f00b ff84 	bl	801479a <strncmp>
 8008892:	4603      	mov	r3, r0
 8008894:	2b00      	cmp	r3, #0
 8008896:	bf0c      	ite	eq
 8008898:	2301      	moveq	r3, #1
 800889a:	2300      	movne	r3, #0
 800889c:	b2d9      	uxtb	r1, r3
 800889e:	697a      	ldr	r2, [r7, #20]
 80088a0:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80088a4:	f361 0300 	bfi	r3, r1, #0, #1
 80088a8:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    c->fd = (void *) (size_t) MG_INVALID_SOCKET;
 80088ac:	697b      	ldr	r3, [r7, #20]
 80088ae:	f04f 32ff 	mov.w	r2, #4294967295
 80088b2:	631a      	str	r2, [r3, #48]	; 0x30
    c->fn = fn;
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	687a      	ldr	r2, [r7, #4]
 80088b8:	659a      	str	r2, [r3, #88]	; 0x58
    c->is_client = true;
 80088ba:	697a      	ldr	r2, [r7, #20]
 80088bc:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 80088c0:	f043 0302 	orr.w	r3, r3, #2
 80088c4:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->fn_data = fn_data;
 80088c8:	697b      	ldr	r3, [r7, #20]
 80088ca:	683a      	ldr	r2, [r7, #0]
 80088cc:	65da      	str	r2, [r3, #92]	; 0x5c
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 80088ce:	4b10      	ldr	r3, [pc, #64]	; (8008910 <mg_connect+0xfc>)
 80088d0:	f640 6275 	movw	r2, #3701	; 0xe75
 80088d4:	490f      	ldr	r1, [pc, #60]	; (8008914 <mg_connect+0x100>)
 80088d6:	2003      	movs	r0, #3
 80088d8:	f7fe fb9c 	bl	8007014 <mg_log_prefix>
 80088dc:	4603      	mov	r3, r0
 80088de:	2b00      	cmp	r3, #0
 80088e0:	d007      	beq.n	80088f2 <mg_connect+0xde>
 80088e2:	697b      	ldr	r3, [r7, #20]
 80088e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80088e6:	697b      	ldr	r3, [r7, #20]
 80088e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80088ea:	68bb      	ldr	r3, [r7, #8]
 80088ec:	480d      	ldr	r0, [pc, #52]	; (8008924 <mg_connect+0x110>)
 80088ee:	f7fe fbeb 	bl	80070c8 <mg_log>
    mg_call(c, MG_EV_OPEN, NULL);
 80088f2:	2200      	movs	r2, #0
 80088f4:	2101      	movs	r1, #1
 80088f6:	6978      	ldr	r0, [r7, #20]
 80088f8:	f7f9 fbac 	bl	8002054 <mg_call>
    mg_resolve(c, url);
 80088fc:	68b9      	ldr	r1, [r7, #8]
 80088fe:	6978      	ldr	r0, [r7, #20]
 8008900:	f7f9 fb64 	bl	8001fcc <mg_resolve>
  }
  return c;
 8008904:	697b      	ldr	r3, [r7, #20]
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	08017434 	.word	0x08017434
 8008914:	0801544c 	.word	0x0801544c
 8008918:	0801616c 	.word	0x0801616c
 800891c:	08016178 	.word	0x08016178
 8008920:	0801617c 	.word	0x0801617c
 8008924:	08015558 	.word	0x08015558

08008928 <mg_listen>:

struct mg_connection *mg_listen(struct mg_mgr *mgr, const char *url,
                                mg_event_handler_t fn, void *fn_data) {
 8008928:	b580      	push	{r7, lr}
 800892a:	b086      	sub	sp, #24
 800892c:	af00      	add	r7, sp, #0
 800892e:	60f8      	str	r0, [r7, #12]
 8008930:	60b9      	str	r1, [r7, #8]
 8008932:	607a      	str	r2, [r7, #4]
 8008934:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 8008936:	2300      	movs	r3, #0
 8008938:	617b      	str	r3, [r7, #20]
  if ((c = mg_alloc_conn(mgr)) == NULL) {
 800893a:	68f8      	ldr	r0, [r7, #12]
 800893c:	f7ff fede 	bl	80086fc <mg_alloc_conn>
 8008940:	6178      	str	r0, [r7, #20]
 8008942:	697b      	ldr	r3, [r7, #20]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d10e      	bne.n	8008966 <mg_listen+0x3e>
    MG_ERROR(("OOM %s", url));
 8008948:	4b39      	ldr	r3, [pc, #228]	; (8008a30 <mg_listen+0x108>)
 800894a:	f44f 6268 	mov.w	r2, #3712	; 0xe80
 800894e:	4939      	ldr	r1, [pc, #228]	; (8008a34 <mg_listen+0x10c>)
 8008950:	2001      	movs	r0, #1
 8008952:	f7fe fb5f 	bl	8007014 <mg_log_prefix>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d064      	beq.n	8008a26 <mg_listen+0xfe>
 800895c:	68b9      	ldr	r1, [r7, #8]
 800895e:	4836      	ldr	r0, [pc, #216]	; (8008a38 <mg_listen+0x110>)
 8008960:	f7fe fbb2 	bl	80070c8 <mg_log>
 8008964:	e05f      	b.n	8008a26 <mg_listen+0xfe>
  } else if (!mg_open_listener(c, url)) {
 8008966:	68b9      	ldr	r1, [r7, #8]
 8008968:	6978      	ldr	r0, [r7, #20]
 800896a:	f004 fed1 	bl	800d710 <mg_open_listener>
 800896e:	4603      	mov	r3, r0
 8008970:	f083 0301 	eor.w	r3, r3, #1
 8008974:	b2db      	uxtb	r3, r3
 8008976:	2b00      	cmp	r3, #0
 8008978:	d018      	beq.n	80089ac <mg_listen+0x84>
    MG_ERROR(("Failed: %s, errno %d", url, errno));
 800897a:	4b2d      	ldr	r3, [pc, #180]	; (8008a30 <mg_listen+0x108>)
 800897c:	f640 6282 	movw	r2, #3714	; 0xe82
 8008980:	492c      	ldr	r1, [pc, #176]	; (8008a34 <mg_listen+0x10c>)
 8008982:	2001      	movs	r0, #1
 8008984:	f7fe fb46 	bl	8007014 <mg_log_prefix>
 8008988:	4603      	mov	r3, r0
 800898a:	2b00      	cmp	r3, #0
 800898c:	d008      	beq.n	80089a0 <mg_listen+0x78>
 800898e:	f00b ff85 	bl	801489c <__errno>
 8008992:	4603      	mov	r3, r0
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	461a      	mov	r2, r3
 8008998:	68b9      	ldr	r1, [r7, #8]
 800899a:	4828      	ldr	r0, [pc, #160]	; (8008a3c <mg_listen+0x114>)
 800899c:	f7fe fb94 	bl	80070c8 <mg_log>
    free(c);
 80089a0:	6978      	ldr	r0, [r7, #20]
 80089a2:	f00b faf3 	bl	8013f8c <free>
    c = NULL;
 80089a6:	2300      	movs	r3, #0
 80089a8:	617b      	str	r3, [r7, #20]
 80089aa:	e03c      	b.n	8008a26 <mg_listen+0xfe>
  } else {
    c->is_listening = 1;
 80089ac:	697a      	ldr	r2, [r7, #20]
 80089ae:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 80089b2:	f043 0301 	orr.w	r3, r3, #1
 80089b6:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    c->is_udp = strncmp(url, "udp:", 4) == 0;
 80089ba:	2204      	movs	r2, #4
 80089bc:	4920      	ldr	r1, [pc, #128]	; (8008a40 <mg_listen+0x118>)
 80089be:	68b8      	ldr	r0, [r7, #8]
 80089c0:	f00b feeb 	bl	801479a <strncmp>
 80089c4:	4603      	mov	r3, r0
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	bf0c      	ite	eq
 80089ca:	2301      	moveq	r3, #1
 80089cc:	2300      	movne	r3, #0
 80089ce:	b2d9      	uxtb	r1, r3
 80089d0:	697a      	ldr	r2, [r7, #20]
 80089d2:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 80089d6:	f361 0300 	bfi	r3, r1, #0, #1
 80089da:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    LIST_ADD_HEAD(struct mg_connection, &mgr->conns, c);
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	681a      	ldr	r2, [r3, #0]
 80089e2:	697b      	ldr	r3, [r7, #20]
 80089e4:	601a      	str	r2, [r3, #0]
 80089e6:	68fb      	ldr	r3, [r7, #12]
 80089e8:	697a      	ldr	r2, [r7, #20]
 80089ea:	601a      	str	r2, [r3, #0]
    c->fn = fn;
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	659a      	str	r2, [r3, #88]	; 0x58
    c->fn_data = fn_data;
 80089f2:	697b      	ldr	r3, [r7, #20]
 80089f4:	683a      	ldr	r2, [r7, #0]
 80089f6:	65da      	str	r2, [r3, #92]	; 0x5c
    mg_call(c, MG_EV_OPEN, NULL);
 80089f8:	2200      	movs	r2, #0
 80089fa:	2101      	movs	r1, #1
 80089fc:	6978      	ldr	r0, [r7, #20]
 80089fe:	f7f9 fb29 	bl	8002054 <mg_call>
    MG_DEBUG(("%lu %p %s", c->id, c->fd, url));
 8008a02:	4b0b      	ldr	r3, [pc, #44]	; (8008a30 <mg_listen+0x108>)
 8008a04:	f640 628c 	movw	r2, #3724	; 0xe8c
 8008a08:	490a      	ldr	r1, [pc, #40]	; (8008a34 <mg_listen+0x10c>)
 8008a0a:	2003      	movs	r0, #3
 8008a0c:	f7fe fb02 	bl	8007014 <mg_log_prefix>
 8008a10:	4603      	mov	r3, r0
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d007      	beq.n	8008a26 <mg_listen+0xfe>
 8008a16:	697b      	ldr	r3, [r7, #20]
 8008a18:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008a1a:	697b      	ldr	r3, [r7, #20]
 8008a1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	4808      	ldr	r0, [pc, #32]	; (8008a44 <mg_listen+0x11c>)
 8008a22:	f7fe fb51 	bl	80070c8 <mg_log>
  }
  return c;
 8008a26:	697b      	ldr	r3, [r7, #20]
}
 8008a28:	4618      	mov	r0, r3
 8008a2a:	3718      	adds	r7, #24
 8008a2c:	46bd      	mov	sp, r7
 8008a2e:	bd80      	pop	{r7, pc}
 8008a30:	08017440 	.word	0x08017440
 8008a34:	0801544c 	.word	0x0801544c
 8008a38:	08016184 	.word	0x08016184
 8008a3c:	0801618c 	.word	0x0801618c
 8008a40:	0801617c 	.word	0x0801617c
 8008a44:	08015558 	.word	0x08015558

08008a48 <mg_timer_add>:
  }
  return c;
}

struct mg_timer *mg_timer_add(struct mg_mgr *mgr, uint64_t milliseconds,
                              unsigned flags, void (*fn)(void *), void *arg) {
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b08a      	sub	sp, #40	; 0x28
 8008a4c:	af04      	add	r7, sp, #16
 8008a4e:	60f8      	str	r0, [r7, #12]
 8008a50:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t = (struct mg_timer *) calloc(1, sizeof(*t));
 8008a54:	2128      	movs	r1, #40	; 0x28
 8008a56:	2001      	movs	r0, #1
 8008a58:	f00b fa72 	bl	8013f40 <calloc>
 8008a5c:	4603      	mov	r3, r0
 8008a5e:	617b      	str	r3, [r7, #20]
  if (t != NULL) {
 8008a60:	697b      	ldr	r3, [r7, #20]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d014      	beq.n	8008a90 <mg_timer_add+0x48>
    mg_timer_init(&mgr->timers, t, milliseconds, flags, fn, arg);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	f103 0034 	add.w	r0, r3, #52	; 0x34
 8008a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a6e:	9302      	str	r3, [sp, #8]
 8008a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a72:	9301      	str	r3, [sp, #4]
 8008a74:	6a3b      	ldr	r3, [r7, #32]
 8008a76:	9300      	str	r3, [sp, #0]
 8008a78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a7c:	6979      	ldr	r1, [r7, #20]
 8008a7e:	f001 faa0 	bl	8009fc2 <mg_timer_init>
    t->id = mgr->timerid++;
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	6a1b      	ldr	r3, [r3, #32]
 8008a86:	1c59      	adds	r1, r3, #1
 8008a88:	68fa      	ldr	r2, [r7, #12]
 8008a8a:	6211      	str	r1, [r2, #32]
 8008a8c:	697a      	ldr	r2, [r7, #20]
 8008a8e:	6013      	str	r3, [r2, #0]
  }
  return t;
 8008a90:	697b      	ldr	r3, [r7, #20]
}
 8008a92:	4618      	mov	r0, r3
 8008a94:	3718      	adds	r7, #24
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
	...

08008a9c <mg_mgr_init>:
#if MG_ENABLE_EPOLL
  if (mgr->epoll_fd >= 0) close(mgr->epoll_fd), mgr->epoll_fd = -1;
#endif
}

void mg_mgr_init(struct mg_mgr *mgr) {
 8008a9c:	b580      	push	{r7, lr}
 8008a9e:	b082      	sub	sp, #8
 8008aa0:	af00      	add	r7, sp, #0
 8008aa2:	6078      	str	r0, [r7, #4]
  memset(mgr, 0, sizeof(*mgr));
 8008aa4:	2244      	movs	r2, #68	; 0x44
 8008aa6:	2100      	movs	r1, #0
 8008aa8:	6878      	ldr	r0, [r7, #4]
 8008aaa:	f00b fe43 	bl	8014734 <memset>
#if MG_ENABLE_EPOLL
  if ((mgr->epoll_fd = epoll_create1(0)) < 0) MG_ERROR(("epoll: %d", errno));
#else
  mgr->epoll_fd = -1;
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab4:	639a      	str	r2, [r3, #56]	; 0x38
#elif defined(__unix) || defined(__unix__) || defined(__APPLE__)
  // Ignore SIGPIPE signal, so if client cancels the request, it
  // won't kill the whole process.
  signal(SIGPIPE, SIG_IGN);
#endif
  mgr->dnstimeout = 3000;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8008abc:	615a      	str	r2, [r3, #20]
  mgr->dns4.url = "udp://8.8.8.8:53";
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	4a04      	ldr	r2, [pc, #16]	; (8008ad4 <mg_mgr_init+0x38>)
 8008ac2:	605a      	str	r2, [r3, #4]
  mgr->dns6.url = "udp://[2001:4860:4860::8888]:53";
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	4a04      	ldr	r2, [pc, #16]	; (8008ad8 <mg_mgr_init+0x3c>)
 8008ac8:	60da      	str	r2, [r3, #12]
}
 8008aca:	bf00      	nop
 8008acc:	3708      	adds	r7, #8
 8008ace:	46bd      	mov	sp, r7
 8008ad0:	bd80      	pop	{r7, pc}
 8008ad2:	bf00      	nop
 8008ad4:	080161bc 	.word	0x080161bc
 8008ad8:	080161d0 	.word	0x080161d0

08008adc <mg_pfn_iobuf_private>:
  len = mg_queue_vprintf(q, fmt, &ap);
  va_end(ap);
  return len;
}

static void mg_pfn_iobuf_private(char ch, void *param, bool expand) {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b084      	sub	sp, #16
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	4603      	mov	r3, r0
 8008ae4:	6039      	str	r1, [r7, #0]
 8008ae6:	71fb      	strb	r3, [r7, #7]
 8008ae8:	4613      	mov	r3, r2
 8008aea:	71bb      	strb	r3, [r7, #6]
  struct mg_iobuf *io = (struct mg_iobuf *) param;
 8008aec:	683b      	ldr	r3, [r7, #0]
 8008aee:	60fb      	str	r3, [r7, #12]
  if (expand && io->len + 2 > io->size) mg_iobuf_resize(io, io->len + 2);
 8008af0:	79bb      	ldrb	r3, [r7, #6]
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d00d      	beq.n	8008b12 <mg_pfn_iobuf_private+0x36>
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	1c9a      	adds	r2, r3, #2
 8008afc:	68fb      	ldr	r3, [r7, #12]
 8008afe:	685b      	ldr	r3, [r3, #4]
 8008b00:	429a      	cmp	r2, r3
 8008b02:	d906      	bls.n	8008b12 <mg_pfn_iobuf_private+0x36>
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	689b      	ldr	r3, [r3, #8]
 8008b08:	3302      	adds	r3, #2
 8008b0a:	4619      	mov	r1, r3
 8008b0c:	68f8      	ldr	r0, [r7, #12]
 8008b0e:	f7fd fa91 	bl	8006034 <mg_iobuf_resize>
  if (io->len + 2 <= io->size) {
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	689b      	ldr	r3, [r3, #8]
 8008b16:	1c9a      	adds	r2, r3, #2
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	685b      	ldr	r3, [r3, #4]
 8008b1c:	429a      	cmp	r2, r3
 8008b1e:	d811      	bhi.n	8008b44 <mg_pfn_iobuf_private+0x68>
    io->buf[io->len++] = (uint8_t) ch;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	681a      	ldr	r2, [r3, #0]
 8008b24:	68fb      	ldr	r3, [r7, #12]
 8008b26:	689b      	ldr	r3, [r3, #8]
 8008b28:	1c58      	adds	r0, r3, #1
 8008b2a:	68f9      	ldr	r1, [r7, #12]
 8008b2c:	6088      	str	r0, [r1, #8]
 8008b2e:	4413      	add	r3, r2
 8008b30:	79fa      	ldrb	r2, [r7, #7]
 8008b32:	701a      	strb	r2, [r3, #0]
    io->buf[io->len] = 0;
 8008b34:	68fb      	ldr	r3, [r7, #12]
 8008b36:	681a      	ldr	r2, [r3, #0]
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	689b      	ldr	r3, [r3, #8]
 8008b3c:	4413      	add	r3, r2
 8008b3e:	2200      	movs	r2, #0
 8008b40:	701a      	strb	r2, [r3, #0]
  } else if (io->len < io->size) {
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
  }
}
 8008b42:	e00f      	b.n	8008b64 <mg_pfn_iobuf_private+0x88>
  } else if (io->len < io->size) {
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	689a      	ldr	r2, [r3, #8]
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	685b      	ldr	r3, [r3, #4]
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d209      	bcs.n	8008b64 <mg_pfn_iobuf_private+0x88>
    io->buf[io->len++] = 0;  // Guarantee to 0-terminate
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	681a      	ldr	r2, [r3, #0]
 8008b54:	68fb      	ldr	r3, [r7, #12]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	1c58      	adds	r0, r3, #1
 8008b5a:	68f9      	ldr	r1, [r7, #12]
 8008b5c:	6088      	str	r0, [r1, #8]
 8008b5e:	4413      	add	r3, r2
 8008b60:	2200      	movs	r2, #0
 8008b62:	701a      	strb	r2, [r3, #0]
}
 8008b64:	bf00      	nop
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}

08008b6c <mg_putchar_iobuf_static>:

static void mg_putchar_iobuf_static(char ch, void *param) {
 8008b6c:	b580      	push	{r7, lr}
 8008b6e:	b082      	sub	sp, #8
 8008b70:	af00      	add	r7, sp, #0
 8008b72:	4603      	mov	r3, r0
 8008b74:	6039      	str	r1, [r7, #0]
 8008b76:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, false);
 8008b78:	79fb      	ldrb	r3, [r7, #7]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	6839      	ldr	r1, [r7, #0]
 8008b7e:	4618      	mov	r0, r3
 8008b80:	f7ff ffac 	bl	8008adc <mg_pfn_iobuf_private>
}
 8008b84:	bf00      	nop
 8008b86:	3708      	adds	r7, #8
 8008b88:	46bd      	mov	sp, r7
 8008b8a:	bd80      	pop	{r7, pc}

08008b8c <mg_pfn_iobuf>:

void mg_pfn_iobuf(char ch, void *param) {
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	b082      	sub	sp, #8
 8008b90:	af00      	add	r7, sp, #0
 8008b92:	4603      	mov	r3, r0
 8008b94:	6039      	str	r1, [r7, #0]
 8008b96:	71fb      	strb	r3, [r7, #7]
  mg_pfn_iobuf_private(ch, param, true);
 8008b98:	79fb      	ldrb	r3, [r7, #7]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	6839      	ldr	r1, [r7, #0]
 8008b9e:	4618      	mov	r0, r3
 8008ba0:	f7ff ff9c 	bl	8008adc <mg_pfn_iobuf_private>
}
 8008ba4:	bf00      	nop
 8008ba6:	3708      	adds	r7, #8
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	bd80      	pop	{r7, pc}

08008bac <mg_vsnprintf>:

size_t mg_vsnprintf(char *buf, size_t len, const char *fmt, va_list *ap) {
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b08a      	sub	sp, #40	; 0x28
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	60f8      	str	r0, [r7, #12]
 8008bb4:	60b9      	str	r1, [r7, #8]
 8008bb6:	607a      	str	r2, [r7, #4]
 8008bb8:	603b      	str	r3, [r7, #0]
  struct mg_iobuf io = {(uint8_t *) buf, len, 0, 0};
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	617b      	str	r3, [r7, #20]
 8008bbe:	68bb      	ldr	r3, [r7, #8]
 8008bc0:	61bb      	str	r3, [r7, #24]
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	61fb      	str	r3, [r7, #28]
 8008bc6:	2300      	movs	r3, #0
 8008bc8:	623b      	str	r3, [r7, #32]
  size_t n = mg_vxprintf(mg_putchar_iobuf_static, &io, fmt, ap);
 8008bca:	f107 0114 	add.w	r1, r7, #20
 8008bce:	683b      	ldr	r3, [r7, #0]
 8008bd0:	687a      	ldr	r2, [r7, #4]
 8008bd2:	4809      	ldr	r0, [pc, #36]	; (8008bf8 <mg_vsnprintf+0x4c>)
 8008bd4:	f7f9 ff0c 	bl	80029f0 <mg_vxprintf>
 8008bd8:	6278      	str	r0, [r7, #36]	; 0x24
  if (n < len) buf[n] = '\0';
 8008bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	429a      	cmp	r2, r3
 8008be0:	d204      	bcs.n	8008bec <mg_vsnprintf+0x40>
 8008be2:	68fa      	ldr	r2, [r7, #12]
 8008be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008be6:	4413      	add	r3, r2
 8008be8:	2200      	movs	r2, #0
 8008bea:	701a      	strb	r2, [r3, #0]
  return n;
 8008bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3728      	adds	r7, #40	; 0x28
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}
 8008bf6:	bf00      	nop
 8008bf8:	08008b6d 	.word	0x08008b6d

08008bfc <mg_snprintf>:

size_t mg_snprintf(char *buf, size_t len, const char *fmt, ...) {
 8008bfc:	b40c      	push	{r2, r3}
 8008bfe:	b580      	push	{r7, lr}
 8008c00:	b084      	sub	sp, #16
 8008c02:	af00      	add	r7, sp, #0
 8008c04:	6078      	str	r0, [r7, #4]
 8008c06:	6039      	str	r1, [r7, #0]
  va_list ap;
  size_t n;
  va_start(ap, fmt);
 8008c08:	f107 031c 	add.w	r3, r7, #28
 8008c0c:	60bb      	str	r3, [r7, #8]
  n = mg_vsnprintf(buf, len, fmt, &ap);
 8008c0e:	f107 0308 	add.w	r3, r7, #8
 8008c12:	69ba      	ldr	r2, [r7, #24]
 8008c14:	6839      	ldr	r1, [r7, #0]
 8008c16:	6878      	ldr	r0, [r7, #4]
 8008c18:	f7ff ffc8 	bl	8008bac <mg_vsnprintf>
 8008c1c:	60f8      	str	r0, [r7, #12]
  va_end(ap);
  return n;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
}
 8008c20:	4618      	mov	r0, r3
 8008c22:	3710      	adds	r7, #16
 8008c24:	46bd      	mov	sp, r7
 8008c26:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c2a:	b002      	add	sp, #8
 8008c2c:	4770      	bx	lr

08008c2e <mg_pfn_stdout>:
  s = mg_vmprintf(fmt, &ap);
  va_end(ap);
  return s;
}

void mg_pfn_stdout(char c, void *param) {
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b082      	sub	sp, #8
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	4603      	mov	r3, r0
 8008c36:	6039      	str	r1, [r7, #0]
 8008c38:	71fb      	strb	r3, [r7, #7]
  putchar(c);
 8008c3a:	79fb      	ldrb	r3, [r7, #7]
 8008c3c:	4618      	mov	r0, r3
 8008c3e:	f00b fc13 	bl	8014468 <putchar>
  (void) param;
}
 8008c42:	bf00      	nop
 8008c44:	3708      	adds	r7, #8
 8008c46:	46bd      	mov	sp, r7
 8008c48:	bd80      	pop	{r7, pc}
	...

08008c4c <print_ip4>:

static size_t print_ip4(void (*out)(char, void *), void *arg, uint8_t *p) {
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b088      	sub	sp, #32
 8008c50:	af04      	add	r7, sp, #16
 8008c52:	60f8      	str	r0, [r7, #12]
 8008c54:	60b9      	str	r1, [r7, #8]
 8008c56:	607a      	str	r2, [r7, #4]
  return mg_xprintf(out, arg, "%d.%d.%d.%d", p[0], p[1], p[2], p[3]);
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	781b      	ldrb	r3, [r3, #0]
 8008c5c:	4618      	mov	r0, r3
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	3301      	adds	r3, #1
 8008c62:	781b      	ldrb	r3, [r3, #0]
 8008c64:	461a      	mov	r2, r3
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3302      	adds	r3, #2
 8008c6a:	781b      	ldrb	r3, [r3, #0]
 8008c6c:	4619      	mov	r1, r3
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	3303      	adds	r3, #3
 8008c72:	781b      	ldrb	r3, [r3, #0]
 8008c74:	9302      	str	r3, [sp, #8]
 8008c76:	9101      	str	r1, [sp, #4]
 8008c78:	9200      	str	r2, [sp, #0]
 8008c7a:	4603      	mov	r3, r0
 8008c7c:	4a04      	ldr	r2, [pc, #16]	; (8008c90 <print_ip4+0x44>)
 8008c7e:	68b9      	ldr	r1, [r7, #8]
 8008c80:	68f8      	ldr	r0, [r7, #12]
 8008c82:	f7f9 fe9a 	bl	80029ba <mg_xprintf>
 8008c86:	4603      	mov	r3, r0
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	080161f0 	.word	0x080161f0

08008c94 <print_ip6>:

static size_t print_ip6(void (*out)(char, void *), void *arg, uint16_t *p) {
 8008c94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c98:	b08e      	sub	sp, #56	; 0x38
 8008c9a:	af08      	add	r7, sp, #32
 8008c9c:	6178      	str	r0, [r7, #20]
 8008c9e:	6139      	str	r1, [r7, #16]
 8008ca0:	60fa      	str	r2, [r7, #12]
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8008ca2:	68fb      	ldr	r3, [r7, #12]
 8008ca4:	881b      	ldrh	r3, [r3, #0]
 8008ca6:	4618      	mov	r0, r3
 8008ca8:	f001 fc09 	bl	800a4be <mg_ntohs>
 8008cac:	4603      	mov	r3, r0
 8008cae:	4698      	mov	r8, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3302      	adds	r3, #2
 8008cb4:	881b      	ldrh	r3, [r3, #0]
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	f001 fc01 	bl	800a4be <mg_ntohs>
 8008cbc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8008cbe:	461c      	mov	r4, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8008cc0:	68fb      	ldr	r3, [r7, #12]
 8008cc2:	3304      	adds	r3, #4
 8008cc4:	881b      	ldrh	r3, [r3, #0]
 8008cc6:	4618      	mov	r0, r3
 8008cc8:	f001 fbf9 	bl	800a4be <mg_ntohs>
 8008ccc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8008cce:	461d      	mov	r5, r3
                    mg_ntohs(p[1]), mg_ntohs(p[2]), mg_ntohs(p[3]),
 8008cd0:	68fb      	ldr	r3, [r7, #12]
 8008cd2:	3306      	adds	r3, #6
 8008cd4:	881b      	ldrh	r3, [r3, #0]
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	f001 fbf1 	bl	800a4be <mg_ntohs>
 8008cdc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8008cde:	461e      	mov	r6, r3
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	3308      	adds	r3, #8
 8008ce4:	881b      	ldrh	r3, [r3, #0]
 8008ce6:	4618      	mov	r0, r3
 8008ce8:	f001 fbe9 	bl	800a4be <mg_ntohs>
 8008cec:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8008cee:	60bb      	str	r3, [r7, #8]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8008cf0:	68fb      	ldr	r3, [r7, #12]
 8008cf2:	330a      	adds	r3, #10
 8008cf4:	881b      	ldrh	r3, [r3, #0]
 8008cf6:	4618      	mov	r0, r3
 8008cf8:	f001 fbe1 	bl	800a4be <mg_ntohs>
 8008cfc:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8008cfe:	607b      	str	r3, [r7, #4]
                    mg_ntohs(p[4]), mg_ntohs(p[5]), mg_ntohs(p[6]),
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	330c      	adds	r3, #12
 8008d04:	881b      	ldrh	r3, [r3, #0]
 8008d06:	4618      	mov	r0, r3
 8008d08:	f001 fbd9 	bl	800a4be <mg_ntohs>
 8008d0c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8008d0e:	603b      	str	r3, [r7, #0]
                    mg_ntohs(p[7]));
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	330e      	adds	r3, #14
 8008d14:	881b      	ldrh	r3, [r3, #0]
 8008d16:	4618      	mov	r0, r3
 8008d18:	f001 fbd1 	bl	800a4be <mg_ntohs>
 8008d1c:	4603      	mov	r3, r0
  return mg_xprintf(out, arg, "[%x:%x:%x:%x:%x:%x:%x:%x]", mg_ntohs(p[0]),
 8008d1e:	9306      	str	r3, [sp, #24]
 8008d20:	683a      	ldr	r2, [r7, #0]
 8008d22:	9205      	str	r2, [sp, #20]
 8008d24:	687a      	ldr	r2, [r7, #4]
 8008d26:	9204      	str	r2, [sp, #16]
 8008d28:	68bb      	ldr	r3, [r7, #8]
 8008d2a:	9303      	str	r3, [sp, #12]
 8008d2c:	9602      	str	r6, [sp, #8]
 8008d2e:	9501      	str	r5, [sp, #4]
 8008d30:	9400      	str	r4, [sp, #0]
 8008d32:	4643      	mov	r3, r8
 8008d34:	4a05      	ldr	r2, [pc, #20]	; (8008d4c <print_ip6+0xb8>)
 8008d36:	6939      	ldr	r1, [r7, #16]
 8008d38:	6978      	ldr	r0, [r7, #20]
 8008d3a:	f7f9 fe3e 	bl	80029ba <mg_xprintf>
 8008d3e:	4603      	mov	r3, r0
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d4a:	bf00      	nop
 8008d4c:	080161fc 	.word	0x080161fc

08008d50 <mg_print_ip4>:

size_t mg_print_ip4(void (*out)(char, void *), void *arg, va_list *ap) {
 8008d50:	b580      	push	{r7, lr}
 8008d52:	b086      	sub	sp, #24
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	60f8      	str	r0, [r7, #12]
 8008d58:	60b9      	str	r1, [r7, #8]
 8008d5a:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	1d19      	adds	r1, r3, #4
 8008d62:	687a      	ldr	r2, [r7, #4]
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	617b      	str	r3, [r7, #20]
  return print_ip4(out, arg, p);
 8008d6a:	697a      	ldr	r2, [r7, #20]
 8008d6c:	68b9      	ldr	r1, [r7, #8]
 8008d6e:	68f8      	ldr	r0, [r7, #12]
 8008d70:	f7ff ff6c 	bl	8008c4c <print_ip4>
 8008d74:	4603      	mov	r3, r0
}
 8008d76:	4618      	mov	r0, r3
 8008d78:	3718      	adds	r7, #24
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}

08008d7e <mg_print_ip>:
size_t mg_print_ip6(void (*out)(char, void *), void *arg, va_list *ap) {
  uint16_t *p = va_arg(*ap, uint16_t *);
  return print_ip6(out, arg, p);
}

size_t mg_print_ip(void (*out)(char, void *), void *arg, va_list *ap) {
 8008d7e:	b580      	push	{r7, lr}
 8008d80:	b086      	sub	sp, #24
 8008d82:	af00      	add	r7, sp, #0
 8008d84:	60f8      	str	r0, [r7, #12]
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
  struct mg_addr *addr = va_arg(*ap, struct mg_addr *);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	681b      	ldr	r3, [r3, #0]
 8008d8e:	1d19      	adds	r1, r3, #4
 8008d90:	687a      	ldr	r2, [r7, #4]
 8008d92:	6011      	str	r1, [r2, #0]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	617b      	str	r3, [r7, #20]
  if (addr->is_ip6) return print_ip6(out, arg, (uint16_t *) addr->ip);
 8008d98:	697b      	ldr	r3, [r7, #20]
 8008d9a:	7c9b      	ldrb	r3, [r3, #18]
 8008d9c:	2b00      	cmp	r3, #0
 8008d9e:	d007      	beq.n	8008db0 <mg_print_ip+0x32>
 8008da0:	697b      	ldr	r3, [r7, #20]
 8008da2:	461a      	mov	r2, r3
 8008da4:	68b9      	ldr	r1, [r7, #8]
 8008da6:	68f8      	ldr	r0, [r7, #12]
 8008da8:	f7ff ff74 	bl	8008c94 <print_ip6>
 8008dac:	4603      	mov	r3, r0
 8008dae:	e006      	b.n	8008dbe <mg_print_ip+0x40>
  return print_ip4(out, arg, (uint8_t *) &addr->ip);
 8008db0:	697b      	ldr	r3, [r7, #20]
 8008db2:	461a      	mov	r2, r3
 8008db4:	68b9      	ldr	r1, [r7, #8]
 8008db6:	68f8      	ldr	r0, [r7, #12]
 8008db8:	f7ff ff48 	bl	8008c4c <print_ip4>
 8008dbc:	4603      	mov	r3, r0
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3718      	adds	r7, #24
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	bd80      	pop	{r7, pc}
	...

08008dc8 <mg_print_ip_port>:

size_t mg_print_ip_port(void (*out)(char, void *), void *arg, va_list *ap) {
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b088      	sub	sp, #32
 8008dcc:	af02      	add	r7, sp, #8
 8008dce:	60f8      	str	r0, [r7, #12]
 8008dd0:	60b9      	str	r1, [r7, #8]
 8008dd2:	607a      	str	r2, [r7, #4]
  struct mg_addr *a = va_arg(*ap, struct mg_addr *);
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	681b      	ldr	r3, [r3, #0]
 8008dd8:	1d19      	adds	r1, r3, #4
 8008dda:	687a      	ldr	r2, [r7, #4]
 8008ddc:	6011      	str	r1, [r2, #0]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%M:%hu", mg_print_ip, a, mg_ntohs(a->port));
 8008de2:	697b      	ldr	r3, [r7, #20]
 8008de4:	8a1b      	ldrh	r3, [r3, #16]
 8008de6:	4618      	mov	r0, r3
 8008de8:	f001 fb69 	bl	800a4be <mg_ntohs>
 8008dec:	4603      	mov	r3, r0
 8008dee:	9301      	str	r3, [sp, #4]
 8008df0:	697b      	ldr	r3, [r7, #20]
 8008df2:	9300      	str	r3, [sp, #0]
 8008df4:	4b05      	ldr	r3, [pc, #20]	; (8008e0c <mg_print_ip_port+0x44>)
 8008df6:	4a06      	ldr	r2, [pc, #24]	; (8008e10 <mg_print_ip_port+0x48>)
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f7f9 fddd 	bl	80029ba <mg_xprintf>
 8008e00:	4603      	mov	r3, r0
}
 8008e02:	4618      	mov	r0, r3
 8008e04:	3718      	adds	r7, #24
 8008e06:	46bd      	mov	sp, r7
 8008e08:	bd80      	pop	{r7, pc}
 8008e0a:	bf00      	nop
 8008e0c:	08008d7f 	.word	0x08008d7f
 8008e10:	08016218 	.word	0x08016218

08008e14 <mg_print_mac>:

size_t mg_print_mac(void (*out)(char, void *), void *arg, va_list *ap) {
 8008e14:	b5b0      	push	{r4, r5, r7, lr}
 8008e16:	b08c      	sub	sp, #48	; 0x30
 8008e18:	af06      	add	r7, sp, #24
 8008e1a:	60f8      	str	r0, [r7, #12]
 8008e1c:	60b9      	str	r1, [r7, #8]
 8008e1e:	607a      	str	r2, [r7, #4]
  uint8_t *p = va_arg(*ap, uint8_t *);
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	1d19      	adds	r1, r3, #4
 8008e26:	687a      	ldr	r2, [r7, #4]
 8008e28:	6011      	str	r1, [r2, #0]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	617b      	str	r3, [r7, #20]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8008e2e:	697b      	ldr	r3, [r7, #20]
 8008e30:	781b      	ldrb	r3, [r3, #0]
 8008e32:	461d      	mov	r5, r3
 8008e34:	697b      	ldr	r3, [r7, #20]
 8008e36:	3301      	adds	r3, #1
 8008e38:	781b      	ldrb	r3, [r3, #0]
 8008e3a:	461a      	mov	r2, r3
 8008e3c:	697b      	ldr	r3, [r7, #20]
 8008e3e:	3302      	adds	r3, #2
 8008e40:	781b      	ldrb	r3, [r3, #0]
 8008e42:	4619      	mov	r1, r3
                    p[3], p[4], p[5]);
 8008e44:	697b      	ldr	r3, [r7, #20]
 8008e46:	3303      	adds	r3, #3
 8008e48:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8008e4a:	4618      	mov	r0, r3
                    p[3], p[4], p[5]);
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	3304      	adds	r3, #4
 8008e50:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8008e52:	461c      	mov	r4, r3
                    p[3], p[4], p[5]);
 8008e54:	697b      	ldr	r3, [r7, #20]
 8008e56:	3305      	adds	r3, #5
 8008e58:	781b      	ldrb	r3, [r3, #0]
  return mg_xprintf(out, arg, "%02x:%02x:%02x:%02x:%02x:%02x", p[0], p[1], p[2],
 8008e5a:	9304      	str	r3, [sp, #16]
 8008e5c:	9403      	str	r4, [sp, #12]
 8008e5e:	9002      	str	r0, [sp, #8]
 8008e60:	9101      	str	r1, [sp, #4]
 8008e62:	9200      	str	r2, [sp, #0]
 8008e64:	462b      	mov	r3, r5
 8008e66:	4a05      	ldr	r2, [pc, #20]	; (8008e7c <mg_print_mac+0x68>)
 8008e68:	68b9      	ldr	r1, [r7, #8]
 8008e6a:	68f8      	ldr	r0, [r7, #12]
 8008e6c:	f7f9 fda5 	bl	80029ba <mg_xprintf>
 8008e70:	4603      	mov	r3, r0
}
 8008e72:	4618      	mov	r0, r3
 8008e74:	3718      	adds	r7, #24
 8008e76:	46bd      	mov	sp, r7
 8008e78:	bdb0      	pop	{r4, r5, r7, pc}
 8008e7a:	bf00      	nop
 8008e7c:	08016220 	.word	0x08016220

08008e80 <mg_esc>:

static char mg_esc(int c, bool esc) {
 8008e80:	b480      	push	{r7}
 8008e82:	b087      	sub	sp, #28
 8008e84:	af00      	add	r7, sp, #0
 8008e86:	6078      	str	r0, [r7, #4]
 8008e88:	460b      	mov	r3, r1
 8008e8a:	70fb      	strb	r3, [r7, #3]
  const char *p, *esc1 = "\b\f\n\r\t\\\"", *esc2 = "bfnrt\\\"";
 8008e8c:	4b19      	ldr	r3, [pc, #100]	; (8008ef4 <mg_esc+0x74>)
 8008e8e:	613b      	str	r3, [r7, #16]
 8008e90:	4b19      	ldr	r3, [pc, #100]	; (8008ef8 <mg_esc+0x78>)
 8008e92:	60fb      	str	r3, [r7, #12]
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8008e94:	78fb      	ldrb	r3, [r7, #3]
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d001      	beq.n	8008e9e <mg_esc+0x1e>
 8008e9a:	693b      	ldr	r3, [r7, #16]
 8008e9c:	e000      	b.n	8008ea0 <mg_esc+0x20>
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	617b      	str	r3, [r7, #20]
 8008ea2:	e01b      	b.n	8008edc <mg_esc+0x5c>
    if (*p == c) return esc ? esc2[p - esc1] : esc1[p - esc2];
 8008ea4:	697b      	ldr	r3, [r7, #20]
 8008ea6:	781b      	ldrb	r3, [r3, #0]
 8008ea8:	461a      	mov	r2, r3
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	4293      	cmp	r3, r2
 8008eae:	d112      	bne.n	8008ed6 <mg_esc+0x56>
 8008eb0:	78fb      	ldrb	r3, [r7, #3]
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d007      	beq.n	8008ec6 <mg_esc+0x46>
 8008eb6:	697a      	ldr	r2, [r7, #20]
 8008eb8:	693b      	ldr	r3, [r7, #16]
 8008eba:	1ad3      	subs	r3, r2, r3
 8008ebc:	461a      	mov	r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	4413      	add	r3, r2
 8008ec2:	781b      	ldrb	r3, [r3, #0]
 8008ec4:	e00f      	b.n	8008ee6 <mg_esc+0x66>
 8008ec6:	697a      	ldr	r2, [r7, #20]
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	1ad3      	subs	r3, r2, r3
 8008ecc:	461a      	mov	r2, r3
 8008ece:	693b      	ldr	r3, [r7, #16]
 8008ed0:	4413      	add	r3, r2
 8008ed2:	781b      	ldrb	r3, [r3, #0]
 8008ed4:	e007      	b.n	8008ee6 <mg_esc+0x66>
  for (p = esc ? esc1 : esc2; *p != '\0'; p++) {
 8008ed6:	697b      	ldr	r3, [r7, #20]
 8008ed8:	3301      	adds	r3, #1
 8008eda:	617b      	str	r3, [r7, #20]
 8008edc:	697b      	ldr	r3, [r7, #20]
 8008ede:	781b      	ldrb	r3, [r3, #0]
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d1df      	bne.n	8008ea4 <mg_esc+0x24>
  }
  return 0;
 8008ee4:	2300      	movs	r3, #0
}
 8008ee6:	4618      	mov	r0, r3
 8008ee8:	371c      	adds	r7, #28
 8008eea:	46bd      	mov	sp, r7
 8008eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef0:	4770      	bx	lr
 8008ef2:	bf00      	nop
 8008ef4:	0801606c 	.word	0x0801606c
 8008ef8:	08016074 	.word	0x08016074

08008efc <mg_escape>:

static char mg_escape(int c) {
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b082      	sub	sp, #8
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  return mg_esc(c, true);
 8008f04:	2101      	movs	r1, #1
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f7ff ffba 	bl	8008e80 <mg_esc>
 8008f0c:	4603      	mov	r3, r0
}
 8008f0e:	4618      	mov	r0, r3
 8008f10:	3708      	adds	r7, #8
 8008f12:	46bd      	mov	sp, r7
 8008f14:	bd80      	pop	{r7, pc}

08008f16 <qcpy>:

static size_t qcpy(void (*out)(char, void *), void *ptr, char *buf,
                   size_t len) {
 8008f16:	b580      	push	{r7, lr}
 8008f18:	b088      	sub	sp, #32
 8008f1a:	af00      	add	r7, sp, #0
 8008f1c:	60f8      	str	r0, [r7, #12]
 8008f1e:	60b9      	str	r1, [r7, #8]
 8008f20:	607a      	str	r2, [r7, #4]
 8008f22:	603b      	str	r3, [r7, #0]
  size_t i = 0, extra = 0;
 8008f24:	2300      	movs	r3, #0
 8008f26:	61fb      	str	r3, [r7, #28]
 8008f28:	2300      	movs	r3, #0
 8008f2a:	61bb      	str	r3, [r7, #24]
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	61fb      	str	r3, [r7, #28]
 8008f30:	e023      	b.n	8008f7a <qcpy+0x64>
    char c = mg_escape(buf[i]);
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	69fb      	ldr	r3, [r7, #28]
 8008f36:	4413      	add	r3, r2
 8008f38:	781b      	ldrb	r3, [r3, #0]
 8008f3a:	4618      	mov	r0, r3
 8008f3c:	f7ff ffde 	bl	8008efc <mg_escape>
 8008f40:	4603      	mov	r3, r0
 8008f42:	75fb      	strb	r3, [r7, #23]
    if (c) {
 8008f44:	7dfb      	ldrb	r3, [r7, #23]
 8008f46:	2b00      	cmp	r3, #0
 8008f48:	d00c      	beq.n	8008f64 <qcpy+0x4e>
      out('\\', ptr), out(c, ptr), extra++;
 8008f4a:	68fb      	ldr	r3, [r7, #12]
 8008f4c:	68b9      	ldr	r1, [r7, #8]
 8008f4e:	205c      	movs	r0, #92	; 0x5c
 8008f50:	4798      	blx	r3
 8008f52:	7dfa      	ldrb	r2, [r7, #23]
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	68b9      	ldr	r1, [r7, #8]
 8008f58:	4610      	mov	r0, r2
 8008f5a:	4798      	blx	r3
 8008f5c:	69bb      	ldr	r3, [r7, #24]
 8008f5e:	3301      	adds	r3, #1
 8008f60:	61bb      	str	r3, [r7, #24]
 8008f62:	e007      	b.n	8008f74 <qcpy+0x5e>
    } else {
      out(buf[i], ptr);
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	69fb      	ldr	r3, [r7, #28]
 8008f68:	4413      	add	r3, r2
 8008f6a:	781a      	ldrb	r2, [r3, #0]
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	68b9      	ldr	r1, [r7, #8]
 8008f70:	4610      	mov	r0, r2
 8008f72:	4798      	blx	r3
  for (i = 0; i < len && buf[i] != '\0'; i++) {
 8008f74:	69fb      	ldr	r3, [r7, #28]
 8008f76:	3301      	adds	r3, #1
 8008f78:	61fb      	str	r3, [r7, #28]
 8008f7a:	69fa      	ldr	r2, [r7, #28]
 8008f7c:	683b      	ldr	r3, [r7, #0]
 8008f7e:	429a      	cmp	r2, r3
 8008f80:	d205      	bcs.n	8008f8e <qcpy+0x78>
 8008f82:	687a      	ldr	r2, [r7, #4]
 8008f84:	69fb      	ldr	r3, [r7, #28]
 8008f86:	4413      	add	r3, r2
 8008f88:	781b      	ldrb	r3, [r3, #0]
 8008f8a:	2b00      	cmp	r3, #0
 8008f8c:	d1d1      	bne.n	8008f32 <qcpy+0x1c>
    }
  }
  return i + extra;
 8008f8e:	69fa      	ldr	r2, [r7, #28]
 8008f90:	69bb      	ldr	r3, [r7, #24]
 8008f92:	4413      	add	r3, r2
}
 8008f94:	4618      	mov	r0, r3
 8008f96:	3720      	adds	r7, #32
 8008f98:	46bd      	mov	sp, r7
 8008f9a:	bd80      	pop	{r7, pc}

08008f9c <mg_print_esc>:
  size_t len = (size_t) va_arg(*ap, int);
  uint8_t *buf = va_arg(*ap, uint8_t *);
  return bcpy(out, arg, buf, len);
}

size_t mg_print_esc(void (*out)(char, void *), void *arg, va_list *ap) {
 8008f9c:	b580      	push	{r7, lr}
 8008f9e:	b086      	sub	sp, #24
 8008fa0:	af00      	add	r7, sp, #0
 8008fa2:	60f8      	str	r0, [r7, #12]
 8008fa4:	60b9      	str	r1, [r7, #8]
 8008fa6:	607a      	str	r2, [r7, #4]
  size_t len = (size_t) va_arg(*ap, int);
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	1d19      	adds	r1, r3, #4
 8008fae:	687a      	ldr	r2, [r7, #4]
 8008fb0:	6011      	str	r1, [r2, #0]
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	617b      	str	r3, [r7, #20]
  char *p = va_arg(*ap, char *);
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	1d19      	adds	r1, r3, #4
 8008fbc:	687a      	ldr	r2, [r7, #4]
 8008fbe:	6011      	str	r1, [r2, #0]
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	613b      	str	r3, [r7, #16]
  if (len == 0) len = p == NULL ? 0 : strlen(p);
 8008fc4:	697b      	ldr	r3, [r7, #20]
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d109      	bne.n	8008fde <mg_print_esc+0x42>
 8008fca:	693b      	ldr	r3, [r7, #16]
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d004      	beq.n	8008fda <mg_print_esc+0x3e>
 8008fd0:	6938      	ldr	r0, [r7, #16]
 8008fd2:	f7f7 f9fd 	bl	80003d0 <strlen>
 8008fd6:	4603      	mov	r3, r0
 8008fd8:	e000      	b.n	8008fdc <mg_print_esc+0x40>
 8008fda:	2300      	movs	r3, #0
 8008fdc:	617b      	str	r3, [r7, #20]
  return qcpy(out, arg, p, len);
 8008fde:	697b      	ldr	r3, [r7, #20]
 8008fe0:	693a      	ldr	r2, [r7, #16]
 8008fe2:	68b9      	ldr	r1, [r7, #8]
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7ff ff96 	bl	8008f16 <qcpy>
 8008fea:	4603      	mov	r3, r0
}
 8008fec:	4618      	mov	r0, r3
 8008fee:	3718      	adds	r7, #24
 8008ff0:	46bd      	mov	sp, r7
 8008ff2:	bd80      	pop	{r7, pc}

08008ff4 <mg_queue_read_len>:
  q->size = size;
  q->buf = buf;
  q->head = q->tail = 0;
}

static size_t mg_queue_read_len(struct mg_queue *q) {
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b084      	sub	sp, #16
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint32_t n = 0;
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	60fb      	str	r3, [r7, #12]
  MG_MEMORY_BARRIER();
 8009000:	f3bf 8f5b 	dmb	ish
  memcpy(&n, q->buf + q->tail, sizeof(n));
 8009004:	687b      	ldr	r3, [r7, #4]
 8009006:	681a      	ldr	r2, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	689b      	ldr	r3, [r3, #8]
 800900c:	4413      	add	r3, r2
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	60fb      	str	r3, [r7, #12]
  assert(q->tail + n + sizeof(n) <= q->size);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	689a      	ldr	r2, [r3, #8]
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	4413      	add	r3, r2
 800901a:	1d1a      	adds	r2, r3, #4
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d906      	bls.n	8009032 <mg_queue_read_len+0x3e>
 8009024:	4b05      	ldr	r3, [pc, #20]	; (800903c <mg_queue_read_len+0x48>)
 8009026:	4a06      	ldr	r2, [pc, #24]	; (8009040 <mg_queue_read_len+0x4c>)
 8009028:	f640 71b1 	movw	r1, #4017	; 0xfb1
 800902c:	4805      	ldr	r0, [pc, #20]	; (8009044 <mg_queue_read_len+0x50>)
 800902e:	f00a ff65 	bl	8013efc <__assert_func>
  return n;
 8009032:	68fb      	ldr	r3, [r7, #12]
}
 8009034:	4618      	mov	r0, r3
 8009036:	3710      	adds	r7, #16
 8009038:	46bd      	mov	sp, r7
 800903a:	bd80      	pop	{r7, pc}
 800903c:	08016284 	.word	0x08016284
 8009040:	0801744c 	.word	0x0801744c
 8009044:	0801544c 	.word	0x0801544c

08009048 <mg_queue_write_len>:

static void mg_queue_write_len(struct mg_queue *q, size_t len) {
 8009048:	b480      	push	{r7}
 800904a:	b085      	sub	sp, #20
 800904c:	af00      	add	r7, sp, #0
 800904e:	6078      	str	r0, [r7, #4]
 8009050:	6039      	str	r1, [r7, #0]
  uint32_t n = (uint32_t) len;
 8009052:	683b      	ldr	r3, [r7, #0]
 8009054:	60fb      	str	r3, [r7, #12]
  memcpy(q->buf + q->head, &n, sizeof(n));
 8009056:	687b      	ldr	r3, [r7, #4]
 8009058:	681a      	ldr	r2, [r3, #0]
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	68db      	ldr	r3, [r3, #12]
 800905e:	4413      	add	r3, r2
 8009060:	68fa      	ldr	r2, [r7, #12]
 8009062:	601a      	str	r2, [r3, #0]
  MG_MEMORY_BARRIER();
 8009064:	f3bf 8f5b 	dmb	ish
}
 8009068:	bf00      	nop
 800906a:	3714      	adds	r7, #20
 800906c:	46bd      	mov	sp, r7
 800906e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009072:	4770      	bx	lr

08009074 <mg_queue_book>:

size_t mg_queue_book(struct mg_queue *q, char **buf, size_t len) {
 8009074:	b580      	push	{r7, lr}
 8009076:	b086      	sub	sp, #24
 8009078:	af00      	add	r7, sp, #0
 800907a:	60f8      	str	r0, [r7, #12]
 800907c:	60b9      	str	r1, [r7, #8]
 800907e:	607a      	str	r2, [r7, #4]
  size_t space = 0, hs = sizeof(uint32_t) * 2;  // *2 is for the 0 marker
 8009080:	2300      	movs	r3, #0
 8009082:	617b      	str	r3, [r7, #20]
 8009084:	2308      	movs	r3, #8
 8009086:	613b      	str	r3, [r7, #16]
  if (q->head >= q->tail && q->head + len + hs <= q->size) {
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	68da      	ldr	r2, [r3, #12]
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	689b      	ldr	r3, [r3, #8]
 8009090:	429a      	cmp	r2, r3
 8009092:	d312      	bcc.n	80090ba <mg_queue_book+0x46>
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	68da      	ldr	r2, [r3, #12]
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	441a      	add	r2, r3
 800909c:	693b      	ldr	r3, [r7, #16]
 800909e:	441a      	add	r2, r3
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	685b      	ldr	r3, [r3, #4]
 80090a4:	429a      	cmp	r2, r3
 80090a6:	d808      	bhi.n	80090ba <mg_queue_book+0x46>
    space = q->size - q->head - hs;  // There is enough space
 80090a8:	68fb      	ldr	r3, [r7, #12]
 80090aa:	685a      	ldr	r2, [r3, #4]
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	68db      	ldr	r3, [r3, #12]
 80090b0:	1ad2      	subs	r2, r2, r3
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	1ad3      	subs	r3, r2, r3
 80090b6:	617b      	str	r3, [r7, #20]
 80090b8:	e011      	b.n	80090de <mg_queue_book+0x6a>
  } else if (q->head >= q->tail && q->tail > hs) {
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	68da      	ldr	r2, [r3, #12]
 80090be:	68fb      	ldr	r3, [r7, #12]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d30b      	bcc.n	80090de <mg_queue_book+0x6a>
 80090c6:	68fb      	ldr	r3, [r7, #12]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	693a      	ldr	r2, [r7, #16]
 80090cc:	429a      	cmp	r2, r3
 80090ce:	d206      	bcs.n	80090de <mg_queue_book+0x6a>
    mg_queue_write_len(q, 0);  // Not enough space ahead
 80090d0:	2100      	movs	r1, #0
 80090d2:	68f8      	ldr	r0, [r7, #12]
 80090d4:	f7ff ffb8 	bl	8009048 <mg_queue_write_len>
    q->head = 0;               // Wrap head to the beginning
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	2200      	movs	r2, #0
 80090dc:	60da      	str	r2, [r3, #12]
  }
  if (q->head + hs + len < q->tail) space = q->tail - q->head - hs;
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	68da      	ldr	r2, [r3, #12]
 80090e2:	693b      	ldr	r3, [r7, #16]
 80090e4:	441a      	add	r2, r3
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	441a      	add	r2, r3
 80090ea:	68fb      	ldr	r3, [r7, #12]
 80090ec:	689b      	ldr	r3, [r3, #8]
 80090ee:	429a      	cmp	r2, r3
 80090f0:	d207      	bcs.n	8009102 <mg_queue_book+0x8e>
 80090f2:	68fb      	ldr	r3, [r7, #12]
 80090f4:	689a      	ldr	r2, [r3, #8]
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	68db      	ldr	r3, [r3, #12]
 80090fa:	1ad2      	subs	r2, r2, r3
 80090fc:	693b      	ldr	r3, [r7, #16]
 80090fe:	1ad3      	subs	r3, r2, r3
 8009100:	617b      	str	r3, [r7, #20]
  if (buf != NULL) *buf = q->buf + q->head + sizeof(uint32_t);
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d007      	beq.n	8009118 <mg_queue_book+0xa4>
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	681a      	ldr	r2, [r3, #0]
 800910c:	68fb      	ldr	r3, [r7, #12]
 800910e:	68db      	ldr	r3, [r3, #12]
 8009110:	3304      	adds	r3, #4
 8009112:	441a      	add	r2, r3
 8009114:	68bb      	ldr	r3, [r7, #8]
 8009116:	601a      	str	r2, [r3, #0]
  return space;
 8009118:	697b      	ldr	r3, [r7, #20]
}
 800911a:	4618      	mov	r0, r3
 800911c:	3718      	adds	r7, #24
 800911e:	46bd      	mov	sp, r7
 8009120:	bd80      	pop	{r7, pc}
	...

08009124 <mg_queue_next>:

size_t mg_queue_next(struct mg_queue *q, char **buf) {
 8009124:	b580      	push	{r7, lr}
 8009126:	b084      	sub	sp, #16
 8009128:	af00      	add	r7, sp, #0
 800912a:	6078      	str	r0, [r7, #4]
 800912c:	6039      	str	r1, [r7, #0]
  size_t len = 0;
 800912e:	2300      	movs	r3, #0
 8009130:	60fb      	str	r3, [r7, #12]
  if (q->tail != q->head) {
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	689a      	ldr	r2, [r3, #8]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	68db      	ldr	r3, [r3, #12]
 800913a:	429a      	cmp	r2, r3
 800913c:	d013      	beq.n	8009166 <mg_queue_next+0x42>
    len = mg_queue_read_len(q);
 800913e:	6878      	ldr	r0, [r7, #4]
 8009140:	f7ff ff58 	bl	8008ff4 <mg_queue_read_len>
 8009144:	60f8      	str	r0, [r7, #12]
    if (len == 0) {  // Zero (head wrapped) ?
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	2b00      	cmp	r3, #0
 800914a:	d10c      	bne.n	8009166 <mg_queue_next+0x42>
      q->tail = 0;   // Reset tail to the start
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	2200      	movs	r2, #0
 8009150:	609a      	str	r2, [r3, #8]
      if (q->head > q->tail) len = mg_queue_read_len(q);  // Read again
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	68da      	ldr	r2, [r3, #12]
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	689b      	ldr	r3, [r3, #8]
 800915a:	429a      	cmp	r2, r3
 800915c:	d903      	bls.n	8009166 <mg_queue_next+0x42>
 800915e:	6878      	ldr	r0, [r7, #4]
 8009160:	f7ff ff48 	bl	8008ff4 <mg_queue_read_len>
 8009164:	60f8      	str	r0, [r7, #12]
    }
  }
  if (buf != NULL) *buf = q->buf + q->tail + sizeof(uint32_t);
 8009166:	683b      	ldr	r3, [r7, #0]
 8009168:	2b00      	cmp	r3, #0
 800916a:	d007      	beq.n	800917c <mg_queue_next+0x58>
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681a      	ldr	r2, [r3, #0]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	3304      	adds	r3, #4
 8009176:	441a      	add	r2, r3
 8009178:	683b      	ldr	r3, [r7, #0]
 800917a:	601a      	str	r2, [r3, #0]
  assert(q->tail + len <= q->size);
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	689a      	ldr	r2, [r3, #8]
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	441a      	add	r2, r3
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	685b      	ldr	r3, [r3, #4]
 8009188:	429a      	cmp	r2, r3
 800918a:	d906      	bls.n	800919a <mg_queue_next+0x76>
 800918c:	4b05      	ldr	r3, [pc, #20]	; (80091a4 <mg_queue_next+0x80>)
 800918e:	4a06      	ldr	r2, [pc, #24]	; (80091a8 <mg_queue_next+0x84>)
 8009190:	f640 71d2 	movw	r1, #4050	; 0xfd2
 8009194:	4805      	ldr	r0, [pc, #20]	; (80091ac <mg_queue_next+0x88>)
 8009196:	f00a feb1 	bl	8013efc <__assert_func>
  return len;
 800919a:	68fb      	ldr	r3, [r7, #12]
}
 800919c:	4618      	mov	r0, r3
 800919e:	3710      	adds	r7, #16
 80091a0:	46bd      	mov	sp, r7
 80091a2:	bd80      	pop	{r7, pc}
 80091a4:	080162a8 	.word	0x080162a8
 80091a8:	08017460 	.word	0x08017460
 80091ac:	0801544c 	.word	0x0801544c

080091b0 <mg_queue_add>:

void mg_queue_add(struct mg_queue *q, size_t len) {
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b082      	sub	sp, #8
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	6078      	str	r0, [r7, #4]
 80091b8:	6039      	str	r1, [r7, #0]
  assert(len > 0);
 80091ba:	683b      	ldr	r3, [r7, #0]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d106      	bne.n	80091ce <mg_queue_add+0x1e>
 80091c0:	4b13      	ldr	r3, [pc, #76]	; (8009210 <mg_queue_add+0x60>)
 80091c2:	4a14      	ldr	r2, [pc, #80]	; (8009214 <mg_queue_add+0x64>)
 80091c4:	f640 71d7 	movw	r1, #4055	; 0xfd7
 80091c8:	4813      	ldr	r0, [pc, #76]	; (8009218 <mg_queue_add+0x68>)
 80091ca:	f00a fe97 	bl	8013efc <__assert_func>
  mg_queue_write_len(q, len);
 80091ce:	6839      	ldr	r1, [r7, #0]
 80091d0:	6878      	ldr	r0, [r7, #4]
 80091d2:	f7ff ff39 	bl	8009048 <mg_queue_write_len>
  assert(q->head + sizeof(uint32_t) * 2 + len <= q->size);
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	68da      	ldr	r2, [r3, #12]
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	4413      	add	r3, r2
 80091de:	f103 0208 	add.w	r2, r3, #8
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	685b      	ldr	r3, [r3, #4]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d906      	bls.n	80091f8 <mg_queue_add+0x48>
 80091ea:	4b0c      	ldr	r3, [pc, #48]	; (800921c <mg_queue_add+0x6c>)
 80091ec:	4a09      	ldr	r2, [pc, #36]	; (8009214 <mg_queue_add+0x64>)
 80091ee:	f640 71d9 	movw	r1, #4057	; 0xfd9
 80091f2:	4809      	ldr	r0, [pc, #36]	; (8009218 <mg_queue_add+0x68>)
 80091f4:	f00a fe82 	bl	8013efc <__assert_func>
  q->head += len + sizeof(uint32_t);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	68da      	ldr	r2, [r3, #12]
 80091fc:	683b      	ldr	r3, [r7, #0]
 80091fe:	4413      	add	r3, r2
 8009200:	1d1a      	adds	r2, r3, #4
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	60da      	str	r2, [r3, #12]
}
 8009206:	bf00      	nop
 8009208:	3708      	adds	r7, #8
 800920a:	46bd      	mov	sp, r7
 800920c:	bd80      	pop	{r7, pc}
 800920e:	bf00      	nop
 8009210:	080162c4 	.word	0x080162c4
 8009214:	08017470 	.word	0x08017470
 8009218:	0801544c 	.word	0x0801544c
 800921c:	080162cc 	.word	0x080162cc

08009220 <mg_queue_del>:

void mg_queue_del(struct mg_queue *q, size_t len) {
 8009220:	b580      	push	{r7, lr}
 8009222:	b082      	sub	sp, #8
 8009224:	af00      	add	r7, sp, #0
 8009226:	6078      	str	r0, [r7, #4]
 8009228:	6039      	str	r1, [r7, #0]
  q->tail += len + sizeof(uint32_t);
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	689a      	ldr	r2, [r3, #8]
 800922e:	683b      	ldr	r3, [r7, #0]
 8009230:	4413      	add	r3, r2
 8009232:	1d1a      	adds	r2, r3, #4
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	609a      	str	r2, [r3, #8]
  assert(q->tail + sizeof(uint32_t) <= q->size);
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	689b      	ldr	r3, [r3, #8]
 800923c:	1d1a      	adds	r2, r3, #4
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	685b      	ldr	r3, [r3, #4]
 8009242:	429a      	cmp	r2, r3
 8009244:	d906      	bls.n	8009254 <mg_queue_del+0x34>
 8009246:	4b05      	ldr	r3, [pc, #20]	; (800925c <mg_queue_del+0x3c>)
 8009248:	4a05      	ldr	r2, [pc, #20]	; (8009260 <mg_queue_del+0x40>)
 800924a:	f640 71df 	movw	r1, #4063	; 0xfdf
 800924e:	4805      	ldr	r0, [pc, #20]	; (8009264 <mg_queue_del+0x44>)
 8009250:	f00a fe54 	bl	8013efc <__assert_func>
}
 8009254:	bf00      	nop
 8009256:	3708      	adds	r7, #8
 8009258:	46bd      	mov	sp, r7
 800925a:	bd80      	pop	{r7, pc}
 800925c:	080162fc 	.word	0x080162fc
 8009260:	08017480 	.word	0x08017480
 8009264:	0801544c 	.word	0x0801544c

08009268 <gettimestamp>:


#define SNTP_TIME_OFFSET 2208988800U  // (1970 - 1900) in seconds
#define SNTP_MAX_FRAC 4294967295.0    // 2 ** 32 - 1

static int64_t gettimestamp(const uint32_t *data) {
 8009268:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800926c:	b086      	sub	sp, #24
 800926e:	af00      	add	r7, sp, #0
 8009270:	60f8      	str	r0, [r7, #12]
  uint32_t sec = mg_ntohl(data[0]), frac = mg_ntohl(data[1]);
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	681b      	ldr	r3, [r3, #0]
 8009276:	4618      	mov	r0, r3
 8009278:	f001 f908 	bl	800a48c <mg_ntohl>
 800927c:	6178      	str	r0, [r7, #20]
 800927e:	68fb      	ldr	r3, [r7, #12]
 8009280:	3304      	adds	r3, #4
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4618      	mov	r0, r3
 8009286:	f001 f901 	bl	800a48c <mg_ntohl>
 800928a:	6138      	str	r0, [r7, #16]
  if (sec) sec -= SNTP_TIME_OFFSET;
 800928c:	697b      	ldr	r3, [r7, #20]
 800928e:	2b00      	cmp	r3, #0
 8009290:	d003      	beq.n	800929a <gettimestamp+0x32>
 8009292:	697a      	ldr	r2, [r7, #20]
 8009294:	4b2e      	ldr	r3, [pc, #184]	; (8009350 <gettimestamp+0xe8>)
 8009296:	4413      	add	r3, r2
 8009298:	617b      	str	r3, [r7, #20]
  return ((int64_t) sec) * 1000 + (int64_t) (frac / SNTP_MAX_FRAC * 1000.0);
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2200      	movs	r2, #0
 800929e:	4698      	mov	r8, r3
 80092a0:	4691      	mov	r9, r2
 80092a2:	4642      	mov	r2, r8
 80092a4:	464b      	mov	r3, r9
 80092a6:	f04f 0000 	mov.w	r0, #0
 80092aa:	f04f 0100 	mov.w	r1, #0
 80092ae:	0159      	lsls	r1, r3, #5
 80092b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80092b4:	0150      	lsls	r0, r2, #5
 80092b6:	4602      	mov	r2, r0
 80092b8:	460b      	mov	r3, r1
 80092ba:	ebb2 0408 	subs.w	r4, r2, r8
 80092be:	eb63 0509 	sbc.w	r5, r3, r9
 80092c2:	f04f 0200 	mov.w	r2, #0
 80092c6:	f04f 0300 	mov.w	r3, #0
 80092ca:	00ab      	lsls	r3, r5, #2
 80092cc:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80092d0:	00a2      	lsls	r2, r4, #2
 80092d2:	4614      	mov	r4, r2
 80092d4:	461d      	mov	r5, r3
 80092d6:	eb14 0a08 	adds.w	sl, r4, r8
 80092da:	eb45 0b09 	adc.w	fp, r5, r9
 80092de:	f04f 0200 	mov.w	r2, #0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80092ea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80092ee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80092f2:	4692      	mov	sl, r2
 80092f4:	469b      	mov	fp, r3
 80092f6:	4654      	mov	r4, sl
 80092f8:	465d      	mov	r5, fp
 80092fa:	693b      	ldr	r3, [r7, #16]
 80092fc:	ee07 3a90 	vmov	s15, r3
 8009300:	eeb8 6b67 	vcvt.f64.u32	d6, s15
 8009304:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 8009340 <gettimestamp+0xd8>
 8009308:	ee86 7b05 	vdiv.f64	d7, d6, d5
 800930c:	ed9f 6b0e 	vldr	d6, [pc, #56]	; 8009348 <gettimestamp+0xe0>
 8009310:	ee27 7b06 	vmul.f64	d7, d7, d6
 8009314:	ec51 0b17 	vmov	r0, r1, d7
 8009318:	f7f7 fa86 	bl	8000828 <__aeabi_d2lz>
 800931c:	4602      	mov	r2, r0
 800931e:	460b      	mov	r3, r1
 8009320:	18a1      	adds	r1, r4, r2
 8009322:	6039      	str	r1, [r7, #0]
 8009324:	eb45 0303 	adc.w	r3, r5, r3
 8009328:	607b      	str	r3, [r7, #4]
 800932a:	e9d7 2300 	ldrd	r2, r3, [r7]
}
 800932e:	4610      	mov	r0, r2
 8009330:	4619      	mov	r1, r3
 8009332:	3718      	adds	r7, #24
 8009334:	46bd      	mov	sp, r7
 8009336:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800933a:	bf00      	nop
 800933c:	f3af 8000 	nop.w
 8009340:	ffe00000 	.word	0xffe00000
 8009344:	41efffff 	.word	0x41efffff
 8009348:	00000000 	.word	0x00000000
 800934c:	408f4000 	.word	0x408f4000
 8009350:	7c558180 	.word	0x7c558180

08009354 <mg_sntp_parse>:

int64_t mg_sntp_parse(const unsigned char *buf, size_t len) {
 8009354:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009358:	b09c      	sub	sp, #112	; 0x70
 800935a:	af08      	add	r7, sp, #32
 800935c:	6178      	str	r0, [r7, #20]
 800935e:	6139      	str	r1, [r7, #16]
  int64_t res = -1;
 8009360:	f04f 32ff 	mov.w	r2, #4294967295
 8009364:	f04f 33ff 	mov.w	r3, #4294967295
 8009368:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
  int mode = len > 0 ? buf[0] & 7 : 0;
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	2b00      	cmp	r3, #0
 8009370:	d004      	beq.n	800937c <mg_sntp_parse+0x28>
 8009372:	697b      	ldr	r3, [r7, #20]
 8009374:	781b      	ldrb	r3, [r3, #0]
 8009376:	f003 0307 	and.w	r3, r3, #7
 800937a:	e000      	b.n	800937e <mg_sntp_parse+0x2a>
 800937c:	2300      	movs	r3, #0
 800937e:	647b      	str	r3, [r7, #68]	; 0x44
  int version = len > 0 ? (buf[0] >> 3) & 7 : 0;
 8009380:	693b      	ldr	r3, [r7, #16]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <mg_sntp_parse+0x40>
 8009386:	697b      	ldr	r3, [r7, #20]
 8009388:	781b      	ldrb	r3, [r3, #0]
 800938a:	08db      	lsrs	r3, r3, #3
 800938c:	b2db      	uxtb	r3, r3
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	e000      	b.n	8009396 <mg_sntp_parse+0x42>
 8009394:	2300      	movs	r3, #0
 8009396:	643b      	str	r3, [r7, #64]	; 0x40
  if (len < 48) {
 8009398:	693b      	ldr	r3, [r7, #16]
 800939a:	2b2f      	cmp	r3, #47	; 0x2f
 800939c:	d80f      	bhi.n	80093be <mg_sntp_parse+0x6a>
    MG_ERROR(("%s", "corrupt packet"));
 800939e:	4b63      	ldr	r3, [pc, #396]	; (800952c <mg_sntp_parse+0x1d8>)
 80093a0:	f241 1236 	movw	r2, #4406	; 0x1136
 80093a4:	4962      	ldr	r1, [pc, #392]	; (8009530 <mg_sntp_parse+0x1dc>)
 80093a6:	2001      	movs	r0, #1
 80093a8:	f7fd fe34 	bl	8007014 <mg_log_prefix>
 80093ac:	4603      	mov	r3, r0
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 80b3 	beq.w	800951a <mg_sntp_parse+0x1c6>
 80093b4:	495f      	ldr	r1, [pc, #380]	; (8009534 <mg_sntp_parse+0x1e0>)
 80093b6:	4860      	ldr	r0, [pc, #384]	; (8009538 <mg_sntp_parse+0x1e4>)
 80093b8:	f7fd fe86 	bl	80070c8 <mg_log>
 80093bc:	e0ad      	b.n	800951a <mg_sntp_parse+0x1c6>
  } else if (mode != 4 && mode != 5) {
 80093be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c0:	2b04      	cmp	r3, #4
 80093c2:	d012      	beq.n	80093ea <mg_sntp_parse+0x96>
 80093c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80093c6:	2b05      	cmp	r3, #5
 80093c8:	d00f      	beq.n	80093ea <mg_sntp_parse+0x96>
    MG_ERROR(("%s", "not a server reply"));
 80093ca:	4b58      	ldr	r3, [pc, #352]	; (800952c <mg_sntp_parse+0x1d8>)
 80093cc:	f241 1238 	movw	r2, #4408	; 0x1138
 80093d0:	4957      	ldr	r1, [pc, #348]	; (8009530 <mg_sntp_parse+0x1dc>)
 80093d2:	2001      	movs	r0, #1
 80093d4:	f7fd fe1e 	bl	8007014 <mg_log_prefix>
 80093d8:	4603      	mov	r3, r0
 80093da:	2b00      	cmp	r3, #0
 80093dc:	f000 809d 	beq.w	800951a <mg_sntp_parse+0x1c6>
 80093e0:	4956      	ldr	r1, [pc, #344]	; (800953c <mg_sntp_parse+0x1e8>)
 80093e2:	4855      	ldr	r0, [pc, #340]	; (8009538 <mg_sntp_parse+0x1e4>)
 80093e4:	f7fd fe70 	bl	80070c8 <mg_log>
 80093e8:	e097      	b.n	800951a <mg_sntp_parse+0x1c6>
  } else if (buf[1] == 0) {
 80093ea:	697b      	ldr	r3, [r7, #20]
 80093ec:	3301      	adds	r3, #1
 80093ee:	781b      	ldrb	r3, [r3, #0]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d10f      	bne.n	8009414 <mg_sntp_parse+0xc0>
    MG_ERROR(("%s", "server sent a kiss of death"));
 80093f4:	4b4d      	ldr	r3, [pc, #308]	; (800952c <mg_sntp_parse+0x1d8>)
 80093f6:	f241 123a 	movw	r2, #4410	; 0x113a
 80093fa:	494d      	ldr	r1, [pc, #308]	; (8009530 <mg_sntp_parse+0x1dc>)
 80093fc:	2001      	movs	r0, #1
 80093fe:	f7fd fe09 	bl	8007014 <mg_log_prefix>
 8009402:	4603      	mov	r3, r0
 8009404:	2b00      	cmp	r3, #0
 8009406:	f000 8088 	beq.w	800951a <mg_sntp_parse+0x1c6>
 800940a:	494d      	ldr	r1, [pc, #308]	; (8009540 <mg_sntp_parse+0x1ec>)
 800940c:	484a      	ldr	r0, [pc, #296]	; (8009538 <mg_sntp_parse+0x1e4>)
 800940e:	f7fd fe5b 	bl	80070c8 <mg_log>
 8009412:	e082      	b.n	800951a <mg_sntp_parse+0x1c6>
  } else if (version == 4 || version == 3) {
 8009414:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009416:	2b04      	cmp	r3, #4
 8009418:	d002      	beq.n	8009420 <mg_sntp_parse+0xcc>
 800941a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800941c:	2b03      	cmp	r3, #3
 800941e:	d16e      	bne.n	80094fe <mg_sntp_parse+0x1aa>
    // int64_t ref = gettimestamp((uint32_t *) &buf[16]);
    int64_t t0 = gettimestamp((uint32_t *) &buf[24]);
 8009420:	697b      	ldr	r3, [r7, #20]
 8009422:	3318      	adds	r3, #24
 8009424:	4618      	mov	r0, r3
 8009426:	f7ff ff1f 	bl	8009268 <gettimestamp>
 800942a:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
    int64_t t1 = gettimestamp((uint32_t *) &buf[32]);
 800942e:	697b      	ldr	r3, [r7, #20]
 8009430:	3320      	adds	r3, #32
 8009432:	4618      	mov	r0, r3
 8009434:	f7ff ff18 	bl	8009268 <gettimestamp>
 8009438:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
    int64_t t2 = gettimestamp((uint32_t *) &buf[40]);
 800943c:	697b      	ldr	r3, [r7, #20]
 800943e:	3328      	adds	r3, #40	; 0x28
 8009440:	4618      	mov	r0, r3
 8009442:	f7ff ff11 	bl	8009268 <gettimestamp>
 8009446:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
    int64_t t3 = (int64_t) mg_millis();
 800944a:	f7f7 fbed 	bl	8000c28 <mg_millis>
 800944e:	4602      	mov	r2, r0
 8009450:	460b      	mov	r3, r1
 8009452:	e9c7 2308 	strd	r2, r3, [r7, #32]
    int64_t delta = (t3 - t0) - (t2 - t1);
 8009456:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800945a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800945e:	ebb0 0802 	subs.w	r8, r0, r2
 8009462:	eb61 0903 	sbc.w	r9, r1, r3
 8009466:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800946a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800946e:	1a84      	subs	r4, r0, r2
 8009470:	eb61 0503 	sbc.w	r5, r1, r3
 8009474:	ebb8 0304 	subs.w	r3, r8, r4
 8009478:	60bb      	str	r3, [r7, #8]
 800947a:	eb69 0305 	sbc.w	r3, r9, r5
 800947e:	60fb      	str	r3, [r7, #12]
 8009480:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8009484:	e9c7 3406 	strd	r3, r4, [r7, #24]
    MG_VERBOSE(("%lld %lld %lld %lld delta:%lld", t0, t1, t2, t3, delta));
 8009488:	4b28      	ldr	r3, [pc, #160]	; (800952c <mg_sntp_parse+0x1d8>)
 800948a:	f241 1242 	movw	r2, #4418	; 0x1142
 800948e:	4928      	ldr	r1, [pc, #160]	; (8009530 <mg_sntp_parse+0x1dc>)
 8009490:	2004      	movs	r0, #4
 8009492:	f7fd fdbf 	bl	8007014 <mg_log_prefix>
 8009496:	4603      	mov	r3, r0
 8009498:	2b00      	cmp	r3, #0
 800949a:	d014      	beq.n	80094c6 <mg_sntp_parse+0x172>
 800949c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094a0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80094a4:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80094a8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80094ac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094b0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80094b4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80094b8:	e9cd 2300 	strd	r2, r3, [sp]
 80094bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80094c0:	4820      	ldr	r0, [pc, #128]	; (8009544 <mg_sntp_parse+0x1f0>)
 80094c2:	f7fd fe01 	bl	80070c8 <mg_log>
    res = t2 + delta / 2;
 80094c6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80094ca:	2b00      	cmp	r3, #0
 80094cc:	da06      	bge.n	80094dc <mg_sntp_parse+0x188>
 80094ce:	1c51      	adds	r1, r2, #1
 80094d0:	6039      	str	r1, [r7, #0]
 80094d2:	f143 0300 	adc.w	r3, r3, #0
 80094d6:	607b      	str	r3, [r7, #4]
 80094d8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094dc:	f04f 0000 	mov.w	r0, #0
 80094e0:	f04f 0100 	mov.w	r1, #0
 80094e4:	0850      	lsrs	r0, r2, #1
 80094e6:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 80094ea:	1059      	asrs	r1, r3, #1
 80094ec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094f0:	eb12 0a00 	adds.w	sl, r2, r0
 80094f4:	eb43 0b01 	adc.w	fp, r3, r1
 80094f8:	e9c7 ab12 	strd	sl, fp, [r7, #72]	; 0x48
  } else if (version == 4 || version == 3) {
 80094fc:	e00d      	b.n	800951a <mg_sntp_parse+0x1c6>
  } else {
    MG_ERROR(("unexpected version: %d", version));
 80094fe:	4b0b      	ldr	r3, [pc, #44]	; (800952c <mg_sntp_parse+0x1d8>)
 8009500:	f241 1245 	movw	r2, #4421	; 0x1145
 8009504:	490a      	ldr	r1, [pc, #40]	; (8009530 <mg_sntp_parse+0x1dc>)
 8009506:	2001      	movs	r0, #1
 8009508:	f7fd fd84 	bl	8007014 <mg_log_prefix>
 800950c:	4603      	mov	r3, r0
 800950e:	2b00      	cmp	r3, #0
 8009510:	d003      	beq.n	800951a <mg_sntp_parse+0x1c6>
 8009512:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009514:	480c      	ldr	r0, [pc, #48]	; (8009548 <mg_sntp_parse+0x1f4>)
 8009516:	f7fd fdd7 	bl	80070c8 <mg_log>
  }
  return res;
 800951a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
}
 800951e:	4610      	mov	r0, r2
 8009520:	4619      	mov	r1, r3
 8009522:	3750      	adds	r7, #80	; 0x50
 8009524:	46bd      	mov	sp, r7
 8009526:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800952a:	bf00      	nop
 800952c:	08017490 	.word	0x08017490
 8009530:	0801544c 	.word	0x0801544c
 8009534:	080163d4 	.word	0x080163d4
 8009538:	08015568 	.word	0x08015568
 800953c:	080163e4 	.word	0x080163e4
 8009540:	080163f8 	.word	0x080163f8
 8009544:	08016414 	.word	0x08016414
 8009548:	08016434 	.word	0x08016434

0800954c <sntp_cb>:

static void sntp_cb(struct mg_connection *c, int ev, void *evd, void *fnd) {
 800954c:	b590      	push	{r4, r7, lr}
 800954e:	b087      	sub	sp, #28
 8009550:	af00      	add	r7, sp, #0
 8009552:	60f8      	str	r0, [r7, #12]
 8009554:	60b9      	str	r1, [r7, #8]
 8009556:	607a      	str	r2, [r7, #4]
 8009558:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_READ) {
 800955a:	68bb      	ldr	r3, [r7, #8]
 800955c:	2b07      	cmp	r3, #7
 800955e:	d156      	bne.n	800960e <sntp_cb+0xc2>
    int64_t milliseconds = mg_sntp_parse(c->recv.buf, c->recv.len);
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009568:	4619      	mov	r1, r3
 800956a:	4610      	mov	r0, r2
 800956c:	f7ff fef2 	bl	8009354 <mg_sntp_parse>
 8009570:	4602      	mov	r2, r0
 8009572:	460b      	mov	r3, r1
 8009574:	e9c7 2304 	strd	r2, r3, [r7, #16]
    if (milliseconds > 0) {
 8009578:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800957c:	2a01      	cmp	r2, #1
 800957e:	f173 0300 	sbcs.w	r3, r3, #0
 8009582:	db3a      	blt.n	80095fa <sntp_cb+0xae>
      MG_INFO(("%lu got time: %lld ms from epoch", c->id, milliseconds));
 8009584:	4b27      	ldr	r3, [pc, #156]	; (8009624 <sntp_cb+0xd8>)
 8009586:	f241 124e 	movw	r2, #4430	; 0x114e
 800958a:	4927      	ldr	r1, [pc, #156]	; (8009628 <sntp_cb+0xdc>)
 800958c:	2002      	movs	r0, #2
 800958e:	f7fd fd41 	bl	8007014 <mg_log_prefix>
 8009592:	4603      	mov	r3, r0
 8009594:	2b00      	cmp	r3, #0
 8009596:	d006      	beq.n	80095a6 <sntp_cb+0x5a>
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800959c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80095a0:	4822      	ldr	r0, [pc, #136]	; (800962c <sntp_cb+0xe0>)
 80095a2:	f7fd fd91 	bl	80070c8 <mg_log>
      mg_call(c, MG_EV_SNTP_TIME, (uint64_t *) &milliseconds);
 80095a6:	f107 0310 	add.w	r3, r7, #16
 80095aa:	461a      	mov	r2, r3
 80095ac:	2112      	movs	r1, #18
 80095ae:	68f8      	ldr	r0, [r7, #12]
 80095b0:	f7f8 fd50 	bl	8002054 <mg_call>
      MG_VERBOSE(("%u.%u", (unsigned) (milliseconds / 1000),
 80095b4:	4b1b      	ldr	r3, [pc, #108]	; (8009624 <sntp_cb+0xd8>)
 80095b6:	f241 1250 	movw	r2, #4432	; 0x1150
 80095ba:	491b      	ldr	r1, [pc, #108]	; (8009628 <sntp_cb+0xdc>)
 80095bc:	2004      	movs	r0, #4
 80095be:	f7fd fd29 	bl	8007014 <mg_log_prefix>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d018      	beq.n	80095fa <sntp_cb+0xae>
 80095c8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095d0:	f04f 0300 	mov.w	r3, #0
 80095d4:	f7f7 f8c0 	bl	8000758 <__aeabi_ldivmod>
 80095d8:	4602      	mov	r2, r0
 80095da:	460b      	mov	r3, r1
 80095dc:	4614      	mov	r4, r2
 80095de:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80095e2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	f7f7 f8b5 	bl	8000758 <__aeabi_ldivmod>
 80095ee:	4613      	mov	r3, r2
 80095f0:	461a      	mov	r2, r3
 80095f2:	4621      	mov	r1, r4
 80095f4:	480e      	ldr	r0, [pc, #56]	; (8009630 <sntp_cb+0xe4>)
 80095f6:	f7fd fd67 	bl	80070c8 <mg_log>
                  (unsigned) (milliseconds % 1000)));
    }
    mg_iobuf_del(&c->recv, 0, c->recv.len);  // Free receive buffer
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	f103 0038 	add.w	r0, r3, #56	; 0x38
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009604:	461a      	mov	r2, r3
 8009606:	2100      	movs	r1, #0
 8009608:	f7fc fdf0 	bl	80061ec <mg_iobuf_del>
    mg_sntp_request(c);
  } else if (ev == MG_EV_CLOSE) {
  }
  (void) fnd;
  (void) evd;
}
 800960c:	e005      	b.n	800961a <sntp_cb+0xce>
  } else if (ev == MG_EV_CONNECT) {
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b04      	cmp	r3, #4
 8009612:	d102      	bne.n	800961a <sntp_cb+0xce>
    mg_sntp_request(c);
 8009614:	68f8      	ldr	r0, [r7, #12]
 8009616:	f000 f80f 	bl	8009638 <mg_sntp_request>
}
 800961a:	bf00      	nop
 800961c:	371c      	adds	r7, #28
 800961e:	46bd      	mov	sp, r7
 8009620:	bd90      	pop	{r4, r7, pc}
 8009622:	bf00      	nop
 8009624:	080174a0 	.word	0x080174a0
 8009628:	0801544c 	.word	0x0801544c
 800962c:	0801644c 	.word	0x0801644c
 8009630:	08016470 	.word	0x08016470
 8009634:	00000000 	.word	0x00000000

08009638 <mg_sntp_request>:

void mg_sntp_request(struct mg_connection *c) {
 8009638:	b590      	push	{r4, r7, lr}
 800963a:	b095      	sub	sp, #84	; 0x54
 800963c:	af00      	add	r7, sp, #0
 800963e:	6078      	str	r0, [r7, #4]
  if (c->is_resolving) {
 8009640:	687b      	ldr	r3, [r7, #4]
 8009642:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8009646:	f003 0308 	and.w	r3, r3, #8
 800964a:	b2db      	uxtb	r3, r3
 800964c:	2b00      	cmp	r3, #0
 800964e:	d010      	beq.n	8009672 <mg_sntp_request+0x3a>
    MG_ERROR(("%lu wait until resolved", c->id));
 8009650:	4b37      	ldr	r3, [pc, #220]	; (8009730 <mg_sntp_request+0xf8>)
 8009652:	f241 125e 	movw	r2, #4446	; 0x115e
 8009656:	4937      	ldr	r1, [pc, #220]	; (8009734 <mg_sntp_request+0xfc>)
 8009658:	2001      	movs	r0, #1
 800965a:	f7fd fcdb 	bl	8007014 <mg_log_prefix>
 800965e:	4603      	mov	r3, r0
 8009660:	2b00      	cmp	r3, #0
 8009662:	d058      	beq.n	8009716 <mg_sntp_request+0xde>
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009668:	4619      	mov	r1, r3
 800966a:	4833      	ldr	r0, [pc, #204]	; (8009738 <mg_sntp_request+0x100>)
 800966c:	f7fd fd2c 	bl	80070c8 <mg_log>
    buf[0] = (0 << 6) | (4 << 3) | 3;
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
    t[1] = mg_htonl((uint32_t) frac);
    mg_send(c, buf, sizeof(buf));
  }
}
 8009670:	e051      	b.n	8009716 <mg_sntp_request+0xde>
    int64_t now = (int64_t) mg_millis();  // Use int64_t, for vc98
 8009672:	f7f7 fad9 	bl	8000c28 <mg_millis>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    uint8_t buf[48] = {0};
 800967e:	2300      	movs	r3, #0
 8009680:	60bb      	str	r3, [r7, #8]
 8009682:	f107 030c 	add.w	r3, r7, #12
 8009686:	222c      	movs	r2, #44	; 0x2c
 8009688:	2100      	movs	r1, #0
 800968a:	4618      	mov	r0, r3
 800968c:	f00b f852 	bl	8014734 <memset>
    uint32_t *t = (uint32_t *) &buf[40];
 8009690:	f107 0308 	add.w	r3, r7, #8
 8009694:	3328      	adds	r3, #40	; 0x28
 8009696:	647b      	str	r3, [r7, #68]	; 0x44
    double frac = ((double) (now % 1000)) / 1000.0 * SNTP_MAX_FRAC;
 8009698:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 800969c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096a0:	f04f 0300 	mov.w	r3, #0
 80096a4:	f7f7 f858 	bl	8000758 <__aeabi_ldivmod>
 80096a8:	4610      	mov	r0, r2
 80096aa:	4619      	mov	r1, r3
 80096ac:	f7f7 f826 	bl	80006fc <__aeabi_l2d>
 80096b0:	ec41 0b15 	vmov	d5, r0, r1
 80096b4:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8009720 <mg_sntp_request+0xe8>
 80096b8:	ee85 7b06 	vdiv.f64	d7, d5, d6
 80096bc:	ed9f 6b1a 	vldr	d6, [pc, #104]	; 8009728 <mg_sntp_request+0xf0>
 80096c0:	ee27 7b06 	vmul.f64	d7, d7, d6
 80096c4:	ed87 7b0e 	vstr	d7, [r7, #56]	; 0x38
    buf[0] = (0 << 6) | (4 << 3) | 3;
 80096c8:	2323      	movs	r3, #35	; 0x23
 80096ca:	723b      	strb	r3, [r7, #8]
    t[0] = mg_htonl((uint32_t) (now / 1000) + SNTP_TIME_OFFSET);
 80096cc:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80096d0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	f7f7 f83e 	bl	8000758 <__aeabi_ldivmod>
 80096dc:	4602      	mov	r2, r0
 80096de:	460b      	mov	r3, r1
 80096e0:	4b16      	ldr	r3, [pc, #88]	; (800973c <mg_sntp_request+0x104>)
 80096e2:	4413      	add	r3, r2
 80096e4:	4618      	mov	r0, r3
 80096e6:	f000 fed1 	bl	800a48c <mg_ntohl>
 80096ea:	4602      	mov	r2, r0
 80096ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096ee:	601a      	str	r2, [r3, #0]
    t[1] = mg_htonl((uint32_t) frac);
 80096f0:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 80096f4:	eefc 7bc7 	vcvt.u32.f64	s15, d7
 80096f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096fa:	1d1c      	adds	r4, r3, #4
 80096fc:	ee17 0a90 	vmov	r0, s15
 8009700:	f000 fec4 	bl	800a48c <mg_ntohl>
 8009704:	4603      	mov	r3, r0
 8009706:	6023      	str	r3, [r4, #0]
    mg_send(c, buf, sizeof(buf));
 8009708:	f107 0308 	add.w	r3, r7, #8
 800970c:	2230      	movs	r2, #48	; 0x30
 800970e:	4619      	mov	r1, r3
 8009710:	6878      	ldr	r0, [r7, #4]
 8009712:	f004 f983 	bl	800da1c <mg_send>
}
 8009716:	bf00      	nop
 8009718:	3754      	adds	r7, #84	; 0x54
 800971a:	46bd      	mov	sp, r7
 800971c:	bd90      	pop	{r4, r7, pc}
 800971e:	bf00      	nop
 8009720:	00000000 	.word	0x00000000
 8009724:	408f4000 	.word	0x408f4000
 8009728:	ffe00000 	.word	0xffe00000
 800972c:	41efffff 	.word	0x41efffff
 8009730:	080174a8 	.word	0x080174a8
 8009734:	0801544c 	.word	0x0801544c
 8009738:	08016478 	.word	0x08016478
 800973c:	83aa7e80 	.word	0x83aa7e80

08009740 <mg_sntp_connect>:

struct mg_connection *mg_sntp_connect(struct mg_mgr *mgr, const char *url,
                                      mg_event_handler_t fn, void *fnd) {
 8009740:	b580      	push	{r7, lr}
 8009742:	b086      	sub	sp, #24
 8009744:	af00      	add	r7, sp, #0
 8009746:	60f8      	str	r0, [r7, #12]
 8009748:	60b9      	str	r1, [r7, #8]
 800974a:	607a      	str	r2, [r7, #4]
 800974c:	603b      	str	r3, [r7, #0]
  struct mg_connection *c = NULL;
 800974e:	2300      	movs	r3, #0
 8009750:	617b      	str	r3, [r7, #20]
  if (url == NULL) url = "udp://time.google.com:123";
 8009752:	68bb      	ldr	r3, [r7, #8]
 8009754:	2b00      	cmp	r3, #0
 8009756:	d101      	bne.n	800975c <mg_sntp_connect+0x1c>
 8009758:	4b09      	ldr	r3, [pc, #36]	; (8009780 <mg_sntp_connect+0x40>)
 800975a:	60bb      	str	r3, [r7, #8]
  if ((c = mg_connect(mgr, url, fn, fnd)) != NULL) c->pfn = sntp_cb;
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	687a      	ldr	r2, [r7, #4]
 8009760:	68b9      	ldr	r1, [r7, #8]
 8009762:	68f8      	ldr	r0, [r7, #12]
 8009764:	f7ff f856 	bl	8008814 <mg_connect>
 8009768:	6178      	str	r0, [r7, #20]
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <mg_sntp_connect+0x36>
 8009770:	697b      	ldr	r3, [r7, #20]
 8009772:	4a04      	ldr	r2, [pc, #16]	; (8009784 <mg_sntp_connect+0x44>)
 8009774:	661a      	str	r2, [r3, #96]	; 0x60
  return c;
 8009776:	697b      	ldr	r3, [r7, #20]
}
 8009778:	4618      	mov	r0, r3
 800977a:	3718      	adds	r7, #24
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	08016490 	.word	0x08016490
 8009784:	0800954d 	.word	0x0800954d

08009788 <mg_http_serve_ssi>:
  mg_http_reply(c, 200, headers, "%s", data == NULL ? "" : data);
  free(data);
}
#else
void mg_http_serve_ssi(struct mg_connection *c, const char *root,
                       const char *fullpath) {
 8009788:	b580      	push	{r7, lr}
 800978a:	b084      	sub	sp, #16
 800978c:	af00      	add	r7, sp, #0
 800978e:	60f8      	str	r0, [r7, #12]
 8009790:	60b9      	str	r1, [r7, #8]
 8009792:	607a      	str	r2, [r7, #4]
  mg_http_reply(c, 501, NULL, "SSI not enabled");
 8009794:	4b05      	ldr	r3, [pc, #20]	; (80097ac <mg_http_serve_ssi+0x24>)
 8009796:	2200      	movs	r2, #0
 8009798:	f240 11f5 	movw	r1, #501	; 0x1f5
 800979c:	68f8      	ldr	r0, [r7, #12]
 800979e:	f7fb f82d 	bl	80047fc <mg_http_reply>
  (void) root, (void) fullpath;
}
 80097a2:	bf00      	nop
 80097a4:	3710      	adds	r7, #16
 80097a6:	46bd      	mov	sp, r7
 80097a8:	bd80      	pop	{r7, pc}
 80097aa:	bf00      	nop
 80097ac:	080164ac 	.word	0x080164ac

080097b0 <mg_str_s>:
#ifdef MG_ENABLE_LINES
#line 1 "src/str.c"
#endif


struct mg_str mg_str_s(const char *s) {
 80097b0:	b580      	push	{r7, lr}
 80097b2:	b084      	sub	sp, #16
 80097b4:	af00      	add	r7, sp, #0
 80097b6:	6078      	str	r0, [r7, #4]
 80097b8:	6039      	str	r1, [r7, #0]
  struct mg_str str = {s, s == NULL ? 0 : strlen(s)};
 80097ba:	683b      	ldr	r3, [r7, #0]
 80097bc:	60bb      	str	r3, [r7, #8]
 80097be:	683b      	ldr	r3, [r7, #0]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d004      	beq.n	80097ce <mg_str_s+0x1e>
 80097c4:	6838      	ldr	r0, [r7, #0]
 80097c6:	f7f6 fe03 	bl	80003d0 <strlen>
 80097ca:	4603      	mov	r3, r0
 80097cc:	e000      	b.n	80097d0 <mg_str_s+0x20>
 80097ce:	2300      	movs	r3, #0
 80097d0:	60fb      	str	r3, [r7, #12]
  return str;
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	461a      	mov	r2, r3
 80097d6:	f107 0308 	add.w	r3, r7, #8
 80097da:	e893 0003 	ldmia.w	r3, {r0, r1}
 80097de:	e882 0003 	stmia.w	r2, {r0, r1}
}
 80097e2:	6878      	ldr	r0, [r7, #4]
 80097e4:	3710      	adds	r7, #16
 80097e6:	46bd      	mov	sp, r7
 80097e8:	bd80      	pop	{r7, pc}

080097ea <mg_str_n>:

struct mg_str mg_str_n(const char *s, size_t n) {
 80097ea:	b480      	push	{r7}
 80097ec:	b087      	sub	sp, #28
 80097ee:	af00      	add	r7, sp, #0
 80097f0:	60f8      	str	r0, [r7, #12]
 80097f2:	60b9      	str	r1, [r7, #8]
 80097f4:	607a      	str	r2, [r7, #4]
  struct mg_str str = {s, n};
 80097f6:	68bb      	ldr	r3, [r7, #8]
 80097f8:	613b      	str	r3, [r7, #16]
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	617b      	str	r3, [r7, #20]
  return str;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	461a      	mov	r2, r3
 8009802:	f107 0310 	add.w	r3, r7, #16
 8009806:	e893 0003 	ldmia.w	r3, {r0, r1}
 800980a:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800980e:	68f8      	ldr	r0, [r7, #12]
 8009810:	371c      	adds	r7, #28
 8009812:	46bd      	mov	sp, r7
 8009814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009818:	4770      	bx	lr

0800981a <mg_lower>:

int mg_lower(const char *s) {
 800981a:	b480      	push	{r7}
 800981c:	b085      	sub	sp, #20
 800981e:	af00      	add	r7, sp, #0
 8009820:	6078      	str	r0, [r7, #4]
  int c = *s;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	781b      	ldrb	r3, [r3, #0]
 8009826:	60fb      	str	r3, [r7, #12]
  if (c >= 'A' && c <= 'Z') c += 'a' - 'A';
 8009828:	68fb      	ldr	r3, [r7, #12]
 800982a:	2b40      	cmp	r3, #64	; 0x40
 800982c:	dd05      	ble.n	800983a <mg_lower+0x20>
 800982e:	68fb      	ldr	r3, [r7, #12]
 8009830:	2b5a      	cmp	r3, #90	; 0x5a
 8009832:	dc02      	bgt.n	800983a <mg_lower+0x20>
 8009834:	68fb      	ldr	r3, [r7, #12]
 8009836:	3320      	adds	r3, #32
 8009838:	60fb      	str	r3, [r7, #12]
  return c;
 800983a:	68fb      	ldr	r3, [r7, #12]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3714      	adds	r7, #20
 8009840:	46bd      	mov	sp, r7
 8009842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009846:	4770      	bx	lr

08009848 <mg_ncasecmp>:

int mg_ncasecmp(const char *s1, const char *s2, size_t len) {
 8009848:	b590      	push	{r4, r7, lr}
 800984a:	b087      	sub	sp, #28
 800984c:	af00      	add	r7, sp, #0
 800984e:	60f8      	str	r0, [r7, #12]
 8009850:	60b9      	str	r1, [r7, #8]
 8009852:	607a      	str	r2, [r7, #4]
  int diff = 0;
 8009854:	2300      	movs	r3, #0
 8009856:	617b      	str	r3, [r7, #20]
  if (len > 0) do {
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d01d      	beq.n	800989a <mg_ncasecmp+0x52>
      diff = mg_lower(s1++) - mg_lower(s2++);
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	1c5a      	adds	r2, r3, #1
 8009862:	60fa      	str	r2, [r7, #12]
 8009864:	4618      	mov	r0, r3
 8009866:	f7ff ffd8 	bl	800981a <mg_lower>
 800986a:	4604      	mov	r4, r0
 800986c:	68bb      	ldr	r3, [r7, #8]
 800986e:	1c5a      	adds	r2, r3, #1
 8009870:	60ba      	str	r2, [r7, #8]
 8009872:	4618      	mov	r0, r3
 8009874:	f7ff ffd1 	bl	800981a <mg_lower>
 8009878:	4603      	mov	r3, r0
 800987a:	1ae3      	subs	r3, r4, r3
 800987c:	617b      	str	r3, [r7, #20]
    } while (diff == 0 && s1[-1] != '\0' && --len > 0);
 800987e:	697b      	ldr	r3, [r7, #20]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d10a      	bne.n	800989a <mg_ncasecmp+0x52>
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	3b01      	subs	r3, #1
 8009888:	781b      	ldrb	r3, [r3, #0]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d005      	beq.n	800989a <mg_ncasecmp+0x52>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	3b01      	subs	r3, #1
 8009892:	607b      	str	r3, [r7, #4]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	2b00      	cmp	r3, #0
 8009898:	d1e1      	bne.n	800985e <mg_ncasecmp+0x16>
  return diff;
 800989a:	697b      	ldr	r3, [r7, #20]
}
 800989c:	4618      	mov	r0, r3
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	bd90      	pop	{r4, r7, pc}

080098a4 <mg_vcmp>:

int mg_casecmp(const char *s1, const char *s2) {
  return mg_ncasecmp(s1, s2, (size_t) ~0);
}

int mg_vcmp(const struct mg_str *s1, const char *s2) {
 80098a4:	b580      	push	{r7, lr}
 80098a6:	b086      	sub	sp, #24
 80098a8:	af00      	add	r7, sp, #0
 80098aa:	6078      	str	r0, [r7, #4]
 80098ac:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(s2), n1 = s1->len;
 80098ae:	6838      	ldr	r0, [r7, #0]
 80098b0:	f7f6 fd8e 	bl	80003d0 <strlen>
 80098b4:	6178      	str	r0, [r7, #20]
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	685b      	ldr	r3, [r3, #4]
 80098ba:	613b      	str	r3, [r7, #16]
  int r = strncmp(s1->ptr, s2, (n1 < n2) ? n1 : n2);
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	6818      	ldr	r0, [r3, #0]
 80098c0:	697a      	ldr	r2, [r7, #20]
 80098c2:	693b      	ldr	r3, [r7, #16]
 80098c4:	4293      	cmp	r3, r2
 80098c6:	bf28      	it	cs
 80098c8:	4613      	movcs	r3, r2
 80098ca:	461a      	mov	r2, r3
 80098cc:	6839      	ldr	r1, [r7, #0]
 80098ce:	f00a ff64 	bl	801479a <strncmp>
 80098d2:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 80098d4:	68fb      	ldr	r3, [r7, #12]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d103      	bne.n	80098e2 <mg_vcmp+0x3e>
 80098da:	693a      	ldr	r2, [r7, #16]
 80098dc:	697b      	ldr	r3, [r7, #20]
 80098de:	1ad3      	subs	r3, r2, r3
 80098e0:	e000      	b.n	80098e4 <mg_vcmp+0x40>
  return r;
 80098e2:	68fb      	ldr	r3, [r7, #12]
}
 80098e4:	4618      	mov	r0, r3
 80098e6:	3718      	adds	r7, #24
 80098e8:	46bd      	mov	sp, r7
 80098ea:	bd80      	pop	{r7, pc}

080098ec <mg_vcasecmp>:

int mg_vcasecmp(const struct mg_str *str1, const char *str2) {
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b086      	sub	sp, #24
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  size_t n2 = strlen(str2), n1 = str1->len;
 80098f6:	6838      	ldr	r0, [r7, #0]
 80098f8:	f7f6 fd6a 	bl	80003d0 <strlen>
 80098fc:	6178      	str	r0, [r7, #20]
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	613b      	str	r3, [r7, #16]
  int r = mg_ncasecmp(str1->ptr, str2, (n1 < n2) ? n1 : n2);
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6818      	ldr	r0, [r3, #0]
 8009908:	697a      	ldr	r2, [r7, #20]
 800990a:	693b      	ldr	r3, [r7, #16]
 800990c:	4293      	cmp	r3, r2
 800990e:	bf28      	it	cs
 8009910:	4613      	movcs	r3, r2
 8009912:	461a      	mov	r2, r3
 8009914:	6839      	ldr	r1, [r7, #0]
 8009916:	f7ff ff97 	bl	8009848 <mg_ncasecmp>
 800991a:	60f8      	str	r0, [r7, #12]
  if (r == 0) return (int) (n1 - n2);
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d103      	bne.n	800992a <mg_vcasecmp+0x3e>
 8009922:	693a      	ldr	r2, [r7, #16]
 8009924:	697b      	ldr	r3, [r7, #20]
 8009926:	1ad3      	subs	r3, r2, r3
 8009928:	e000      	b.n	800992c <mg_vcasecmp+0x40>
  return r;
 800992a:	68fb      	ldr	r3, [r7, #12]
}
 800992c:	4618      	mov	r0, r3
 800992e:	3718      	adds	r7, #24
 8009930:	46bd      	mov	sp, r7
 8009932:	bd80      	pop	{r7, pc}

08009934 <mg_strcmp>:
    }
  }
  return r;
}

int mg_strcmp(const struct mg_str str1, const struct mg_str str2) {
 8009934:	b490      	push	{r4, r7}
 8009936:	b088      	sub	sp, #32
 8009938:	af00      	add	r7, sp, #0
 800993a:	f107 0408 	add.w	r4, r7, #8
 800993e:	e884 0003 	stmia.w	r4, {r0, r1}
 8009942:	4639      	mov	r1, r7
 8009944:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0;
 8009948:	2300      	movs	r3, #0
 800994a:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 800994c:	e019      	b.n	8009982 <mg_strcmp+0x4e>
    int c1 = str1.ptr[i];
 800994e:	68ba      	ldr	r2, [r7, #8]
 8009950:	69fb      	ldr	r3, [r7, #28]
 8009952:	4413      	add	r3, r2
 8009954:	781b      	ldrb	r3, [r3, #0]
 8009956:	61bb      	str	r3, [r7, #24]
    int c2 = str2.ptr[i];
 8009958:	683a      	ldr	r2, [r7, #0]
 800995a:	69fb      	ldr	r3, [r7, #28]
 800995c:	4413      	add	r3, r2
 800995e:	781b      	ldrb	r3, [r3, #0]
 8009960:	617b      	str	r3, [r7, #20]
    if (c1 < c2) return -1;
 8009962:	69ba      	ldr	r2, [r7, #24]
 8009964:	697b      	ldr	r3, [r7, #20]
 8009966:	429a      	cmp	r2, r3
 8009968:	da02      	bge.n	8009970 <mg_strcmp+0x3c>
 800996a:	f04f 33ff 	mov.w	r3, #4294967295
 800996e:	e01e      	b.n	80099ae <mg_strcmp+0x7a>
    if (c1 > c2) return 1;
 8009970:	69ba      	ldr	r2, [r7, #24]
 8009972:	697b      	ldr	r3, [r7, #20]
 8009974:	429a      	cmp	r2, r3
 8009976:	dd01      	ble.n	800997c <mg_strcmp+0x48>
 8009978:	2301      	movs	r3, #1
 800997a:	e018      	b.n	80099ae <mg_strcmp+0x7a>
    i++;
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	3301      	adds	r3, #1
 8009980:	61fb      	str	r3, [r7, #28]
  while (i < str1.len && i < str2.len) {
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	69fa      	ldr	r2, [r7, #28]
 8009986:	429a      	cmp	r2, r3
 8009988:	d203      	bcs.n	8009992 <mg_strcmp+0x5e>
 800998a:	687b      	ldr	r3, [r7, #4]
 800998c:	69fa      	ldr	r2, [r7, #28]
 800998e:	429a      	cmp	r2, r3
 8009990:	d3dd      	bcc.n	800994e <mg_strcmp+0x1a>
  }
  if (i < str1.len) return 1;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	69fa      	ldr	r2, [r7, #28]
 8009996:	429a      	cmp	r2, r3
 8009998:	d201      	bcs.n	800999e <mg_strcmp+0x6a>
 800999a:	2301      	movs	r3, #1
 800999c:	e007      	b.n	80099ae <mg_strcmp+0x7a>
  if (i < str2.len) return -1;
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	69fa      	ldr	r2, [r7, #28]
 80099a2:	429a      	cmp	r2, r3
 80099a4:	d202      	bcs.n	80099ac <mg_strcmp+0x78>
 80099a6:	f04f 33ff 	mov.w	r3, #4294967295
 80099aa:	e000      	b.n	80099ae <mg_strcmp+0x7a>
  return 0;
 80099ac:	2300      	movs	r3, #0
}
 80099ae:	4618      	mov	r0, r3
 80099b0:	3720      	adds	r7, #32
 80099b2:	46bd      	mov	sp, r7
 80099b4:	bc90      	pop	{r4, r7}
 80099b6:	4770      	bx	lr

080099b8 <mg_strstr>:

const char *mg_strstr(const struct mg_str haystack,
                      const struct mg_str needle) {
 80099b8:	b590      	push	{r4, r7, lr}
 80099ba:	b087      	sub	sp, #28
 80099bc:	af00      	add	r7, sp, #0
 80099be:	f107 0408 	add.w	r4, r7, #8
 80099c2:	e884 0003 	stmia.w	r4, {r0, r1}
 80099c6:	4639      	mov	r1, r7
 80099c8:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i;
  if (needle.len > haystack.len) return NULL;
 80099cc:	687a      	ldr	r2, [r7, #4]
 80099ce:	68fb      	ldr	r3, [r7, #12]
 80099d0:	429a      	cmp	r2, r3
 80099d2:	d901      	bls.n	80099d8 <mg_strstr+0x20>
 80099d4:	2300      	movs	r3, #0
 80099d6:	e020      	b.n	8009a1a <mg_strstr+0x62>
  if (needle.len == 0) return haystack.ptr;
 80099d8:	687b      	ldr	r3, [r7, #4]
 80099da:	2b00      	cmp	r3, #0
 80099dc:	d101      	bne.n	80099e2 <mg_strstr+0x2a>
 80099de:	68bb      	ldr	r3, [r7, #8]
 80099e0:	e01b      	b.n	8009a1a <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 80099e2:	2300      	movs	r3, #0
 80099e4:	617b      	str	r3, [r7, #20]
 80099e6:	e011      	b.n	8009a0c <mg_strstr+0x54>
    if (memcmp(haystack.ptr + i, needle.ptr, needle.len) == 0) {
 80099e8:	68ba      	ldr	r2, [r7, #8]
 80099ea:	697b      	ldr	r3, [r7, #20]
 80099ec:	4413      	add	r3, r2
 80099ee:	6839      	ldr	r1, [r7, #0]
 80099f0:	687a      	ldr	r2, [r7, #4]
 80099f2:	4618      	mov	r0, r3
 80099f4:	f00a fe74 	bl	80146e0 <memcmp>
 80099f8:	4603      	mov	r3, r0
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d103      	bne.n	8009a06 <mg_strstr+0x4e>
      return haystack.ptr + i;
 80099fe:	68ba      	ldr	r2, [r7, #8]
 8009a00:	697b      	ldr	r3, [r7, #20]
 8009a02:	4413      	add	r3, r2
 8009a04:	e009      	b.n	8009a1a <mg_strstr+0x62>
  for (i = 0; i <= haystack.len - needle.len; i++) {
 8009a06:	697b      	ldr	r3, [r7, #20]
 8009a08:	3301      	adds	r3, #1
 8009a0a:	617b      	str	r3, [r7, #20]
 8009a0c:	68fa      	ldr	r2, [r7, #12]
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	1ad3      	subs	r3, r2, r3
 8009a12:	697a      	ldr	r2, [r7, #20]
 8009a14:	429a      	cmp	r2, r3
 8009a16:	d9e7      	bls.n	80099e8 <mg_strstr+0x30>
    }
  }
  return NULL;
 8009a18:	2300      	movs	r3, #0
}
 8009a1a:	4618      	mov	r0, r3
 8009a1c:	371c      	adds	r7, #28
 8009a1e:	46bd      	mov	sp, r7
 8009a20:	bd90      	pop	{r4, r7, pc}

08009a22 <mg_match>:
  while (s.len > 0 && is_space((int) *s.ptr)) s.ptr++, s.len--;
  while (s.len > 0 && is_space((int) *(s.ptr + s.len - 1))) s.len--;
  return s;
}

bool mg_match(struct mg_str s, struct mg_str p, struct mg_str *caps) {
 8009a22:	b490      	push	{r4, r7}
 8009a24:	b088      	sub	sp, #32
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	f107 0408 	add.w	r4, r7, #8
 8009a2c:	e884 0003 	stmia.w	r4, {r0, r1}
 8009a30:	4639      	mov	r1, r7
 8009a32:	e881 000c 	stmia.w	r1, {r2, r3}
  size_t i = 0, j = 0, ni = 0, nj = 0;
 8009a36:	2300      	movs	r3, #0
 8009a38:	61fb      	str	r3, [r7, #28]
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61bb      	str	r3, [r7, #24]
 8009a3e:	2300      	movs	r3, #0
 8009a40:	617b      	str	r3, [r7, #20]
 8009a42:	2300      	movs	r3, #0
 8009a44:	613b      	str	r3, [r7, #16]
  if (caps) caps->ptr = NULL, caps->len = 0;
 8009a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	f000 80ad 	beq.w	8009ba8 <mg_match+0x186>
 8009a4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a50:	2200      	movs	r2, #0
 8009a52:	601a      	str	r2, [r3, #0]
 8009a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a56:	2200      	movs	r2, #0
 8009a58:	605a      	str	r2, [r3, #4]
  while (i < p.len || j < s.len) {
 8009a5a:	e0a5      	b.n	8009ba8 <mg_match+0x186>
    if (i < p.len && j < s.len && (p.ptr[i] == '?' || s.ptr[j] == p.ptr[i])) {
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	69fa      	ldr	r2, [r7, #28]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d24f      	bcs.n	8009b04 <mg_match+0xe2>
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	69ba      	ldr	r2, [r7, #24]
 8009a68:	429a      	cmp	r2, r3
 8009a6a:	d24b      	bcs.n	8009b04 <mg_match+0xe2>
 8009a6c:	683a      	ldr	r2, [r7, #0]
 8009a6e:	69fb      	ldr	r3, [r7, #28]
 8009a70:	4413      	add	r3, r2
 8009a72:	781b      	ldrb	r3, [r3, #0]
 8009a74:	2b3f      	cmp	r3, #63	; 0x3f
 8009a76:	d009      	beq.n	8009a8c <mg_match+0x6a>
 8009a78:	68ba      	ldr	r2, [r7, #8]
 8009a7a:	69bb      	ldr	r3, [r7, #24]
 8009a7c:	4413      	add	r3, r2
 8009a7e:	781a      	ldrb	r2, [r3, #0]
 8009a80:	6839      	ldr	r1, [r7, #0]
 8009a82:	69fb      	ldr	r3, [r7, #28]
 8009a84:	440b      	add	r3, r1
 8009a86:	781b      	ldrb	r3, [r3, #0]
 8009a88:	429a      	cmp	r2, r3
 8009a8a:	d13b      	bne.n	8009b04 <mg_match+0xe2>
      if (caps == NULL) {
 8009a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	d031      	beq.n	8009af6 <mg_match+0xd4>
      } else if (p.ptr[i] == '?') {
 8009a92:	683a      	ldr	r2, [r7, #0]
 8009a94:	69fb      	ldr	r3, [r7, #28]
 8009a96:	4413      	add	r3, r2
 8009a98:	781b      	ldrb	r3, [r3, #0]
 8009a9a:	2b3f      	cmp	r3, #63	; 0x3f
 8009a9c:	d111      	bne.n	8009ac2 <mg_match+0xa0>
        caps->ptr = &s.ptr[j], caps->len = 1;     // Finalize `?` cap
 8009a9e:	68ba      	ldr	r2, [r7, #8]
 8009aa0:	69bb      	ldr	r3, [r7, #24]
 8009aa2:	441a      	add	r2, r3
 8009aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aa6:	601a      	str	r2, [r3, #0]
 8009aa8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aaa:	2201      	movs	r2, #1
 8009aac:	605a      	str	r2, [r3, #4]
        caps++, caps->ptr = NULL, caps->len = 0;  // Init next cap
 8009aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab0:	3308      	adds	r3, #8
 8009ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ab6:	2200      	movs	r2, #0
 8009ab8:	601a      	str	r2, [r3, #0]
 8009aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009abc:	2200      	movs	r2, #0
 8009abe:	605a      	str	r2, [r3, #4]
 8009ac0:	e019      	b.n	8009af6 <mg_match+0xd4>
      } else if (caps->ptr != NULL && caps->len == 0) {
 8009ac2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d015      	beq.n	8009af6 <mg_match+0xd4>
 8009aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	2b00      	cmp	r3, #0
 8009ad0:	d111      	bne.n	8009af6 <mg_match+0xd4>
        caps->len = (size_t) (&s.ptr[j] - caps->ptr);  // Finalize current cap
 8009ad2:	68ba      	ldr	r2, [r7, #8]
 8009ad4:	69bb      	ldr	r3, [r7, #24]
 8009ad6:	441a      	add	r2, r3
 8009ad8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	1ad3      	subs	r3, r2, r3
 8009ade:	461a      	mov	r2, r3
 8009ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae2:	605a      	str	r2, [r3, #4]
        caps++, caps->len = 0, caps->ptr = NULL;       // Init next cap
 8009ae4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae6:	3308      	adds	r3, #8
 8009ae8:	62bb      	str	r3, [r7, #40]	; 0x28
 8009aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009aec:	2200      	movs	r2, #0
 8009aee:	605a      	str	r2, [r3, #4]
 8009af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009af2:	2200      	movs	r2, #0
 8009af4:	601a      	str	r2, [r3, #0]
      }
      i++, j++;
 8009af6:	69fb      	ldr	r3, [r7, #28]
 8009af8:	3301      	adds	r3, #1
 8009afa:	61fb      	str	r3, [r7, #28]
 8009afc:	69bb      	ldr	r3, [r7, #24]
 8009afe:	3301      	adds	r3, #1
 8009b00:	61bb      	str	r3, [r7, #24]
 8009b02:	e051      	b.n	8009ba8 <mg_match+0x186>
    } else if (i < p.len && (p.ptr[i] == '*' || p.ptr[i] == '#')) {
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	69fa      	ldr	r2, [r7, #28]
 8009b08:	429a      	cmp	r2, r3
 8009b0a:	d222      	bcs.n	8009b52 <mg_match+0x130>
 8009b0c:	683a      	ldr	r2, [r7, #0]
 8009b0e:	69fb      	ldr	r3, [r7, #28]
 8009b10:	4413      	add	r3, r2
 8009b12:	781b      	ldrb	r3, [r3, #0]
 8009b14:	2b2a      	cmp	r3, #42	; 0x2a
 8009b16:	d005      	beq.n	8009b24 <mg_match+0x102>
 8009b18:	683a      	ldr	r2, [r7, #0]
 8009b1a:	69fb      	ldr	r3, [r7, #28]
 8009b1c:	4413      	add	r3, r2
 8009b1e:	781b      	ldrb	r3, [r3, #0]
 8009b20:	2b23      	cmp	r3, #35	; 0x23
 8009b22:	d116      	bne.n	8009b52 <mg_match+0x130>
      if (caps && !caps->ptr) caps->len = 0, caps->ptr = &s.ptr[j];  // Init cap
 8009b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d00b      	beq.n	8009b42 <mg_match+0x120>
 8009b2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b2c:	681b      	ldr	r3, [r3, #0]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d107      	bne.n	8009b42 <mg_match+0x120>
 8009b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b34:	2200      	movs	r2, #0
 8009b36:	605a      	str	r2, [r3, #4]
 8009b38:	68ba      	ldr	r2, [r7, #8]
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	441a      	add	r2, r3
 8009b3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b40:	601a      	str	r2, [r3, #0]
      ni = i++, nj = j + 1;
 8009b42:	69fb      	ldr	r3, [r7, #28]
 8009b44:	1c5a      	adds	r2, r3, #1
 8009b46:	61fa      	str	r2, [r7, #28]
 8009b48:	617b      	str	r3, [r7, #20]
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	3301      	adds	r3, #1
 8009b4e:	613b      	str	r3, [r7, #16]
 8009b50:	e02a      	b.n	8009ba8 <mg_match+0x186>
    } else if (nj > 0 && nj <= s.len && (p.ptr[ni] == '#' || s.ptr[j] != '/')) {
 8009b52:	693b      	ldr	r3, [r7, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d025      	beq.n	8009ba4 <mg_match+0x182>
 8009b58:	68fb      	ldr	r3, [r7, #12]
 8009b5a:	693a      	ldr	r2, [r7, #16]
 8009b5c:	429a      	cmp	r2, r3
 8009b5e:	d821      	bhi.n	8009ba4 <mg_match+0x182>
 8009b60:	683a      	ldr	r2, [r7, #0]
 8009b62:	697b      	ldr	r3, [r7, #20]
 8009b64:	4413      	add	r3, r2
 8009b66:	781b      	ldrb	r3, [r3, #0]
 8009b68:	2b23      	cmp	r3, #35	; 0x23
 8009b6a:	d005      	beq.n	8009b78 <mg_match+0x156>
 8009b6c:	68ba      	ldr	r2, [r7, #8]
 8009b6e:	69bb      	ldr	r3, [r7, #24]
 8009b70:	4413      	add	r3, r2
 8009b72:	781b      	ldrb	r3, [r3, #0]
 8009b74:	2b2f      	cmp	r3, #47	; 0x2f
 8009b76:	d015      	beq.n	8009ba4 <mg_match+0x182>
      i = ni, j = nj;
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	61fb      	str	r3, [r7, #28]
 8009b7c:	693b      	ldr	r3, [r7, #16]
 8009b7e:	61bb      	str	r3, [r7, #24]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8009b80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d010      	beq.n	8009ba8 <mg_match+0x186>
 8009b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b88:	681b      	ldr	r3, [r3, #0]
 8009b8a:	2b00      	cmp	r3, #0
 8009b8c:	d10c      	bne.n	8009ba8 <mg_match+0x186>
 8009b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b90:	685b      	ldr	r3, [r3, #4]
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d108      	bne.n	8009ba8 <mg_match+0x186>
        caps--, caps->len = 0;  // Restart previous cap
 8009b96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b98:	3b08      	subs	r3, #8
 8009b9a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b9e:	2200      	movs	r2, #0
 8009ba0:	605a      	str	r2, [r3, #4]
      if (caps && caps->ptr == NULL && caps->len == 0) {
 8009ba2:	e001      	b.n	8009ba8 <mg_match+0x186>
      }
    } else {
      return false;
 8009ba4:	2300      	movs	r3, #0
 8009ba6:	e01e      	b.n	8009be6 <mg_match+0x1c4>
  while (i < p.len || j < s.len) {
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	69fa      	ldr	r2, [r7, #28]
 8009bac:	429a      	cmp	r2, r3
 8009bae:	f4ff af55 	bcc.w	8009a5c <mg_match+0x3a>
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	69ba      	ldr	r2, [r7, #24]
 8009bb6:	429a      	cmp	r2, r3
 8009bb8:	f4ff af50 	bcc.w	8009a5c <mg_match+0x3a>
    }
  }
  if (caps && caps->ptr && caps->len == 0) {
 8009bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d010      	beq.n	8009be4 <mg_match+0x1c2>
 8009bc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d00c      	beq.n	8009be4 <mg_match+0x1c2>
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	685b      	ldr	r3, [r3, #4]
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	d108      	bne.n	8009be4 <mg_match+0x1c2>
    caps->len = (size_t) (&s.ptr[j] - caps->ptr);
 8009bd2:	68ba      	ldr	r2, [r7, #8]
 8009bd4:	69bb      	ldr	r3, [r7, #24]
 8009bd6:	441a      	add	r2, r3
 8009bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	1ad3      	subs	r3, r2, r3
 8009bde:	461a      	mov	r2, r3
 8009be0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be2:	605a      	str	r2, [r3, #4]
  }
  return true;
 8009be4:	2301      	movs	r3, #1
}
 8009be6:	4618      	mov	r0, r3
 8009be8:	3720      	adds	r7, #32
 8009bea:	46bd      	mov	sp, r7
 8009bec:	bc90      	pop	{r4, r7}
 8009bee:	4770      	bx	lr

08009bf0 <mg_globmatch>:

bool mg_globmatch(const char *s1, size_t n1, const char *s2, size_t n2) {
 8009bf0:	b580      	push	{r7, lr}
 8009bf2:	b08a      	sub	sp, #40	; 0x28
 8009bf4:	af02      	add	r7, sp, #8
 8009bf6:	60f8      	str	r0, [r7, #12]
 8009bf8:	60b9      	str	r1, [r7, #8]
 8009bfa:	607a      	str	r2, [r7, #4]
 8009bfc:	603b      	str	r3, [r7, #0]
  return mg_match(mg_str_n(s2, n2), mg_str_n(s1, n1), NULL);
 8009bfe:	f107 0310 	add.w	r3, r7, #16
 8009c02:	683a      	ldr	r2, [r7, #0]
 8009c04:	6879      	ldr	r1, [r7, #4]
 8009c06:	4618      	mov	r0, r3
 8009c08:	f7ff fdef 	bl	80097ea <mg_str_n>
 8009c0c:	f107 0318 	add.w	r3, r7, #24
 8009c10:	68ba      	ldr	r2, [r7, #8]
 8009c12:	68f9      	ldr	r1, [r7, #12]
 8009c14:	4618      	mov	r0, r3
 8009c16:	f7ff fde8 	bl	80097ea <mg_str_n>
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	9300      	str	r3, [sp, #0]
 8009c1e:	f107 0318 	add.w	r3, r7, #24
 8009c22:	cb0c      	ldmia	r3, {r2, r3}
 8009c24:	f107 0110 	add.w	r1, r7, #16
 8009c28:	c903      	ldmia	r1, {r0, r1}
 8009c2a:	f7ff fefa 	bl	8009a22 <mg_match>
 8009c2e:	4603      	mov	r3, r0
}
 8009c30:	4618      	mov	r0, r3
 8009c32:	3720      	adds	r7, #32
 8009c34:	46bd      	mov	sp, r7
 8009c36:	bd80      	pop	{r7, pc}

08009c38 <mg_nce>:

static size_t mg_nce(const char *s, size_t n, size_t ofs, size_t *koff,
                     size_t *klen, size_t *voff, size_t *vlen, char delim) {
 8009c38:	b480      	push	{r7}
 8009c3a:	b087      	sub	sp, #28
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	60f8      	str	r0, [r7, #12]
 8009c40:	60b9      	str	r1, [r7, #8]
 8009c42:	607a      	str	r2, [r7, #4]
 8009c44:	603b      	str	r3, [r7, #0]
  size_t kvlen, kl;
  for (kvlen = 0; ofs + kvlen < n && s[ofs + kvlen] != delim;) kvlen++;
 8009c46:	2300      	movs	r3, #0
 8009c48:	617b      	str	r3, [r7, #20]
 8009c4a:	e002      	b.n	8009c52 <mg_nce+0x1a>
 8009c4c:	697b      	ldr	r3, [r7, #20]
 8009c4e:	3301      	adds	r3, #1
 8009c50:	617b      	str	r3, [r7, #20]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	697b      	ldr	r3, [r7, #20]
 8009c56:	4413      	add	r3, r2
 8009c58:	68ba      	ldr	r2, [r7, #8]
 8009c5a:	429a      	cmp	r2, r3
 8009c5c:	d909      	bls.n	8009c72 <mg_nce+0x3a>
 8009c5e:	687a      	ldr	r2, [r7, #4]
 8009c60:	697b      	ldr	r3, [r7, #20]
 8009c62:	4413      	add	r3, r2
 8009c64:	68fa      	ldr	r2, [r7, #12]
 8009c66:	4413      	add	r3, r2
 8009c68:	781b      	ldrb	r3, [r3, #0]
 8009c6a:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8009c6e:	429a      	cmp	r2, r3
 8009c70:	d1ec      	bne.n	8009c4c <mg_nce+0x14>
  for (kl = 0; kl < kvlen && s[ofs + kl] != '=';) kl++;
 8009c72:	2300      	movs	r3, #0
 8009c74:	613b      	str	r3, [r7, #16]
 8009c76:	e002      	b.n	8009c7e <mg_nce+0x46>
 8009c78:	693b      	ldr	r3, [r7, #16]
 8009c7a:	3301      	adds	r3, #1
 8009c7c:	613b      	str	r3, [r7, #16]
 8009c7e:	693a      	ldr	r2, [r7, #16]
 8009c80:	697b      	ldr	r3, [r7, #20]
 8009c82:	429a      	cmp	r2, r3
 8009c84:	d207      	bcs.n	8009c96 <mg_nce+0x5e>
 8009c86:	687a      	ldr	r2, [r7, #4]
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	4413      	add	r3, r2
 8009c8c:	68fa      	ldr	r2, [r7, #12]
 8009c8e:	4413      	add	r3, r2
 8009c90:	781b      	ldrb	r3, [r3, #0]
 8009c92:	2b3d      	cmp	r3, #61	; 0x3d
 8009c94:	d1f0      	bne.n	8009c78 <mg_nce+0x40>
  if (koff != NULL) *koff = ofs;
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d002      	beq.n	8009ca2 <mg_nce+0x6a>
 8009c9c:	683b      	ldr	r3, [r7, #0]
 8009c9e:	687a      	ldr	r2, [r7, #4]
 8009ca0:	601a      	str	r2, [r3, #0]
  if (klen != NULL) *klen = kl;
 8009ca2:	6a3b      	ldr	r3, [r7, #32]
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d002      	beq.n	8009cae <mg_nce+0x76>
 8009ca8:	6a3b      	ldr	r3, [r7, #32]
 8009caa:	693a      	ldr	r2, [r7, #16]
 8009cac:	601a      	str	r2, [r3, #0]
  if (voff != NULL) *voff = kl < kvlen ? ofs + kl + 1 : 0;
 8009cae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009cb0:	2b00      	cmp	r3, #0
 8009cb2:	d00b      	beq.n	8009ccc <mg_nce+0x94>
 8009cb4:	693a      	ldr	r2, [r7, #16]
 8009cb6:	697b      	ldr	r3, [r7, #20]
 8009cb8:	429a      	cmp	r2, r3
 8009cba:	d204      	bcs.n	8009cc6 <mg_nce+0x8e>
 8009cbc:	687a      	ldr	r2, [r7, #4]
 8009cbe:	693b      	ldr	r3, [r7, #16]
 8009cc0:	4413      	add	r3, r2
 8009cc2:	3301      	adds	r3, #1
 8009cc4:	e000      	b.n	8009cc8 <mg_nce+0x90>
 8009cc6:	2300      	movs	r3, #0
 8009cc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009cca:	6013      	str	r3, [r2, #0]
  if (vlen != NULL) *vlen = kl < kvlen ? kvlen - kl - 1 : 0;
 8009ccc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009cce:	2b00      	cmp	r3, #0
 8009cd0:	d00b      	beq.n	8009cea <mg_nce+0xb2>
 8009cd2:	693a      	ldr	r2, [r7, #16]
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	429a      	cmp	r2, r3
 8009cd8:	d204      	bcs.n	8009ce4 <mg_nce+0xac>
 8009cda:	697a      	ldr	r2, [r7, #20]
 8009cdc:	693b      	ldr	r3, [r7, #16]
 8009cde:	1ad3      	subs	r3, r2, r3
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	e000      	b.n	8009ce6 <mg_nce+0xae>
 8009ce4:	2300      	movs	r3, #0
 8009ce6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8009ce8:	6013      	str	r3, [r2, #0]
  ofs += kvlen + 1;
 8009cea:	697a      	ldr	r2, [r7, #20]
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	4413      	add	r3, r2
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	607b      	str	r3, [r7, #4]
  return ofs > n ? n : ofs;
 8009cf4:	687a      	ldr	r2, [r7, #4]
 8009cf6:	68bb      	ldr	r3, [r7, #8]
 8009cf8:	4293      	cmp	r3, r2
 8009cfa:	bf28      	it	cs
 8009cfc:	4613      	movcs	r3, r2
}
 8009cfe:	4618      	mov	r0, r3
 8009d00:	371c      	adds	r7, #28
 8009d02:	46bd      	mov	sp, r7
 8009d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d08:	4770      	bx	lr

08009d0a <mg_split>:

bool mg_split(struct mg_str *s, struct mg_str *k, struct mg_str *v, char sep) {
 8009d0a:	b590      	push	{r4, r7, lr}
 8009d0c:	b091      	sub	sp, #68	; 0x44
 8009d0e:	af04      	add	r7, sp, #16
 8009d10:	6178      	str	r0, [r7, #20]
 8009d12:	6139      	str	r1, [r7, #16]
 8009d14:	60fa      	str	r2, [r7, #12]
 8009d16:	72fb      	strb	r3, [r7, #11]
  size_t koff = 0, klen = 0, voff = 0, vlen = 0, off = 0;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	62bb      	str	r3, [r7, #40]	; 0x28
 8009d1c:	2300      	movs	r3, #0
 8009d1e:	627b      	str	r3, [r7, #36]	; 0x24
 8009d20:	2300      	movs	r3, #0
 8009d22:	623b      	str	r3, [r7, #32]
 8009d24:	2300      	movs	r3, #0
 8009d26:	61fb      	str	r3, [r7, #28]
 8009d28:	2300      	movs	r3, #0
 8009d2a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (s->ptr == NULL || s->len == 0) return 0;
 8009d2c:	697b      	ldr	r3, [r7, #20]
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d003      	beq.n	8009d3c <mg_split+0x32>
 8009d34:	697b      	ldr	r3, [r7, #20]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d101      	bne.n	8009d40 <mg_split+0x36>
 8009d3c:	2300      	movs	r3, #0
 8009d3e:	e054      	b.n	8009dea <mg_split+0xe0>
  off = mg_nce(s->ptr, s->len, 0, &koff, &klen, &voff, &vlen, sep);
 8009d40:	697b      	ldr	r3, [r7, #20]
 8009d42:	6818      	ldr	r0, [r3, #0]
 8009d44:	697b      	ldr	r3, [r7, #20]
 8009d46:	6859      	ldr	r1, [r3, #4]
 8009d48:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8009d4c:	7afb      	ldrb	r3, [r7, #11]
 8009d4e:	9303      	str	r3, [sp, #12]
 8009d50:	f107 031c 	add.w	r3, r7, #28
 8009d54:	9302      	str	r3, [sp, #8]
 8009d56:	f107 0320 	add.w	r3, r7, #32
 8009d5a:	9301      	str	r3, [sp, #4]
 8009d5c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	4613      	mov	r3, r2
 8009d64:	2200      	movs	r2, #0
 8009d66:	f7ff ff67 	bl	8009c38 <mg_nce>
 8009d6a:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (k != NULL) *k = mg_str_n(s->ptr + koff, klen);
 8009d6c:	693b      	ldr	r3, [r7, #16]
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d00f      	beq.n	8009d92 <mg_split+0x88>
 8009d72:	697b      	ldr	r3, [r7, #20]
 8009d74:	681a      	ldr	r2, [r3, #0]
 8009d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d78:	18d1      	adds	r1, r2, r3
 8009d7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009d7c:	693c      	ldr	r4, [r7, #16]
 8009d7e:	463b      	mov	r3, r7
 8009d80:	4618      	mov	r0, r3
 8009d82:	f7ff fd32 	bl	80097ea <mg_str_n>
 8009d86:	4622      	mov	r2, r4
 8009d88:	463b      	mov	r3, r7
 8009d8a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009d8e:	e882 0003 	stmia.w	r2, {r0, r1}
  if (v != NULL) *v = mg_str_n(s->ptr + voff, vlen);
 8009d92:	68fb      	ldr	r3, [r7, #12]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d00f      	beq.n	8009db8 <mg_split+0xae>
 8009d98:	697b      	ldr	r3, [r7, #20]
 8009d9a:	681a      	ldr	r2, [r3, #0]
 8009d9c:	6a3b      	ldr	r3, [r7, #32]
 8009d9e:	18d1      	adds	r1, r2, r3
 8009da0:	69fa      	ldr	r2, [r7, #28]
 8009da2:	68fc      	ldr	r4, [r7, #12]
 8009da4:	463b      	mov	r3, r7
 8009da6:	4618      	mov	r0, r3
 8009da8:	f7ff fd1f 	bl	80097ea <mg_str_n>
 8009dac:	4622      	mov	r2, r4
 8009dae:	463b      	mov	r3, r7
 8009db0:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009db4:	e882 0003 	stmia.w	r2, {r0, r1}
  *s = mg_str_n(s->ptr + off, s->len - off);
 8009db8:	697b      	ldr	r3, [r7, #20]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dbe:	18d1      	adds	r1, r2, r3
 8009dc0:	697b      	ldr	r3, [r7, #20]
 8009dc2:	685a      	ldr	r2, [r3, #4]
 8009dc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dc6:	1ad2      	subs	r2, r2, r3
 8009dc8:	697c      	ldr	r4, [r7, #20]
 8009dca:	463b      	mov	r3, r7
 8009dcc:	4618      	mov	r0, r3
 8009dce:	f7ff fd0c 	bl	80097ea <mg_str_n>
 8009dd2:	4622      	mov	r2, r4
 8009dd4:	463b      	mov	r3, r7
 8009dd6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8009dda:	e882 0003 	stmia.w	r2, {r0, r1}
  return off > 0;
 8009dde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009de0:	2b00      	cmp	r3, #0
 8009de2:	bf14      	ite	ne
 8009de4:	2301      	movne	r3, #1
 8009de6:	2300      	moveq	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
}
 8009dea:	4618      	mov	r0, r3
 8009dec:	3734      	adds	r7, #52	; 0x34
 8009dee:	46bd      	mov	sp, r7
 8009df0:	bd90      	pop	{r4, r7, pc}

08009df2 <mg_commalist>:

bool mg_commalist(struct mg_str *s, struct mg_str *k, struct mg_str *v) {
 8009df2:	b580      	push	{r7, lr}
 8009df4:	b084      	sub	sp, #16
 8009df6:	af00      	add	r7, sp, #0
 8009df8:	60f8      	str	r0, [r7, #12]
 8009dfa:	60b9      	str	r1, [r7, #8]
 8009dfc:	607a      	str	r2, [r7, #4]
  return mg_split(s, k, v, ',');
 8009dfe:	232c      	movs	r3, #44	; 0x2c
 8009e00:	687a      	ldr	r2, [r7, #4]
 8009e02:	68b9      	ldr	r1, [r7, #8]
 8009e04:	68f8      	ldr	r0, [r7, #12]
 8009e06:	f7ff ff80 	bl	8009d0a <mg_split>
 8009e0a:	4603      	mov	r3, r0
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3710      	adds	r7, #16
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <mg_hex>:

char *mg_hex(const void *buf, size_t len, char *to) {
 8009e14:	b480      	push	{r7}
 8009e16:	b089      	sub	sp, #36	; 0x24
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
  const unsigned char *p = (const unsigned char *) buf;
 8009e20:	68fb      	ldr	r3, [r7, #12]
 8009e22:	61fb      	str	r3, [r7, #28]
  const char *hex = "0123456789abcdef";
 8009e24:	4b19      	ldr	r3, [pc, #100]	; (8009e8c <mg_hex+0x78>)
 8009e26:	617b      	str	r3, [r7, #20]
  size_t i = 0;
 8009e28:	2300      	movs	r3, #0
 8009e2a:	61bb      	str	r3, [r7, #24]
  for (; len--; p++) {
 8009e2c:	e01d      	b.n	8009e6a <mg_hex+0x56>
    to[i++] = hex[p[0] >> 4];
 8009e2e:	69fb      	ldr	r3, [r7, #28]
 8009e30:	781b      	ldrb	r3, [r3, #0]
 8009e32:	091b      	lsrs	r3, r3, #4
 8009e34:	b2db      	uxtb	r3, r3
 8009e36:	461a      	mov	r2, r3
 8009e38:	697b      	ldr	r3, [r7, #20]
 8009e3a:	441a      	add	r2, r3
 8009e3c:	69bb      	ldr	r3, [r7, #24]
 8009e3e:	1c59      	adds	r1, r3, #1
 8009e40:	61b9      	str	r1, [r7, #24]
 8009e42:	6879      	ldr	r1, [r7, #4]
 8009e44:	440b      	add	r3, r1
 8009e46:	7812      	ldrb	r2, [r2, #0]
 8009e48:	701a      	strb	r2, [r3, #0]
    to[i++] = hex[p[0] & 0x0f];
 8009e4a:	69fb      	ldr	r3, [r7, #28]
 8009e4c:	781b      	ldrb	r3, [r3, #0]
 8009e4e:	f003 030f 	and.w	r3, r3, #15
 8009e52:	697a      	ldr	r2, [r7, #20]
 8009e54:	441a      	add	r2, r3
 8009e56:	69bb      	ldr	r3, [r7, #24]
 8009e58:	1c59      	adds	r1, r3, #1
 8009e5a:	61b9      	str	r1, [r7, #24]
 8009e5c:	6879      	ldr	r1, [r7, #4]
 8009e5e:	440b      	add	r3, r1
 8009e60:	7812      	ldrb	r2, [r2, #0]
 8009e62:	701a      	strb	r2, [r3, #0]
  for (; len--; p++) {
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	3301      	adds	r3, #1
 8009e68:	61fb      	str	r3, [r7, #28]
 8009e6a:	68bb      	ldr	r3, [r7, #8]
 8009e6c:	1e5a      	subs	r2, r3, #1
 8009e6e:	60ba      	str	r2, [r7, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d1dc      	bne.n	8009e2e <mg_hex+0x1a>
  }
  to[i] = '\0';
 8009e74:	687a      	ldr	r2, [r7, #4]
 8009e76:	69bb      	ldr	r3, [r7, #24]
 8009e78:	4413      	add	r3, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	701a      	strb	r2, [r3, #0]
  return to;
 8009e7e:	687b      	ldr	r3, [r7, #4]
}
 8009e80:	4618      	mov	r0, r3
 8009e82:	3724      	adds	r7, #36	; 0x24
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr
 8009e8c:	08015584 	.word	0x08015584

08009e90 <mg_unhex_nimble>:

static unsigned char mg_unhex_nimble(unsigned char c) {
 8009e90:	b480      	push	{r7}
 8009e92:	b083      	sub	sp, #12
 8009e94:	af00      	add	r7, sp, #0
 8009e96:	4603      	mov	r3, r0
 8009e98:	71fb      	strb	r3, [r7, #7]
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8009e9a:	79fb      	ldrb	r3, [r7, #7]
 8009e9c:	2b2f      	cmp	r3, #47	; 0x2f
 8009e9e:	d906      	bls.n	8009eae <mg_unhex_nimble+0x1e>
  return (c >= '0' && c <= '9')   ? (unsigned char) (c - '0')
 8009ea0:	79fb      	ldrb	r3, [r7, #7]
 8009ea2:	2b39      	cmp	r3, #57	; 0x39
 8009ea4:	d803      	bhi.n	8009eae <mg_unhex_nimble+0x1e>
         : (c >= 'A' && c <= 'F') ? (unsigned char) (c - '7')
 8009ea6:	79fb      	ldrb	r3, [r7, #7]
 8009ea8:	3b30      	subs	r3, #48	; 0x30
 8009eaa:	b2db      	uxtb	r3, r3
 8009eac:	e00c      	b.n	8009ec8 <mg_unhex_nimble+0x38>
 8009eae:	79fb      	ldrb	r3, [r7, #7]
 8009eb0:	2b40      	cmp	r3, #64	; 0x40
 8009eb2:	d906      	bls.n	8009ec2 <mg_unhex_nimble+0x32>
 8009eb4:	79fb      	ldrb	r3, [r7, #7]
 8009eb6:	2b46      	cmp	r3, #70	; 0x46
 8009eb8:	d803      	bhi.n	8009ec2 <mg_unhex_nimble+0x32>
 8009eba:	79fb      	ldrb	r3, [r7, #7]
 8009ebc:	3b37      	subs	r3, #55	; 0x37
 8009ebe:	b2db      	uxtb	r3, r3
 8009ec0:	e002      	b.n	8009ec8 <mg_unhex_nimble+0x38>
 8009ec2:	79fb      	ldrb	r3, [r7, #7]
 8009ec4:	3b57      	subs	r3, #87	; 0x57
 8009ec6:	b2db      	uxtb	r3, r3
                                  : (unsigned char) (c - 'W');
}
 8009ec8:	4618      	mov	r0, r3
 8009eca:	370c      	adds	r7, #12
 8009ecc:	46bd      	mov	sp, r7
 8009ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed2:	4770      	bx	lr

08009ed4 <mg_unhexn>:

unsigned long mg_unhexn(const char *s, size_t len) {
 8009ed4:	b580      	push	{r7, lr}
 8009ed6:	b084      	sub	sp, #16
 8009ed8:	af00      	add	r7, sp, #0
 8009eda:	6078      	str	r0, [r7, #4]
 8009edc:	6039      	str	r1, [r7, #0]
  unsigned long i = 0, v = 0;
 8009ede:	2300      	movs	r3, #0
 8009ee0:	60fb      	str	r3, [r7, #12]
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < len; i++) v <<= 4, v |= mg_unhex_nimble(((uint8_t *) s)[i]);
 8009ee6:	2300      	movs	r3, #0
 8009ee8:	60fb      	str	r3, [r7, #12]
 8009eea:	e011      	b.n	8009f10 <mg_unhexn+0x3c>
 8009eec:	68bb      	ldr	r3, [r7, #8]
 8009eee:	011b      	lsls	r3, r3, #4
 8009ef0:	60bb      	str	r3, [r7, #8]
 8009ef2:	687a      	ldr	r2, [r7, #4]
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	4413      	add	r3, r2
 8009ef8:	781b      	ldrb	r3, [r3, #0]
 8009efa:	4618      	mov	r0, r3
 8009efc:	f7ff ffc8 	bl	8009e90 <mg_unhex_nimble>
 8009f00:	4603      	mov	r3, r0
 8009f02:	461a      	mov	r2, r3
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	4313      	orrs	r3, r2
 8009f08:	60bb      	str	r3, [r7, #8]
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	3301      	adds	r3, #1
 8009f0e:	60fb      	str	r3, [r7, #12]
 8009f10:	68fa      	ldr	r2, [r7, #12]
 8009f12:	683b      	ldr	r3, [r7, #0]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d3e9      	bcc.n	8009eec <mg_unhexn+0x18>
  return v;
 8009f18:	68bb      	ldr	r3, [r7, #8]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3710      	adds	r7, #16
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}

08009f22 <mg_unhex>:

void mg_unhex(const char *buf, size_t len, unsigned char *to) {
 8009f22:	b580      	push	{r7, lr}
 8009f24:	b086      	sub	sp, #24
 8009f26:	af00      	add	r7, sp, #0
 8009f28:	60f8      	str	r0, [r7, #12]
 8009f2a:	60b9      	str	r1, [r7, #8]
 8009f2c:	607a      	str	r2, [r7, #4]
  size_t i;
  for (i = 0; i < len; i += 2) {
 8009f2e:	2300      	movs	r3, #0
 8009f30:	617b      	str	r3, [r7, #20]
 8009f32:	e010      	b.n	8009f56 <mg_unhex+0x34>
    to[i >> 1] = (unsigned char) mg_unhexn(&buf[i], 2);
 8009f34:	68fa      	ldr	r2, [r7, #12]
 8009f36:	697b      	ldr	r3, [r7, #20]
 8009f38:	4413      	add	r3, r2
 8009f3a:	2102      	movs	r1, #2
 8009f3c:	4618      	mov	r0, r3
 8009f3e:	f7ff ffc9 	bl	8009ed4 <mg_unhexn>
 8009f42:	4601      	mov	r1, r0
 8009f44:	697b      	ldr	r3, [r7, #20]
 8009f46:	085b      	lsrs	r3, r3, #1
 8009f48:	687a      	ldr	r2, [r7, #4]
 8009f4a:	4413      	add	r3, r2
 8009f4c:	b2ca      	uxtb	r2, r1
 8009f4e:	701a      	strb	r2, [r3, #0]
  for (i = 0; i < len; i += 2) {
 8009f50:	697b      	ldr	r3, [r7, #20]
 8009f52:	3302      	adds	r3, #2
 8009f54:	617b      	str	r3, [r7, #20]
 8009f56:	697a      	ldr	r2, [r7, #20]
 8009f58:	68bb      	ldr	r3, [r7, #8]
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	d3ea      	bcc.n	8009f34 <mg_unhex+0x12>
  }
}
 8009f5e:	bf00      	nop
 8009f60:	bf00      	nop
 8009f62:	3718      	adds	r7, #24
 8009f64:	46bd      	mov	sp, r7
 8009f66:	bd80      	pop	{r7, pc}

08009f68 <mg_path_is_sane>:

bool mg_path_is_sane(const char *path) {
 8009f68:	b480      	push	{r7}
 8009f6a:	b085      	sub	sp, #20
 8009f6c:	af00      	add	r7, sp, #0
 8009f6e:	6078      	str	r0, [r7, #4]
  const char *s = path;
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	60fb      	str	r3, [r7, #12]
  for (; s[0] != '\0'; s++) {
 8009f74:	e01a      	b.n	8009fac <mg_path_is_sane+0x44>
    if (s == path || s[0] == '/' || s[0] == '\\') {  // Subdir?
 8009f76:	68fa      	ldr	r2, [r7, #12]
 8009f78:	687b      	ldr	r3, [r7, #4]
 8009f7a:	429a      	cmp	r2, r3
 8009f7c:	d007      	beq.n	8009f8e <mg_path_is_sane+0x26>
 8009f7e:	68fb      	ldr	r3, [r7, #12]
 8009f80:	781b      	ldrb	r3, [r3, #0]
 8009f82:	2b2f      	cmp	r3, #47	; 0x2f
 8009f84:	d003      	beq.n	8009f8e <mg_path_is_sane+0x26>
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	781b      	ldrb	r3, [r3, #0]
 8009f8a:	2b5c      	cmp	r3, #92	; 0x5c
 8009f8c:	d10b      	bne.n	8009fa6 <mg_path_is_sane+0x3e>
      if (s[1] == '.' && s[2] == '.') return false;  // Starts with ..
 8009f8e:	68fb      	ldr	r3, [r7, #12]
 8009f90:	3301      	adds	r3, #1
 8009f92:	781b      	ldrb	r3, [r3, #0]
 8009f94:	2b2e      	cmp	r3, #46	; 0x2e
 8009f96:	d106      	bne.n	8009fa6 <mg_path_is_sane+0x3e>
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	3302      	adds	r3, #2
 8009f9c:	781b      	ldrb	r3, [r3, #0]
 8009f9e:	2b2e      	cmp	r3, #46	; 0x2e
 8009fa0:	d101      	bne.n	8009fa6 <mg_path_is_sane+0x3e>
 8009fa2:	2300      	movs	r3, #0
 8009fa4:	e007      	b.n	8009fb6 <mg_path_is_sane+0x4e>
  for (; s[0] != '\0'; s++) {
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	3301      	adds	r3, #1
 8009faa:	60fb      	str	r3, [r7, #12]
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	781b      	ldrb	r3, [r3, #0]
 8009fb0:	2b00      	cmp	r3, #0
 8009fb2:	d1e0      	bne.n	8009f76 <mg_path_is_sane+0xe>
    }
  }
  return true;
 8009fb4:	2301      	movs	r3, #1
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3714      	adds	r7, #20
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fc0:	4770      	bx	lr

08009fc2 <mg_timer_init>:


#define MG_TIMER_CALLED 4

void mg_timer_init(struct mg_timer **head, struct mg_timer *t, uint64_t ms,
                   unsigned flags, void (*fn)(void *), void *arg) {
 8009fc2:	b480      	push	{r7}
 8009fc4:	b085      	sub	sp, #20
 8009fc6:	af00      	add	r7, sp, #0
 8009fc8:	60f8      	str	r0, [r7, #12]
 8009fca:	60b9      	str	r1, [r7, #8]
 8009fcc:	e9c7 2300 	strd	r2, r3, [r7]
  t->id = 0, t->period_ms = ms, t->expire = 0;
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	601a      	str	r2, [r3, #0]
 8009fd6:	68b9      	ldr	r1, [r7, #8]
 8009fd8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009fdc:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8009fe0:	68b9      	ldr	r1, [r7, #8]
 8009fe2:	f04f 0200 	mov.w	r2, #0
 8009fe6:	f04f 0300 	mov.w	r3, #0
 8009fea:	e9c1 2304 	strd	r2, r3, [r1, #16]
  t->flags = flags, t->fn = fn, t->arg = arg, t->next = *head;
 8009fee:	68bb      	ldr	r3, [r7, #8]
 8009ff0:	69ba      	ldr	r2, [r7, #24]
 8009ff2:	619a      	str	r2, [r3, #24]
 8009ff4:	68bb      	ldr	r3, [r7, #8]
 8009ff6:	69fa      	ldr	r2, [r7, #28]
 8009ff8:	61da      	str	r2, [r3, #28]
 8009ffa:	68bb      	ldr	r3, [r7, #8]
 8009ffc:	6a3a      	ldr	r2, [r7, #32]
 8009ffe:	621a      	str	r2, [r3, #32]
 800a000:	68fb      	ldr	r3, [r7, #12]
 800a002:	681a      	ldr	r2, [r3, #0]
 800a004:	68bb      	ldr	r3, [r7, #8]
 800a006:	625a      	str	r2, [r3, #36]	; 0x24
  *head = t;
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	68ba      	ldr	r2, [r7, #8]
 800a00c:	601a      	str	r2, [r3, #0]
}
 800a00e:	bf00      	nop
 800a010:	3714      	adds	r7, #20
 800a012:	46bd      	mov	sp, r7
 800a014:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a018:	4770      	bx	lr

0800a01a <mg_timer_expired>:
  while (*head && *head != t) head = &(*head)->next;
  if (*head) *head = t->next;
}

// t: expiration time, prd: period, now: current time. Return true if expired
bool mg_timer_expired(uint64_t *t, uint64_t prd, uint64_t now) {
 800a01a:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a01e:	b086      	sub	sp, #24
 800a020:	af00      	add	r7, sp, #0
 800a022:	6178      	str	r0, [r7, #20]
 800a024:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (now + prd < *t) *t = 0;                    // Time wrapped? Reset timer
 800a028:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a02c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a030:	eb10 0a02 	adds.w	sl, r0, r2
 800a034:	eb41 0b03 	adc.w	fp, r1, r3
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a03e:	4592      	cmp	sl, r2
 800a040:	eb7b 0303 	sbcs.w	r3, fp, r3
 800a044:	d206      	bcs.n	800a054 <mg_timer_expired+0x3a>
 800a046:	6979      	ldr	r1, [r7, #20]
 800a048:	f04f 0200 	mov.w	r2, #0
 800a04c:	f04f 0300 	mov.w	r3, #0
 800a050:	e9c1 2300 	strd	r2, r3, [r1]
  if (*t == 0) *t = now + prd;                   // Firt poll? Set expiration
 800a054:	697b      	ldr	r3, [r7, #20]
 800a056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a05a:	4313      	orrs	r3, r2
 800a05c:	d10d      	bne.n	800a07a <mg_timer_expired+0x60>
 800a05e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a062:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a066:	1886      	adds	r6, r0, r2
 800a068:	603e      	str	r6, [r7, #0]
 800a06a:	eb41 0303 	adc.w	r3, r1, r3
 800a06e:	607b      	str	r3, [r7, #4]
 800a070:	697b      	ldr	r3, [r7, #20]
 800a072:	e9d7 1200 	ldrd	r1, r2, [r7]
 800a076:	e9c3 1200 	strd	r1, r2, [r3]
  if (*t > now) return false;                    // Not expired yet, return
 800a07a:	697b      	ldr	r3, [r7, #20]
 800a07c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a080:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a084:	4290      	cmp	r0, r2
 800a086:	eb71 0303 	sbcs.w	r3, r1, r3
 800a08a:	d201      	bcs.n	800a090 <mg_timer_expired+0x76>
 800a08c:	2300      	movs	r3, #0
 800a08e:	e022      	b.n	800a0d6 <mg_timer_expired+0xbc>
  *t = (now - *t) > prd ? now + prd : *t + prd;  // Next expiration time
 800a090:	697b      	ldr	r3, [r7, #20]
 800a092:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a096:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a09a:	ebb0 0802 	subs.w	r8, r0, r2
 800a09e:	eb61 0903 	sbc.w	r9, r1, r3
 800a0a2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0a6:	4542      	cmp	r2, r8
 800a0a8:	eb73 0309 	sbcs.w	r3, r3, r9
 800a0ac:	d207      	bcs.n	800a0be <mg_timer_expired+0xa4>
 800a0ae:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800a0b2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0b6:	1884      	adds	r4, r0, r2
 800a0b8:	eb41 0503 	adc.w	r5, r1, r3
 800a0bc:	e007      	b.n	800a0ce <mg_timer_expired+0xb4>
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	e9d3 0100 	ldrd	r0, r1, [r3]
 800a0c4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800a0c8:	1884      	adds	r4, r0, r2
 800a0ca:	eb41 0503 	adc.w	r5, r1, r3
 800a0ce:	697b      	ldr	r3, [r7, #20]
 800a0d0:	e9c3 4500 	strd	r4, r5, [r3]
  return true;                                   // Expired, return true
 800a0d4:	2301      	movs	r3, #1
}
 800a0d6:	4618      	mov	r0, r3
 800a0d8:	3718      	adds	r7, #24
 800a0da:	46bd      	mov	sp, r7
 800a0dc:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800a0e0:	4770      	bx	lr

0800a0e2 <mg_timer_poll>:

void mg_timer_poll(struct mg_timer **head, uint64_t now_ms) {
 800a0e2:	b590      	push	{r4, r7, lr}
 800a0e4:	b08b      	sub	sp, #44	; 0x2c
 800a0e6:	af02      	add	r7, sp, #8
 800a0e8:	60f8      	str	r0, [r7, #12]
 800a0ea:	e9c7 2300 	strd	r2, r3, [r7]
  struct mg_timer *t, *tmp;
  for (t = *head; t != NULL; t = tmp) {
 800a0ee:	68fb      	ldr	r3, [r7, #12]
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	61fb      	str	r3, [r7, #28]
 800a0f4:	e054      	b.n	800a1a0 <mg_timer_poll+0xbe>
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800a0f6:	69fb      	ldr	r3, [r7, #28]
 800a0f8:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800a0fc:	4313      	orrs	r3, r2
 800a0fe:	d10d      	bne.n	800a11c <mg_timer_poll+0x3a>
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	699b      	ldr	r3, [r3, #24]
 800a104:	f003 0302 	and.w	r3, r3, #2
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d007      	beq.n	800a11c <mg_timer_poll+0x3a>
                !(t->flags & MG_TIMER_CALLED);  // Handle MG_TIMER_NOW only once
 800a10c:	69fb      	ldr	r3, [r7, #28]
 800a10e:	699b      	ldr	r3, [r3, #24]
 800a110:	f003 0304 	and.w	r3, r3, #4
    bool once = t->expire == 0 && (t->flags & MG_TIMER_RUN_NOW) &&
 800a114:	2b00      	cmp	r3, #0
 800a116:	d101      	bne.n	800a11c <mg_timer_poll+0x3a>
 800a118:	2301      	movs	r3, #1
 800a11a:	e000      	b.n	800a11e <mg_timer_poll+0x3c>
 800a11c:	2300      	movs	r3, #0
 800a11e:	76fb      	strb	r3, [r7, #27]
 800a120:	7efb      	ldrb	r3, [r7, #27]
 800a122:	f003 0301 	and.w	r3, r3, #1
 800a126:	76fb      	strb	r3, [r7, #27]
    bool expired = mg_timer_expired(&t->expire, t->period_ms, now_ms);
 800a128:	69fb      	ldr	r3, [r7, #28]
 800a12a:	f103 0410 	add.w	r4, r3, #16
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800a134:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a138:	e9cd 2300 	strd	r2, r3, [sp]
 800a13c:	4602      	mov	r2, r0
 800a13e:	460b      	mov	r3, r1
 800a140:	4620      	mov	r0, r4
 800a142:	f7ff ff6a 	bl	800a01a <mg_timer_expired>
 800a146:	4603      	mov	r3, r0
 800a148:	76bb      	strb	r3, [r7, #26]
    tmp = t->next;
 800a14a:	69fb      	ldr	r3, [r7, #28]
 800a14c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a14e:	617b      	str	r3, [r7, #20]
    if (!once && !expired) continue;
 800a150:	7efb      	ldrb	r3, [r7, #27]
 800a152:	f083 0301 	eor.w	r3, r3, #1
 800a156:	b2db      	uxtb	r3, r3
 800a158:	2b00      	cmp	r3, #0
 800a15a:	d005      	beq.n	800a168 <mg_timer_poll+0x86>
 800a15c:	7ebb      	ldrb	r3, [r7, #26]
 800a15e:	f083 0301 	eor.w	r3, r3, #1
 800a162:	b2db      	uxtb	r3, r3
 800a164:	2b00      	cmp	r3, #0
 800a166:	d118      	bne.n	800a19a <mg_timer_poll+0xb8>
    if ((t->flags & MG_TIMER_REPEAT) || !(t->flags & MG_TIMER_CALLED)) {
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	699b      	ldr	r3, [r3, #24]
 800a16c:	f003 0301 	and.w	r3, r3, #1
 800a170:	2b00      	cmp	r3, #0
 800a172:	d105      	bne.n	800a180 <mg_timer_poll+0x9e>
 800a174:	69fb      	ldr	r3, [r7, #28]
 800a176:	699b      	ldr	r3, [r3, #24]
 800a178:	f003 0304 	and.w	r3, r3, #4
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d105      	bne.n	800a18c <mg_timer_poll+0xaa>
      t->fn(t->arg);
 800a180:	69fb      	ldr	r3, [r7, #28]
 800a182:	69db      	ldr	r3, [r3, #28]
 800a184:	69fa      	ldr	r2, [r7, #28]
 800a186:	6a12      	ldr	r2, [r2, #32]
 800a188:	4610      	mov	r0, r2
 800a18a:	4798      	blx	r3
    }
    t->flags |= MG_TIMER_CALLED;
 800a18c:	69fb      	ldr	r3, [r7, #28]
 800a18e:	699b      	ldr	r3, [r3, #24]
 800a190:	f043 0204 	orr.w	r2, r3, #4
 800a194:	69fb      	ldr	r3, [r7, #28]
 800a196:	619a      	str	r2, [r3, #24]
 800a198:	e000      	b.n	800a19c <mg_timer_poll+0xba>
    if (!once && !expired) continue;
 800a19a:	bf00      	nop
  for (t = *head; t != NULL; t = tmp) {
 800a19c:	697b      	ldr	r3, [r7, #20]
 800a19e:	61fb      	str	r3, [r7, #28]
 800a1a0:	69fb      	ldr	r3, [r7, #28]
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d1a7      	bne.n	800a0f6 <mg_timer_poll+0x14>
  }
}
 800a1a6:	bf00      	nop
 800a1a8:	bf00      	nop
 800a1aa:	3724      	adds	r7, #36	; 0x24
 800a1ac:	46bd      	mov	sp, r7
 800a1ae:	bd90      	pop	{r4, r7, pc}

0800a1b0 <mg_tls_init>:
#line 1 "src/tls_dummy.c"
#endif


#if !MG_ENABLE_MBEDTLS && !MG_ENABLE_OPENSSL && !MG_ENABLE_CUSTOM_TLS
void mg_tls_init(struct mg_connection *c, const struct mg_tls_opts *opts) {
 800a1b0:	b580      	push	{r7, lr}
 800a1b2:	b082      	sub	sp, #8
 800a1b4:	af00      	add	r7, sp, #0
 800a1b6:	6078      	str	r0, [r7, #4]
 800a1b8:	6039      	str	r1, [r7, #0]
  (void) opts;
  mg_error(c, "TLS is not enabled");
 800a1ba:	4904      	ldr	r1, [pc, #16]	; (800a1cc <mg_tls_init+0x1c>)
 800a1bc:	6878      	ldr	r0, [r7, #4]
 800a1be:	f7f7 ff6b 	bl	8002098 <mg_error>
}
 800a1c2:	bf00      	nop
 800a1c4:	3708      	adds	r7, #8
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}
 800a1ca:	bf00      	nop
 800a1cc:	080164bc 	.word	0x080164bc

0800a1d0 <mg_tls_handshake>:
void mg_tls_handshake(struct mg_connection *c) {
 800a1d0:	b480      	push	{r7}
 800a1d2:	b083      	sub	sp, #12
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	6078      	str	r0, [r7, #4]
  (void) c;
}
 800a1d8:	bf00      	nop
 800a1da:	370c      	adds	r7, #12
 800a1dc:	46bd      	mov	sp, r7
 800a1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1e2:	4770      	bx	lr

0800a1e4 <mg_tls_free>:
void mg_tls_free(struct mg_connection *c) {
 800a1e4:	b480      	push	{r7}
 800a1e6:	b083      	sub	sp, #12
 800a1e8:	af00      	add	r7, sp, #0
 800a1ea:	6078      	str	r0, [r7, #4]
  (void) c;
}
 800a1ec:	bf00      	nop
 800a1ee:	370c      	adds	r7, #12
 800a1f0:	46bd      	mov	sp, r7
 800a1f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1f6:	4770      	bx	lr

0800a1f8 <mg_tls_recv>:
long mg_tls_recv(struct mg_connection *c, void *buf, size_t len) {
 800a1f8:	b480      	push	{r7}
 800a1fa:	b085      	sub	sp, #20
 800a1fc:	af00      	add	r7, sp, #0
 800a1fe:	60f8      	str	r0, [r7, #12]
 800a200:	60b9      	str	r1, [r7, #8]
 800a202:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 800a204:	68fb      	ldr	r3, [r7, #12]
 800a206:	2b00      	cmp	r3, #0
 800a208:	d005      	beq.n	800a216 <mg_tls_recv+0x1e>
 800a20a:	68bb      	ldr	r3, [r7, #8]
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d002      	beq.n	800a216 <mg_tls_recv+0x1e>
 800a210:	687b      	ldr	r3, [r7, #4]
 800a212:	2b00      	cmp	r3, #0
 800a214:	d101      	bne.n	800a21a <mg_tls_recv+0x22>
 800a216:	2300      	movs	r3, #0
 800a218:	e001      	b.n	800a21e <mg_tls_recv+0x26>
 800a21a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a21e:	4618      	mov	r0, r3
 800a220:	3714      	adds	r7, #20
 800a222:	46bd      	mov	sp, r7
 800a224:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a228:	4770      	bx	lr

0800a22a <mg_tls_send>:
long mg_tls_send(struct mg_connection *c, const void *buf, size_t len) {
 800a22a:	b480      	push	{r7}
 800a22c:	b085      	sub	sp, #20
 800a22e:	af00      	add	r7, sp, #0
 800a230:	60f8      	str	r0, [r7, #12]
 800a232:	60b9      	str	r1, [r7, #8]
 800a234:	607a      	str	r2, [r7, #4]
  return c == NULL || buf == NULL || len == 0 ? 0 : -1;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	2b00      	cmp	r3, #0
 800a23a:	d005      	beq.n	800a248 <mg_tls_send+0x1e>
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d002      	beq.n	800a248 <mg_tls_send+0x1e>
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d101      	bne.n	800a24c <mg_tls_send+0x22>
 800a248:	2300      	movs	r3, #0
 800a24a:	e001      	b.n	800a250 <mg_tls_send+0x26>
 800a24c:	f04f 33ff 	mov.w	r3, #4294967295
}
 800a250:	4618      	mov	r0, r3
 800a252:	3714      	adds	r7, #20
 800a254:	46bd      	mov	sp, r7
 800a256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25a:	4770      	bx	lr

0800a25c <urlparse>:
  return strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0 ||
         strncmp(url, "mqtts:", 6) == 0 || strncmp(url, "ssl:", 4) == 0 ||
         strncmp(url, "tls:", 4) == 0;
}

static struct url urlparse(const char *url) {
 800a25c:	b5b0      	push	{r4, r5, r7, lr}
 800a25e:	b08a      	sub	sp, #40	; 0x28
 800a260:	af00      	add	r7, sp, #0
 800a262:	6078      	str	r0, [r7, #4]
 800a264:	6039      	str	r1, [r7, #0]
  size_t i;
  struct url u;
  memset(&u, 0, sizeof(u));
 800a266:	f107 0308 	add.w	r3, r7, #8
 800a26a:	221c      	movs	r2, #28
 800a26c:	2100      	movs	r1, #0
 800a26e:	4618      	mov	r0, r3
 800a270:	f00a fa60 	bl	8014734 <memset>
  for (i = 0; url[i] != '\0'; i++) {
 800a274:	2300      	movs	r3, #0
 800a276:	627b      	str	r3, [r7, #36]	; 0x24
 800a278:	e05b      	b.n	800a332 <urlparse+0xd6>
    if (url[i] == '/' && i > 0 && u.host == 0 && url[i - 1] == '/') {
 800a27a:	683a      	ldr	r2, [r7, #0]
 800a27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a27e:	4413      	add	r3, r2
 800a280:	781b      	ldrb	r3, [r3, #0]
 800a282:	2b2f      	cmp	r3, #47	; 0x2f
 800a284:	d112      	bne.n	800a2ac <urlparse+0x50>
 800a286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d00f      	beq.n	800a2ac <urlparse+0x50>
 800a28c:	697b      	ldr	r3, [r7, #20]
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d10c      	bne.n	800a2ac <urlparse+0x50>
 800a292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a294:	3b01      	subs	r3, #1
 800a296:	683a      	ldr	r2, [r7, #0]
 800a298:	4413      	add	r3, r2
 800a29a:	781b      	ldrb	r3, [r3, #0]
 800a29c:	2b2f      	cmp	r3, #47	; 0x2f
 800a29e:	d105      	bne.n	800a2ac <urlparse+0x50>
      u.host = i + 1;
 800a2a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a2:	3301      	adds	r3, #1
 800a2a4:	617b      	str	r3, [r7, #20]
      u.port = 0;
 800a2a6:	2300      	movs	r3, #0
 800a2a8:	61bb      	str	r3, [r7, #24]
 800a2aa:	e03f      	b.n	800a32c <urlparse+0xd0>
    } else if (url[i] == ']') {
 800a2ac:	683a      	ldr	r2, [r7, #0]
 800a2ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2b0:	4413      	add	r3, r2
 800a2b2:	781b      	ldrb	r3, [r3, #0]
 800a2b4:	2b5d      	cmp	r3, #93	; 0x5d
 800a2b6:	d102      	bne.n	800a2be <urlparse+0x62>
      u.port = 0;  // IPv6 URLs, like http://[::1]/bar
 800a2b8:	2300      	movs	r3, #0
 800a2ba:	61bb      	str	r3, [r7, #24]
 800a2bc:	e036      	b.n	800a32c <urlparse+0xd0>
    } else if (url[i] == ':' && u.port == 0 && u.uri == 0) {
 800a2be:	683a      	ldr	r2, [r7, #0]
 800a2c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2c2:	4413      	add	r3, r2
 800a2c4:	781b      	ldrb	r3, [r3, #0]
 800a2c6:	2b3a      	cmp	r3, #58	; 0x3a
 800a2c8:	d109      	bne.n	800a2de <urlparse+0x82>
 800a2ca:	69bb      	ldr	r3, [r7, #24]
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	d106      	bne.n	800a2de <urlparse+0x82>
 800a2d0:	69fb      	ldr	r3, [r7, #28]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d103      	bne.n	800a2de <urlparse+0x82>
      u.port = i + 1;
 800a2d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2d8:	3301      	adds	r3, #1
 800a2da:	61bb      	str	r3, [r7, #24]
 800a2dc:	e026      	b.n	800a32c <urlparse+0xd0>
    } else if (url[i] == '@' && u.user == 0 && u.pass == 0 && u.uri == 0) {
 800a2de:	683a      	ldr	r2, [r7, #0]
 800a2e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2e2:	4413      	add	r3, r2
 800a2e4:	781b      	ldrb	r3, [r3, #0]
 800a2e6:	2b40      	cmp	r3, #64	; 0x40
 800a2e8:	d112      	bne.n	800a310 <urlparse+0xb4>
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	2b00      	cmp	r3, #0
 800a2ee:	d10f      	bne.n	800a310 <urlparse+0xb4>
 800a2f0:	693b      	ldr	r3, [r7, #16]
 800a2f2:	2b00      	cmp	r3, #0
 800a2f4:	d10c      	bne.n	800a310 <urlparse+0xb4>
 800a2f6:	69fb      	ldr	r3, [r7, #28]
 800a2f8:	2b00      	cmp	r3, #0
 800a2fa:	d109      	bne.n	800a310 <urlparse+0xb4>
      u.user = u.host;
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	60fb      	str	r3, [r7, #12]
      u.pass = u.port;
 800a300:	69bb      	ldr	r3, [r7, #24]
 800a302:	613b      	str	r3, [r7, #16]
      u.host = i + 1;
 800a304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a306:	3301      	adds	r3, #1
 800a308:	617b      	str	r3, [r7, #20]
      u.port = 0;
 800a30a:	2300      	movs	r3, #0
 800a30c:	61bb      	str	r3, [r7, #24]
 800a30e:	e00d      	b.n	800a32c <urlparse+0xd0>
    } else if (url[i] == '/' && u.host && u.uri == 0) {
 800a310:	683a      	ldr	r2, [r7, #0]
 800a312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a314:	4413      	add	r3, r2
 800a316:	781b      	ldrb	r3, [r3, #0]
 800a318:	2b2f      	cmp	r3, #47	; 0x2f
 800a31a:	d107      	bne.n	800a32c <urlparse+0xd0>
 800a31c:	697b      	ldr	r3, [r7, #20]
 800a31e:	2b00      	cmp	r3, #0
 800a320:	d004      	beq.n	800a32c <urlparse+0xd0>
 800a322:	69fb      	ldr	r3, [r7, #28]
 800a324:	2b00      	cmp	r3, #0
 800a326:	d101      	bne.n	800a32c <urlparse+0xd0>
      u.uri = i;
 800a328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32a:	61fb      	str	r3, [r7, #28]
  for (i = 0; url[i] != '\0'; i++) {
 800a32c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a32e:	3301      	adds	r3, #1
 800a330:	627b      	str	r3, [r7, #36]	; 0x24
 800a332:	683a      	ldr	r2, [r7, #0]
 800a334:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a336:	4413      	add	r3, r2
 800a338:	781b      	ldrb	r3, [r3, #0]
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	d19d      	bne.n	800a27a <urlparse+0x1e>
    }
  }
  u.end = i;
 800a33e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a340:	623b      	str	r3, [r7, #32]
#if 0
  printf("[%s] %d %d %d %d %d\n", url, u.user, u.pass, u.host, u.port, u.uri);
#endif
  return u;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	461d      	mov	r5, r3
 800a346:	f107 0408 	add.w	r4, r7, #8
 800a34a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800a34c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800a34e:	e894 0007 	ldmia.w	r4, {r0, r1, r2}
 800a352:	e885 0007 	stmia.w	r5, {r0, r1, r2}
}
 800a356:	6878      	ldr	r0, [r7, #4]
 800a358:	3728      	adds	r7, #40	; 0x28
 800a35a:	46bd      	mov	sp, r7
 800a35c:	bdb0      	pop	{r4, r5, r7, pc}

0800a35e <mg_url_host>:

struct mg_str mg_url_host(const char *url) {
 800a35e:	b580      	push	{r7, lr}
 800a360:	b08c      	sub	sp, #48	; 0x30
 800a362:	af00      	add	r7, sp, #0
 800a364:	6078      	str	r0, [r7, #4]
 800a366:	6039      	str	r1, [r7, #0]
  struct url u = urlparse(url);
 800a368:	f107 0310 	add.w	r3, r7, #16
 800a36c:	6839      	ldr	r1, [r7, #0]
 800a36e:	4618      	mov	r0, r3
 800a370:	f7ff ff74 	bl	800a25c <urlparse>
  size_t n = u.port  ? u.port - u.host - 1
 800a374:	6a3b      	ldr	r3, [r7, #32]
             : u.uri ? u.uri - u.host
 800a376:	2b00      	cmp	r3, #0
 800a378:	d004      	beq.n	800a384 <mg_url_host+0x26>
  size_t n = u.port  ? u.port - u.host - 1
 800a37a:	6a3a      	ldr	r2, [r7, #32]
 800a37c:	69fb      	ldr	r3, [r7, #28]
 800a37e:	1ad3      	subs	r3, r2, r3
             : u.uri ? u.uri - u.host
 800a380:	3b01      	subs	r3, #1
 800a382:	e009      	b.n	800a398 <mg_url_host+0x3a>
 800a384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
                     : u.end - u.host;
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <mg_url_host+0x34>
             : u.uri ? u.uri - u.host
 800a38a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a38c:	69fb      	ldr	r3, [r7, #28]
                     : u.end - u.host;
 800a38e:	1ad3      	subs	r3, r2, r3
 800a390:	e002      	b.n	800a398 <mg_url_host+0x3a>
 800a392:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a394:	69fb      	ldr	r3, [r7, #28]
 800a396:	1ad3      	subs	r3, r2, r3
  size_t n = u.port  ? u.port - u.host - 1
 800a398:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct mg_str s = mg_str_n(url + u.host, n);
 800a39a:	69fb      	ldr	r3, [r7, #28]
 800a39c:	683a      	ldr	r2, [r7, #0]
 800a39e:	18d1      	adds	r1, r2, r3
 800a3a0:	f107 0308 	add.w	r3, r7, #8
 800a3a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a3a6:	4618      	mov	r0, r3
 800a3a8:	f7ff fa1f 	bl	80097ea <mg_str_n>
  return s;
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f107 0308 	add.w	r3, r7, #8
 800a3b4:	e893 0003 	ldmia.w	r3, {r0, r1}
 800a3b8:	e882 0003 	stmia.w	r2, {r0, r1}
}
 800a3bc:	6878      	ldr	r0, [r7, #4]
 800a3be:	3730      	adds	r7, #48	; 0x30
 800a3c0:	46bd      	mov	sp, r7
 800a3c2:	bd80      	pop	{r7, pc}

0800a3c4 <mg_url_port>:
const char *mg_url_uri(const char *url) {
  struct url u = urlparse(url);
  return u.uri ? url + u.uri : "/";
}

unsigned short mg_url_port(const char *url) {
 800a3c4:	b580      	push	{r7, lr}
 800a3c6:	b08a      	sub	sp, #40	; 0x28
 800a3c8:	af00      	add	r7, sp, #0
 800a3ca:	6078      	str	r0, [r7, #4]
  struct url u = urlparse(url);
 800a3cc:	f107 0308 	add.w	r3, r7, #8
 800a3d0:	6879      	ldr	r1, [r7, #4]
 800a3d2:	4618      	mov	r0, r3
 800a3d4:	f7ff ff42 	bl	800a25c <urlparse>
  unsigned short port = 0;
 800a3d8:	2300      	movs	r3, #0
 800a3da:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "http:", 5) == 0 || strncmp(url, "ws:", 3) == 0) port = 80;
 800a3dc:	2205      	movs	r2, #5
 800a3de:	4925      	ldr	r1, [pc, #148]	; (800a474 <mg_url_port+0xb0>)
 800a3e0:	6878      	ldr	r0, [r7, #4]
 800a3e2:	f00a f9da 	bl	801479a <strncmp>
 800a3e6:	4603      	mov	r3, r0
 800a3e8:	2b00      	cmp	r3, #0
 800a3ea:	d007      	beq.n	800a3fc <mg_url_port+0x38>
 800a3ec:	2203      	movs	r2, #3
 800a3ee:	4922      	ldr	r1, [pc, #136]	; (800a478 <mg_url_port+0xb4>)
 800a3f0:	6878      	ldr	r0, [r7, #4]
 800a3f2:	f00a f9d2 	bl	801479a <strncmp>
 800a3f6:	4603      	mov	r3, r0
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d101      	bne.n	800a400 <mg_url_port+0x3c>
 800a3fc:	2350      	movs	r3, #80	; 0x50
 800a3fe:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "wss:", 4) == 0 || strncmp(url, "https:", 6) == 0)
 800a400:	2204      	movs	r2, #4
 800a402:	491e      	ldr	r1, [pc, #120]	; (800a47c <mg_url_port+0xb8>)
 800a404:	6878      	ldr	r0, [r7, #4]
 800a406:	f00a f9c8 	bl	801479a <strncmp>
 800a40a:	4603      	mov	r3, r0
 800a40c:	2b00      	cmp	r3, #0
 800a40e:	d007      	beq.n	800a420 <mg_url_port+0x5c>
 800a410:	2206      	movs	r2, #6
 800a412:	491b      	ldr	r1, [pc, #108]	; (800a480 <mg_url_port+0xbc>)
 800a414:	6878      	ldr	r0, [r7, #4]
 800a416:	f00a f9c0 	bl	801479a <strncmp>
 800a41a:	4603      	mov	r3, r0
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d102      	bne.n	800a426 <mg_url_port+0x62>
    port = 443;
 800a420:	f240 13bb 	movw	r3, #443	; 0x1bb
 800a424:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtt:", 5) == 0) port = 1883;
 800a426:	2205      	movs	r2, #5
 800a428:	4916      	ldr	r1, [pc, #88]	; (800a484 <mg_url_port+0xc0>)
 800a42a:	6878      	ldr	r0, [r7, #4]
 800a42c:	f00a f9b5 	bl	801479a <strncmp>
 800a430:	4603      	mov	r3, r0
 800a432:	2b00      	cmp	r3, #0
 800a434:	d102      	bne.n	800a43c <mg_url_port+0x78>
 800a436:	f240 735b 	movw	r3, #1883	; 0x75b
 800a43a:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (strncmp(url, "mqtts:", 6) == 0) port = 8883;
 800a43c:	2206      	movs	r2, #6
 800a43e:	4912      	ldr	r1, [pc, #72]	; (800a488 <mg_url_port+0xc4>)
 800a440:	6878      	ldr	r0, [r7, #4]
 800a442:	f00a f9aa 	bl	801479a <strncmp>
 800a446:	4603      	mov	r3, r0
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d102      	bne.n	800a452 <mg_url_port+0x8e>
 800a44c:	f242 23b3 	movw	r3, #8883	; 0x22b3
 800a450:	84fb      	strh	r3, [r7, #38]	; 0x26
  if (u.port) port = (unsigned short) atoi(url + u.port);
 800a452:	69bb      	ldr	r3, [r7, #24]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d007      	beq.n	800a468 <mg_url_port+0xa4>
 800a458:	69bb      	ldr	r3, [r7, #24]
 800a45a:	687a      	ldr	r2, [r7, #4]
 800a45c:	4413      	add	r3, r2
 800a45e:	4618      	mov	r0, r3
 800a460:	f009 fd6a 	bl	8013f38 <atoi>
 800a464:	4603      	mov	r3, r0
 800a466:	84fb      	strh	r3, [r7, #38]	; 0x26
  return port;
 800a468:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
}
 800a46a:	4618      	mov	r0, r3
 800a46c:	3728      	adds	r7, #40	; 0x28
 800a46e:	46bd      	mov	sp, r7
 800a470:	bd80      	pop	{r7, pc}
 800a472:	bf00      	nop
 800a474:	080164f8 	.word	0x080164f8
 800a478:	08016500 	.word	0x08016500
 800a47c:	080164d0 	.word	0x080164d0
 800a480:	080164d8 	.word	0x080164d8
 800a484:	08016504 	.word	0x08016504
 800a488:	080164e0 	.word	0x080164e0

0800a48c <mg_ntohl>:
                          : (char) ('0' + c - 52);     // numeric
  }
  return buf;
}

uint32_t mg_ntohl(uint32_t net) {
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]
  uint8_t data[4] = {0, 0, 0, 0};
 800a494:	2300      	movs	r3, #0
 800a496:	60fb      	str	r3, [r7, #12]
 800a498:	687b      	ldr	r3, [r7, #4]
  memcpy(&data, &net, sizeof(data));
 800a49a:	60fb      	str	r3, [r7, #12]
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 800a49c:	7bfb      	ldrb	r3, [r7, #15]
 800a49e:	461a      	mov	r2, r3
 800a4a0:	7bbb      	ldrb	r3, [r7, #14]
 800a4a2:	021b      	lsls	r3, r3, #8
 800a4a4:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 800a4a6:	7b7b      	ldrb	r3, [r7, #13]
 800a4a8:	041b      	lsls	r3, r3, #16
  return (((uint32_t) data[3]) << 0) | (((uint32_t) data[2]) << 8) |
 800a4aa:	431a      	orrs	r2, r3
         (((uint32_t) data[1]) << 16) | (((uint32_t) data[0]) << 24);
 800a4ac:	7b3b      	ldrb	r3, [r7, #12]
 800a4ae:	061b      	lsls	r3, r3, #24
 800a4b0:	4313      	orrs	r3, r2
}
 800a4b2:	4618      	mov	r0, r3
 800a4b4:	3714      	adds	r7, #20
 800a4b6:	46bd      	mov	sp, r7
 800a4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4bc:	4770      	bx	lr

0800a4be <mg_ntohs>:

uint16_t mg_ntohs(uint16_t net) {
 800a4be:	b480      	push	{r7}
 800a4c0:	b085      	sub	sp, #20
 800a4c2:	af00      	add	r7, sp, #0
 800a4c4:	4603      	mov	r3, r0
 800a4c6:	80fb      	strh	r3, [r7, #6]
  uint8_t data[2] = {0, 0};
 800a4c8:	2300      	movs	r3, #0
 800a4ca:	81bb      	strh	r3, [r7, #12]
 800a4cc:	88fb      	ldrh	r3, [r7, #6]
  memcpy(&data, &net, sizeof(data));
 800a4ce:	81bb      	strh	r3, [r7, #12]
  return (uint16_t) ((uint16_t) data[1] | (((uint16_t) data[0]) << 8));
 800a4d0:	7b7b      	ldrb	r3, [r7, #13]
 800a4d2:	b21a      	sxth	r2, r3
 800a4d4:	7b3b      	ldrb	r3, [r7, #12]
 800a4d6:	021b      	lsls	r3, r3, #8
 800a4d8:	b21b      	sxth	r3, r3
 800a4da:	4313      	orrs	r3, r2
 800a4dc:	b21b      	sxth	r3, r3
 800a4de:	b29b      	uxth	r3, r3
}
 800a4e0:	4618      	mov	r0, r3
 800a4e2:	3714      	adds	r7, #20
 800a4e4:	46bd      	mov	sp, r7
 800a4e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4ea:	4770      	bx	lr

0800a4ec <mg_crc32>:

uint32_t mg_crc32(uint32_t crc, const char *buf, size_t len) {
 800a4ec:	b480      	push	{r7}
 800a4ee:	b087      	sub	sp, #28
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	60f8      	str	r0, [r7, #12]
 800a4f4:	60b9      	str	r1, [r7, #8]
 800a4f6:	607a      	str	r2, [r7, #4]
  static const uint32_t crclut[16] = {
      // table for polynomial 0xEDB88320 (reflected)
      0x00000000, 0x1DB71064, 0x3B6E20C8, 0x26D930AC, 0x76DC4190, 0x6B6B51F4,
      0x4DB26158, 0x5005713C, 0xEDB88320, 0xF00F9344, 0xD6D6A3E8, 0xCB61B38C,
      0x9B64C2B0, 0x86D3D2D4, 0xA00AE278, 0xBDBDF21C};
  crc = ~crc;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	43db      	mvns	r3, r3
 800a4fc:	60fb      	str	r3, [r7, #12]
  while (len--) {
 800a4fe:	e01f      	b.n	800a540 <mg_crc32+0x54>
    uint8_t byte = *(uint8_t *)buf++;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	1c5a      	adds	r2, r3, #1
 800a504:	60ba      	str	r2, [r7, #8]
 800a506:	781b      	ldrb	r3, [r3, #0]
 800a508:	75fb      	strb	r3, [r7, #23]
    crc = crclut[(crc ^ byte) & 0x0F] ^ (crc >> 4);
 800a50a:	7dfa      	ldrb	r2, [r7, #23]
 800a50c:	68fb      	ldr	r3, [r7, #12]
 800a50e:	4053      	eors	r3, r2
 800a510:	f003 030f 	and.w	r3, r3, #15
 800a514:	4a11      	ldr	r2, [pc, #68]	; (800a55c <mg_crc32+0x70>)
 800a516:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	091b      	lsrs	r3, r3, #4
 800a51e:	4053      	eors	r3, r2
 800a520:	60fb      	str	r3, [r7, #12]
    crc = crclut[(crc ^ (byte >> 4)) & 0x0F] ^ (crc >> 4);
 800a522:	7dfb      	ldrb	r3, [r7, #23]
 800a524:	091b      	lsrs	r3, r3, #4
 800a526:	b2db      	uxtb	r3, r3
 800a528:	461a      	mov	r2, r3
 800a52a:	68fb      	ldr	r3, [r7, #12]
 800a52c:	4053      	eors	r3, r2
 800a52e:	f003 030f 	and.w	r3, r3, #15
 800a532:	4a0a      	ldr	r2, [pc, #40]	; (800a55c <mg_crc32+0x70>)
 800a534:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	091b      	lsrs	r3, r3, #4
 800a53c:	4053      	eors	r3, r2
 800a53e:	60fb      	str	r3, [r7, #12]
  while (len--) {
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	1e5a      	subs	r2, r3, #1
 800a544:	607a      	str	r2, [r7, #4]
 800a546:	2b00      	cmp	r3, #0
 800a548:	d1da      	bne.n	800a500 <mg_crc32+0x14>
  }
  return ~crc;
 800a54a:	68fb      	ldr	r3, [r7, #12]
 800a54c:	43db      	mvns	r3, r3
}
 800a54e:	4618      	mov	r0, r3
 800a550:	371c      	adds	r7, #28
 800a552:	46bd      	mov	sp, r7
 800a554:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a558:	4770      	bx	lr
 800a55a:	bf00      	nop
 800a55c:	080174b8 	.word	0x080174b8

0800a560 <eth_read_phy>:
  PHY_BCR = 0,
  PHY_BSR = 1,
  PHY_CSCR = 31
};  // PHY constants

static uint32_t eth_read_phy(uint8_t addr, uint8_t reg) {
 800a560:	b480      	push	{r7}
 800a562:	b083      	sub	sp, #12
 800a564:	af00      	add	r7, sp, #0
 800a566:	4603      	mov	r3, r0
 800a568:	460a      	mov	r2, r1
 800a56a:	71fb      	strb	r3, [r7, #7]
 800a56c:	4613      	mov	r3, r2
 800a56e:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIOAR &= (0xF << 8);
 800a570:	4b17      	ldr	r3, [pc, #92]	; (800a5d0 <eth_read_phy+0x70>)
 800a572:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a576:	4a16      	ldr	r2, [pc, #88]	; (800a5d0 <eth_read_phy+0x70>)
 800a578:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a57c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 3 << 2;
 800a580:	4b13      	ldr	r3, [pc, #76]	; (800a5d0 <eth_read_phy+0x70>)
 800a582:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a586:	79fb      	ldrb	r3, [r7, #7]
 800a588:	0559      	lsls	r1, r3, #21
 800a58a:	79bb      	ldrb	r3, [r7, #6]
 800a58c:	041b      	lsls	r3, r3, #16
 800a58e:	430b      	orrs	r3, r1
 800a590:	4313      	orrs	r3, r2
 800a592:	4a0f      	ldr	r2, [pc, #60]	; (800a5d0 <eth_read_phy+0x70>)
 800a594:	f043 030c 	orr.w	r3, r3, #12
 800a598:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= BIT(0);
 800a59c:	4b0c      	ldr	r3, [pc, #48]	; (800a5d0 <eth_read_phy+0x70>)
 800a59e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5a2:	4a0b      	ldr	r2, [pc, #44]	; (800a5d0 <eth_read_phy+0x70>)
 800a5a4:	f043 0301 	orr.w	r3, r3, #1
 800a5a8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  while (ETH->MACMDIOAR & BIT(0)) (void) 0;
 800a5ac:	bf00      	nop
 800a5ae:	4b08      	ldr	r3, [pc, #32]	; (800a5d0 <eth_read_phy+0x70>)
 800a5b0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5b4:	f003 0301 	and.w	r3, r3, #1
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d1f8      	bne.n	800a5ae <eth_read_phy+0x4e>
  return ETH->MACMDIODR;
 800a5bc:	4b04      	ldr	r3, [pc, #16]	; (800a5d0 <eth_read_phy+0x70>)
 800a5be:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
}
 800a5c2:	4618      	mov	r0, r3
 800a5c4:	370c      	adds	r7, #12
 800a5c6:	46bd      	mov	sp, r7
 800a5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	40028000 	.word	0x40028000

0800a5d4 <eth_write_phy>:

static void eth_write_phy(uint8_t addr, uint8_t reg, uint32_t val) {
 800a5d4:	b480      	push	{r7}
 800a5d6:	b083      	sub	sp, #12
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	4603      	mov	r3, r0
 800a5dc:	603a      	str	r2, [r7, #0]
 800a5de:	71fb      	strb	r3, [r7, #7]
 800a5e0:	460b      	mov	r3, r1
 800a5e2:	71bb      	strb	r3, [r7, #6]
  ETH->MACMDIODR = val;
 800a5e4:	4a18      	ldr	r2, [pc, #96]	; (800a648 <eth_write_phy+0x74>)
 800a5e6:	683b      	ldr	r3, [r7, #0]
 800a5e8:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
  ETH->MACMDIOAR &= (0xF << 8);
 800a5ec:	4b16      	ldr	r3, [pc, #88]	; (800a648 <eth_write_phy+0x74>)
 800a5ee:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a5f2:	4a15      	ldr	r2, [pc, #84]	; (800a648 <eth_write_phy+0x74>)
 800a5f4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a5f8:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= ((uint32_t) addr << 21) | ((uint32_t) reg << 16) | 1 << 2;
 800a5fc:	4b12      	ldr	r3, [pc, #72]	; (800a648 <eth_write_phy+0x74>)
 800a5fe:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800a602:	79fb      	ldrb	r3, [r7, #7]
 800a604:	0559      	lsls	r1, r3, #21
 800a606:	79bb      	ldrb	r3, [r7, #6]
 800a608:	041b      	lsls	r3, r3, #16
 800a60a:	430b      	orrs	r3, r1
 800a60c:	4313      	orrs	r3, r2
 800a60e:	4a0e      	ldr	r2, [pc, #56]	; (800a648 <eth_write_phy+0x74>)
 800a610:	f043 0304 	orr.w	r3, r3, #4
 800a614:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  ETH->MACMDIOAR |= BIT(0);
 800a618:	4b0b      	ldr	r3, [pc, #44]	; (800a648 <eth_write_phy+0x74>)
 800a61a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a61e:	4a0a      	ldr	r2, [pc, #40]	; (800a648 <eth_write_phy+0x74>)
 800a620:	f043 0301 	orr.w	r3, r3, #1
 800a624:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
  while (ETH->MACMDIOAR & BIT(0)) (void) 0;
 800a628:	bf00      	nop
 800a62a:	4b07      	ldr	r3, [pc, #28]	; (800a648 <eth_write_phy+0x74>)
 800a62c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800a630:	f003 0301 	and.w	r3, r3, #1
 800a634:	2b00      	cmp	r3, #0
 800a636:	d1f8      	bne.n	800a62a <eth_write_phy+0x56>
}
 800a638:	bf00      	nop
 800a63a:	bf00      	nop
 800a63c:	370c      	adds	r7, #12
 800a63e:	46bd      	mov	sp, r7
 800a640:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a644:	4770      	bx	lr
 800a646:	bf00      	nop
 800a648:	40028000 	.word	0x40028000

0800a64c <get_hclk>:

static uint32_t get_hclk(void) {
 800a64c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a650:	b091      	sub	sp, #68	; 0x44
 800a652:	af00      	add	r7, sp, #0
        APB1HRSTR, APB2RSTR, APB4RSTR, GCR, RESERVED8, D3AMR, RESERVED11[9],
        RSR, AHB3ENR, AHB1ENR, AHB2ENR, AHB4ENR, APB3ENR, APB1LENR, APB1HENR,
        APB2ENR, APB4ENR, RESERVED12, AHB3LPENR, AHB1LPENR, AHB2LPENR,
        AHB4LPENR, APB3LPENR, APB1LLPENR, APB1HLPENR, APB2LPENR, APB4LPENR,
        RESERVED13[4];
  } *rcc = ((struct rcc *) (0x40000000 + 0x18020000 + 0x4400));
 800a654:	4e60      	ldr	r6, [pc, #384]	; (800a7d8 <get_hclk+0x18c>)
 800a656:	63be      	str	r6, [r7, #56]	; 0x38
  uint32_t clk = 0, hsi = 64000000 /* 64 MHz */, hse = 8000000 /* 8MHz */,
 800a658:	2600      	movs	r6, #0
 800a65a:	63fe      	str	r6, [r7, #60]	; 0x3c
 800a65c:	4e5f      	ldr	r6, [pc, #380]	; (800a7dc <get_hclk+0x190>)
 800a65e:	637e      	str	r6, [r7, #52]	; 0x34
 800a660:	4e5f      	ldr	r6, [pc, #380]	; (800a7e0 <get_hclk+0x194>)
 800a662:	633e      	str	r6, [r7, #48]	; 0x30
           csi = 4000000 /* 4MHz */;
 800a664:	4e5f      	ldr	r6, [pc, #380]	; (800a7e4 <get_hclk+0x198>)
 800a666:	62fe      	str	r6, [r7, #44]	; 0x2c
  unsigned int sel = (rcc->CFGR & (7 << 3)) >> 3;
 800a668:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800a66a:	6936      	ldr	r6, [r6, #16]
 800a66c:	08f6      	lsrs	r6, r6, #3
 800a66e:	f006 0607 	and.w	r6, r6, #7
 800a672:	62be      	str	r6, [r7, #40]	; 0x28

  if (sel == 1) {
 800a674:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800a676:	2e01      	cmp	r6, #1
 800a678:	d102      	bne.n	800a680 <get_hclk+0x34>
    clk = csi;
 800a67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a67c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a67e:	e068      	b.n	800a752 <get_hclk+0x106>
  } else if (sel == 2) {
 800a680:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800a682:	2e02      	cmp	r6, #2
 800a684:	d102      	bne.n	800a68c <get_hclk+0x40>
    clk = hse;
 800a686:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a68a:	e062      	b.n	800a752 <get_hclk+0x106>
  } else if (sel == 3) {
 800a68c:	6abe      	ldr	r6, [r7, #40]	; 0x28
 800a68e:	2e03      	cmp	r6, #3
 800a690:	d157      	bne.n	800a742 <get_hclk+0xf6>
    uint32_t vco, m, n, p;
    unsigned int src = (rcc->PLLCKSELR & (3 << 0)) >> 0;
 800a692:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800a694:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800a696:	f006 0603 	and.w	r6, r6, #3
 800a69a:	627e      	str	r6, [r7, #36]	; 0x24
    m = ((rcc->PLLCKSELR & (0x3F << 4)) >> 4);
 800a69c:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800a69e:	6ab6      	ldr	r6, [r6, #40]	; 0x28
 800a6a0:	0936      	lsrs	r6, r6, #4
 800a6a2:	f006 063f 	and.w	r6, r6, #63	; 0x3f
 800a6a6:	623e      	str	r6, [r7, #32]
    n = ((rcc->PLL1DIVR & (0x1FF << 0)) >> 0) + 1 +
 800a6a8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800a6aa:	6b36      	ldr	r6, [r6, #48]	; 0x30
 800a6ac:	f3c6 0c08 	ubfx	ip, r6, #0, #9
        ((rcc->PLLCFGR & BIT(0)) ? 1 : 0);  // round-up in fractional mode
 800a6b0:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800a6b2:	6af6      	ldr	r6, [r6, #44]	; 0x2c
 800a6b4:	f006 0601 	and.w	r6, r6, #1
    n = ((rcc->PLL1DIVR & (0x1FF << 0)) >> 0) + 1 +
 800a6b8:	4466      	add	r6, ip
 800a6ba:	3601      	adds	r6, #1
 800a6bc:	61fe      	str	r6, [r7, #28]
    p = ((rcc->PLL1DIVR & (0x7F << 9)) >> 9) + 1;
 800a6be:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800a6c0:	6b36      	ldr	r6, [r6, #48]	; 0x30
 800a6c2:	0a76      	lsrs	r6, r6, #9
 800a6c4:	f006 067f 	and.w	r6, r6, #127	; 0x7f
 800a6c8:	3601      	adds	r6, #1
 800a6ca:	61be      	str	r6, [r7, #24]
    if (src == 1) {
 800a6cc:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800a6ce:	2e01      	cmp	r6, #1
 800a6d0:	d102      	bne.n	800a6d8 <get_hclk+0x8c>
      clk = csi;
 800a6d2:	6afe      	ldr	r6, [r7, #44]	; 0x2c
 800a6d4:	63fe      	str	r6, [r7, #60]	; 0x3c
 800a6d6:	e00f      	b.n	800a6f8 <get_hclk+0xac>
    } else if (src == 2) {
 800a6d8:	6a7e      	ldr	r6, [r7, #36]	; 0x24
 800a6da:	2e02      	cmp	r6, #2
 800a6dc:	d102      	bne.n	800a6e4 <get_hclk+0x98>
      clk = hse;
 800a6de:	6b3e      	ldr	r6, [r7, #48]	; 0x30
 800a6e0:	63fe      	str	r6, [r7, #60]	; 0x3c
 800a6e2:	e009      	b.n	800a6f8 <get_hclk+0xac>
    } else {
      clk = hsi;
 800a6e4:	6b7e      	ldr	r6, [r7, #52]	; 0x34
 800a6e6:	63fe      	str	r6, [r7, #60]	; 0x3c
      clk >>= ((rcc->CR & 3) >> 3);
 800a6e8:	6bbe      	ldr	r6, [r7, #56]	; 0x38
 800a6ea:	6836      	ldr	r6, [r6, #0]
 800a6ec:	f04f 0c00 	mov.w	ip, #0
 800a6f0:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800a6f2:	fa26 f60c 	lsr.w	r6, r6, ip
 800a6f6:	63fe      	str	r6, [r7, #60]	; 0x3c
    }
    vco = (uint32_t) ((uint64_t) clk * n / m);
 800a6f8:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 800a6fa:	f04f 0c00 	mov.w	ip, #0
 800a6fe:	4634      	mov	r4, r6
 800a700:	4665      	mov	r5, ip
 800a702:	69fe      	ldr	r6, [r7, #28]
 800a704:	f04f 0c00 	mov.w	ip, #0
 800a708:	4632      	mov	r2, r6
 800a70a:	4663      	mov	r3, ip
 800a70c:	fb02 fc05 	mul.w	ip, r2, r5
 800a710:	fb04 f603 	mul.w	r6, r4, r3
 800a714:	4466      	add	r6, ip
 800a716:	fba4 0102 	umull	r0, r1, r4, r2
 800a71a:	1873      	adds	r3, r6, r1
 800a71c:	4619      	mov	r1, r3
 800a71e:	6a3b      	ldr	r3, [r7, #32]
 800a720:	2200      	movs	r2, #0
 800a722:	4698      	mov	r8, r3
 800a724:	4691      	mov	r9, r2
 800a726:	4642      	mov	r2, r8
 800a728:	464b      	mov	r3, r9
 800a72a:	f7f6 f865 	bl	80007f8 <__aeabi_uldivmod>
 800a72e:	4602      	mov	r2, r0
 800a730:	460b      	mov	r3, r1
 800a732:	4613      	mov	r3, r2
 800a734:	617b      	str	r3, [r7, #20]
    clk = vco / p;
 800a736:	697a      	ldr	r2, [r7, #20]
 800a738:	69bb      	ldr	r3, [r7, #24]
 800a73a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a73e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a740:	e007      	b.n	800a752 <get_hclk+0x106>
  } else {
    clk = hsi;
 800a742:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a744:	63fb      	str	r3, [r7, #60]	; 0x3c
    clk >>= ((rcc->CR & 3) >> 3);
 800a746:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	2200      	movs	r2, #0
 800a74c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a74e:	40d3      	lsrs	r3, r2
 800a750:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  const uint8_t cptab[12] = {1, 2, 3, 4, 6, 7, 8, 9};  // log2(div)
 800a752:	4a25      	ldr	r2, [pc, #148]	; (800a7e8 <get_hclk+0x19c>)
 800a754:	463b      	mov	r3, r7
 800a756:	ca07      	ldmia	r2, {r0, r1, r2}
 800a758:	c303      	stmia	r3!, {r0, r1}
 800a75a:	701a      	strb	r2, [r3, #0]
 800a75c:	f107 0309 	add.w	r3, r7, #9
 800a760:	2200      	movs	r2, #0
 800a762:	801a      	strh	r2, [r3, #0]
 800a764:	709a      	strb	r2, [r3, #2]
  uint32_t d1cpre = (rcc->D1CFGR & (0x0F << 8)) >> 8;
 800a766:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a768:	699b      	ldr	r3, [r3, #24]
 800a76a:	0a1b      	lsrs	r3, r3, #8
 800a76c:	f003 030f 	and.w	r3, r3, #15
 800a770:	613b      	str	r3, [r7, #16]
  if (d1cpre >= 8) clk >>= cptab[d1cpre - 8];
 800a772:	693b      	ldr	r3, [r7, #16]
 800a774:	2b07      	cmp	r3, #7
 800a776:	d909      	bls.n	800a78c <get_hclk+0x140>
 800a778:	693b      	ldr	r3, [r7, #16]
 800a77a:	3b08      	subs	r3, #8
 800a77c:	3340      	adds	r3, #64	; 0x40
 800a77e:	443b      	add	r3, r7
 800a780:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800a784:	461a      	mov	r2, r3
 800a786:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a788:	40d3      	lsrs	r3, r2
 800a78a:	63fb      	str	r3, [r7, #60]	; 0x3c
  MG_DEBUG(("D1 CLK: %u", clk));
 800a78c:	4b17      	ldr	r3, [pc, #92]	; (800a7ec <get_hclk+0x1a0>)
 800a78e:	f641 3278 	movw	r2, #7032	; 0x1b78
 800a792:	4917      	ldr	r1, [pc, #92]	; (800a7f0 <get_hclk+0x1a4>)
 800a794:	2003      	movs	r0, #3
 800a796:	f7fc fc3d 	bl	8007014 <mg_log_prefix>
 800a79a:	4603      	mov	r3, r0
 800a79c:	2b00      	cmp	r3, #0
 800a79e:	d003      	beq.n	800a7a8 <get_hclk+0x15c>
 800a7a0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a7a2:	4814      	ldr	r0, [pc, #80]	; (800a7f4 <get_hclk+0x1a8>)
 800a7a4:	f7fc fc90 	bl	80070c8 <mg_log>
  uint32_t hpre = (rcc->D1CFGR & (0x0F << 0)) >> 0;
 800a7a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a7aa:	699b      	ldr	r3, [r3, #24]
 800a7ac:	f003 030f 	and.w	r3, r3, #15
 800a7b0:	60fb      	str	r3, [r7, #12]
  if (hpre < 8) return clk;
 800a7b2:	68fb      	ldr	r3, [r7, #12]
 800a7b4:	2b07      	cmp	r3, #7
 800a7b6:	d801      	bhi.n	800a7bc <get_hclk+0x170>
 800a7b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7ba:	e008      	b.n	800a7ce <get_hclk+0x182>
  return ((uint32_t) clk) >> cptab[hpre - 8];
 800a7bc:	68fb      	ldr	r3, [r7, #12]
 800a7be:	3b08      	subs	r3, #8
 800a7c0:	3340      	adds	r3, #64	; 0x40
 800a7c2:	443b      	add	r3, r7
 800a7c4:	f813 3c40 	ldrb.w	r3, [r3, #-64]
 800a7c8:	461a      	mov	r2, r3
 800a7ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a7cc:	40d3      	lsrs	r3, r2
}
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	3744      	adds	r7, #68	; 0x44
 800a7d2:	46bd      	mov	sp, r7
 800a7d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7d8:	58024400 	.word	0x58024400
 800a7dc:	03d09000 	.word	0x03d09000
 800a7e0:	007a1200 	.word	0x007a1200
 800a7e4:	003d0900 	.word	0x003d0900
 800a7e8:	0801670c 	.word	0x0801670c
 800a7ec:	080174f8 	.word	0x080174f8
 800a7f0:	0801544c 	.word	0x0801544c
 800a7f4:	08016700 	.word	0x08016700

0800a7f8 <guess_mdc_cr>:
//  series of dividers to keep the MDC clock safely below 2.5MHz. We guess a
//  divider setting based on HCLK with some drift. If the user uses a different
//  clock from our defaults, needs to set the macros on top. Valid for
//  STM32H74xxx/75xxx (58.11.4)(4.5% worst case drift)(CSI clock has a 7.5 %
//  worst case drift @ max temp)
static int guess_mdc_cr(void) {
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b088      	sub	sp, #32
 800a7fc:	af00      	add	r7, sp, #0
  const uint8_t crs[] = {2, 3, 0, 1, 4, 5};  // ETH->MACMDIOAR::CR values
 800a7fe:	4a2a      	ldr	r2, [pc, #168]	; (800a8a8 <guess_mdc_cr+0xb0>)
 800a800:	f107 030c 	add.w	r3, r7, #12
 800a804:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a808:	6018      	str	r0, [r3, #0]
 800a80a:	3304      	adds	r3, #4
 800a80c:	8019      	strh	r1, [r3, #0]
  const uint8_t div[] = {16, 26, 42, 62, 102, 124};  // Respective HCLK dividers
 800a80e:	4a27      	ldr	r2, [pc, #156]	; (800a8ac <guess_mdc_cr+0xb4>)
 800a810:	1d3b      	adds	r3, r7, #4
 800a812:	e892 0003 	ldmia.w	r2, {r0, r1}
 800a816:	6018      	str	r0, [r3, #0]
 800a818:	3304      	adds	r3, #4
 800a81a:	8019      	strh	r1, [r3, #0]
  uint32_t hclk = get_hclk();                        // Guess system HCLK
 800a81c:	f7ff ff16 	bl	800a64c <get_hclk>
 800a820:	6178      	str	r0, [r7, #20]
  int result = -1;                                   // Invalid CR value
 800a822:	f04f 33ff 	mov.w	r3, #4294967295
 800a826:	61fb      	str	r3, [r7, #28]
  for (int i = 0; i < 6; i++) {
 800a828:	2300      	movs	r3, #0
 800a82a:	61bb      	str	r3, [r7, #24]
 800a82c:	e014      	b.n	800a858 <guess_mdc_cr+0x60>
    if (hclk / div[i] <= 2375000UL /* 2.5MHz - 5% */) {
 800a82e:	1d3a      	adds	r2, r7, #4
 800a830:	69bb      	ldr	r3, [r7, #24]
 800a832:	4413      	add	r3, r2
 800a834:	781b      	ldrb	r3, [r3, #0]
 800a836:	461a      	mov	r2, r3
 800a838:	697b      	ldr	r3, [r7, #20]
 800a83a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a83e:	4a1c      	ldr	r2, [pc, #112]	; (800a8b0 <guess_mdc_cr+0xb8>)
 800a840:	4293      	cmp	r3, r2
 800a842:	d806      	bhi.n	800a852 <guess_mdc_cr+0x5a>
      result = crs[i];
 800a844:	f107 020c 	add.w	r2, r7, #12
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	4413      	add	r3, r2
 800a84c:	781b      	ldrb	r3, [r3, #0]
 800a84e:	61fb      	str	r3, [r7, #28]
      break;
 800a850:	e005      	b.n	800a85e <guess_mdc_cr+0x66>
  for (int i = 0; i < 6; i++) {
 800a852:	69bb      	ldr	r3, [r7, #24]
 800a854:	3301      	adds	r3, #1
 800a856:	61bb      	str	r3, [r7, #24]
 800a858:	69bb      	ldr	r3, [r7, #24]
 800a85a:	2b05      	cmp	r3, #5
 800a85c:	dde7      	ble.n	800a82e <guess_mdc_cr+0x36>
    }
  }
  if (result < 0) MG_ERROR(("HCLK too high"));
 800a85e:	69fb      	ldr	r3, [r7, #28]
 800a860:	2b00      	cmp	r3, #0
 800a862:	da0c      	bge.n	800a87e <guess_mdc_cr+0x86>
 800a864:	4b13      	ldr	r3, [pc, #76]	; (800a8b4 <guess_mdc_cr+0xbc>)
 800a866:	f641 3292 	movw	r2, #7058	; 0x1b92
 800a86a:	4913      	ldr	r1, [pc, #76]	; (800a8b8 <guess_mdc_cr+0xc0>)
 800a86c:	2001      	movs	r0, #1
 800a86e:	f7fc fbd1 	bl	8007014 <mg_log_prefix>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	d002      	beq.n	800a87e <guess_mdc_cr+0x86>
 800a878:	4810      	ldr	r0, [pc, #64]	; (800a8bc <guess_mdc_cr+0xc4>)
 800a87a:	f7fc fc25 	bl	80070c8 <mg_log>
  MG_DEBUG(("HCLK: %u, CR: %d", hclk, result));
 800a87e:	4b0d      	ldr	r3, [pc, #52]	; (800a8b4 <guess_mdc_cr+0xbc>)
 800a880:	f641 3293 	movw	r2, #7059	; 0x1b93
 800a884:	490c      	ldr	r1, [pc, #48]	; (800a8b8 <guess_mdc_cr+0xc0>)
 800a886:	2003      	movs	r0, #3
 800a888:	f7fc fbc4 	bl	8007014 <mg_log_prefix>
 800a88c:	4603      	mov	r3, r0
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d004      	beq.n	800a89c <guess_mdc_cr+0xa4>
 800a892:	69fa      	ldr	r2, [r7, #28]
 800a894:	6979      	ldr	r1, [r7, #20]
 800a896:	480a      	ldr	r0, [pc, #40]	; (800a8c0 <guess_mdc_cr+0xc8>)
 800a898:	f7fc fc16 	bl	80070c8 <mg_log>
  return result;
 800a89c:	69fb      	ldr	r3, [r7, #28]
}
 800a89e:	4618      	mov	r0, r3
 800a8a0:	3720      	adds	r7, #32
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	bd80      	pop	{r7, pc}
 800a8a6:	bf00      	nop
 800a8a8:	0801673c 	.word	0x0801673c
 800a8ac:	08016744 	.word	0x08016744
 800a8b0:	00243d58 	.word	0x00243d58
 800a8b4:	08017504 	.word	0x08017504
 800a8b8:	0801544c 	.word	0x0801544c
 800a8bc:	08016718 	.word	0x08016718
 800a8c0:	08016728 	.word	0x08016728

0800a8c4 <mg_tcpip_driver_stm32h_init>:

static bool mg_tcpip_driver_stm32h_init(struct mg_tcpip_if *ifp) {
 800a8c4:	b580      	push	{r7, lr}
 800a8c6:	b086      	sub	sp, #24
 800a8c8:	af00      	add	r7, sp, #0
 800a8ca:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_driver_stm32h_data *d =
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8d0:	60fb      	str	r3, [r7, #12]
      (struct mg_tcpip_driver_stm32h_data *) ifp->driver_data;
  s_ifp = ifp;
 800a8d2:	4a82      	ldr	r2, [pc, #520]	; (800aadc <mg_tcpip_driver_stm32h_init+0x218>)
 800a8d4:	687b      	ldr	r3, [r7, #4]
 800a8d6:	6013      	str	r3, [r2, #0]

  // Init RX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800a8d8:	2300      	movs	r3, #0
 800a8da:	617b      	str	r3, [r7, #20]
 800a8dc:	e017      	b.n	800a90e <mg_tcpip_driver_stm32h_init+0x4a>
    s_rxdesc[i][0] = (uint32_t) (uintptr_t) s_rxbuf[i];  // Point to data buffer
 800a8de:	697b      	ldr	r3, [r7, #20]
 800a8e0:	f240 6204 	movw	r2, #1540	; 0x604
 800a8e4:	fb02 f303 	mul.w	r3, r2, r3
 800a8e8:	4a7d      	ldr	r2, [pc, #500]	; (800aae0 <mg_tcpip_driver_stm32h_init+0x21c>)
 800a8ea:	4413      	add	r3, r2
 800a8ec:	4619      	mov	r1, r3
 800a8ee:	4a7d      	ldr	r2, [pc, #500]	; (800aae4 <mg_tcpip_driver_stm32h_init+0x220>)
 800a8f0:	697b      	ldr	r3, [r7, #20]
 800a8f2:	011b      	lsls	r3, r3, #4
 800a8f4:	4413      	add	r3, r2
 800a8f6:	6019      	str	r1, [r3, #0]
    s_rxdesc[i][3] = BIT(31) | BIT(30) | BIT(24);        // OWN, IOC, BUF1V
 800a8f8:	4a7a      	ldr	r2, [pc, #488]	; (800aae4 <mg_tcpip_driver_stm32h_init+0x220>)
 800a8fa:	697b      	ldr	r3, [r7, #20]
 800a8fc:	011b      	lsls	r3, r3, #4
 800a8fe:	4413      	add	r3, r2
 800a900:	330c      	adds	r3, #12
 800a902:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800a906:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800a908:	697b      	ldr	r3, [r7, #20]
 800a90a:	3301      	adds	r3, #1
 800a90c:	617b      	str	r3, [r7, #20]
 800a90e:	697b      	ldr	r3, [r7, #20]
 800a910:	2b03      	cmp	r3, #3
 800a912:	dde4      	ble.n	800a8de <mg_tcpip_driver_stm32h_init+0x1a>
  }

  // Init TX descriptors
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800a914:	2300      	movs	r3, #0
 800a916:	613b      	str	r3, [r7, #16]
 800a918:	e00f      	b.n	800a93a <mg_tcpip_driver_stm32h_init+0x76>
    s_txdesc[i][0] = (uint32_t) (uintptr_t) s_txbuf[i];  // Buf pointer
 800a91a:	693b      	ldr	r3, [r7, #16]
 800a91c:	f240 6204 	movw	r2, #1540	; 0x604
 800a920:	fb02 f303 	mul.w	r3, r2, r3
 800a924:	4a70      	ldr	r2, [pc, #448]	; (800aae8 <mg_tcpip_driver_stm32h_init+0x224>)
 800a926:	4413      	add	r3, r2
 800a928:	4619      	mov	r1, r3
 800a92a:	4a70      	ldr	r2, [pc, #448]	; (800aaec <mg_tcpip_driver_stm32h_init+0x228>)
 800a92c:	693b      	ldr	r3, [r7, #16]
 800a92e:	011b      	lsls	r3, r3, #4
 800a930:	4413      	add	r3, r2
 800a932:	6019      	str	r1, [r3, #0]
  for (int i = 0; i < ETH_DESC_CNT; i++) {
 800a934:	693b      	ldr	r3, [r7, #16]
 800a936:	3301      	adds	r3, #1
 800a938:	613b      	str	r3, [r7, #16]
 800a93a:	693b      	ldr	r3, [r7, #16]
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	ddec      	ble.n	800a91a <mg_tcpip_driver_stm32h_init+0x56>
  }

  ETH->DMAMR |= BIT(0);                         // Software reset
 800a940:	4b6b      	ldr	r3, [pc, #428]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a942:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a69      	ldr	r2, [pc, #420]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a94a:	f043 0301 	orr.w	r3, r3, #1
 800a94e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a952:	6013      	str	r3, [r2, #0]
  while ((ETH->DMAMR & BIT(0)) != 0) (void) 0;  // Wait until done
 800a954:	bf00      	nop
 800a956:	4b66      	ldr	r3, [pc, #408]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a958:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	f003 0301 	and.w	r3, r3, #1
 800a962:	2b00      	cmp	r3, #0
 800a964:	d1f7      	bne.n	800a956 <mg_tcpip_driver_stm32h_init+0x92>

  // Set MDC clock divider. If user told us the value, use it. Otherwise, guess
  int cr = (d == NULL || d->mdc_cr < 0) ? guess_mdc_cr() : d->mdc_cr;
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	2b00      	cmp	r3, #0
 800a96a:	d003      	beq.n	800a974 <mg_tcpip_driver_stm32h_init+0xb0>
 800a96c:	68fb      	ldr	r3, [r7, #12]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2b00      	cmp	r3, #0
 800a972:	da03      	bge.n	800a97c <mg_tcpip_driver_stm32h_init+0xb8>
 800a974:	f7ff ff40 	bl	800a7f8 <guess_mdc_cr>
 800a978:	4603      	mov	r3, r0
 800a97a:	e001      	b.n	800a980 <mg_tcpip_driver_stm32h_init+0xbc>
 800a97c:	68fb      	ldr	r3, [r7, #12]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	60bb      	str	r3, [r7, #8]
  ETH->MACMDIOAR = ((uint32_t) cr & 0xF) << 8;
 800a982:	68bb      	ldr	r3, [r7, #8]
 800a984:	021b      	lsls	r3, r3, #8
 800a986:	4a5a      	ldr	r2, [pc, #360]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a988:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a98c:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200

  // NOTE(scaprile): We do not use timing facilities so the DMA engine does not
  // re-write buffer address
  ETH->DMAMR = 0 << 16;     // use interrupt mode 0 (58.8.1) (reset value)
 800a990:	4b57      	ldr	r3, [pc, #348]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a992:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a996:	461a      	mov	r2, r3
 800a998:	2300      	movs	r3, #0
 800a99a:	6013      	str	r3, [r2, #0]
  ETH->DMASBMR |= BIT(12);  // AAL NOTE(scaprile): is this actually needed
 800a99c:	4b54      	ldr	r3, [pc, #336]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a99e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9a2:	685b      	ldr	r3, [r3, #4]
 800a9a4:	4a52      	ldr	r2, [pc, #328]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a9a6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800a9aa:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9ae:	6053      	str	r3, [r2, #4]
  ETH->MACIER = 0;        // Do not enable additional irq sources (reset value)
 800a9b0:	4b4f      	ldr	r3, [pc, #316]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
  ETH->MACTFCR = BIT(7);  // Disable zero-quanta pause
 800a9b8:	4b4d      	ldr	r3, [pc, #308]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a9ba:	2280      	movs	r2, #128	; 0x80
 800a9bc:	671a      	str	r2, [r3, #112]	; 0x70
  // ETH->MACPFR = BIT(31);  // Receive all
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(15));  // Reset PHY
 800a9be:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	2000      	movs	r0, #0
 800a9c6:	f7ff fe05 	bl	800a5d4 <eth_write_phy>
  eth_write_phy(PHY_ADDR, PHY_BCR, BIT(12));  // Set autonegotiation
 800a9ca:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800a9ce:	2100      	movs	r1, #0
 800a9d0:	2000      	movs	r0, #0
 800a9d2:	f7ff fdff 	bl	800a5d4 <eth_write_phy>
  ETH->DMACRDLAR =
 800a9d6:	4a46      	ldr	r2, [pc, #280]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_rxdesc;  // RX descriptors start address
 800a9d8:	4b42      	ldr	r3, [pc, #264]	; (800aae4 <mg_tcpip_driver_stm32h_init+0x220>)
  ETH->DMACRDLAR =
 800a9da:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9de:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c
  ETH->DMACRDRLR = ETH_DESC_CNT - 1;    // ring length
 800a9e2:	4b43      	ldr	r3, [pc, #268]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800a9e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a9e8:	461a      	mov	r2, r3
 800a9ea:	2303      	movs	r3, #3
 800a9ec:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130
  ETH->DMACRDTPR =
 800a9f0:	4a3f      	ldr	r2, [pc, #252]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT -
 800a9f2:	4b40      	ldr	r3, [pc, #256]	; (800aaf4 <mg_tcpip_driver_stm32h_init+0x230>)
  ETH->DMACRDTPR =
 800a9f4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800a9f8:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
                                       1];  // last valid descriptor address
  ETH->DMACTDLAR =
 800a9fc:	4a3c      	ldr	r2, [pc, #240]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_txdesc;  // TX descriptors start address
 800a9fe:	4b3b      	ldr	r3, [pc, #236]	; (800aaec <mg_tcpip_driver_stm32h_init+0x228>)
  ETH->DMACTDLAR =
 800aa00:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa04:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114
  ETH->DMACTDRLR = ETH_DESC_CNT - 1;    // ring length
 800aa08:	4b39      	ldr	r3, [pc, #228]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa0e:	461a      	mov	r2, r3
 800aa10:	2303      	movs	r3, #3
 800aa12:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c
  ETH->DMACTDTPR =
 800aa16:	4a36      	ldr	r2, [pc, #216]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
      (uint32_t) (uintptr_t) s_txdesc;  // first available descriptor address
 800aa18:	4b34      	ldr	r3, [pc, #208]	; (800aaec <mg_tcpip_driver_stm32h_init+0x228>)
  ETH->DMACTDTPR =
 800aa1a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa1e:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
  ETH->DMACCR = 0;  // DSL = 0 (contiguous descriptor table) (reset value)
 800aa22:	4b33      	ldr	r3, [pc, #204]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa28:	461a      	mov	r2, r3
 800aa2a:	2300      	movs	r3, #0
 800aa2c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100
  ETH->DMACIER = BIT(6) | BIT(15);  // RIE, NIE
 800aa30:	4b2f      	ldr	r3, [pc, #188]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa32:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa36:	461a      	mov	r2, r3
 800aa38:	f248 0340 	movw	r3, #32832	; 0x8040
 800aa3c:	f8c2 3134 	str.w	r3, [r2, #308]	; 0x134
  ETH->MACCR = BIT(0) | BIT(1) | BIT(13) | BIT(14) |
 800aa40:	4b2b      	ldr	r3, [pc, #172]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa42:	f24e 0203 	movw	r2, #57347	; 0xe003
 800aa46:	601a      	str	r2, [r3, #0]
               BIT(15);     // RE, TE, Duplex, Fast, Reserved
  ETH->MTLTQOMR |= BIT(1);  // TSF
 800aa48:	4b29      	ldr	r3, [pc, #164]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa4a:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800aa4e:	4a28      	ldr	r2, [pc, #160]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa50:	f043 0302 	orr.w	r3, r3, #2
 800aa54:	f8c2 3d00 	str.w	r3, [r2, #3328]	; 0xd00
  ETH->MTLRQOMR |= BIT(5);  // RSF
 800aa58:	4b25      	ldr	r3, [pc, #148]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa5a:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800aa5e:	4a24      	ldr	r2, [pc, #144]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa60:	f043 0320 	orr.w	r3, r3, #32
 800aa64:	f8c2 3d30 	str.w	r3, [r2, #3376]	; 0xd30
  ETH->DMACTCR |= BIT(0);   // ST
 800aa68:	4b21      	ldr	r3, [pc, #132]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa6e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800aa72:	4a1f      	ldr	r2, [pc, #124]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa74:	f043 0301 	orr.w	r3, r3, #1
 800aa78:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa7c:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
  ETH->DMACRCR |= BIT(0);   // SR
 800aa80:	4b1b      	ldr	r3, [pc, #108]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800aa86:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
 800aa8a:	4a19      	ldr	r2, [pc, #100]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aa8c:	f043 0301 	orr.w	r3, r3, #1
 800aa90:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800aa94:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108

  // MAC address filtering
  ETH->MACA0HR = ((uint32_t) ifp->mac[5] << 8U) | ifp->mac[4];
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	795b      	ldrb	r3, [r3, #5]
 800aa9c:	021b      	lsls	r3, r3, #8
 800aa9e:	687a      	ldr	r2, [r7, #4]
 800aaa0:	7912      	ldrb	r2, [r2, #4]
 800aaa2:	4611      	mov	r1, r2
 800aaa4:	4a12      	ldr	r2, [pc, #72]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
 800aaa6:	430b      	orrs	r3, r1
 800aaa8:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	78db      	ldrb	r3, [r3, #3]
 800aab0:	061b      	lsls	r3, r3, #24
 800aab2:	461a      	mov	r2, r3
                 ((uint32_t) ifp->mac[2] << 16) |
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	789b      	ldrb	r3, [r3, #2]
 800aab8:	041b      	lsls	r3, r3, #16
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800aaba:	431a      	orrs	r2, r3
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 800aabc:	687b      	ldr	r3, [r7, #4]
 800aabe:	785b      	ldrb	r3, [r3, #1]
 800aac0:	021b      	lsls	r3, r3, #8
                 ((uint32_t) ifp->mac[2] << 16) |
 800aac2:	4313      	orrs	r3, r2
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 800aac4:	687a      	ldr	r2, [r7, #4]
 800aac6:	7812      	ldrb	r2, [r2, #0]
 800aac8:	4611      	mov	r1, r2
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800aaca:	4a09      	ldr	r2, [pc, #36]	; (800aaf0 <mg_tcpip_driver_stm32h_init+0x22c>)
                 ((uint32_t) ifp->mac[1] << 8) | ifp->mac[0];
 800aacc:	430b      	orrs	r3, r1
  ETH->MACA0LR = (uint32_t) (ifp->mac[3] << 24) |
 800aace:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  return true;
 800aad2:	2301      	movs	r3, #1
}
 800aad4:	4618      	mov	r0, r3
 800aad6:	3718      	adds	r7, #24
 800aad8:	46bd      	mov	sp, r7
 800aada:	bd80      	pop	{r7, pc}
 800aadc:	24003634 	.word	0x24003634
 800aae0:	24000614 	.word	0x24000614
 800aae4:	24000594 	.word	0x24000594
 800aae8:	24001e24 	.word	0x24001e24
 800aaec:	240005d4 	.word	0x240005d4
 800aaf0:	40028000 	.word	0x40028000
 800aaf4:	240005c4 	.word	0x240005c4

0800aaf8 <mg_tcpip_driver_stm32h_tx>:

static uint32_t s_txno;
static size_t mg_tcpip_driver_stm32h_tx(const void *buf, size_t len,
                                        struct mg_tcpip_if *ifp) {
 800aaf8:	b580      	push	{r7, lr}
 800aafa:	b088      	sub	sp, #32
 800aafc:	af02      	add	r7, sp, #8
 800aafe:	60f8      	str	r0, [r7, #12]
 800ab00:	60b9      	str	r1, [r7, #8]
 800ab02:	607a      	str	r2, [r7, #4]
  if (len > sizeof(s_txbuf[s_txno])) {
 800ab04:	68bb      	ldr	r3, [r7, #8]
 800ab06:	f240 6204 	movw	r2, #1540	; 0x604
 800ab0a:	4293      	cmp	r3, r2
 800ab0c:	d911      	bls.n	800ab32 <mg_tcpip_driver_stm32h_tx+0x3a>
    MG_ERROR(("Frame too big, %ld", (long) len));
 800ab0e:	4b59      	ldr	r3, [pc, #356]	; (800ac74 <mg_tcpip_driver_stm32h_tx+0x17c>)
 800ab10:	f641 32d7 	movw	r2, #7127	; 0x1bd7
 800ab14:	4958      	ldr	r1, [pc, #352]	; (800ac78 <mg_tcpip_driver_stm32h_tx+0x180>)
 800ab16:	2001      	movs	r0, #1
 800ab18:	f7fc fa7c 	bl	8007014 <mg_log_prefix>
 800ab1c:	4603      	mov	r3, r0
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d004      	beq.n	800ab2c <mg_tcpip_driver_stm32h_tx+0x34>
 800ab22:	68bb      	ldr	r3, [r7, #8]
 800ab24:	4619      	mov	r1, r3
 800ab26:	4855      	ldr	r0, [pc, #340]	; (800ac7c <mg_tcpip_driver_stm32h_tx+0x184>)
 800ab28:	f7fc face 	bl	80070c8 <mg_log>
    len = 0;  // Frame is too big
 800ab2c:	2300      	movs	r3, #0
 800ab2e:	60bb      	str	r3, [r7, #8]
 800ab30:	e084      	b.n	800ac3c <mg_tcpip_driver_stm32h_tx+0x144>
  } else if ((s_txdesc[s_txno][3] & BIT(31))) {
 800ab32:	4b53      	ldr	r3, [pc, #332]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ab34:	681b      	ldr	r3, [r3, #0]
 800ab36:	4a53      	ldr	r2, [pc, #332]	; (800ac84 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800ab38:	011b      	lsls	r3, r3, #4
 800ab3a:	4413      	add	r3, r2
 800ab3c:	330c      	adds	r3, #12
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	2b00      	cmp	r3, #0
 800ab42:	da41      	bge.n	800abc8 <mg_tcpip_driver_stm32h_tx+0xd0>
    MG_ERROR(("No free descriptors: %u %08X %08X %08X", s_txno,
 800ab44:	4b4b      	ldr	r3, [pc, #300]	; (800ac74 <mg_tcpip_driver_stm32h_tx+0x17c>)
 800ab46:	f641 32da 	movw	r2, #7130	; 0x1bda
 800ab4a:	494b      	ldr	r1, [pc, #300]	; (800ac78 <mg_tcpip_driver_stm32h_tx+0x180>)
 800ab4c:	2001      	movs	r0, #1
 800ab4e:	f7fc fa61 	bl	8007014 <mg_log_prefix>
 800ab52:	4603      	mov	r3, r0
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d017      	beq.n	800ab88 <mg_tcpip_driver_stm32h_tx+0x90>
 800ab58:	4b49      	ldr	r3, [pc, #292]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ab5a:	6819      	ldr	r1, [r3, #0]
 800ab5c:	4b48      	ldr	r3, [pc, #288]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	4a48      	ldr	r2, [pc, #288]	; (800ac84 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800ab62:	011b      	lsls	r3, r3, #4
 800ab64:	4413      	add	r3, r2
 800ab66:	330c      	adds	r3, #12
 800ab68:	681a      	ldr	r2, [r3, #0]
 800ab6a:	4b47      	ldr	r3, [pc, #284]	; (800ac88 <mg_tcpip_driver_stm32h_tx+0x190>)
 800ab6c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab70:	f8d3 0160 	ldr.w	r0, [r3, #352]	; 0x160
 800ab74:	4b44      	ldr	r3, [pc, #272]	; (800ac88 <mg_tcpip_driver_stm32h_tx+0x190>)
 800ab76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ab7a:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 800ab7e:	9300      	str	r3, [sp, #0]
 800ab80:	4603      	mov	r3, r0
 800ab82:	4842      	ldr	r0, [pc, #264]	; (800ac8c <mg_tcpip_driver_stm32h_tx+0x194>)
 800ab84:	f7fc faa0 	bl	80070c8 <mg_log>
              s_txdesc[s_txno][3], ETH->DMACSR, ETH->DMACTCR));
    for (int i = 0; i < ETH_DESC_CNT; i++) MG_ERROR(("%08X", s_txdesc[i][3]));
 800ab88:	2300      	movs	r3, #0
 800ab8a:	617b      	str	r3, [r7, #20]
 800ab8c:	e016      	b.n	800abbc <mg_tcpip_driver_stm32h_tx+0xc4>
 800ab8e:	4b39      	ldr	r3, [pc, #228]	; (800ac74 <mg_tcpip_driver_stm32h_tx+0x17c>)
 800ab90:	f641 32dc 	movw	r2, #7132	; 0x1bdc
 800ab94:	4938      	ldr	r1, [pc, #224]	; (800ac78 <mg_tcpip_driver_stm32h_tx+0x180>)
 800ab96:	2001      	movs	r0, #1
 800ab98:	f7fc fa3c 	bl	8007014 <mg_log_prefix>
 800ab9c:	4603      	mov	r3, r0
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d009      	beq.n	800abb6 <mg_tcpip_driver_stm32h_tx+0xbe>
 800aba2:	4a38      	ldr	r2, [pc, #224]	; (800ac84 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800aba4:	697b      	ldr	r3, [r7, #20]
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	4413      	add	r3, r2
 800abaa:	330c      	adds	r3, #12
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	4619      	mov	r1, r3
 800abb0:	4837      	ldr	r0, [pc, #220]	; (800ac90 <mg_tcpip_driver_stm32h_tx+0x198>)
 800abb2:	f7fc fa89 	bl	80070c8 <mg_log>
 800abb6:	697b      	ldr	r3, [r7, #20]
 800abb8:	3301      	adds	r3, #1
 800abba:	617b      	str	r3, [r7, #20]
 800abbc:	697b      	ldr	r3, [r7, #20]
 800abbe:	2b03      	cmp	r3, #3
 800abc0:	dde5      	ble.n	800ab8e <mg_tcpip_driver_stm32h_tx+0x96>
    len = 0;  // All descriptors are busy, fail
 800abc2:	2300      	movs	r3, #0
 800abc4:	60bb      	str	r3, [r7, #8]
 800abc6:	e039      	b.n	800ac3c <mg_tcpip_driver_stm32h_tx+0x144>
  } else {
    memcpy(s_txbuf[s_txno], buf, len);        // Copy data
 800abc8:	4b2d      	ldr	r3, [pc, #180]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f240 6204 	movw	r2, #1540	; 0x604
 800abd0:	fb02 f303 	mul.w	r3, r2, r3
 800abd4:	4a2f      	ldr	r2, [pc, #188]	; (800ac94 <mg_tcpip_driver_stm32h_tx+0x19c>)
 800abd6:	4413      	add	r3, r2
 800abd8:	68ba      	ldr	r2, [r7, #8]
 800abda:	68f9      	ldr	r1, [r7, #12]
 800abdc:	4618      	mov	r0, r3
 800abde:	f009 fe91 	bl	8014904 <memcpy>
    s_txdesc[s_txno][2] = (uint32_t) len;     // Set data len
 800abe2:	4b27      	ldr	r3, [pc, #156]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800abe4:	681b      	ldr	r3, [r3, #0]
 800abe6:	4a27      	ldr	r2, [pc, #156]	; (800ac84 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800abe8:	011b      	lsls	r3, r3, #4
 800abea:	4413      	add	r3, r2
 800abec:	3308      	adds	r3, #8
 800abee:	68ba      	ldr	r2, [r7, #8]
 800abf0:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] = BIT(28) | BIT(29);  // FD, LD
 800abf2:	4b23      	ldr	r3, [pc, #140]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	4a23      	ldr	r2, [pc, #140]	; (800ac84 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800abf8:	011b      	lsls	r3, r3, #4
 800abfa:	4413      	add	r3, r2
 800abfc:	330c      	adds	r3, #12
 800abfe:	f04f 5240 	mov.w	r2, #805306368	; 0x30000000
 800ac02:	601a      	str	r2, [r3, #0]
    s_txdesc[s_txno][3] |= BIT(31);           // Set OWN bit - let DMA take over
 800ac04:	4b1e      	ldr	r3, [pc, #120]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ac06:	681b      	ldr	r3, [r3, #0]
 800ac08:	4a1e      	ldr	r2, [pc, #120]	; (800ac84 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800ac0a:	011b      	lsls	r3, r3, #4
 800ac0c:	4413      	add	r3, r2
 800ac0e:	330c      	adds	r3, #12
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	4b1b      	ldr	r3, [pc, #108]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800ac1a:	491a      	ldr	r1, [pc, #104]	; (800ac84 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800ac1c:	011b      	lsls	r3, r3, #4
 800ac1e:	440b      	add	r3, r1
 800ac20:	330c      	adds	r3, #12
 800ac22:	601a      	str	r2, [r3, #0]
    if (++s_txno >= ETH_DESC_CNT) s_txno = 0;
 800ac24:	4b16      	ldr	r3, [pc, #88]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	3301      	adds	r3, #1
 800ac2a:	4a15      	ldr	r2, [pc, #84]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ac2c:	6013      	str	r3, [r2, #0]
 800ac2e:	4b14      	ldr	r3, [pc, #80]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ac30:	681b      	ldr	r3, [r3, #0]
 800ac32:	2b03      	cmp	r3, #3
 800ac34:	d902      	bls.n	800ac3c <mg_tcpip_driver_stm32h_tx+0x144>
 800ac36:	4b12      	ldr	r3, [pc, #72]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ac38:	2200      	movs	r2, #0
 800ac3a:	601a      	str	r2, [r3, #0]
  }
  ETH->DMACSR |= BIT(2) | BIT(1);  // Clear any prior TBU, TPS
 800ac3c:	4b12      	ldr	r3, [pc, #72]	; (800ac88 <mg_tcpip_driver_stm32h_tx+0x190>)
 800ac3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac42:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ac46:	4a10      	ldr	r2, [pc, #64]	; (800ac88 <mg_tcpip_driver_stm32h_tx+0x190>)
 800ac48:	f043 0306 	orr.w	r3, r3, #6
 800ac4c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ac50:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
  ETH->DMACTDTPR = (uint32_t) (uintptr_t) &s_txdesc[s_txno];  // and resume
 800ac54:	4b0a      	ldr	r3, [pc, #40]	; (800ac80 <mg_tcpip_driver_stm32h_tx+0x188>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	011b      	lsls	r3, r3, #4
 800ac5a:	4a0a      	ldr	r2, [pc, #40]	; (800ac84 <mg_tcpip_driver_stm32h_tx+0x18c>)
 800ac5c:	441a      	add	r2, r3
 800ac5e:	4b0a      	ldr	r3, [pc, #40]	; (800ac88 <mg_tcpip_driver_stm32h_tx+0x190>)
 800ac60:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ac64:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
  return len;
 800ac68:	68bb      	ldr	r3, [r7, #8]
  (void) ifp;
}
 800ac6a:	4618      	mov	r0, r3
 800ac6c:	3718      	adds	r7, #24
 800ac6e:	46bd      	mov	sp, r7
 800ac70:	bd80      	pop	{r7, pc}
 800ac72:	bf00      	nop
 800ac74:	08017514 	.word	0x08017514
 800ac78:	0801544c 	.word	0x0801544c
 800ac7c:	0801674c 	.word	0x0801674c
 800ac80:	24003638 	.word	0x24003638
 800ac84:	240005d4 	.word	0x240005d4
 800ac88:	40028000 	.word	0x40028000
 800ac8c:	08016760 	.word	0x08016760
 800ac90:	08016788 	.word	0x08016788
 800ac94:	24001e24 	.word	0x24001e24

0800ac98 <mg_tcpip_driver_stm32h_up>:

static bool mg_tcpip_driver_stm32h_up(struct mg_tcpip_if *ifp) {
 800ac98:	b580      	push	{r7, lr}
 800ac9a:	b086      	sub	sp, #24
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	6078      	str	r0, [r7, #4]
  uint32_t bsr = eth_read_phy(PHY_ADDR, PHY_BSR);
 800aca0:	2101      	movs	r1, #1
 800aca2:	2000      	movs	r0, #0
 800aca4:	f7ff fc5c 	bl	800a560 <eth_read_phy>
 800aca8:	6138      	str	r0, [r7, #16]
  bool up = bsr & BIT(2) ? 1 : 0;
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	089b      	lsrs	r3, r3, #2
 800acae:	f003 0301 	and.w	r3, r3, #1
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	bf14      	ite	ne
 800acb6:	2301      	movne	r3, #1
 800acb8:	2300      	moveq	r3, #0
 800acba:	73fb      	strb	r3, [r7, #15]
  if ((ifp->state == MG_TCPIP_STATE_DOWN) && up) {  // link state just went up
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	d13f      	bne.n	800ad46 <mg_tcpip_driver_stm32h_up+0xae>
 800acc6:	7bfb      	ldrb	r3, [r7, #15]
 800acc8:	2b00      	cmp	r3, #0
 800acca:	d03c      	beq.n	800ad46 <mg_tcpip_driver_stm32h_up+0xae>
    uint32_t scsr = eth_read_phy(PHY_ADDR, PHY_CSCR);
 800accc:	211f      	movs	r1, #31
 800acce:	2000      	movs	r0, #0
 800acd0:	f7ff fc46 	bl	800a560 <eth_read_phy>
 800acd4:	60b8      	str	r0, [r7, #8]
    uint32_t maccr = ETH->MACCR | BIT(14) | BIT(13);  // 100M, Full-duplex
 800acd6:	4b1e      	ldr	r3, [pc, #120]	; (800ad50 <mg_tcpip_driver_stm32h_up+0xb8>)
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f443 43c0 	orr.w	r3, r3, #24576	; 0x6000
 800acde:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(3)) == 0) maccr &= ~BIT(14);      // 10M
 800ace0:	68bb      	ldr	r3, [r7, #8]
 800ace2:	f003 0308 	and.w	r3, r3, #8
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d103      	bne.n	800acf2 <mg_tcpip_driver_stm32h_up+0x5a>
 800acea:	697b      	ldr	r3, [r7, #20]
 800acec:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800acf0:	617b      	str	r3, [r7, #20]
    if ((scsr & BIT(4)) == 0) maccr &= ~BIT(13);      // Half-duplex
 800acf2:	68bb      	ldr	r3, [r7, #8]
 800acf4:	f003 0310 	and.w	r3, r3, #16
 800acf8:	2b00      	cmp	r3, #0
 800acfa:	d103      	bne.n	800ad04 <mg_tcpip_driver_stm32h_up+0x6c>
 800acfc:	697b      	ldr	r3, [r7, #20]
 800acfe:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800ad02:	617b      	str	r3, [r7, #20]
    ETH->MACCR = maccr;  // IRQ handler does not fiddle with this register
 800ad04:	4a12      	ldr	r2, [pc, #72]	; (800ad50 <mg_tcpip_driver_stm32h_up+0xb8>)
 800ad06:	697b      	ldr	r3, [r7, #20]
 800ad08:	6013      	str	r3, [r2, #0]
    MG_DEBUG(("Link is %uM %s-duplex", maccr & BIT(14) ? 100 : 10,
 800ad0a:	4b12      	ldr	r3, [pc, #72]	; (800ad54 <mg_tcpip_driver_stm32h_up+0xbc>)
 800ad0c:	f641 32f4 	movw	r2, #7156	; 0x1bf4
 800ad10:	4911      	ldr	r1, [pc, #68]	; (800ad58 <mg_tcpip_driver_stm32h_up+0xc0>)
 800ad12:	2003      	movs	r0, #3
 800ad14:	f7fc f97e 	bl	8007014 <mg_log_prefix>
 800ad18:	4603      	mov	r3, r0
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	d013      	beq.n	800ad46 <mg_tcpip_driver_stm32h_up+0xae>
 800ad1e:	697b      	ldr	r3, [r7, #20]
 800ad20:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d001      	beq.n	800ad2c <mg_tcpip_driver_stm32h_up+0x94>
 800ad28:	2164      	movs	r1, #100	; 0x64
 800ad2a:	e000      	b.n	800ad2e <mg_tcpip_driver_stm32h_up+0x96>
 800ad2c:	210a      	movs	r1, #10
 800ad2e:	697b      	ldr	r3, [r7, #20]
 800ad30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800ad34:	2b00      	cmp	r3, #0
 800ad36:	d001      	beq.n	800ad3c <mg_tcpip_driver_stm32h_up+0xa4>
 800ad38:	4b08      	ldr	r3, [pc, #32]	; (800ad5c <mg_tcpip_driver_stm32h_up+0xc4>)
 800ad3a:	e000      	b.n	800ad3e <mg_tcpip_driver_stm32h_up+0xa6>
 800ad3c:	4b08      	ldr	r3, [pc, #32]	; (800ad60 <mg_tcpip_driver_stm32h_up+0xc8>)
 800ad3e:	461a      	mov	r2, r3
 800ad40:	4808      	ldr	r0, [pc, #32]	; (800ad64 <mg_tcpip_driver_stm32h_up+0xcc>)
 800ad42:	f7fc f9c1 	bl	80070c8 <mg_log>
              maccr & BIT(13) ? "full" : "half"));
  }
  return up;
 800ad46:	7bfb      	ldrb	r3, [r7, #15]
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3718      	adds	r7, #24
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}
 800ad50:	40028000 	.word	0x40028000
 800ad54:	08017530 	.word	0x08017530
 800ad58:	0801544c 	.word	0x0801544c
 800ad5c:	08016790 	.word	0x08016790
 800ad60:	08016798 	.word	0x08016798
 800ad64:	080167a0 	.word	0x080167a0

0800ad68 <ETH_IRQHandler>:

void ETH_IRQHandler(void);
static uint32_t s_rxno;
void ETH_IRQHandler(void) {
 800ad68:	b580      	push	{r7, lr}
 800ad6a:	b082      	sub	sp, #8
 800ad6c:	af00      	add	r7, sp, #0
  if (ETH->DMACSR & BIT(6)) {            // Frame received, loop
 800ad6e:	4b40      	ldr	r3, [pc, #256]	; (800ae70 <ETH_IRQHandler+0x108>)
 800ad70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad74:	f8d3 3160 	ldr.w	r3, [r3, #352]	; 0x160
 800ad78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad7c:	2b00      	cmp	r3, #0
 800ad7e:	d065      	beq.n	800ae4c <ETH_IRQHandler+0xe4>
    ETH->DMACSR = BIT(15) | BIT(6);      // Clear flag
 800ad80:	4b3b      	ldr	r3, [pc, #236]	; (800ae70 <ETH_IRQHandler+0x108>)
 800ad82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ad86:	461a      	mov	r2, r3
 800ad88:	f248 0340 	movw	r3, #32832	; 0x8040
 800ad8c:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 800ad90:	2300      	movs	r3, #0
 800ad92:	607b      	str	r3, [r7, #4]
 800ad94:	e055      	b.n	800ae42 <ETH_IRQHandler+0xda>
      if (s_rxdesc[s_rxno][3] & BIT(31)) break;  // exit when done
 800ad96:	4b37      	ldr	r3, [pc, #220]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	4a37      	ldr	r2, [pc, #220]	; (800ae78 <ETH_IRQHandler+0x110>)
 800ad9c:	011b      	lsls	r3, r3, #4
 800ad9e:	4413      	add	r3, r2
 800ada0:	330c      	adds	r3, #12
 800ada2:	681b      	ldr	r3, [r3, #0]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	db50      	blt.n	800ae4a <ETH_IRQHandler+0xe2>
      if (((s_rxdesc[s_rxno][3] & (BIT(28) | BIT(29))) ==
 800ada8:	4b32      	ldr	r3, [pc, #200]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800adaa:	681b      	ldr	r3, [r3, #0]
 800adac:	4a32      	ldr	r2, [pc, #200]	; (800ae78 <ETH_IRQHandler+0x110>)
 800adae:	011b      	lsls	r3, r3, #4
 800adb0:	4413      	add	r3, r2
 800adb2:	330c      	adds	r3, #12
 800adb4:	681b      	ldr	r3, [r3, #0]
 800adb6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800adba:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800adbe:	d128      	bne.n	800ae12 <ETH_IRQHandler+0xaa>
           (BIT(28) | BIT(29))) &&
          !(s_rxdesc[s_rxno][3] & BIT(15))) {  // skip partial/errored frames
 800adc0:	4b2c      	ldr	r3, [pc, #176]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800adc2:	681b      	ldr	r3, [r3, #0]
 800adc4:	4a2c      	ldr	r2, [pc, #176]	; (800ae78 <ETH_IRQHandler+0x110>)
 800adc6:	011b      	lsls	r3, r3, #4
 800adc8:	4413      	add	r3, r2
 800adca:	330c      	adds	r3, #12
 800adcc:	681b      	ldr	r3, [r3, #0]
 800adce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
           (BIT(28) | BIT(29))) &&
 800add2:	2b00      	cmp	r3, #0
 800add4:	d11d      	bne.n	800ae12 <ETH_IRQHandler+0xaa>
        uint32_t len = s_rxdesc[s_rxno][3] & (BIT(15) - 1);
 800add6:	4b27      	ldr	r3, [pc, #156]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a27      	ldr	r2, [pc, #156]	; (800ae78 <ETH_IRQHandler+0x110>)
 800addc:	011b      	lsls	r3, r3, #4
 800adde:	4413      	add	r3, r2
 800ade0:	330c      	adds	r3, #12
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800ade8:	603b      	str	r3, [r7, #0]
        // MG_DEBUG(("%lx %lu %lx %08lx", s_rxno, len, s_rxdesc[s_rxno][3],
        // ETH->DMACSR));
        mg_tcpip_qwrite(s_rxbuf[s_rxno], len > 4 ? len - 4 : len, s_ifp);
 800adea:	4b22      	ldr	r3, [pc, #136]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800adec:	681b      	ldr	r3, [r3, #0]
 800adee:	f240 6204 	movw	r2, #1540	; 0x604
 800adf2:	fb02 f303 	mul.w	r3, r2, r3
 800adf6:	4a21      	ldr	r2, [pc, #132]	; (800ae7c <ETH_IRQHandler+0x114>)
 800adf8:	1898      	adds	r0, r3, r2
 800adfa:	683b      	ldr	r3, [r7, #0]
 800adfc:	2b04      	cmp	r3, #4
 800adfe:	d902      	bls.n	800ae06 <ETH_IRQHandler+0x9e>
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	3b04      	subs	r3, #4
 800ae04:	e000      	b.n	800ae08 <ETH_IRQHandler+0xa0>
 800ae06:	683b      	ldr	r3, [r7, #0]
 800ae08:	4a1d      	ldr	r2, [pc, #116]	; (800ae80 <ETH_IRQHandler+0x118>)
 800ae0a:	6812      	ldr	r2, [r2, #0]
 800ae0c:	4619      	mov	r1, r3
 800ae0e:	f002 fa5d 	bl	800d2cc <mg_tcpip_qwrite>
      }
      s_rxdesc[s_rxno][3] = BIT(31) | BIT(30) | BIT(24);  // OWN, IOC, BUF1V
 800ae12:	4b18      	ldr	r3, [pc, #96]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4a18      	ldr	r2, [pc, #96]	; (800ae78 <ETH_IRQHandler+0x110>)
 800ae18:	011b      	lsls	r3, r3, #4
 800ae1a:	4413      	add	r3, r2
 800ae1c:	330c      	adds	r3, #12
 800ae1e:	f04f 4241 	mov.w	r2, #3238002688	; 0xc1000000
 800ae22:	601a      	str	r2, [r3, #0]
      if (++s_rxno >= ETH_DESC_CNT) s_rxno = 0;
 800ae24:	4b13      	ldr	r3, [pc, #76]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800ae26:	681b      	ldr	r3, [r3, #0]
 800ae28:	3301      	adds	r3, #1
 800ae2a:	4a12      	ldr	r2, [pc, #72]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800ae2c:	6013      	str	r3, [r2, #0]
 800ae2e:	4b11      	ldr	r3, [pc, #68]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	2b03      	cmp	r3, #3
 800ae34:	d902      	bls.n	800ae3c <ETH_IRQHandler+0xd4>
 800ae36:	4b0f      	ldr	r3, [pc, #60]	; (800ae74 <ETH_IRQHandler+0x10c>)
 800ae38:	2200      	movs	r2, #0
 800ae3a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < 10; i++) {  // read as they arrive but not forever
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3301      	adds	r3, #1
 800ae40:	607b      	str	r3, [r7, #4]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	2b09      	cmp	r3, #9
 800ae46:	d9a6      	bls.n	800ad96 <ETH_IRQHandler+0x2e>
 800ae48:	e000      	b.n	800ae4c <ETH_IRQHandler+0xe4>
      if (s_rxdesc[s_rxno][3] & BIT(31)) break;  // exit when done
 800ae4a:	bf00      	nop
    }
  }
  ETH->DMACSR = BIT(7) | BIT(8);  // Clear possible RBU RPS while processing
 800ae4c:	4b08      	ldr	r3, [pc, #32]	; (800ae70 <ETH_IRQHandler+0x108>)
 800ae4e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800ae52:	461a      	mov	r2, r3
 800ae54:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800ae58:	f8c2 3160 	str.w	r3, [r2, #352]	; 0x160
  ETH->DMACRDTPR =
 800ae5c:	4a04      	ldr	r2, [pc, #16]	; (800ae70 <ETH_IRQHandler+0x108>)
      (uint32_t) (uintptr_t) &s_rxdesc[ETH_DESC_CNT - 1];  // and resume RX
 800ae5e:	4b09      	ldr	r3, [pc, #36]	; (800ae84 <ETH_IRQHandler+0x11c>)
  ETH->DMACRDTPR =
 800ae60:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800ae64:	f8c2 3128 	str.w	r3, [r2, #296]	; 0x128
}
 800ae68:	bf00      	nop
 800ae6a:	3708      	adds	r7, #8
 800ae6c:	46bd      	mov	sp, r7
 800ae6e:	bd80      	pop	{r7, pc}
 800ae70:	40028000 	.word	0x40028000
 800ae74:	2400363c 	.word	0x2400363c
 800ae78:	24000594 	.word	0x24000594
 800ae7c:	24000614 	.word	0x24000614
 800ae80:	24003634 	.word	0x24003634
 800ae84:	240005c4 	.word	0x240005c4

0800ae88 <mkpay>:
  struct tcp *tcp;
  struct udp *udp;
  struct dhcp *dhcp;
};

static void mkpay(struct pkt *pkt, void *p) {
 800ae88:	b590      	push	{r4, r7, lr}
 800ae8a:	b085      	sub	sp, #20
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	60f8      	str	r0, [r7, #12]
 800ae90:	60b9      	str	r1, [r7, #8]
  pkt->pay =
      mg_str_n((char *) p, (size_t) (&pkt->raw.ptr[pkt->raw.len] - (char *) p));
 800ae92:	68fb      	ldr	r3, [r7, #12]
 800ae94:	681a      	ldr	r2, [r3, #0]
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	685b      	ldr	r3, [r3, #4]
 800ae9a:	441a      	add	r2, r3
 800ae9c:	68bb      	ldr	r3, [r7, #8]
 800ae9e:	1ad3      	subs	r3, r2, r3
 800aea0:	461a      	mov	r2, r3
 800aea2:	68fc      	ldr	r4, [r7, #12]
 800aea4:	463b      	mov	r3, r7
 800aea6:	68b9      	ldr	r1, [r7, #8]
 800aea8:	4618      	mov	r0, r3
 800aeaa:	f7fe fc9e 	bl	80097ea <mg_str_n>
 800aeae:	f104 0308 	add.w	r3, r4, #8
 800aeb2:	463a      	mov	r2, r7
 800aeb4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800aeb8:	e883 0003 	stmia.w	r3, {r0, r1}
}
 800aebc:	bf00      	nop
 800aebe:	3714      	adds	r7, #20
 800aec0:	46bd      	mov	sp, r7
 800aec2:	bd90      	pop	{r4, r7, pc}

0800aec4 <csumup>:

static uint32_t csumup(uint32_t sum, const void *buf, size_t len) {
 800aec4:	b480      	push	{r7}
 800aec6:	b087      	sub	sp, #28
 800aec8:	af00      	add	r7, sp, #0
 800aeca:	60f8      	str	r0, [r7, #12]
 800aecc:	60b9      	str	r1, [r7, #8]
 800aece:	607a      	str	r2, [r7, #4]
  const uint8_t *p = (const uint8_t *) buf;
 800aed0:	68bb      	ldr	r3, [r7, #8]
 800aed2:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < len; i++) sum += i & 1 ? p[i] : (uint32_t) (p[i] << 8);
 800aed4:	2300      	movs	r3, #0
 800aed6:	617b      	str	r3, [r7, #20]
 800aed8:	e016      	b.n	800af08 <csumup+0x44>
 800aeda:	697b      	ldr	r3, [r7, #20]
 800aedc:	f003 0301 	and.w	r3, r3, #1
 800aee0:	2b00      	cmp	r3, #0
 800aee2:	d005      	beq.n	800aef0 <csumup+0x2c>
 800aee4:	693a      	ldr	r2, [r7, #16]
 800aee6:	697b      	ldr	r3, [r7, #20]
 800aee8:	4413      	add	r3, r2
 800aeea:	781b      	ldrb	r3, [r3, #0]
 800aeec:	461a      	mov	r2, r3
 800aeee:	e005      	b.n	800aefc <csumup+0x38>
 800aef0:	693a      	ldr	r2, [r7, #16]
 800aef2:	697b      	ldr	r3, [r7, #20]
 800aef4:	4413      	add	r3, r2
 800aef6:	781b      	ldrb	r3, [r3, #0]
 800aef8:	021b      	lsls	r3, r3, #8
 800aefa:	461a      	mov	r2, r3
 800aefc:	68fb      	ldr	r3, [r7, #12]
 800aefe:	4413      	add	r3, r2
 800af00:	60fb      	str	r3, [r7, #12]
 800af02:	697b      	ldr	r3, [r7, #20]
 800af04:	3301      	adds	r3, #1
 800af06:	617b      	str	r3, [r7, #20]
 800af08:	697a      	ldr	r2, [r7, #20]
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	429a      	cmp	r2, r3
 800af0e:	d3e4      	bcc.n	800aeda <csumup+0x16>
  return sum;
 800af10:	68fb      	ldr	r3, [r7, #12]
}
 800af12:	4618      	mov	r0, r3
 800af14:	371c      	adds	r7, #28
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr

0800af1e <csumfin>:

static uint16_t csumfin(uint32_t sum) {
 800af1e:	b580      	push	{r7, lr}
 800af20:	b082      	sub	sp, #8
 800af22:	af00      	add	r7, sp, #0
 800af24:	6078      	str	r0, [r7, #4]
  while (sum >> 16) sum = (sum & 0xffff) + (sum >> 16);
 800af26:	e005      	b.n	800af34 <csumfin+0x16>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	b29a      	uxth	r2, r3
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	0c1b      	lsrs	r3, r3, #16
 800af30:	4413      	add	r3, r2
 800af32:	607b      	str	r3, [r7, #4]
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	0c1b      	lsrs	r3, r3, #16
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d1f5      	bne.n	800af28 <csumfin+0xa>
  return mg_htons(~sum & 0xffff);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	b29b      	uxth	r3, r3
 800af40:	43db      	mvns	r3, r3
 800af42:	b29b      	uxth	r3, r3
 800af44:	4618      	mov	r0, r3
 800af46:	f7ff faba 	bl	800a4be <mg_ntohs>
 800af4a:	4603      	mov	r3, r0
}
 800af4c:	4618      	mov	r0, r3
 800af4e:	3708      	adds	r7, #8
 800af50:	46bd      	mov	sp, r7
 800af52:	bd80      	pop	{r7, pc}

0800af54 <ipcsum>:

static uint16_t ipcsum(const void *buf, size_t len) {
 800af54:	b580      	push	{r7, lr}
 800af56:	b084      	sub	sp, #16
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
 800af5c:	6039      	str	r1, [r7, #0]
  uint32_t sum = csumup(0, buf, len);
 800af5e:	683a      	ldr	r2, [r7, #0]
 800af60:	6879      	ldr	r1, [r7, #4]
 800af62:	2000      	movs	r0, #0
 800af64:	f7ff ffae 	bl	800aec4 <csumup>
 800af68:	60f8      	str	r0, [r7, #12]
  return csumfin(sum);
 800af6a:	68f8      	ldr	r0, [r7, #12]
 800af6c:	f7ff ffd7 	bl	800af1e <csumfin>
 800af70:	4603      	mov	r3, r0
}
 800af72:	4618      	mov	r0, r3
 800af74:	3710      	adds	r7, #16
 800af76:	46bd      	mov	sp, r7
 800af78:	bd80      	pop	{r7, pc}

0800af7a <ether_output>:

static size_t ether_output(struct mg_tcpip_if *ifp, size_t len) {
 800af7a:	b580      	push	{r7, lr}
 800af7c:	b084      	sub	sp, #16
 800af7e:	af00      	add	r7, sp, #0
 800af80:	6078      	str	r0, [r7, #4]
 800af82:	6039      	str	r1, [r7, #0]
  // size_t min = 64;  // Pad short frames to 64 bytes (minimum Ethernet size)
  // if (len < min) memset(ifp->tx.ptr + len, 0, min - len), len = min;
  // mg_hexdump(ifp->tx.ptr, len);
  size_t n = ifp->driver->tx(ifp->tx.ptr, len, ifp);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6a1b      	ldr	r3, [r3, #32]
 800af88:	685b      	ldr	r3, [r3, #4]
 800af8a:	687a      	ldr	r2, [r7, #4]
 800af8c:	6950      	ldr	r0, [r2, #20]
 800af8e:	687a      	ldr	r2, [r7, #4]
 800af90:	6839      	ldr	r1, [r7, #0]
 800af92:	4798      	blx	r3
 800af94:	60f8      	str	r0, [r7, #12]
  if (n == len) ifp->nsent++;
 800af96:	68fa      	ldr	r2, [r7, #12]
 800af98:	683b      	ldr	r3, [r7, #0]
 800af9a:	429a      	cmp	r2, r3
 800af9c:	d104      	bne.n	800afa8 <ether_output+0x2e>
 800af9e:	687b      	ldr	r3, [r7, #4]
 800afa0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	66da      	str	r2, [r3, #108]	; 0x6c
  return n;
 800afa8:	68fb      	ldr	r3, [r7, #12]
}
 800afaa:	4618      	mov	r0, r3
 800afac:	3710      	adds	r7, #16
 800afae:	46bd      	mov	sp, r7
 800afb0:	bd80      	pop	{r7, pc}

0800afb2 <arp_ask>:

static void arp_ask(struct mg_tcpip_if *ifp, uint32_t ip) {
 800afb2:	b580      	push	{r7, lr}
 800afb4:	b084      	sub	sp, #16
 800afb6:	af00      	add	r7, sp, #0
 800afb8:	6078      	str	r0, [r7, #4]
 800afba:	6039      	str	r1, [r7, #0]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 800afbc:	687b      	ldr	r3, [r7, #4]
 800afbe:	695b      	ldr	r3, [r3, #20]
 800afc0:	60fb      	str	r3, [r7, #12]
  struct arp *arp = (struct arp *) (eth + 1);
 800afc2:	68fb      	ldr	r3, [r7, #12]
 800afc4:	330e      	adds	r3, #14
 800afc6:	60bb      	str	r3, [r7, #8]
  memset(eth->dst, 255, sizeof(eth->dst));
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	2206      	movs	r2, #6
 800afcc:	21ff      	movs	r1, #255	; 0xff
 800afce:	4618      	mov	r0, r3
 800afd0:	f009 fbb0 	bl	8014734 <memset>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800afd4:	68fb      	ldr	r3, [r7, #12]
 800afd6:	3306      	adds	r3, #6
 800afd8:	6879      	ldr	r1, [r7, #4]
 800afda:	2206      	movs	r2, #6
 800afdc:	4618      	mov	r0, r3
 800afde:	f009 fc91 	bl	8014904 <memcpy>
  eth->type = mg_htons(0x806);
 800afe2:	f640 0006 	movw	r0, #2054	; 0x806
 800afe6:	f7ff fa6a 	bl	800a4be <mg_ntohs>
 800afea:	4603      	mov	r3, r0
 800afec:	461a      	mov	r2, r3
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	819a      	strh	r2, [r3, #12]
  memset(arp, 0, sizeof(*arp));
 800aff2:	221c      	movs	r2, #28
 800aff4:	2100      	movs	r1, #0
 800aff6:	68b8      	ldr	r0, [r7, #8]
 800aff8:	f009 fb9c 	bl	8014734 <memset>
  arp->fmt = mg_htons(1), arp->pro = mg_htons(0x800), arp->hlen = 6,
 800affc:	2001      	movs	r0, #1
 800affe:	f7ff fa5e 	bl	800a4be <mg_ntohs>
 800b002:	4603      	mov	r3, r0
 800b004:	461a      	mov	r2, r3
 800b006:	68bb      	ldr	r3, [r7, #8]
 800b008:	801a      	strh	r2, [r3, #0]
 800b00a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b00e:	f7ff fa56 	bl	800a4be <mg_ntohs>
 800b012:	4603      	mov	r3, r0
 800b014:	461a      	mov	r2, r3
 800b016:	68bb      	ldr	r3, [r7, #8]
 800b018:	805a      	strh	r2, [r3, #2]
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2206      	movs	r2, #6
 800b01e:	711a      	strb	r2, [r3, #4]
  arp->plen = 4;
 800b020:	68bb      	ldr	r3, [r7, #8]
 800b022:	2204      	movs	r2, #4
 800b024:	715a      	strb	r2, [r3, #5]
  arp->op = mg_htons(1), arp->tpa = ip, arp->spa = ifp->ip;
 800b026:	2001      	movs	r0, #1
 800b028:	f7ff fa49 	bl	800a4be <mg_ntohs>
 800b02c:	4603      	mov	r3, r0
 800b02e:	461a      	mov	r2, r3
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	80da      	strh	r2, [r3, #6]
 800b034:	68bb      	ldr	r3, [r7, #8]
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	619a      	str	r2, [r3, #24]
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	689a      	ldr	r2, [r3, #8]
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	f8c3 200e 	str.w	r2, [r3, #14]
  memcpy(arp->sha, ifp->mac, sizeof(arp->sha));
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	3308      	adds	r3, #8
 800b048:	6879      	ldr	r1, [r7, #4]
 800b04a:	2206      	movs	r2, #6
 800b04c:	4618      	mov	r0, r3
 800b04e:	f009 fc59 	bl	8014904 <memcpy>
  ether_output(ifp, PDIFF(eth, arp + 1));
 800b052:	68bb      	ldr	r3, [r7, #8]
 800b054:	f103 021c 	add.w	r2, r3, #28
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	1ad3      	subs	r3, r2, r3
 800b05c:	4619      	mov	r1, r3
 800b05e:	6878      	ldr	r0, [r7, #4]
 800b060:	f7ff ff8b 	bl	800af7a <ether_output>
}
 800b064:	bf00      	nop
 800b066:	3710      	adds	r7, #16
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd80      	pop	{r7, pc}

0800b06c <onstatechange>:

static void onstatechange(struct mg_tcpip_if *ifp) {
 800b06c:	b580      	push	{r7, lr}
 800b06e:	b082      	sub	sp, #8
 800b070:	af00      	add	r7, sp, #0
 800b072:	6078      	str	r0, [r7, #4]
  if (ifp->state == MG_TCPIP_STATE_READY) {
 800b074:	687b      	ldr	r3, [r7, #4]
 800b076:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b07a:	2b03      	cmp	r3, #3
 800b07c:	d138      	bne.n	800b0f0 <onstatechange+0x84>
    MG_INFO(("READY, IP: %M", mg_print_ip4, &ifp->ip));
 800b07e:	4b35      	ldr	r3, [pc, #212]	; (800b154 <onstatechange+0xe8>)
 800b080:	f641 6224 	movw	r2, #7716	; 0x1e24
 800b084:	4934      	ldr	r1, [pc, #208]	; (800b158 <onstatechange+0xec>)
 800b086:	2002      	movs	r0, #2
 800b088:	f7fb ffc4 	bl	8007014 <mg_log_prefix>
 800b08c:	4603      	mov	r3, r0
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d006      	beq.n	800b0a0 <onstatechange+0x34>
 800b092:	687b      	ldr	r3, [r7, #4]
 800b094:	3308      	adds	r3, #8
 800b096:	461a      	mov	r2, r3
 800b098:	4930      	ldr	r1, [pc, #192]	; (800b15c <onstatechange+0xf0>)
 800b09a:	4831      	ldr	r0, [pc, #196]	; (800b160 <onstatechange+0xf4>)
 800b09c:	f7fc f814 	bl	80070c8 <mg_log>
    MG_INFO(("       GW: %M", mg_print_ip4, &ifp->gw));
 800b0a0:	4b2c      	ldr	r3, [pc, #176]	; (800b154 <onstatechange+0xe8>)
 800b0a2:	f641 6225 	movw	r2, #7717	; 0x1e25
 800b0a6:	492c      	ldr	r1, [pc, #176]	; (800b158 <onstatechange+0xec>)
 800b0a8:	2002      	movs	r0, #2
 800b0aa:	f7fb ffb3 	bl	8007014 <mg_log_prefix>
 800b0ae:	4603      	mov	r3, r0
 800b0b0:	2b00      	cmp	r3, #0
 800b0b2:	d006      	beq.n	800b0c2 <onstatechange+0x56>
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	3310      	adds	r3, #16
 800b0b8:	461a      	mov	r2, r3
 800b0ba:	4928      	ldr	r1, [pc, #160]	; (800b15c <onstatechange+0xf0>)
 800b0bc:	4829      	ldr	r0, [pc, #164]	; (800b164 <onstatechange+0xf8>)
 800b0be:	f7fc f803 	bl	80070c8 <mg_log>
    MG_INFO(("      MAC: %M", mg_print_mac, &ifp->mac));
 800b0c2:	4b24      	ldr	r3, [pc, #144]	; (800b154 <onstatechange+0xe8>)
 800b0c4:	f641 6226 	movw	r2, #7718	; 0x1e26
 800b0c8:	4923      	ldr	r1, [pc, #140]	; (800b158 <onstatechange+0xec>)
 800b0ca:	2002      	movs	r0, #2
 800b0cc:	f7fb ffa2 	bl	8007014 <mg_log_prefix>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d005      	beq.n	800b0e2 <onstatechange+0x76>
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	461a      	mov	r2, r3
 800b0da:	4923      	ldr	r1, [pc, #140]	; (800b168 <onstatechange+0xfc>)
 800b0dc:	4823      	ldr	r0, [pc, #140]	; (800b16c <onstatechange+0x100>)
 800b0de:	f7fb fff3 	bl	80070c8 <mg_log>
    arp_ask(ifp, ifp->gw);
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	691b      	ldr	r3, [r3, #16]
 800b0e6:	4619      	mov	r1, r3
 800b0e8:	6878      	ldr	r0, [r7, #4]
 800b0ea:	f7ff ff62 	bl	800afb2 <arp_ask>
    MG_ERROR(("Link up"));
    srand((unsigned int) mg_millis());
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
    MG_ERROR(("Link down"));
  }
}
 800b0ee:	e02c      	b.n	800b14a <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_UP) {
 800b0f0:	687b      	ldr	r3, [r7, #4]
 800b0f2:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b0f6:	2b01      	cmp	r3, #1
 800b0f8:	d115      	bne.n	800b126 <onstatechange+0xba>
    MG_ERROR(("Link up"));
 800b0fa:	4b16      	ldr	r3, [pc, #88]	; (800b154 <onstatechange+0xe8>)
 800b0fc:	f641 6229 	movw	r2, #7721	; 0x1e29
 800b100:	4915      	ldr	r1, [pc, #84]	; (800b158 <onstatechange+0xec>)
 800b102:	2001      	movs	r0, #1
 800b104:	f7fb ff86 	bl	8007014 <mg_log_prefix>
 800b108:	4603      	mov	r3, r0
 800b10a:	2b00      	cmp	r3, #0
 800b10c:	d002      	beq.n	800b114 <onstatechange+0xa8>
 800b10e:	4818      	ldr	r0, [pc, #96]	; (800b170 <onstatechange+0x104>)
 800b110:	f7fb ffda 	bl	80070c8 <mg_log>
    srand((unsigned int) mg_millis());
 800b114:	f7f5 fd88 	bl	8000c28 <mg_millis>
 800b118:	4602      	mov	r2, r0
 800b11a:	460b      	mov	r3, r1
 800b11c:	4613      	mov	r3, r2
 800b11e:	4618      	mov	r0, r3
 800b120:	f008 ffe8 	bl	80140f4 <srand>
}
 800b124:	e011      	b.n	800b14a <onstatechange+0xde>
  } else if (ifp->state == MG_TCPIP_STATE_DOWN) {
 800b126:	687b      	ldr	r3, [r7, #4]
 800b128:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d10c      	bne.n	800b14a <onstatechange+0xde>
    MG_ERROR(("Link down"));
 800b130:	4b08      	ldr	r3, [pc, #32]	; (800b154 <onstatechange+0xe8>)
 800b132:	f641 622c 	movw	r2, #7724	; 0x1e2c
 800b136:	4908      	ldr	r1, [pc, #32]	; (800b158 <onstatechange+0xec>)
 800b138:	2001      	movs	r0, #1
 800b13a:	f7fb ff6b 	bl	8007014 <mg_log_prefix>
 800b13e:	4603      	mov	r3, r0
 800b140:	2b00      	cmp	r3, #0
 800b142:	d002      	beq.n	800b14a <onstatechange+0xde>
 800b144:	480b      	ldr	r0, [pc, #44]	; (800b174 <onstatechange+0x108>)
 800b146:	f7fb ffbf 	bl	80070c8 <mg_log>
}
 800b14a:	bf00      	nop
 800b14c:	3708      	adds	r7, #8
 800b14e:	46bd      	mov	sp, r7
 800b150:	bd80      	pop	{r7, pc}
 800b152:	bf00      	nop
 800b154:	0801754c 	.word	0x0801754c
 800b158:	0801544c 	.word	0x0801544c
 800b15c:	08008d51 	.word	0x08008d51
 800b160:	080167b8 	.word	0x080167b8
 800b164:	080167c8 	.word	0x080167c8
 800b168:	08008e15 	.word	0x08008e15
 800b16c:	080167d8 	.word	0x080167d8
 800b170:	080167e8 	.word	0x080167e8
 800b174:	080167f0 	.word	0x080167f0

0800b178 <tx_ip>:

static struct ip *tx_ip(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                        uint8_t proto, uint32_t ip_src, uint32_t ip_dst,
                        size_t plen) {
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	60f8      	str	r0, [r7, #12]
 800b180:	60b9      	str	r1, [r7, #8]
 800b182:	603b      	str	r3, [r7, #0]
 800b184:	4613      	mov	r3, r2
 800b186:	71fb      	strb	r3, [r7, #7]
  struct eth *eth = (struct eth *) ifp->tx.ptr;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	695b      	ldr	r3, [r3, #20]
 800b18c:	617b      	str	r3, [r7, #20]
  struct ip *ip = (struct ip *) (eth + 1);
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	330e      	adds	r3, #14
 800b192:	613b      	str	r3, [r7, #16]
  memcpy(eth->dst, mac_dst, sizeof(eth->dst));
 800b194:	697b      	ldr	r3, [r7, #20]
 800b196:	2206      	movs	r2, #6
 800b198:	68b9      	ldr	r1, [r7, #8]
 800b19a:	4618      	mov	r0, r3
 800b19c:	f009 fbb2 	bl	8014904 <memcpy>
  memcpy(eth->src, ifp->mac, sizeof(eth->src));  // Use our MAC
 800b1a0:	697b      	ldr	r3, [r7, #20]
 800b1a2:	3306      	adds	r3, #6
 800b1a4:	68f9      	ldr	r1, [r7, #12]
 800b1a6:	2206      	movs	r2, #6
 800b1a8:	4618      	mov	r0, r3
 800b1aa:	f009 fbab 	bl	8014904 <memcpy>
  eth->type = mg_htons(0x800);
 800b1ae:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800b1b2:	f7ff f984 	bl	800a4be <mg_ntohs>
 800b1b6:	4603      	mov	r3, r0
 800b1b8:	461a      	mov	r2, r3
 800b1ba:	697b      	ldr	r3, [r7, #20]
 800b1bc:	819a      	strh	r2, [r3, #12]
  memset(ip, 0, sizeof(*ip));
 800b1be:	2214      	movs	r2, #20
 800b1c0:	2100      	movs	r1, #0
 800b1c2:	6938      	ldr	r0, [r7, #16]
 800b1c4:	f009 fab6 	bl	8014734 <memset>
  ip->ver = 0x45;   // Version 4, header length 5 words
 800b1c8:	693b      	ldr	r3, [r7, #16]
 800b1ca:	2245      	movs	r2, #69	; 0x45
 800b1cc:	701a      	strb	r2, [r3, #0]
  ip->frag = 0x40;  // Don't fragment
 800b1ce:	693b      	ldr	r3, [r7, #16]
 800b1d0:	2200      	movs	r2, #0
 800b1d2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1d6:	719a      	strb	r2, [r3, #6]
 800b1d8:	2200      	movs	r2, #0
 800b1da:	71da      	strb	r2, [r3, #7]
  ip->len = mg_htons((uint16_t) (sizeof(*ip) + plen));
 800b1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1de:	b29b      	uxth	r3, r3
 800b1e0:	3314      	adds	r3, #20
 800b1e2:	b29b      	uxth	r3, r3
 800b1e4:	4618      	mov	r0, r3
 800b1e6:	f7ff f96a 	bl	800a4be <mg_ntohs>
 800b1ea:	4603      	mov	r3, r0
 800b1ec:	461a      	mov	r2, r3
 800b1ee:	693b      	ldr	r3, [r7, #16]
 800b1f0:	805a      	strh	r2, [r3, #2]
  ip->ttl = 64;
 800b1f2:	693b      	ldr	r3, [r7, #16]
 800b1f4:	2240      	movs	r2, #64	; 0x40
 800b1f6:	721a      	strb	r2, [r3, #8]
  ip->proto = proto;
 800b1f8:	693b      	ldr	r3, [r7, #16]
 800b1fa:	79fa      	ldrb	r2, [r7, #7]
 800b1fc:	725a      	strb	r2, [r3, #9]
  ip->src = ip_src;
 800b1fe:	693b      	ldr	r3, [r7, #16]
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	60da      	str	r2, [r3, #12]
  ip->dst = ip_dst;
 800b204:	693b      	ldr	r3, [r7, #16]
 800b206:	6a3a      	ldr	r2, [r7, #32]
 800b208:	611a      	str	r2, [r3, #16]
  ip->csum = ipcsum(ip, sizeof(*ip));
 800b20a:	2114      	movs	r1, #20
 800b20c:	6938      	ldr	r0, [r7, #16]
 800b20e:	f7ff fea1 	bl	800af54 <ipcsum>
 800b212:	4603      	mov	r3, r0
 800b214:	461a      	mov	r2, r3
 800b216:	693b      	ldr	r3, [r7, #16]
 800b218:	815a      	strh	r2, [r3, #10]
  return ip;
 800b21a:	693b      	ldr	r3, [r7, #16]
}
 800b21c:	4618      	mov	r0, r3
 800b21e:	3718      	adds	r7, #24
 800b220:	46bd      	mov	sp, r7
 800b222:	bd80      	pop	{r7, pc}

0800b224 <tx_udp>:

static void tx_udp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                   uint16_t sport, uint32_t ip_dst, uint16_t dport,
                   const void *buf, size_t len) {
 800b224:	b580      	push	{r7, lr}
 800b226:	b08a      	sub	sp, #40	; 0x28
 800b228:	af02      	add	r7, sp, #8
 800b22a:	60f8      	str	r0, [r7, #12]
 800b22c:	60b9      	str	r1, [r7, #8]
 800b22e:	607a      	str	r2, [r7, #4]
 800b230:	807b      	strh	r3, [r7, #2]
  struct ip *ip =
      tx_ip(ifp, mac_dst, 17, ip_src, ip_dst, len + sizeof(struct udp));
 800b232:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b234:	3308      	adds	r3, #8
 800b236:	9301      	str	r3, [sp, #4]
 800b238:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b23a:	9300      	str	r3, [sp, #0]
 800b23c:	687b      	ldr	r3, [r7, #4]
 800b23e:	2211      	movs	r2, #17
 800b240:	68b9      	ldr	r1, [r7, #8]
 800b242:	68f8      	ldr	r0, [r7, #12]
 800b244:	f7ff ff98 	bl	800b178 <tx_ip>
 800b248:	61f8      	str	r0, [r7, #28]
  struct udp *udp = (struct udp *) (ip + 1);
 800b24a:	69fb      	ldr	r3, [r7, #28]
 800b24c:	3314      	adds	r3, #20
 800b24e:	61bb      	str	r3, [r7, #24]
  // MG_DEBUG(("UDP XX LEN %d %d", (int) len, (int) ifp->tx.len));
  udp->sport = sport;
 800b250:	69bb      	ldr	r3, [r7, #24]
 800b252:	887a      	ldrh	r2, [r7, #2]
 800b254:	801a      	strh	r2, [r3, #0]
  udp->dport = dport;
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 800b25a:	805a      	strh	r2, [r3, #2]
  udp->len = mg_htons((uint16_t) (sizeof(*udp) + len));
 800b25c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b25e:	b29b      	uxth	r3, r3
 800b260:	3308      	adds	r3, #8
 800b262:	b29b      	uxth	r3, r3
 800b264:	4618      	mov	r0, r3
 800b266:	f7ff f92a 	bl	800a4be <mg_ntohs>
 800b26a:	4603      	mov	r3, r0
 800b26c:	461a      	mov	r2, r3
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	809a      	strh	r2, [r3, #4]
  udp->csum = 0;
 800b272:	69bb      	ldr	r3, [r7, #24]
 800b274:	2200      	movs	r2, #0
 800b276:	719a      	strb	r2, [r3, #6]
 800b278:	2200      	movs	r2, #0
 800b27a:	71da      	strb	r2, [r3, #7]
  uint32_t cs = csumup(0, udp, sizeof(*udp));
 800b27c:	2208      	movs	r2, #8
 800b27e:	69b9      	ldr	r1, [r7, #24]
 800b280:	2000      	movs	r0, #0
 800b282:	f7ff fe1f 	bl	800aec4 <csumup>
 800b286:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, buf, len);
 800b288:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b28a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b28c:	6978      	ldr	r0, [r7, #20]
 800b28e:	f7ff fe19 	bl	800aec4 <csumup>
 800b292:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800b294:	69fb      	ldr	r3, [r7, #28]
 800b296:	330c      	adds	r3, #12
 800b298:	2204      	movs	r2, #4
 800b29a:	4619      	mov	r1, r3
 800b29c:	6978      	ldr	r0, [r7, #20]
 800b29e:	f7ff fe11 	bl	800aec4 <csumup>
 800b2a2:	6178      	str	r0, [r7, #20]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800b2a4:	69fb      	ldr	r3, [r7, #28]
 800b2a6:	3310      	adds	r3, #16
 800b2a8:	2204      	movs	r2, #4
 800b2aa:	4619      	mov	r1, r3
 800b2ac:	6978      	ldr	r0, [r7, #20]
 800b2ae:	f7ff fe09 	bl	800aec4 <csumup>
 800b2b2:	6178      	str	r0, [r7, #20]
  cs += (uint32_t) (ip->proto + sizeof(*udp) + len);
 800b2b4:	69fb      	ldr	r3, [r7, #28]
 800b2b6:	7a5b      	ldrb	r3, [r3, #9]
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2bc:	441a      	add	r2, r3
 800b2be:	697b      	ldr	r3, [r7, #20]
 800b2c0:	4413      	add	r3, r2
 800b2c2:	3308      	adds	r3, #8
 800b2c4:	617b      	str	r3, [r7, #20]
  udp->csum = csumfin(cs);
 800b2c6:	6978      	ldr	r0, [r7, #20]
 800b2c8:	f7ff fe29 	bl	800af1e <csumfin>
 800b2cc:	4603      	mov	r3, r0
 800b2ce:	461a      	mov	r2, r3
 800b2d0:	69bb      	ldr	r3, [r7, #24]
 800b2d2:	80da      	strh	r2, [r3, #6]
  memmove(udp + 1, buf, len);
 800b2d4:	69bb      	ldr	r3, [r7, #24]
 800b2d6:	3308      	adds	r3, #8
 800b2d8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2da:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800b2dc:	4618      	mov	r0, r3
 800b2de:	f009 fa0f 	bl	8014700 <memmove>
  // MG_DEBUG(("UDP LEN %d %d", (int) len, (int) ifp->frame_len));
  ether_output(ifp, sizeof(struct eth) + sizeof(*ip) + sizeof(*udp) + len);
 800b2e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2e4:	332a      	adds	r3, #42	; 0x2a
 800b2e6:	4619      	mov	r1, r3
 800b2e8:	68f8      	ldr	r0, [r7, #12]
 800b2ea:	f7ff fe46 	bl	800af7a <ether_output>
}
 800b2ee:	bf00      	nop
 800b2f0:	3720      	adds	r7, #32
 800b2f2:	46bd      	mov	sp, r7
 800b2f4:	bd80      	pop	{r7, pc}
	...

0800b2f8 <tx_dhcp>:

static void tx_dhcp(struct mg_tcpip_if *ifp, uint8_t *mac_dst, uint32_t ip_src,
                    uint32_t ip_dst, uint8_t *opts, size_t optslen,
                    bool ciaddr) {
 800b2f8:	b5b0      	push	{r4, r5, r7, lr}
 800b2fa:	b0cc      	sub	sp, #304	; 0x130
 800b2fc:	af04      	add	r7, sp, #16
 800b2fe:	f507 7490 	add.w	r4, r7, #288	; 0x120
 800b302:	f5a4 748a 	sub.w	r4, r4, #276	; 0x114
 800b306:	6020      	str	r0, [r4, #0]
 800b308:	f507 7090 	add.w	r0, r7, #288	; 0x120
 800b30c:	f5a0 708c 	sub.w	r0, r0, #280	; 0x118
 800b310:	6001      	str	r1, [r0, #0]
 800b312:	f507 7190 	add.w	r1, r7, #288	; 0x120
 800b316:	f5a1 718e 	sub.w	r1, r1, #284	; 0x11c
 800b31a:	600a      	str	r2, [r1, #0]
 800b31c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800b320:	f5a2 7290 	sub.w	r2, r2, #288	; 0x120
 800b324:	6013      	str	r3, [r2, #0]
  // https://datatracker.ietf.org/doc/html/rfc2132#section-9.6
  struct dhcp dhcp = {1, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800b326:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b32a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b32e:	4a38      	ldr	r2, [pc, #224]	; (800b410 <tx_dhcp+0x118>)
 800b330:	4618      	mov	r0, r3
 800b332:	4611      	mov	r1, r2
 800b334:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b338:	461a      	mov	r2, r3
 800b33a:	f009 fae3 	bl	8014904 <memcpy>
  dhcp.magic = mg_htonl(0x63825363);
 800b33e:	4835      	ldr	r0, [pc, #212]	; (800b414 <tx_dhcp+0x11c>)
 800b340:	f7ff f8a4 	bl	800a48c <mg_ntohl>
 800b344:	4602      	mov	r2, r0
 800b346:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b34a:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b34e:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
  memcpy(&dhcp.hwaddr, ifp->mac, sizeof(ifp->mac));
 800b352:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b356:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b35a:	6819      	ldr	r1, [r3, #0]
 800b35c:	f107 0310 	add.w	r3, r7, #16
 800b360:	331c      	adds	r3, #28
 800b362:	2206      	movs	r2, #6
 800b364:	4618      	mov	r0, r3
 800b366:	f009 facd 	bl	8014904 <memcpy>
  memcpy(&dhcp.xid, ifp->mac + 2, sizeof(dhcp.xid));
 800b36a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b36e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3302      	adds	r3, #2
 800b376:	681b      	ldr	r3, [r3, #0]
 800b378:	461a      	mov	r2, r3
 800b37a:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b37e:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b382:	605a      	str	r2, [r3, #4]
  memcpy(&dhcp.options, opts, optslen);
 800b384:	f107 0310 	add.w	r3, r7, #16
 800b388:	33f0      	adds	r3, #240	; 0xf0
 800b38a:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 800b38e:	f8d7 1130 	ldr.w	r1, [r7, #304]	; 0x130
 800b392:	4618      	mov	r0, r3
 800b394:	f009 fab6 	bl	8014904 <memcpy>
  if (ciaddr) dhcp.ciaddr = ip_src;
 800b398:	f897 3138 	ldrb.w	r3, [r7, #312]	; 0x138
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	d009      	beq.n	800b3b4 <tx_dhcp+0xbc>
 800b3a0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b3a4:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 800b3a8:	f507 7290 	add.w	r2, r7, #288	; 0x120
 800b3ac:	f5a2 728e 	sub.w	r2, r2, #284	; 0x11c
 800b3b0:	6812      	ldr	r2, [r2, #0]
 800b3b2:	60da      	str	r2, [r3, #12]
  tx_udp(ifp, mac_dst, ip_src, mg_htons(68), ip_dst, mg_htons(67), &dhcp,
 800b3b4:	2044      	movs	r0, #68	; 0x44
 800b3b6:	f7ff f882 	bl	800a4be <mg_ntohs>
 800b3ba:	4603      	mov	r3, r0
 800b3bc:	461d      	mov	r5, r3
 800b3be:	2043      	movs	r0, #67	; 0x43
 800b3c0:	f7ff f87d 	bl	800a4be <mg_ntohs>
 800b3c4:	4603      	mov	r3, r0
 800b3c6:	461c      	mov	r4, r3
 800b3c8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b3cc:	f5a3 728e 	sub.w	r2, r3, #284	; 0x11c
 800b3d0:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b3d4:	f5a3 718c 	sub.w	r1, r3, #280	; 0x118
 800b3d8:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b3dc:	f5a3 708a 	sub.w	r0, r3, #276	; 0x114
 800b3e0:	f44f 7388 	mov.w	r3, #272	; 0x110
 800b3e4:	9303      	str	r3, [sp, #12]
 800b3e6:	f107 0310 	add.w	r3, r7, #16
 800b3ea:	9302      	str	r3, [sp, #8]
 800b3ec:	9401      	str	r4, [sp, #4]
 800b3ee:	f507 7390 	add.w	r3, r7, #288	; 0x120
 800b3f2:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	9300      	str	r3, [sp, #0]
 800b3fa:	462b      	mov	r3, r5
 800b3fc:	6812      	ldr	r2, [r2, #0]
 800b3fe:	6809      	ldr	r1, [r1, #0]
 800b400:	6800      	ldr	r0, [r0, #0]
 800b402:	f7ff ff0f 	bl	800b224 <tx_udp>
         sizeof(dhcp));
}
 800b406:	bf00      	nop
 800b408:	f507 7790 	add.w	r7, r7, #288	; 0x120
 800b40c:	46bd      	mov	sp, r7
 800b40e:	bdb0      	pop	{r4, r5, r7, pc}
 800b410:	080167fc 	.word	0x080167fc
 800b414:	63825363 	.word	0x63825363

0800b418 <tx_dhcp_request_sel>:

static const uint8_t broadcast[] = {255, 255, 255, 255, 255, 255};

// RFC-2131 #4.3.6, #4.4.1
static void tx_dhcp_request_sel(struct mg_tcpip_if *ifp, uint32_t ip_req,
                                uint32_t ip_srv) {
 800b418:	b5b0      	push	{r4, r5, r7, lr}
 800b41a:	b090      	sub	sp, #64	; 0x40
 800b41c:	af04      	add	r7, sp, #16
 800b41e:	60f8      	str	r0, [r7, #12]
 800b420:	60b9      	str	r1, [r7, #8]
 800b422:	607a      	str	r2, [r7, #4]
  uint8_t opts[] = {
 800b424:	4b19      	ldr	r3, [pc, #100]	; (800b48c <tx_dhcp_request_sel+0x74>)
 800b426:	f107 0414 	add.w	r4, r7, #20
 800b42a:	461d      	mov	r5, r3
 800b42c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b42e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800b430:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800b434:	c403      	stmia	r4!, {r0, r1}
 800b436:	7022      	strb	r2, [r4, #0]
      12, 3, 'm', 'i', 'p',     // Host name: "mip"
      54, 4, 0,   0,   0,   0,  // DHCP server ID
      50, 4, 0,   0,   0,   0,  // Requested IP
      255                       // End of options
  };
  memcpy(opts + 14, &ip_srv, sizeof(ip_srv));
 800b438:	f107 0314 	add.w	r3, r7, #20
 800b43c:	330e      	adds	r3, #14
 800b43e:	687a      	ldr	r2, [r7, #4]
 800b440:	601a      	str	r2, [r3, #0]
  memcpy(opts + 20, &ip_req, sizeof(ip_req));
 800b442:	f107 0314 	add.w	r3, r7, #20
 800b446:	3314      	adds	r3, #20
 800b448:	68ba      	ldr	r2, [r7, #8]
 800b44a:	601a      	str	r2, [r3, #0]
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800b44c:	2300      	movs	r3, #0
 800b44e:	9302      	str	r3, [sp, #8]
 800b450:	2319      	movs	r3, #25
 800b452:	9301      	str	r3, [sp, #4]
 800b454:	f107 0314 	add.w	r3, r7, #20
 800b458:	9300      	str	r3, [sp, #0]
 800b45a:	f04f 33ff 	mov.w	r3, #4294967295
 800b45e:	2200      	movs	r2, #0
 800b460:	490b      	ldr	r1, [pc, #44]	; (800b490 <tx_dhcp_request_sel+0x78>)
 800b462:	68f8      	ldr	r0, [r7, #12]
 800b464:	f7ff ff48 	bl	800b2f8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800b468:	4b0a      	ldr	r3, [pc, #40]	; (800b494 <tx_dhcp_request_sel+0x7c>)
 800b46a:	f641 6278 	movw	r2, #7800	; 0x1e78
 800b46e:	490a      	ldr	r1, [pc, #40]	; (800b498 <tx_dhcp_request_sel+0x80>)
 800b470:	2003      	movs	r0, #3
 800b472:	f7fb fdcf 	bl	8007014 <mg_log_prefix>
 800b476:	4603      	mov	r3, r0
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d002      	beq.n	800b482 <tx_dhcp_request_sel+0x6a>
 800b47c:	4807      	ldr	r0, [pc, #28]	; (800b49c <tx_dhcp_request_sel+0x84>)
 800b47e:	f7fb fe23 	bl	80070c8 <mg_log>
}
 800b482:	bf00      	nop
 800b484:	3730      	adds	r7, #48	; 0x30
 800b486:	46bd      	mov	sp, r7
 800b488:	bdb0      	pop	{r4, r5, r7, pc}
 800b48a:	bf00      	nop
 800b48c:	0801691c 	.word	0x0801691c
 800b490:	080173b8 	.word	0x080173b8
 800b494:	0801755c 	.word	0x0801755c
 800b498:	0801544c 	.word	0x0801544c
 800b49c:	0801690c 	.word	0x0801690c

0800b4a0 <tx_dhcp_request_re>:

// RFC-2131 #4.3.6, #4.4.5 (renewing: unicast, rebinding: bcast)
static void tx_dhcp_request_re(struct mg_tcpip_if *ifp, uint8_t *mac_dst,
                               uint32_t ip_src, uint32_t ip_dst) {
 800b4a0:	b580      	push	{r7, lr}
 800b4a2:	b08a      	sub	sp, #40	; 0x28
 800b4a4:	af04      	add	r7, sp, #16
 800b4a6:	60f8      	str	r0, [r7, #12]
 800b4a8:	60b9      	str	r1, [r7, #8]
 800b4aa:	607a      	str	r2, [r7, #4]
 800b4ac:	603b      	str	r3, [r7, #0]
  uint8_t opts[] = {
 800b4ae:	4b10      	ldr	r3, [pc, #64]	; (800b4f0 <tx_dhcp_request_re+0x50>)
 800b4b0:	617b      	str	r3, [r7, #20]
      53, 1, 3,  // Type: DHCP request
      255        // End of options
  };
  tx_dhcp(ifp, mac_dst, ip_src, ip_dst, opts, sizeof(opts), true);
 800b4b2:	2301      	movs	r3, #1
 800b4b4:	9302      	str	r3, [sp, #8]
 800b4b6:	2304      	movs	r3, #4
 800b4b8:	9301      	str	r3, [sp, #4]
 800b4ba:	f107 0314 	add.w	r3, r7, #20
 800b4be:	9300      	str	r3, [sp, #0]
 800b4c0:	683b      	ldr	r3, [r7, #0]
 800b4c2:	687a      	ldr	r2, [r7, #4]
 800b4c4:	68b9      	ldr	r1, [r7, #8]
 800b4c6:	68f8      	ldr	r0, [r7, #12]
 800b4c8:	f7ff ff16 	bl	800b2f8 <tx_dhcp>
  MG_DEBUG(("DHCP req sent"));
 800b4cc:	4b09      	ldr	r3, [pc, #36]	; (800b4f4 <tx_dhcp_request_re+0x54>)
 800b4ce:	f641 6283 	movw	r2, #7811	; 0x1e83
 800b4d2:	4909      	ldr	r1, [pc, #36]	; (800b4f8 <tx_dhcp_request_re+0x58>)
 800b4d4:	2003      	movs	r0, #3
 800b4d6:	f7fb fd9d 	bl	8007014 <mg_log_prefix>
 800b4da:	4603      	mov	r3, r0
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d002      	beq.n	800b4e6 <tx_dhcp_request_re+0x46>
 800b4e0:	4806      	ldr	r0, [pc, #24]	; (800b4fc <tx_dhcp_request_re+0x5c>)
 800b4e2:	f7fb fdf1 	bl	80070c8 <mg_log>
}
 800b4e6:	bf00      	nop
 800b4e8:	3718      	adds	r7, #24
 800b4ea:	46bd      	mov	sp, r7
 800b4ec:	bd80      	pop	{r7, pc}
 800b4ee:	bf00      	nop
 800b4f0:	ff030135 	.word	0xff030135
 800b4f4:	08017570 	.word	0x08017570
 800b4f8:	0801544c 	.word	0x0801544c
 800b4fc:	0801690c 	.word	0x0801690c

0800b500 <tx_dhcp_discover>:

static void tx_dhcp_discover(struct mg_tcpip_if *ifp) {
 800b500:	b580      	push	{r7, lr}
 800b502:	b088      	sub	sp, #32
 800b504:	af04      	add	r7, sp, #16
 800b506:	6078      	str	r0, [r7, #4]
  uint8_t opts[] = {
 800b508:	4a14      	ldr	r2, [pc, #80]	; (800b55c <tx_dhcp_discover+0x5c>)
 800b50a:	f107 0308 	add.w	r3, r7, #8
 800b50e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800b512:	e883 0003 	stmia.w	r3, {r0, r1}
      53, 1, 1,     // Type: DHCP discover
      55, 2, 1, 3,  // Parameters: ip, mask
      255           // End of options
  };
  tx_dhcp(ifp, (uint8_t *) broadcast, 0, 0xffffffff, opts, sizeof(opts), false);
 800b516:	2300      	movs	r3, #0
 800b518:	9302      	str	r3, [sp, #8]
 800b51a:	2308      	movs	r3, #8
 800b51c:	9301      	str	r3, [sp, #4]
 800b51e:	f107 0308 	add.w	r3, r7, #8
 800b522:	9300      	str	r3, [sp, #0]
 800b524:	f04f 33ff 	mov.w	r3, #4294967295
 800b528:	2200      	movs	r2, #0
 800b52a:	490d      	ldr	r1, [pc, #52]	; (800b560 <tx_dhcp_discover+0x60>)
 800b52c:	6878      	ldr	r0, [r7, #4]
 800b52e:	f7ff fee3 	bl	800b2f8 <tx_dhcp>
  MG_DEBUG(("DHCP discover sent. Our MAC: %M", mg_print_mac, ifp->mac));
 800b532:	4b0c      	ldr	r3, [pc, #48]	; (800b564 <tx_dhcp_discover+0x64>)
 800b534:	f641 628d 	movw	r2, #7821	; 0x1e8d
 800b538:	490b      	ldr	r1, [pc, #44]	; (800b568 <tx_dhcp_discover+0x68>)
 800b53a:	2003      	movs	r0, #3
 800b53c:	f7fb fd6a 	bl	8007014 <mg_log_prefix>
 800b540:	4603      	mov	r3, r0
 800b542:	2b00      	cmp	r3, #0
 800b544:	d005      	beq.n	800b552 <tx_dhcp_discover+0x52>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	461a      	mov	r2, r3
 800b54a:	4908      	ldr	r1, [pc, #32]	; (800b56c <tx_dhcp_discover+0x6c>)
 800b54c:	4808      	ldr	r0, [pc, #32]	; (800b570 <tx_dhcp_discover+0x70>)
 800b54e:	f7fb fdbb 	bl	80070c8 <mg_log>
}
 800b552:	bf00      	nop
 800b554:	3710      	adds	r7, #16
 800b556:	46bd      	mov	sp, r7
 800b558:	bd80      	pop	{r7, pc}
 800b55a:	bf00      	nop
 800b55c:	08016958 	.word	0x08016958
 800b560:	080173b8 	.word	0x080173b8
 800b564:	08017584 	.word	0x08017584
 800b568:	0801544c 	.word	0x0801544c
 800b56c:	08008e15 	.word	0x08008e15
 800b570:	08016938 	.word	0x08016938

0800b574 <getpeer>:

static struct mg_connection *getpeer(struct mg_mgr *mgr, struct pkt *pkt,
                                     bool lsn) {
 800b574:	b480      	push	{r7}
 800b576:	b087      	sub	sp, #28
 800b578:	af00      	add	r7, sp, #0
 800b57a:	60f8      	str	r0, [r7, #12]
 800b57c:	60b9      	str	r1, [r7, #8]
 800b57e:	4613      	mov	r3, r2
 800b580:	71fb      	strb	r3, [r7, #7]
  struct mg_connection *c = NULL;
 800b582:	2300      	movs	r3, #0
 800b584:	617b      	str	r3, [r7, #20]
  for (c = mgr->conns; c != NULL; c = c->next) {
 800b586:	68fb      	ldr	r3, [r7, #12]
 800b588:	681b      	ldr	r3, [r3, #0]
 800b58a:	617b      	str	r3, [r7, #20]
 800b58c:	e03e      	b.n	800b60c <getpeer+0x98>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800b58e:	697b      	ldr	r3, [r7, #20]
 800b590:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b594:	f003 0301 	and.w	r3, r3, #1
 800b598:	b2db      	uxtb	r3, r3
 800b59a:	2b00      	cmp	r3, #0
 800b59c:	d00b      	beq.n	800b5b6 <getpeer+0x42>
 800b59e:	68bb      	ldr	r3, [r7, #8]
 800b5a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5a2:	2b00      	cmp	r3, #0
 800b5a4:	d007      	beq.n	800b5b6 <getpeer+0x42>
 800b5a6:	697b      	ldr	r3, [r7, #20]
 800b5a8:	8b1a      	ldrh	r2, [r3, #24]
 800b5aa:	68bb      	ldr	r3, [r7, #8]
 800b5ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b5ae:	885b      	ldrh	r3, [r3, #2]
 800b5b0:	b29b      	uxth	r3, r3
 800b5b2:	429a      	cmp	r2, r3
 800b5b4:	d02e      	beq.n	800b614 <getpeer+0xa0>
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800b5b6:	697b      	ldr	r3, [r7, #20]
 800b5b8:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800b5bc:	f003 0301 	and.w	r3, r3, #1
 800b5c0:	b2db      	uxtb	r3, r3
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d11f      	bne.n	800b606 <getpeer+0x92>
 800b5c6:	68bb      	ldr	r3, [r7, #8]
 800b5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5ca:	2b00      	cmp	r3, #0
 800b5cc:	d01b      	beq.n	800b606 <getpeer+0x92>
 800b5ce:	697b      	ldr	r3, [r7, #20]
 800b5d0:	8b1a      	ldrh	r2, [r3, #24]
 800b5d2:	68bb      	ldr	r3, [r7, #8]
 800b5d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5d6:	885b      	ldrh	r3, [r3, #2]
 800b5d8:	b29b      	uxth	r3, r3
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d113      	bne.n	800b606 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800b5de:	697b      	ldr	r3, [r7, #20]
 800b5e0:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b5e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800b5e8:	b2db      	uxtb	r3, r3
    if (!c->is_udp && pkt->tcp && c->loc.port == pkt->tcp->dport &&
 800b5ea:	79fa      	ldrb	r2, [r7, #7]
 800b5ec:	429a      	cmp	r2, r3
 800b5ee:	d10a      	bne.n	800b606 <getpeer+0x92>
        lsn == c->is_listening && (lsn || c->rem.port == pkt->tcp->sport))
 800b5f0:	79fb      	ldrb	r3, [r7, #7]
 800b5f2:	2b00      	cmp	r3, #0
 800b5f4:	d10f      	bne.n	800b616 <getpeer+0xa2>
 800b5f6:	697b      	ldr	r3, [r7, #20]
 800b5f8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800b5fa:	68bb      	ldr	r3, [r7, #8]
 800b5fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b5fe:	881b      	ldrh	r3, [r3, #0]
 800b600:	b29b      	uxth	r3, r3
 800b602:	429a      	cmp	r2, r3
 800b604:	d007      	beq.n	800b616 <getpeer+0xa2>
  for (c = mgr->conns; c != NULL; c = c->next) {
 800b606:	697b      	ldr	r3, [r7, #20]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	617b      	str	r3, [r7, #20]
 800b60c:	697b      	ldr	r3, [r7, #20]
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d1bd      	bne.n	800b58e <getpeer+0x1a>
 800b612:	e000      	b.n	800b616 <getpeer+0xa2>
    if (c->is_udp && pkt->udp && c->loc.port == pkt->udp->dport) break;
 800b614:	bf00      	nop
      break;
  }
  return c;
 800b616:	697b      	ldr	r3, [r7, #20]
}
 800b618:	4618      	mov	r0, r3
 800b61a:	371c      	adds	r7, #28
 800b61c:	46bd      	mov	sp, r7
 800b61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b622:	4770      	bx	lr

0800b624 <rx_arp>:

static void rx_arp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b624:	b5b0      	push	{r4, r5, r7, lr}
 800b626:	b088      	sub	sp, #32
 800b628:	af02      	add	r7, sp, #8
 800b62a:	6078      	str	r0, [r7, #4]
 800b62c:	6039      	str	r1, [r7, #0]
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800b62e:	683b      	ldr	r3, [r7, #0]
 800b630:	699b      	ldr	r3, [r3, #24]
 800b632:	88db      	ldrh	r3, [r3, #6]
 800b634:	b29c      	uxth	r4, r3
 800b636:	2001      	movs	r0, #1
 800b638:	f7fe ff41 	bl	800a4be <mg_ntohs>
 800b63c:	4603      	mov	r3, r0
 800b63e:	429c      	cmp	r4, r3
 800b640:	d176      	bne.n	800b730 <rx_arp+0x10c>
 800b642:	683b      	ldr	r3, [r7, #0]
 800b644:	699b      	ldr	r3, [r3, #24]
 800b646:	699a      	ldr	r2, [r3, #24]
 800b648:	687b      	ldr	r3, [r7, #4]
 800b64a:	689b      	ldr	r3, [r3, #8]
 800b64c:	429a      	cmp	r2, r3
 800b64e:	d16f      	bne.n	800b730 <rx_arp+0x10c>
    // ARP request. Make a response, then send
    // MG_DEBUG(("ARP op %d %M: %M", mg_ntohs(pkt->arp->op), mg_print_ip4,
    //          &pkt->arp->spa, mg_print_ip4, &pkt->arp->tpa));
    struct eth *eth = (struct eth *) ifp->tx.ptr;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	695b      	ldr	r3, [r3, #20]
 800b654:	617b      	str	r3, [r7, #20]
    struct arp *arp = (struct arp *) (eth + 1);
 800b656:	697b      	ldr	r3, [r7, #20]
 800b658:	330e      	adds	r3, #14
 800b65a:	613b      	str	r3, [r7, #16]
    memcpy(eth->dst, pkt->eth->src, sizeof(eth->dst));
 800b65c:	6978      	ldr	r0, [r7, #20]
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	691b      	ldr	r3, [r3, #16]
 800b662:	3306      	adds	r3, #6
 800b664:	2206      	movs	r2, #6
 800b666:	4619      	mov	r1, r3
 800b668:	f009 f94c 	bl	8014904 <memcpy>
    memcpy(eth->src, ifp->mac, sizeof(eth->src));
 800b66c:	697b      	ldr	r3, [r7, #20]
 800b66e:	3306      	adds	r3, #6
 800b670:	6879      	ldr	r1, [r7, #4]
 800b672:	2206      	movs	r2, #6
 800b674:	4618      	mov	r0, r3
 800b676:	f009 f945 	bl	8014904 <memcpy>
    eth->type = mg_htons(0x806);
 800b67a:	f640 0006 	movw	r0, #2054	; 0x806
 800b67e:	f7fe ff1e 	bl	800a4be <mg_ntohs>
 800b682:	4603      	mov	r3, r0
 800b684:	461a      	mov	r2, r3
 800b686:	697b      	ldr	r3, [r7, #20]
 800b688:	819a      	strh	r2, [r3, #12]
    *arp = *pkt->arp;
 800b68a:	683b      	ldr	r3, [r7, #0]
 800b68c:	699a      	ldr	r2, [r3, #24]
 800b68e:	693b      	ldr	r3, [r7, #16]
 800b690:	6814      	ldr	r4, [r2, #0]
 800b692:	6850      	ldr	r0, [r2, #4]
 800b694:	6891      	ldr	r1, [r2, #8]
 800b696:	68d5      	ldr	r5, [r2, #12]
 800b698:	601c      	str	r4, [r3, #0]
 800b69a:	6058      	str	r0, [r3, #4]
 800b69c:	6099      	str	r1, [r3, #8]
 800b69e:	60dd      	str	r5, [r3, #12]
 800b6a0:	6914      	ldr	r4, [r2, #16]
 800b6a2:	6950      	ldr	r0, [r2, #20]
 800b6a4:	6991      	ldr	r1, [r2, #24]
 800b6a6:	611c      	str	r4, [r3, #16]
 800b6a8:	6158      	str	r0, [r3, #20]
 800b6aa:	6199      	str	r1, [r3, #24]
    arp->op = mg_htons(2);
 800b6ac:	2002      	movs	r0, #2
 800b6ae:	f7fe ff06 	bl	800a4be <mg_ntohs>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	461a      	mov	r2, r3
 800b6b6:	693b      	ldr	r3, [r7, #16]
 800b6b8:	80da      	strh	r2, [r3, #6]
    memcpy(arp->tha, pkt->arp->sha, sizeof(pkt->arp->tha));
 800b6ba:	693b      	ldr	r3, [r7, #16]
 800b6bc:	f103 0012 	add.w	r0, r3, #18
 800b6c0:	683b      	ldr	r3, [r7, #0]
 800b6c2:	699b      	ldr	r3, [r3, #24]
 800b6c4:	3308      	adds	r3, #8
 800b6c6:	2206      	movs	r2, #6
 800b6c8:	4619      	mov	r1, r3
 800b6ca:	f009 f91b 	bl	8014904 <memcpy>
    memcpy(arp->sha, ifp->mac, sizeof(pkt->arp->sha));
 800b6ce:	693b      	ldr	r3, [r7, #16]
 800b6d0:	3308      	adds	r3, #8
 800b6d2:	6879      	ldr	r1, [r7, #4]
 800b6d4:	2206      	movs	r2, #6
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	f009 f914 	bl	8014904 <memcpy>
    arp->tpa = pkt->arp->spa;
 800b6dc:	683b      	ldr	r3, [r7, #0]
 800b6de:	699b      	ldr	r3, [r3, #24]
 800b6e0:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800b6e4:	693b      	ldr	r3, [r7, #16]
 800b6e6:	619a      	str	r2, [r3, #24]
    arp->spa = ifp->ip;
 800b6e8:	687b      	ldr	r3, [r7, #4]
 800b6ea:	689a      	ldr	r2, [r3, #8]
 800b6ec:	693b      	ldr	r3, [r7, #16]
 800b6ee:	f8c3 200e 	str.w	r2, [r3, #14]
    MG_DEBUG(("ARP: tell %M we're %M", mg_print_ip4, &arp->tpa, mg_print_ip4,
 800b6f2:	4b46      	ldr	r3, [pc, #280]	; (800b80c <rx_arp+0x1e8>)
 800b6f4:	f641 62ac 	movw	r2, #7852	; 0x1eac
 800b6f8:	4945      	ldr	r1, [pc, #276]	; (800b810 <rx_arp+0x1ec>)
 800b6fa:	2003      	movs	r0, #3
 800b6fc:	f7fb fc8a 	bl	8007014 <mg_log_prefix>
 800b700:	4603      	mov	r3, r0
 800b702:	2b00      	cmp	r3, #0
 800b704:	d00a      	beq.n	800b71c <rx_arp+0xf8>
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	f103 0218 	add.w	r2, r3, #24
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	3308      	adds	r3, #8
 800b710:	9300      	str	r3, [sp, #0]
 800b712:	4b40      	ldr	r3, [pc, #256]	; (800b814 <rx_arp+0x1f0>)
 800b714:	493f      	ldr	r1, [pc, #252]	; (800b814 <rx_arp+0x1f0>)
 800b716:	4840      	ldr	r0, [pc, #256]	; (800b818 <rx_arp+0x1f4>)
 800b718:	f7fb fcd6 	bl	80070c8 <mg_log>
              &ifp->ip));
    ether_output(ifp, PDIFF(eth, arp + 1));
 800b71c:	693b      	ldr	r3, [r7, #16]
 800b71e:	f103 021c 	add.w	r2, r3, #28
 800b722:	697b      	ldr	r3, [r7, #20]
 800b724:	1ad3      	subs	r3, r2, r3
 800b726:	4619      	mov	r1, r3
 800b728:	6878      	ldr	r0, [r7, #4]
 800b72a:	f7ff fc26 	bl	800af7a <ether_output>
  if (pkt->arp->op == mg_htons(1) && pkt->arp->tpa == ifp->ip) {
 800b72e:	e069      	b.n	800b804 <rx_arp+0x1e0>
  } else if (pkt->arp->op == mg_htons(2)) {
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	699b      	ldr	r3, [r3, #24]
 800b734:	88db      	ldrh	r3, [r3, #6]
 800b736:	b29c      	uxth	r4, r3
 800b738:	2002      	movs	r0, #2
 800b73a:	f7fe fec0 	bl	800a4be <mg_ntohs>
 800b73e:	4603      	mov	r3, r0
 800b740:	429c      	cmp	r4, r3
 800b742:	d15f      	bne.n	800b804 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800b744:	683b      	ldr	r3, [r7, #0]
 800b746:	699b      	ldr	r3, [r3, #24]
 800b748:	3312      	adds	r3, #18
 800b74a:	6879      	ldr	r1, [r7, #4]
 800b74c:	2206      	movs	r2, #6
 800b74e:	4618      	mov	r0, r3
 800b750:	f008 ffc6 	bl	80146e0 <memcmp>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d153      	bne.n	800b802 <rx_arp+0x1de>
    if (pkt->arp->spa == ifp->gw) {
 800b75a:	683b      	ldr	r3, [r7, #0]
 800b75c:	699b      	ldr	r3, [r3, #24]
 800b75e:	f8d3 200e 	ldr.w	r2, [r3, #14]
 800b762:	687b      	ldr	r3, [r7, #4]
 800b764:	691b      	ldr	r3, [r3, #16]
 800b766:	429a      	cmp	r2, r3
 800b768:	d10a      	bne.n	800b780 <rx_arp+0x15c>
      // Got response for the GW ARP request. Set ifp->gwmac
      memcpy(ifp->gwmac, pkt->arp->sha, sizeof(ifp->gwmac));
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	699b      	ldr	r3, [r3, #24]
 800b774:	3308      	adds	r3, #8
 800b776:	2206      	movs	r2, #6
 800b778:	4619      	mov	r1, r3
 800b77a:	f009 f8c3 	bl	8014904 <memcpy>
 800b77e:	e041      	b.n	800b804 <rx_arp+0x1e0>
    } else {
      struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800b780:	687b      	ldr	r3, [r7, #4]
 800b782:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b784:	2200      	movs	r2, #0
 800b786:	6839      	ldr	r1, [r7, #0]
 800b788:	4618      	mov	r0, r3
 800b78a:	f7ff fef3 	bl	800b574 <getpeer>
 800b78e:	60f8      	str	r0, [r7, #12]
      if (c != NULL && c->is_arplooking) {
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d036      	beq.n	800b804 <rx_arp+0x1e0>
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800b79c:	f003 0310 	and.w	r3, r3, #16
 800b7a0:	b2db      	uxtb	r3, r3
 800b7a2:	2b00      	cmp	r3, #0
 800b7a4:	d02e      	beq.n	800b804 <rx_arp+0x1e0>
        struct connstate *s = (struct connstate *) (c + 1);
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	3390      	adds	r3, #144	; 0x90
 800b7aa:	60bb      	str	r3, [r7, #8]
        memcpy(s->mac, pkt->arp->sha, sizeof(s->mac));
 800b7ac:	68bb      	ldr	r3, [r7, #8]
 800b7ae:	f103 0010 	add.w	r0, r3, #16
 800b7b2:	683b      	ldr	r3, [r7, #0]
 800b7b4:	699b      	ldr	r3, [r3, #24]
 800b7b6:	3308      	adds	r3, #8
 800b7b8:	2206      	movs	r2, #6
 800b7ba:	4619      	mov	r1, r3
 800b7bc:	f009 f8a2 	bl	8014904 <memcpy>
        MG_DEBUG(("%lu ARP resolved %M -> %M", c->id, mg_print_ip4, c->rem.ip,
 800b7c0:	4b12      	ldr	r3, [pc, #72]	; (800b80c <rx_arp+0x1e8>)
 800b7c2:	f641 62b9 	movw	r2, #7865	; 0x1eb9
 800b7c6:	4912      	ldr	r1, [pc, #72]	; (800b810 <rx_arp+0x1ec>)
 800b7c8:	2003      	movs	r0, #3
 800b7ca:	f7fb fc23 	bl	8007014 <mg_log_prefix>
 800b7ce:	4603      	mov	r3, r0
 800b7d0:	2b00      	cmp	r3, #0
 800b7d2:	d00e      	beq.n	800b7f2 <rx_arp+0x1ce>
 800b7d4:	68fb      	ldr	r3, [r7, #12]
 800b7d6:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	f103 021c 	add.w	r2, r3, #28
 800b7de:	68bb      	ldr	r3, [r7, #8]
 800b7e0:	3310      	adds	r3, #16
 800b7e2:	9301      	str	r3, [sp, #4]
 800b7e4:	4b0d      	ldr	r3, [pc, #52]	; (800b81c <rx_arp+0x1f8>)
 800b7e6:	9300      	str	r3, [sp, #0]
 800b7e8:	4613      	mov	r3, r2
 800b7ea:	4a0a      	ldr	r2, [pc, #40]	; (800b814 <rx_arp+0x1f0>)
 800b7ec:	480c      	ldr	r0, [pc, #48]	; (800b820 <rx_arp+0x1fc>)
 800b7ee:	f7fb fc6b 	bl	80070c8 <mg_log>
                  mg_print_mac, s->mac));
        c->is_arplooking = 0;
 800b7f2:	68fa      	ldr	r2, [r7, #12]
 800b7f4:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800b7f8:	f36f 1304 	bfc	r3, #4, #1
 800b7fc:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
 800b800:	e000      	b.n	800b804 <rx_arp+0x1e0>
    if (memcmp(pkt->arp->tha, ifp->mac, sizeof(pkt->arp->tha)) != 0) return;
 800b802:	bf00      	nop
      }
    }
  }
}
 800b804:	3718      	adds	r7, #24
 800b806:	46bd      	mov	sp, r7
 800b808:	bdb0      	pop	{r4, r5, r7, pc}
 800b80a:	bf00      	nop
 800b80c:	08017598 	.word	0x08017598
 800b810:	0801544c 	.word	0x0801544c
 800b814:	08008d51 	.word	0x08008d51
 800b818:	08016960 	.word	0x08016960
 800b81c:	08008e15 	.word	0x08008e15
 800b820:	08016978 	.word	0x08016978

0800b824 <rx_icmp>:

static void rx_icmp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b824:	b580      	push	{r7, lr}
 800b826:	b08a      	sub	sp, #40	; 0x28
 800b828:	af02      	add	r7, sp, #8
 800b82a:	6078      	str	r0, [r7, #4]
 800b82c:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("ICMP %d", (int) len));
  if (pkt->icmp->type == 8 && pkt->ip != NULL && pkt->ip->dst == ifp->ip) {
 800b82e:	683b      	ldr	r3, [r7, #0]
 800b830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b832:	781b      	ldrb	r3, [r3, #0]
 800b834:	2b08      	cmp	r3, #8
 800b836:	d14d      	bne.n	800b8d4 <rx_icmp+0xb0>
 800b838:	683b      	ldr	r3, [r7, #0]
 800b83a:	69db      	ldr	r3, [r3, #28]
 800b83c:	2b00      	cmp	r3, #0
 800b83e:	d049      	beq.n	800b8d4 <rx_icmp+0xb0>
 800b840:	683b      	ldr	r3, [r7, #0]
 800b842:	69db      	ldr	r3, [r3, #28]
 800b844:	691a      	ldr	r2, [r3, #16]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	689b      	ldr	r3, [r3, #8]
 800b84a:	429a      	cmp	r2, r3
 800b84c:	d142      	bne.n	800b8d4 <rx_icmp+0xb0>
    size_t hlen = sizeof(struct eth) + sizeof(struct ip) + sizeof(struct icmp);
 800b84e:	2326      	movs	r3, #38	; 0x26
 800b850:	61bb      	str	r3, [r7, #24]
    size_t space = ifp->tx.len - hlen, plen = pkt->pay.len;
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	699a      	ldr	r2, [r3, #24]
 800b856:	69bb      	ldr	r3, [r7, #24]
 800b858:	1ad3      	subs	r3, r2, r3
 800b85a:	617b      	str	r3, [r7, #20]
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	68db      	ldr	r3, [r3, #12]
 800b860:	61fb      	str	r3, [r7, #28]
    if (plen > space) plen = space;
 800b862:	69fa      	ldr	r2, [r7, #28]
 800b864:	697b      	ldr	r3, [r7, #20]
 800b866:	429a      	cmp	r2, r3
 800b868:	d901      	bls.n	800b86e <rx_icmp+0x4a>
 800b86a:	697b      	ldr	r3, [r7, #20]
 800b86c:	61fb      	str	r3, [r7, #28]
    struct ip *ip = tx_ip(ifp, pkt->eth->src, 1, ifp->ip, pkt->ip->src,
 800b86e:	683b      	ldr	r3, [r7, #0]
 800b870:	691b      	ldr	r3, [r3, #16]
 800b872:	1d99      	adds	r1, r3, #6
 800b874:	687b      	ldr	r3, [r7, #4]
 800b876:	6898      	ldr	r0, [r3, #8]
 800b878:	683b      	ldr	r3, [r7, #0]
 800b87a:	69db      	ldr	r3, [r3, #28]
 800b87c:	68db      	ldr	r3, [r3, #12]
 800b87e:	69fa      	ldr	r2, [r7, #28]
 800b880:	3204      	adds	r2, #4
 800b882:	9201      	str	r2, [sp, #4]
 800b884:	9300      	str	r3, [sp, #0]
 800b886:	4603      	mov	r3, r0
 800b888:	2201      	movs	r2, #1
 800b88a:	6878      	ldr	r0, [r7, #4]
 800b88c:	f7ff fc74 	bl	800b178 <tx_ip>
 800b890:	6138      	str	r0, [r7, #16]
                          sizeof(struct icmp) + plen);
    struct icmp *icmp = (struct icmp *) (ip + 1);
 800b892:	693b      	ldr	r3, [r7, #16]
 800b894:	3314      	adds	r3, #20
 800b896:	60fb      	str	r3, [r7, #12]
    memset(icmp, 0, sizeof(*icmp));        // Set csum to 0
 800b898:	2204      	movs	r2, #4
 800b89a:	2100      	movs	r1, #0
 800b89c:	68f8      	ldr	r0, [r7, #12]
 800b89e:	f008 ff49 	bl	8014734 <memset>
    memcpy(icmp + 1, pkt->pay.ptr, plen);  // Copy RX payload to TX
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	1d18      	adds	r0, r3, #4
 800b8a6:	683b      	ldr	r3, [r7, #0]
 800b8a8:	689b      	ldr	r3, [r3, #8]
 800b8aa:	69fa      	ldr	r2, [r7, #28]
 800b8ac:	4619      	mov	r1, r3
 800b8ae:	f009 f829 	bl	8014904 <memcpy>
    icmp->csum = ipcsum(icmp, sizeof(*icmp) + plen);
 800b8b2:	69fb      	ldr	r3, [r7, #28]
 800b8b4:	3304      	adds	r3, #4
 800b8b6:	4619      	mov	r1, r3
 800b8b8:	68f8      	ldr	r0, [r7, #12]
 800b8ba:	f7ff fb4b 	bl	800af54 <ipcsum>
 800b8be:	4603      	mov	r3, r0
 800b8c0:	461a      	mov	r2, r3
 800b8c2:	68fb      	ldr	r3, [r7, #12]
 800b8c4:	805a      	strh	r2, [r3, #2]
    ether_output(ifp, hlen + plen);
 800b8c6:	69ba      	ldr	r2, [r7, #24]
 800b8c8:	69fb      	ldr	r3, [r7, #28]
 800b8ca:	4413      	add	r3, r2
 800b8cc:	4619      	mov	r1, r3
 800b8ce:	6878      	ldr	r0, [r7, #4]
 800b8d0:	f7ff fb53 	bl	800af7a <ether_output>
  }
}
 800b8d4:	bf00      	nop
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bd80      	pop	{r7, pc}

0800b8dc <rx_dhcp_client>:

static void rx_dhcp_client(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800b8dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b8e0:	b08e      	sub	sp, #56	; 0x38
 800b8e2:	af00      	add	r7, sp, #0
 800b8e4:	60f8      	str	r0, [r7, #12]
 800b8e6:	60b9      	str	r1, [r7, #8]
  uint32_t ip = 0, gw = 0, mask = 0, lease = 0;
 800b8e8:	2300      	movs	r3, #0
 800b8ea:	637b      	str	r3, [r7, #52]	; 0x34
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	623b      	str	r3, [r7, #32]
 800b8f0:	2300      	movs	r3, #0
 800b8f2:	61fb      	str	r3, [r7, #28]
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	61bb      	str	r3, [r7, #24]
  uint8_t msgtype = 0, state = ifp->state;
 800b8f8:	2300      	movs	r3, #0
 800b8fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b904:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
  // perform size check first, then access fields
  uint8_t *p = pkt->dhcp->options,
 800b908:	68bb      	ldr	r3, [r7, #8]
 800b90a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90c:	33f0      	adds	r3, #240	; 0xf0
 800b90e:	62fb      	str	r3, [r7, #44]	; 0x2c
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 800b910:	68bb      	ldr	r3, [r7, #8]
 800b912:	681a      	ldr	r2, [r3, #0]
 800b914:	68bb      	ldr	r3, [r7, #8]
 800b916:	685b      	ldr	r3, [r3, #4]
 800b918:	4413      	add	r3, r2
 800b91a:	627b      	str	r3, [r7, #36]	; 0x24
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800b91c:	68bb      	ldr	r3, [r7, #8]
 800b91e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b920:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800b924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b926:	429a      	cmp	r2, r3
 800b928:	f0c0 8151 	bcc.w	800bbce <rx_dhcp_client+0x2f2>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800b92c:	68bb      	ldr	r3, [r7, #8]
 800b92e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b930:	1d18      	adds	r0, r3, #4
 800b932:	68fb      	ldr	r3, [r7, #12]
 800b934:	3302      	adds	r3, #2
 800b936:	2204      	movs	r2, #4
 800b938:	4619      	mov	r1, r3
 800b93a:	f008 fed1 	bl	80146e0 <memcmp>
 800b93e:	4603      	mov	r3, r0
 800b940:	2b00      	cmp	r3, #0
 800b942:	f040 8146 	bne.w	800bbd2 <rx_dhcp_client+0x2f6>
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800b946:	e05b      	b.n	800ba00 <rx_dhcp_client+0x124>
    if (p[0] == 1 && p[1] == sizeof(ifp->mask) && p + 6 < end) {  // Mask
 800b948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b94a:	781b      	ldrb	r3, [r3, #0]
 800b94c:	2b01      	cmp	r3, #1
 800b94e:	d10e      	bne.n	800b96e <rx_dhcp_client+0x92>
 800b950:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b952:	3301      	adds	r3, #1
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	2b04      	cmp	r3, #4
 800b958:	d109      	bne.n	800b96e <rx_dhcp_client+0x92>
 800b95a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b95c:	3306      	adds	r3, #6
 800b95e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b960:	429a      	cmp	r2, r3
 800b962:	d904      	bls.n	800b96e <rx_dhcp_client+0x92>
      memcpy(&mask, p + 2, sizeof(mask));
 800b964:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b966:	3302      	adds	r3, #2
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	61fb      	str	r3, [r7, #28]
 800b96c:	e041      	b.n	800b9f2 <rx_dhcp_client+0x116>
    } else if (p[0] == 3 && p[1] == sizeof(ifp->gw) && p + 6 < end) {  // GW
 800b96e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b970:	781b      	ldrb	r3, [r3, #0]
 800b972:	2b03      	cmp	r3, #3
 800b974:	d112      	bne.n	800b99c <rx_dhcp_client+0xc0>
 800b976:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b978:	3301      	adds	r3, #1
 800b97a:	781b      	ldrb	r3, [r3, #0]
 800b97c:	2b04      	cmp	r3, #4
 800b97e:	d10d      	bne.n	800b99c <rx_dhcp_client+0xc0>
 800b980:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b982:	3306      	adds	r3, #6
 800b984:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b986:	429a      	cmp	r2, r3
 800b988:	d908      	bls.n	800b99c <rx_dhcp_client+0xc0>
      memcpy(&gw, p + 2, sizeof(gw));
 800b98a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b98c:	3302      	adds	r3, #2
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	623b      	str	r3, [r7, #32]
      ip = pkt->dhcp->yiaddr;
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b996:	691b      	ldr	r3, [r3, #16]
 800b998:	637b      	str	r3, [r7, #52]	; 0x34
 800b99a:	e02a      	b.n	800b9f2 <rx_dhcp_client+0x116>
    } else if (p[0] == 51 && p[1] == 4 && p + 6 < end) {  // Lease
 800b99c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b99e:	781b      	ldrb	r3, [r3, #0]
 800b9a0:	2b33      	cmp	r3, #51	; 0x33
 800b9a2:	d114      	bne.n	800b9ce <rx_dhcp_client+0xf2>
 800b9a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9a6:	3301      	adds	r3, #1
 800b9a8:	781b      	ldrb	r3, [r3, #0]
 800b9aa:	2b04      	cmp	r3, #4
 800b9ac:	d10f      	bne.n	800b9ce <rx_dhcp_client+0xf2>
 800b9ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9b0:	3306      	adds	r3, #6
 800b9b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9b4:	429a      	cmp	r2, r3
 800b9b6:	d90a      	bls.n	800b9ce <rx_dhcp_client+0xf2>
      memcpy(&lease, p + 2, sizeof(lease));
 800b9b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ba:	3302      	adds	r3, #2
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	61bb      	str	r3, [r7, #24]
      lease = mg_ntohl(lease);
 800b9c0:	69bb      	ldr	r3, [r7, #24]
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7fe fd62 	bl	800a48c <mg_ntohl>
 800b9c8:	4603      	mov	r3, r0
 800b9ca:	61bb      	str	r3, [r7, #24]
 800b9cc:	e011      	b.n	800b9f2 <rx_dhcp_client+0x116>
    } else if (p[0] == 53 && p[1] == 1 && p + 6 < end) {  // Msg Type
 800b9ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d0:	781b      	ldrb	r3, [r3, #0]
 800b9d2:	2b35      	cmp	r3, #53	; 0x35
 800b9d4:	d10d      	bne.n	800b9f2 <rx_dhcp_client+0x116>
 800b9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9d8:	3301      	adds	r3, #1
 800b9da:	781b      	ldrb	r3, [r3, #0]
 800b9dc:	2b01      	cmp	r3, #1
 800b9de:	d108      	bne.n	800b9f2 <rx_dhcp_client+0x116>
 800b9e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9e2:	3306      	adds	r3, #6
 800b9e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b9e6:	429a      	cmp	r2, r3
 800b9e8:	d903      	bls.n	800b9f2 <rx_dhcp_client+0x116>
      msgtype = p[2];
 800b9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9ec:	789b      	ldrb	r3, [r3, #2]
 800b9ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    }
    p += p[1] + 2;
 800b9f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9f4:	3301      	adds	r3, #1
 800b9f6:	781b      	ldrb	r3, [r3, #0]
 800b9f8:	3302      	adds	r3, #2
 800b9fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b9fc:	4413      	add	r3, r2
 800b9fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (p + 1 < end && p[0] != 255) {  // Parse options RFC-1533 #9
 800ba00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba02:	3301      	adds	r3, #1
 800ba04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d903      	bls.n	800ba12 <rx_dhcp_client+0x136>
 800ba0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0c:	781b      	ldrb	r3, [r3, #0]
 800ba0e:	2bff      	cmp	r3, #255	; 0xff
 800ba10:	d19a      	bne.n	800b948 <rx_dhcp_client+0x6c>
  }
  // Process message type, RFC-1533 (9.4); RFC-2131 (3.1, 4)
  if (msgtype == 6 && ifp->ip == ip) {  // DHCPNACK, release IP
 800ba12:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba16:	2b06      	cmp	r3, #6
 800ba18:	d10c      	bne.n	800ba34 <rx_dhcp_client+0x158>
 800ba1a:	68fb      	ldr	r3, [r7, #12]
 800ba1c:	689b      	ldr	r3, [r3, #8]
 800ba1e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ba20:	429a      	cmp	r2, r3
 800ba22:	d107      	bne.n	800ba34 <rx_dhcp_client+0x158>
    ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;
 800ba24:	68fb      	ldr	r3, [r7, #12]
 800ba26:	2201      	movs	r2, #1
 800ba28:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	2200      	movs	r2, #0
 800ba30:	609a      	str	r2, [r3, #8]
 800ba32:	e0c1      	b.n	800bbb8 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 2 && ifp->state == MG_TCPIP_STATE_UP && ip && gw &&
 800ba34:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba38:	2b02      	cmp	r3, #2
 800ba3a:	d11a      	bne.n	800ba72 <rx_dhcp_client+0x196>
 800ba3c:	68fb      	ldr	r3, [r7, #12]
 800ba3e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ba42:	2b01      	cmp	r3, #1
 800ba44:	d115      	bne.n	800ba72 <rx_dhcp_client+0x196>
 800ba46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba48:	2b00      	cmp	r3, #0
 800ba4a:	d012      	beq.n	800ba72 <rx_dhcp_client+0x196>
 800ba4c:	6a3b      	ldr	r3, [r7, #32]
 800ba4e:	2b00      	cmp	r3, #0
 800ba50:	d00f      	beq.n	800ba72 <rx_dhcp_client+0x196>
 800ba52:	69bb      	ldr	r3, [r7, #24]
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	d00c      	beq.n	800ba72 <rx_dhcp_client+0x196>
             lease) {                                 // DHCPOFFER
    tx_dhcp_request_sel(ifp, ip, pkt->dhcp->siaddr);  // select IP, (4.4.1)
 800ba58:	68bb      	ldr	r3, [r7, #8]
 800ba5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ba5c:	695b      	ldr	r3, [r3, #20]
 800ba5e:	461a      	mov	r2, r3
 800ba60:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800ba62:	68f8      	ldr	r0, [r7, #12]
 800ba64:	f7ff fcd8 	bl	800b418 <tx_dhcp_request_sel>
    ifp->state = MG_TCPIP_STATE_REQ;                  // REQUESTING state
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	2202      	movs	r2, #2
 800ba6c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800ba70:	e0a2      	b.n	800bbb8 <rx_dhcp_client+0x2dc>
  } else if (msgtype == 5) {                          // DHCPACK
 800ba72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ba76:	2b05      	cmp	r3, #5
 800ba78:	f040 809e 	bne.w	800bbb8 <rx_dhcp_client+0x2dc>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800ba82:	2b02      	cmp	r3, #2
 800ba84:	d162      	bne.n	800bb4c <rx_dhcp_client+0x270>
 800ba86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba88:	2b00      	cmp	r3, #0
 800ba8a:	d05f      	beq.n	800bb4c <rx_dhcp_client+0x270>
 800ba8c:	6a3b      	ldr	r3, [r7, #32]
 800ba8e:	2b00      	cmp	r3, #0
 800ba90:	d05c      	beq.n	800bb4c <rx_dhcp_client+0x270>
 800ba92:	69bb      	ldr	r3, [r7, #24]
 800ba94:	2b00      	cmp	r3, #0
 800ba96:	d059      	beq.n	800bb4c <rx_dhcp_client+0x270>
      ifp->lease_expire = ifp->now + lease * 1000;
 800ba98:	68fb      	ldr	r3, [r7, #12]
 800ba9a:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800ba9e:	69b9      	ldr	r1, [r7, #24]
 800baa0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800baa4:	fb00 f101 	mul.w	r1, r0, r1
 800baa8:	2000      	movs	r0, #0
 800baaa:	4688      	mov	r8, r1
 800baac:	4681      	mov	r9, r0
 800baae:	eb12 0108 	adds.w	r1, r2, r8
 800bab2:	6039      	str	r1, [r7, #0]
 800bab4:	eb43 0309 	adc.w	r3, r3, r9
 800bab8:	607b      	str	r3, [r7, #4]
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	e9d7 1200 	ldrd	r1, r2, [r7]
 800bac0:	e9c3 1216 	strd	r1, r2, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800bac4:	4b45      	ldr	r3, [pc, #276]	; (800bbdc <rx_dhcp_client+0x300>)
 800bac6:	f641 62f1 	movw	r2, #7921	; 0x1ef1
 800baca:	4945      	ldr	r1, [pc, #276]	; (800bbe0 <rx_dhcp_client+0x304>)
 800bacc:	2002      	movs	r0, #2
 800bace:	f7fb faa1 	bl	8007014 <mg_log_prefix>
 800bad2:	4603      	mov	r3, r0
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d00f      	beq.n	800baf8 <rx_dhcp_client+0x21c>
 800bad8:	69bc      	ldr	r4, [r7, #24]
 800bada:	68fb      	ldr	r3, [r7, #12]
 800badc:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800bae0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bae4:	f04f 0300 	mov.w	r3, #0
 800bae8:	f7f4 fe86 	bl	80007f8 <__aeabi_uldivmod>
 800baec:	4602      	mov	r2, r0
 800baee:	460b      	mov	r3, r1
 800baf0:	4621      	mov	r1, r4
 800baf2:	483c      	ldr	r0, [pc, #240]	; (800bbe4 <rx_dhcp_client+0x308>)
 800baf4:	f7fb fae8 	bl	80070c8 <mg_log>
      // assume DHCP server = router until ARP resolves
      memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
 800baf8:	68fb      	ldr	r3, [r7, #12]
 800bafa:	f103 003c 	add.w	r0, r3, #60	; 0x3c
 800bafe:	68bb      	ldr	r3, [r7, #8]
 800bb00:	691b      	ldr	r3, [r3, #16]
 800bb02:	3306      	adds	r3, #6
 800bb04:	2206      	movs	r2, #6
 800bb06:	4619      	mov	r1, r3
 800bb08:	f008 fefc 	bl	8014904 <memcpy>
      ifp->ip = ip, ifp->gw = gw, ifp->mask = mask;
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb10:	609a      	str	r2, [r3, #8]
 800bb12:	6a3a      	ldr	r2, [r7, #32]
 800bb14:	68fb      	ldr	r3, [r7, #12]
 800bb16:	611a      	str	r2, [r3, #16]
 800bb18:	69fa      	ldr	r2, [r7, #28]
 800bb1a:	68fb      	ldr	r3, [r7, #12]
 800bb1c:	60da      	str	r2, [r3, #12]
      ifp->state = MG_TCPIP_STATE_READY;  // BOUND state
 800bb1e:	68fb      	ldr	r3, [r7, #12]
 800bb20:	2203      	movs	r2, #3
 800bb22:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
      uint64_t rand;
      mg_random(&rand, sizeof(rand));
 800bb26:	f107 0310 	add.w	r3, r7, #16
 800bb2a:	2108      	movs	r1, #8
 800bb2c:	4618      	mov	r0, r3
 800bb2e:	f7f5 f889 	bl	8000c44 <mg_random>
      srand((unsigned int) (rand + mg_millis()));
 800bb32:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800bb36:	4614      	mov	r4, r2
 800bb38:	f7f5 f876 	bl	8000c28 <mg_millis>
 800bb3c:	4602      	mov	r2, r0
 800bb3e:	460b      	mov	r3, r1
 800bb40:	4613      	mov	r3, r2
 800bb42:	4423      	add	r3, r4
 800bb44:	4618      	mov	r0, r3
 800bb46:	f008 fad5 	bl	80140f4 <srand>
    if (ifp->state == MG_TCPIP_STATE_REQ && ip && gw && lease) {  // got an IP
 800bb4a:	e035      	b.n	800bbb8 <rx_dhcp_client+0x2dc>
    } else if (ifp->state == MG_TCPIP_STATE_READY && ifp->ip == ip) {  // renew
 800bb4c:	68fb      	ldr	r3, [r7, #12]
 800bb4e:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bb52:	2b03      	cmp	r3, #3
 800bb54:	d130      	bne.n	800bbb8 <rx_dhcp_client+0x2dc>
 800bb56:	68fb      	ldr	r3, [r7, #12]
 800bb58:	689b      	ldr	r3, [r3, #8]
 800bb5a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb5c:	429a      	cmp	r2, r3
 800bb5e:	d12b      	bne.n	800bbb8 <rx_dhcp_client+0x2dc>
      ifp->lease_expire = ifp->now + lease * 1000;
 800bb60:	68fb      	ldr	r3, [r7, #12]
 800bb62:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800bb66:	69b9      	ldr	r1, [r7, #24]
 800bb68:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800bb6c:	fb00 f101 	mul.w	r1, r0, r1
 800bb70:	2000      	movs	r0, #0
 800bb72:	460c      	mov	r4, r1
 800bb74:	4605      	mov	r5, r0
 800bb76:	eb12 0a04 	adds.w	sl, r2, r4
 800bb7a:	eb43 0b05 	adc.w	fp, r3, r5
 800bb7e:	68fb      	ldr	r3, [r7, #12]
 800bb80:	e9c3 ab16 	strd	sl, fp, [r3, #88]	; 0x58
      MG_INFO(("Lease: %u sec (%lld)", lease, ifp->lease_expire / 1000));
 800bb84:	4b15      	ldr	r3, [pc, #84]	; (800bbdc <rx_dhcp_client+0x300>)
 800bb86:	f641 62fb 	movw	r2, #7931	; 0x1efb
 800bb8a:	4915      	ldr	r1, [pc, #84]	; (800bbe0 <rx_dhcp_client+0x304>)
 800bb8c:	2002      	movs	r0, #2
 800bb8e:	f7fb fa41 	bl	8007014 <mg_log_prefix>
 800bb92:	4603      	mov	r3, r0
 800bb94:	2b00      	cmp	r3, #0
 800bb96:	d00f      	beq.n	800bbb8 <rx_dhcp_client+0x2dc>
 800bb98:	69bc      	ldr	r4, [r7, #24]
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	e9d3 0116 	ldrd	r0, r1, [r3, #88]	; 0x58
 800bba0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800bba4:	f04f 0300 	mov.w	r3, #0
 800bba8:	f7f4 fe26 	bl	80007f8 <__aeabi_uldivmod>
 800bbac:	4602      	mov	r2, r0
 800bbae:	460b      	mov	r3, r1
 800bbb0:	4621      	mov	r1, r4
 800bbb2:	480c      	ldr	r0, [pc, #48]	; (800bbe4 <rx_dhcp_client+0x308>)
 800bbb4:	f7fb fa88 	bl	80070c8 <mg_log>
    }  // TODO(): accept provided T1/T2 and store server IP for renewal (4.4)
  }
  if (ifp->state != state) onstatechange(ifp);
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800bbbe:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 800bbc2:	429a      	cmp	r2, r3
 800bbc4:	d006      	beq.n	800bbd4 <rx_dhcp_client+0x2f8>
 800bbc6:	68f8      	ldr	r0, [r7, #12]
 800bbc8:	f7ff fa50 	bl	800b06c <onstatechange>
 800bbcc:	e002      	b.n	800bbd4 <rx_dhcp_client+0x2f8>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800bbce:	bf00      	nop
 800bbd0:	e000      	b.n	800bbd4 <rx_dhcp_client+0x2f8>
  if (memcmp(&pkt->dhcp->xid, ifp->mac + 2, sizeof(pkt->dhcp->xid))) return;
 800bbd2:	bf00      	nop
}
 800bbd4:	3738      	adds	r7, #56	; 0x38
 800bbd6:	46bd      	mov	sp, r7
 800bbd8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800bbdc:	080175a0 	.word	0x080175a0
 800bbe0:	0801544c 	.word	0x0801544c
 800bbe4:	08016994 	.word	0x08016994

0800bbe8 <rx_dhcp_server>:

// Simple DHCP server that assigns a next IP address: ifp->ip + 1
static void rx_dhcp_server(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bbe8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bbec:	b0d6      	sub	sp, #344	; 0x158
 800bbee:	af04      	add	r7, sp, #16
 800bbf0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bbf4:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800bbf8:	6018      	str	r0, [r3, #0]
 800bbfa:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bbfe:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bc02:	6019      	str	r1, [r3, #0]
  uint8_t op = 0, *p = pkt->dhcp->options,
 800bc04:	2300      	movs	r3, #0
 800bc06:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
 800bc0a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bc0e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bc12:	681b      	ldr	r3, [r3, #0]
 800bc14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc16:	33f0      	adds	r3, #240	; 0xf0
 800bc18:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
          *end = (uint8_t *) &pkt->raw.ptr[pkt->raw.len];
 800bc1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bc20:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bc24:	681b      	ldr	r3, [r3, #0]
 800bc26:	681a      	ldr	r2, [r3, #0]
 800bc28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bc2c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	685b      	ldr	r3, [r3, #4]
 800bc34:	4413      	add	r3, r2
 800bc36:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800bc3a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bc3e:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bc46:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800bc4a:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800bc4e:	429a      	cmp	r2, r3
 800bc50:	f0c0 818b 	bcc.w	800bf6a <rx_dhcp_server+0x382>
  // struct dhcp *req = pkt->dhcp;
  struct dhcp res = {2, 1, 6, 0, 0, 0, 0, 0, 0, 0, 0, {0}, 0, {0}};
 800bc54:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bc58:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800bc5c:	4ac6      	ldr	r2, [pc, #792]	; (800bf78 <rx_dhcp_server+0x390>)
 800bc5e:	4618      	mov	r0, r3
 800bc60:	4611      	mov	r1, r2
 800bc62:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bc66:	461a      	mov	r2, r3
 800bc68:	f008 fe4c 	bl	8014904 <memcpy>
  res.yiaddr = ifp->ip;
 800bc6c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bc70:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800bc74:	681b      	ldr	r3, [r3, #0]
 800bc76:	689a      	ldr	r2, [r3, #8]
 800bc78:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bc7c:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800bc80:	611a      	str	r2, [r3, #16]
  ((uint8_t *) (&res.yiaddr))[3]++;                // Offer our IP + 1
 800bc82:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bc86:	3310      	adds	r3, #16
 800bc88:	3303      	adds	r3, #3
 800bc8a:	781a      	ldrb	r2, [r3, #0]
 800bc8c:	3201      	adds	r2, #1
 800bc8e:	b2d2      	uxtb	r2, r2
 800bc90:	701a      	strb	r2, [r3, #0]
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800bc92:	e020      	b.n	800bcd6 <rx_dhcp_server+0xee>
    if (p[0] == 53 && p[1] == 1 && p + 2 < end) {  // Message type
 800bc94:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bc98:	781b      	ldrb	r3, [r3, #0]
 800bc9a:	2b35      	cmp	r3, #53	; 0x35
 800bc9c:	d111      	bne.n	800bcc2 <rx_dhcp_server+0xda>
 800bc9e:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bca2:	3301      	adds	r3, #1
 800bca4:	781b      	ldrb	r3, [r3, #0]
 800bca6:	2b01      	cmp	r3, #1
 800bca8:	d10b      	bne.n	800bcc2 <rx_dhcp_server+0xda>
 800bcaa:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bcae:	3302      	adds	r3, #2
 800bcb0:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800bcb4:	429a      	cmp	r2, r3
 800bcb6:	d904      	bls.n	800bcc2 <rx_dhcp_server+0xda>
      op = p[2];
 800bcb8:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bcbc:	789b      	ldrb	r3, [r3, #2]
 800bcbe:	f887 3147 	strb.w	r3, [r7, #327]	; 0x147
    }
    p += p[1] + 2;
 800bcc2:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	781b      	ldrb	r3, [r3, #0]
 800bcca:	3302      	adds	r3, #2
 800bccc:	f8d7 2140 	ldr.w	r2, [r7, #320]	; 0x140
 800bcd0:	4413      	add	r3, r2
 800bcd2:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  while (p + 1 < end && p[0] != 255) {             // Parse options
 800bcd6:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bcda:	3301      	adds	r3, #1
 800bcdc:	f8d7 213c 	ldr.w	r2, [r7, #316]	; 0x13c
 800bce0:	429a      	cmp	r2, r3
 800bce2:	d904      	bls.n	800bcee <rx_dhcp_server+0x106>
 800bce4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800bce8:	781b      	ldrb	r3, [r3, #0]
 800bcea:	2bff      	cmp	r3, #255	; 0xff
 800bcec:	d1d2      	bne.n	800bc94 <rx_dhcp_server+0xac>
  }
  if (op == 1 || op == 3) {         // DHCP Discover or DHCP Request
 800bcee:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800bcf2:	2b01      	cmp	r3, #1
 800bcf4:	d004      	beq.n	800bd00 <rx_dhcp_server+0x118>
 800bcf6:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800bcfa:	2b03      	cmp	r3, #3
 800bcfc:	f040 8136 	bne.w	800bf6c <rx_dhcp_server+0x384>
    uint8_t msg = op == 1 ? 2 : 5;  // Message type: DHCP OFFER or DHCP ACK
 800bd00:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800bd04:	2b01      	cmp	r3, #1
 800bd06:	d101      	bne.n	800bd0c <rx_dhcp_server+0x124>
 800bd08:	2302      	movs	r3, #2
 800bd0a:	e000      	b.n	800bd0e <rx_dhcp_server+0x126>
 800bd0c:	2305      	movs	r3, #5
 800bd0e:	f887 313b 	strb.w	r3, [r7, #315]	; 0x13b
    uint8_t opts[] = {
 800bd12:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd16:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd1a:	2235      	movs	r2, #53	; 0x35
 800bd1c:	701a      	strb	r2, [r3, #0]
 800bd1e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd22:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd26:	2201      	movs	r2, #1
 800bd28:	705a      	strb	r2, [r3, #1]
 800bd2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd2e:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd32:	f897 213b 	ldrb.w	r2, [r7, #315]	; 0x13b
 800bd36:	709a      	strb	r2, [r3, #2]
 800bd38:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd3c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd40:	2201      	movs	r2, #1
 800bd42:	70da      	strb	r2, [r3, #3]
 800bd44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd48:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd4c:	2204      	movs	r2, #4
 800bd4e:	711a      	strb	r2, [r3, #4]
 800bd50:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd54:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd58:	2200      	movs	r2, #0
 800bd5a:	715a      	strb	r2, [r3, #5]
 800bd5c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd60:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd64:	2200      	movs	r2, #0
 800bd66:	719a      	strb	r2, [r3, #6]
 800bd68:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd6c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd70:	2200      	movs	r2, #0
 800bd72:	71da      	strb	r2, [r3, #7]
 800bd74:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd78:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd7c:	2200      	movs	r2, #0
 800bd7e:	721a      	strb	r2, [r3, #8]
 800bd80:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd84:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd88:	2236      	movs	r2, #54	; 0x36
 800bd8a:	725a      	strb	r2, [r3, #9]
 800bd8c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd90:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bd94:	2204      	movs	r2, #4
 800bd96:	729a      	strb	r2, [r3, #10]
 800bd98:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bd9c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bda0:	2200      	movs	r2, #0
 800bda2:	72da      	strb	r2, [r3, #11]
 800bda4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bda8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bdac:	2200      	movs	r2, #0
 800bdae:	731a      	strb	r2, [r3, #12]
 800bdb0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bdb4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bdb8:	2200      	movs	r2, #0
 800bdba:	735a      	strb	r2, [r3, #13]
 800bdbc:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bdc0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bdc4:	2200      	movs	r2, #0
 800bdc6:	739a      	strb	r2, [r3, #14]
 800bdc8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bdcc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bdd0:	220c      	movs	r2, #12
 800bdd2:	73da      	strb	r2, [r3, #15]
 800bdd4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bdd8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bddc:	2203      	movs	r2, #3
 800bdde:	741a      	strb	r2, [r3, #16]
 800bde0:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bde4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bde8:	226d      	movs	r2, #109	; 0x6d
 800bdea:	745a      	strb	r2, [r3, #17]
 800bdec:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bdf0:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800bdf4:	2269      	movs	r2, #105	; 0x69
 800bdf6:	749a      	strb	r2, [r3, #18]
 800bdf8:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bdfc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800be00:	2270      	movs	r2, #112	; 0x70
 800be02:	74da      	strb	r2, [r3, #19]
 800be04:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800be08:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800be0c:	2233      	movs	r2, #51	; 0x33
 800be0e:	751a      	strb	r2, [r3, #20]
 800be10:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800be14:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800be18:	2204      	movs	r2, #4
 800be1a:	755a      	strb	r2, [r3, #21]
 800be1c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800be20:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800be24:	22ff      	movs	r2, #255	; 0xff
 800be26:	759a      	strb	r2, [r3, #22]
 800be28:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800be2c:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800be30:	22ff      	movs	r2, #255	; 0xff
 800be32:	75da      	strb	r2, [r3, #23]
 800be34:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800be38:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800be3c:	22ff      	movs	r2, #255	; 0xff
 800be3e:	761a      	strb	r2, [r3, #24]
 800be40:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800be44:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800be48:	22ff      	movs	r2, #255	; 0xff
 800be4a:	765a      	strb	r2, [r3, #25]
 800be4c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800be50:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 800be54:	22ff      	movs	r2, #255	; 0xff
 800be56:	769a      	strb	r2, [r3, #26]
        54, 4, 0,   0,   0,   0,    // Server ID
        12, 3, 'm', 'i', 'p',       // Host name: "mip"
        51, 4, 255, 255, 255, 255,  // Lease time
        255                         // End of options
    };
    memcpy(&res.hwaddr, pkt->dhcp->hwaddr, 6);
 800be58:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800be5c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800be60:	681b      	ldr	r3, [r3, #0]
 800be62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800be64:	f103 011c 	add.w	r1, r3, #28
 800be68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800be6c:	331c      	adds	r3, #28
 800be6e:	2206      	movs	r2, #6
 800be70:	4618      	mov	r0, r3
 800be72:	f008 fd47 	bl	8014904 <memcpy>
    memcpy(opts + 5, &ifp->mask, sizeof(ifp->mask));
 800be76:	f107 030c 	add.w	r3, r7, #12
 800be7a:	3305      	adds	r3, #5
 800be7c:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800be80:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800be84:	6812      	ldr	r2, [r2, #0]
 800be86:	320c      	adds	r2, #12
 800be88:	6812      	ldr	r2, [r2, #0]
 800be8a:	601a      	str	r2, [r3, #0]
    memcpy(opts + 11, &ifp->ip, sizeof(ifp->ip));
 800be8c:	f107 030c 	add.w	r3, r7, #12
 800be90:	330b      	adds	r3, #11
 800be92:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800be96:	f5a2 72a2 	sub.w	r2, r2, #324	; 0x144
 800be9a:	6812      	ldr	r2, [r2, #0]
 800be9c:	3208      	adds	r2, #8
 800be9e:	6812      	ldr	r2, [r2, #0]
 800bea0:	601a      	str	r2, [r3, #0]
    memcpy(&res.options, opts, sizeof(opts));
 800bea2:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bea6:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800beaa:	f507 72a4 	add.w	r2, r7, #328	; 0x148
 800beae:	f5a2 729e 	sub.w	r2, r2, #316	; 0x13c
 800beb2:	f103 04f0 	add.w	r4, r3, #240	; 0xf0
 800beb6:	4615      	mov	r5, r2
 800beb8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800beba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800bebc:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800bec0:	c403      	stmia	r4!, {r0, r1}
 800bec2:	8022      	strh	r2, [r4, #0]
 800bec4:	3402      	adds	r4, #2
 800bec6:	0c13      	lsrs	r3, r2, #16
 800bec8:	7023      	strb	r3, [r4, #0]
    res.magic = pkt->dhcp->magic;
 800beca:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bece:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bed2:	681b      	ldr	r3, [r3, #0]
 800bed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bed6:	f8d3 20ec 	ldr.w	r2, [r3, #236]	; 0xec
 800beda:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bede:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800bee2:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
    res.xid = pkt->dhcp->xid;
 800bee6:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800beea:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bef2:	685a      	ldr	r2, [r3, #4]
 800bef4:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bef8:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800befc:	605a      	str	r2, [r3, #4]
    // memcpy(ifp->gwmac, pkt->eth->src, sizeof(ifp->gwmac));
    tx_udp(ifp, pkt->eth->src, ifp->ip, mg_htons(67),
 800befe:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bf02:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800bf06:	681b      	ldr	r3, [r3, #0]
 800bf08:	691b      	ldr	r3, [r3, #16]
 800bf0a:	1d9d      	adds	r5, r3, #6
 800bf0c:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bf10:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800bf14:	681b      	ldr	r3, [r3, #0]
 800bf16:	689e      	ldr	r6, [r3, #8]
 800bf18:	2043      	movs	r0, #67	; 0x43
 800bf1a:	f7fe fad0 	bl	800a4be <mg_ntohs>
 800bf1e:	4603      	mov	r3, r0
 800bf20:	4698      	mov	r8, r3
 800bf22:	f897 3147 	ldrb.w	r3, [r7, #327]	; 0x147
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d005      	beq.n	800bf36 <rx_dhcp_server+0x34e>
 800bf2a:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bf2e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800bf32:	691c      	ldr	r4, [r3, #16]
 800bf34:	e001      	b.n	800bf3a <rx_dhcp_server+0x352>
 800bf36:	f04f 34ff 	mov.w	r4, #4294967295
 800bf3a:	2044      	movs	r0, #68	; 0x44
 800bf3c:	f7fe fabf 	bl	800a4be <mg_ntohs>
 800bf40:	4603      	mov	r3, r0
 800bf42:	461a      	mov	r2, r3
 800bf44:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 800bf48:	f5a3 70a2 	sub.w	r0, r3, #324	; 0x144
 800bf4c:	f44f 7388 	mov.w	r3, #272	; 0x110
 800bf50:	9303      	str	r3, [sp, #12]
 800bf52:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800bf56:	9302      	str	r3, [sp, #8]
 800bf58:	9201      	str	r2, [sp, #4]
 800bf5a:	9400      	str	r4, [sp, #0]
 800bf5c:	4643      	mov	r3, r8
 800bf5e:	4632      	mov	r2, r6
 800bf60:	4629      	mov	r1, r5
 800bf62:	6800      	ldr	r0, [r0, #0]
 800bf64:	f7ff f95e 	bl	800b224 <tx_udp>
 800bf68:	e000      	b.n	800bf6c <rx_dhcp_server+0x384>
  if (end < (uint8_t *) (pkt->dhcp + 1)) return;
 800bf6a:	bf00      	nop
           op == 1 ? ~0U : res.yiaddr, mg_htons(68), &res, sizeof(res));
  }
}
 800bf6c:	f507 77a4 	add.w	r7, r7, #328	; 0x148
 800bf70:	46bd      	mov	sp, r7
 800bf72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf76:	bf00      	nop
 800bf78:	080169ac 	.word	0x080169ac

0800bf7c <rx_udp>:

static void rx_udp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800bf7c:	b580      	push	{r7, lr}
 800bf7e:	b084      	sub	sp, #16
 800bf80:	af00      	add	r7, sp, #0
 800bf82:	6078      	str	r0, [r7, #4]
 800bf84:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, true);
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800bf8a:	2201      	movs	r2, #1
 800bf8c:	6839      	ldr	r1, [r7, #0]
 800bf8e:	4618      	mov	r0, r3
 800bf90:	f7ff faf0 	bl	800b574 <getpeer>
 800bf94:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800bf96:	68fb      	ldr	r3, [r7, #12]
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d059      	beq.n	800c050 <rx_udp+0xd4>
    // No UDP listener on this port. Should send ICMP, but keep silent.
  } else {
    c->rem.port = pkt->udp->sport;
 800bf9c:	683b      	ldr	r3, [r7, #0]
 800bf9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bfa0:	881b      	ldrh	r3, [r3, #0]
 800bfa2:	b29a      	uxth	r2, r3
 800bfa4:	68fb      	ldr	r3, [r7, #12]
 800bfa6:	859a      	strh	r2, [r3, #44]	; 0x2c
    memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800bfa8:	68fb      	ldr	r3, [r7, #12]
 800bfaa:	331c      	adds	r3, #28
 800bfac:	683a      	ldr	r2, [r7, #0]
 800bfae:	69d2      	ldr	r2, [r2, #28]
 800bfb0:	320c      	adds	r2, #12
 800bfb2:	6812      	ldr	r2, [r2, #0]
 800bfb4:	601a      	str	r2, [r3, #0]
    struct connstate *s = (struct connstate *) (c + 1);
 800bfb6:	68fb      	ldr	r3, [r7, #12]
 800bfb8:	3390      	adds	r3, #144	; 0x90
 800bfba:	60bb      	str	r3, [r7, #8]
    memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800bfbc:	68bb      	ldr	r3, [r7, #8]
 800bfbe:	f103 0010 	add.w	r0, r3, #16
 800bfc2:	683b      	ldr	r3, [r7, #0]
 800bfc4:	691b      	ldr	r3, [r3, #16]
 800bfc6:	3306      	adds	r3, #6
 800bfc8:	2206      	movs	r2, #6
 800bfca:	4619      	mov	r1, r3
 800bfcc:	f008 fc9a 	bl	8014904 <memcpy>
    if (c->recv.len >= MG_MAX_RECV_SIZE) {
 800bfd0:	68fb      	ldr	r3, [r7, #12]
 800bfd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfd4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800bfd8:	d304      	bcc.n	800bfe4 <rx_udp+0x68>
      mg_error(c, "max_recv_buf_size reached");
 800bfda:	491f      	ldr	r1, [pc, #124]	; (800c058 <rx_udp+0xdc>)
 800bfdc:	68f8      	ldr	r0, [r7, #12]
 800bfde:	f7f6 f85b 	bl	8002098 <mg_error>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
      c->recv.len += pkt->pay.len;
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800bfe2:	e035      	b.n	800c050 <rx_udp+0xd4>
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800bfe4:	68fb      	ldr	r3, [r7, #12]
 800bfe6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bfec:	1ad2      	subs	r2, r2, r3
 800bfee:	683b      	ldr	r3, [r7, #0]
 800bff0:	68db      	ldr	r3, [r3, #12]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d212      	bcs.n	800c01c <rx_udp+0xa0>
               !mg_iobuf_resize(&c->recv, c->recv.len + pkt->pay.len)) {
 800bff6:	68fb      	ldr	r3, [r7, #12]
 800bff8:	f103 0038 	add.w	r0, r3, #56	; 0x38
 800bffc:	68fb      	ldr	r3, [r7, #12]
 800bffe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c000:	683b      	ldr	r3, [r7, #0]
 800c002:	68db      	ldr	r3, [r3, #12]
 800c004:	4413      	add	r3, r2
 800c006:	4619      	mov	r1, r3
 800c008:	f7fa f814 	bl	8006034 <mg_iobuf_resize>
 800c00c:	4603      	mov	r3, r0
    } else if (c->recv.size - c->recv.len < pkt->pay.len &&
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d104      	bne.n	800c01c <rx_udp+0xa0>
      mg_error(c, "oom");
 800c012:	4912      	ldr	r1, [pc, #72]	; (800c05c <rx_udp+0xe0>)
 800c014:	68f8      	ldr	r0, [r7, #12]
 800c016:	f7f6 f83f 	bl	8002098 <mg_error>
}
 800c01a:	e019      	b.n	800c050 <rx_udp+0xd4>
      memcpy(&c->recv.buf[c->recv.len], pkt->pay.ptr, pkt->pay.len);
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c020:	68fb      	ldr	r3, [r7, #12]
 800c022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c024:	18d0      	adds	r0, r2, r3
 800c026:	683b      	ldr	r3, [r7, #0]
 800c028:	6899      	ldr	r1, [r3, #8]
 800c02a:	683b      	ldr	r3, [r7, #0]
 800c02c:	68db      	ldr	r3, [r3, #12]
 800c02e:	461a      	mov	r2, r3
 800c030:	f008 fc68 	bl	8014904 <memcpy>
      c->recv.len += pkt->pay.len;
 800c034:	68fb      	ldr	r3, [r7, #12]
 800c036:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800c038:	683b      	ldr	r3, [r7, #0]
 800c03a:	68db      	ldr	r3, [r3, #12]
 800c03c:	441a      	add	r2, r3
 800c03e:	68fb      	ldr	r3, [r7, #12]
 800c040:	641a      	str	r2, [r3, #64]	; 0x40
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800c042:	683b      	ldr	r3, [r7, #0]
 800c044:	330c      	adds	r3, #12
 800c046:	461a      	mov	r2, r3
 800c048:	2107      	movs	r1, #7
 800c04a:	68f8      	ldr	r0, [r7, #12]
 800c04c:	f7f6 f802 	bl	8002054 <mg_call>
}
 800c050:	bf00      	nop
 800c052:	3710      	adds	r7, #16
 800c054:	46bd      	mov	sp, r7
 800c056:	bd80      	pop	{r7, pc}
 800c058:	08016abc 	.word	0x08016abc
 800c05c:	08016ad8 	.word	0x08016ad8

0800c060 <tx_tcp>:

static size_t tx_tcp(struct mg_tcpip_if *ifp, uint8_t *dst_mac, uint32_t dst_ip,
                     uint8_t flags, uint16_t sport, uint16_t dport,
                     uint32_t seq, uint32_t ack, const void *buf, size_t len) {
 800c060:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c062:	b091      	sub	sp, #68	; 0x44
 800c064:	af06      	add	r7, sp, #24
 800c066:	60f8      	str	r0, [r7, #12]
 800c068:	60b9      	str	r1, [r7, #8]
 800c06a:	607a      	str	r2, [r7, #4]
 800c06c:	70fb      	strb	r3, [r7, #3]
  struct ip *ip =
      tx_ip(ifp, dst_mac, 6, ifp->ip, dst_ip, sizeof(struct tcp) + len);
 800c06e:	68fb      	ldr	r3, [r7, #12]
 800c070:	689a      	ldr	r2, [r3, #8]
 800c072:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c074:	3314      	adds	r3, #20
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	687b      	ldr	r3, [r7, #4]
 800c07a:	9300      	str	r3, [sp, #0]
 800c07c:	4613      	mov	r3, r2
 800c07e:	2206      	movs	r2, #6
 800c080:	68b9      	ldr	r1, [r7, #8]
 800c082:	68f8      	ldr	r0, [r7, #12]
 800c084:	f7ff f878 	bl	800b178 <tx_ip>
 800c088:	6278      	str	r0, [r7, #36]	; 0x24
  struct tcp *tcp = (struct tcp *) (ip + 1);
 800c08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c08c:	3314      	adds	r3, #20
 800c08e:	623b      	str	r3, [r7, #32]
  memset(tcp, 0, sizeof(*tcp));
 800c090:	2214      	movs	r2, #20
 800c092:	2100      	movs	r1, #0
 800c094:	6a38      	ldr	r0, [r7, #32]
 800c096:	f008 fb4d 	bl	8014734 <memset>
  if (buf != NULL && len) memmove(tcp + 1, buf, len);
 800c09a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	d009      	beq.n	800c0b4 <tx_tcp+0x54>
 800c0a0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d006      	beq.n	800c0b4 <tx_tcp+0x54>
 800c0a6:	6a3b      	ldr	r3, [r7, #32]
 800c0a8:	3314      	adds	r3, #20
 800c0aa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800c0ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800c0ae:	4618      	mov	r0, r3
 800c0b0:	f008 fb26 	bl	8014700 <memmove>
  tcp->sport = sport;
 800c0b4:	6a3b      	ldr	r3, [r7, #32]
 800c0b6:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 800c0ba:	801a      	strh	r2, [r3, #0]
  tcp->dport = dport;
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 800c0c2:	805a      	strh	r2, [r3, #2]
  tcp->seq = seq;
 800c0c4:	6a3b      	ldr	r3, [r7, #32]
 800c0c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c0c8:	605a      	str	r2, [r3, #4]
  tcp->ack = ack;
 800c0ca:	6a3b      	ldr	r3, [r7, #32]
 800c0cc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800c0ce:	609a      	str	r2, [r3, #8]
  tcp->flags = flags;
 800c0d0:	6a3b      	ldr	r3, [r7, #32]
 800c0d2:	78fa      	ldrb	r2, [r7, #3]
 800c0d4:	735a      	strb	r2, [r3, #13]
  tcp->win = mg_htons(8192);
 800c0d6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800c0da:	f7fe f9f0 	bl	800a4be <mg_ntohs>
 800c0de:	4603      	mov	r3, r0
 800c0e0:	461a      	mov	r2, r3
 800c0e2:	6a3b      	ldr	r3, [r7, #32]
 800c0e4:	81da      	strh	r2, [r3, #14]
  tcp->off = (uint8_t) (sizeof(*tcp) / 4 << 4);
 800c0e6:	6a3b      	ldr	r3, [r7, #32]
 800c0e8:	2250      	movs	r2, #80	; 0x50
 800c0ea:	731a      	strb	r2, [r3, #12]
  uint32_t cs = 0;
 800c0ec:	2300      	movs	r3, #0
 800c0ee:	61fb      	str	r3, [r7, #28]
  uint16_t n = (uint16_t) (sizeof(*tcp) + len);
 800c0f0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c0f2:	b29b      	uxth	r3, r3
 800c0f4:	3314      	adds	r3, #20
 800c0f6:	837b      	strh	r3, [r7, #26]
  uint8_t pseudo[] = {0, ip->proto, (uint8_t) (n >> 8), (uint8_t) (n & 255)};
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	753b      	strb	r3, [r7, #20]
 800c0fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c0fe:	7a5b      	ldrb	r3, [r3, #9]
 800c100:	757b      	strb	r3, [r7, #21]
 800c102:	8b7b      	ldrh	r3, [r7, #26]
 800c104:	0a1b      	lsrs	r3, r3, #8
 800c106:	b29b      	uxth	r3, r3
 800c108:	b2db      	uxtb	r3, r3
 800c10a:	75bb      	strb	r3, [r7, #22]
 800c10c:	8b7b      	ldrh	r3, [r7, #26]
 800c10e:	b2db      	uxtb	r3, r3
 800c110:	75fb      	strb	r3, [r7, #23]
  cs = csumup(cs, tcp, n);
 800c112:	8b7b      	ldrh	r3, [r7, #26]
 800c114:	461a      	mov	r2, r3
 800c116:	6a39      	ldr	r1, [r7, #32]
 800c118:	69f8      	ldr	r0, [r7, #28]
 800c11a:	f7fe fed3 	bl	800aec4 <csumup>
 800c11e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->src, sizeof(ip->src));
 800c120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c122:	330c      	adds	r3, #12
 800c124:	2204      	movs	r2, #4
 800c126:	4619      	mov	r1, r3
 800c128:	69f8      	ldr	r0, [r7, #28]
 800c12a:	f7fe fecb 	bl	800aec4 <csumup>
 800c12e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, &ip->dst, sizeof(ip->dst));
 800c130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c132:	3310      	adds	r3, #16
 800c134:	2204      	movs	r2, #4
 800c136:	4619      	mov	r1, r3
 800c138:	69f8      	ldr	r0, [r7, #28]
 800c13a:	f7fe fec3 	bl	800aec4 <csumup>
 800c13e:	61f8      	str	r0, [r7, #28]
  cs = csumup(cs, pseudo, sizeof(pseudo));
 800c140:	f107 0314 	add.w	r3, r7, #20
 800c144:	2204      	movs	r2, #4
 800c146:	4619      	mov	r1, r3
 800c148:	69f8      	ldr	r0, [r7, #28]
 800c14a:	f7fe febb 	bl	800aec4 <csumup>
 800c14e:	61f8      	str	r0, [r7, #28]
  tcp->csum = csumfin(cs);
 800c150:	69f8      	ldr	r0, [r7, #28]
 800c152:	f7fe fee4 	bl	800af1e <csumfin>
 800c156:	4603      	mov	r3, r0
 800c158:	461a      	mov	r2, r3
 800c15a:	6a3b      	ldr	r3, [r7, #32]
 800c15c:	821a      	strh	r2, [r3, #16]
  MG_DEBUG(("TCP %M:%hu -> %M:%hu fl %x len %u", mg_print_ip4, &ip->src,
 800c15e:	4b21      	ldr	r3, [pc, #132]	; (800c1e4 <tx_tcp+0x184>)
 800c160:	f641 7253 	movw	r2, #8019	; 0x1f53
 800c164:	4920      	ldr	r1, [pc, #128]	; (800c1e8 <tx_tcp+0x188>)
 800c166:	2003      	movs	r0, #3
 800c168:	f7fa ff54 	bl	8007014 <mg_log_prefix>
 800c16c:	4603      	mov	r3, r0
 800c16e:	2b00      	cmp	r3, #0
 800c170:	d025      	beq.n	800c1be <tx_tcp+0x15e>
 800c172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c174:	f103 050c 	add.w	r5, r3, #12
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	881b      	ldrh	r3, [r3, #0]
 800c17c:	b29b      	uxth	r3, r3
 800c17e:	4618      	mov	r0, r3
 800c180:	f7fe f99d 	bl	800a4be <mg_ntohs>
 800c184:	4603      	mov	r3, r0
 800c186:	461e      	mov	r6, r3
 800c188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c18a:	f103 0410 	add.w	r4, r3, #16
 800c18e:	6a3b      	ldr	r3, [r7, #32]
 800c190:	885b      	ldrh	r3, [r3, #2]
 800c192:	b29b      	uxth	r3, r3
 800c194:	4618      	mov	r0, r3
 800c196:	f7fe f992 	bl	800a4be <mg_ntohs>
 800c19a:	4603      	mov	r3, r0
 800c19c:	461a      	mov	r2, r3
 800c19e:	6a3b      	ldr	r3, [r7, #32]
 800c1a0:	7b5b      	ldrb	r3, [r3, #13]
 800c1a2:	4619      	mov	r1, r3
 800c1a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1a6:	9304      	str	r3, [sp, #16]
 800c1a8:	9103      	str	r1, [sp, #12]
 800c1aa:	9202      	str	r2, [sp, #8]
 800c1ac:	9401      	str	r4, [sp, #4]
 800c1ae:	4b0f      	ldr	r3, [pc, #60]	; (800c1ec <tx_tcp+0x18c>)
 800c1b0:	9300      	str	r3, [sp, #0]
 800c1b2:	4633      	mov	r3, r6
 800c1b4:	462a      	mov	r2, r5
 800c1b6:	490d      	ldr	r1, [pc, #52]	; (800c1ec <tx_tcp+0x18c>)
 800c1b8:	480d      	ldr	r0, [pc, #52]	; (800c1f0 <tx_tcp+0x190>)
 800c1ba:	f7fa ff85 	bl	80070c8 <mg_log>
            mg_ntohs(tcp->sport), mg_print_ip4, &ip->dst, mg_ntohs(tcp->dport),
            tcp->flags, (int) len));
  return ether_output(ifp, PDIFF(ifp->tx.ptr, tcp + 1) + len);
 800c1be:	6a3b      	ldr	r3, [r7, #32]
 800c1c0:	f103 0214 	add.w	r2, r3, #20
 800c1c4:	68fb      	ldr	r3, [r7, #12]
 800c1c6:	695b      	ldr	r3, [r3, #20]
 800c1c8:	1ad3      	subs	r3, r2, r3
 800c1ca:	461a      	mov	r2, r3
 800c1cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800c1ce:	4413      	add	r3, r2
 800c1d0:	4619      	mov	r1, r3
 800c1d2:	68f8      	ldr	r0, [r7, #12]
 800c1d4:	f7fe fed1 	bl	800af7a <ether_output>
 800c1d8:	4603      	mov	r3, r0
}
 800c1da:	4618      	mov	r0, r3
 800c1dc:	372c      	adds	r7, #44	; 0x2c
 800c1de:	46bd      	mov	sp, r7
 800c1e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c1e2:	bf00      	nop
 800c1e4:	080175b0 	.word	0x080175b0
 800c1e8:	0801544c 	.word	0x0801544c
 800c1ec:	08008d51 	.word	0x08008d51
 800c1f0:	08016adc 	.word	0x08016adc

0800c1f4 <tx_tcp_pkt>:

static size_t tx_tcp_pkt(struct mg_tcpip_if *ifp, struct pkt *pkt,
                         uint8_t flags, uint32_t seq, const void *buf,
                         size_t len) {
 800c1f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c1f8:	b08c      	sub	sp, #48	; 0x30
 800c1fa:	af06      	add	r7, sp, #24
 800c1fc:	60f8      	str	r0, [r7, #12]
 800c1fe:	60b9      	str	r1, [r7, #8]
 800c200:	603b      	str	r3, [r7, #0]
 800c202:	4613      	mov	r3, r2
 800c204:	71fb      	strb	r3, [r7, #7]
  uint32_t delta = (pkt->tcp->flags & (TH_SYN | TH_FIN)) ? 1 : 0;
 800c206:	68bb      	ldr	r3, [r7, #8]
 800c208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c20a:	7b5b      	ldrb	r3, [r3, #13]
 800c20c:	f003 0303 	and.w	r3, r3, #3
 800c210:	2b00      	cmp	r3, #0
 800c212:	bf14      	ite	ne
 800c214:	2301      	movne	r3, #1
 800c216:	2300      	moveq	r3, #0
 800c218:	b2db      	uxtb	r3, r3
 800c21a:	617b      	str	r3, [r7, #20]
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800c21c:	68bb      	ldr	r3, [r7, #8]
 800c21e:	691b      	ldr	r3, [r3, #16]
 800c220:	1d9e      	adds	r6, r3, #6
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	69db      	ldr	r3, [r3, #28]
 800c226:	f8d3 800c 	ldr.w	r8, [r3, #12]
 800c22a:	68bb      	ldr	r3, [r7, #8]
 800c22c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c22e:	885b      	ldrh	r3, [r3, #2]
 800c230:	b29c      	uxth	r4, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800c232:	68bb      	ldr	r3, [r7, #8]
 800c234:	6a9b      	ldr	r3, [r3, #40]	; 0x28
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800c236:	881b      	ldrh	r3, [r3, #0]
 800c238:	b29d      	uxth	r5, r3
                pkt->tcp->sport, seq, mg_htonl(mg_ntohl(pkt->tcp->seq) + delta),
 800c23a:	68bb      	ldr	r3, [r7, #8]
 800c23c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c23e:	685b      	ldr	r3, [r3, #4]
 800c240:	4618      	mov	r0, r3
 800c242:	f7fe f923 	bl	800a48c <mg_ntohl>
 800c246:	4602      	mov	r2, r0
  return tx_tcp(ifp, pkt->eth->src, pkt->ip->src, flags, pkt->tcp->dport,
 800c248:	697b      	ldr	r3, [r7, #20]
 800c24a:	4413      	add	r3, r2
 800c24c:	4618      	mov	r0, r3
 800c24e:	f7fe f91d 	bl	800a48c <mg_ntohl>
 800c252:	4601      	mov	r1, r0
 800c254:	79fa      	ldrb	r2, [r7, #7]
 800c256:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c258:	9305      	str	r3, [sp, #20]
 800c25a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c25c:	9304      	str	r3, [sp, #16]
 800c25e:	9103      	str	r1, [sp, #12]
 800c260:	683b      	ldr	r3, [r7, #0]
 800c262:	9302      	str	r3, [sp, #8]
 800c264:	9501      	str	r5, [sp, #4]
 800c266:	9400      	str	r4, [sp, #0]
 800c268:	4613      	mov	r3, r2
 800c26a:	4642      	mov	r2, r8
 800c26c:	4631      	mov	r1, r6
 800c26e:	68f8      	ldr	r0, [r7, #12]
 800c270:	f7ff fef6 	bl	800c060 <tx_tcp>
 800c274:	4603      	mov	r3, r0
                buf, len);
}
 800c276:	4618      	mov	r0, r3
 800c278:	3718      	adds	r7, #24
 800c27a:	46bd      	mov	sp, r7
 800c27c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800c280 <settmout>:

static void settmout(struct mg_connection *c, uint8_t type) {
 800c280:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800c284:	b088      	sub	sp, #32
 800c286:	af02      	add	r7, sp, #8
 800c288:	6078      	str	r0, [r7, #4]
 800c28a:	460b      	mov	r3, r1
 800c28c:	70fb      	strb	r3, [r7, #3]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	685b      	ldr	r3, [r3, #4]
 800c292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c294:	617b      	str	r3, [r7, #20]
  struct connstate *s = (struct connstate *) (c + 1);
 800c296:	687b      	ldr	r3, [r7, #4]
 800c298:	3390      	adds	r3, #144	; 0x90
 800c29a:	613b      	str	r3, [r7, #16]
  unsigned n = type == MIP_TTYPE_ACK ? MIP_TCP_ACK_MS : MIP_TCP_KEEPALIVE_MS;
 800c29c:	78fb      	ldrb	r3, [r7, #3]
 800c29e:	2b01      	cmp	r3, #1
 800c2a0:	d101      	bne.n	800c2a6 <settmout+0x26>
 800c2a2:	2396      	movs	r3, #150	; 0x96
 800c2a4:	e001      	b.n	800c2aa <settmout+0x2a>
 800c2a6:	f64a 73c8 	movw	r3, #45000	; 0xafc8
 800c2aa:	60fb      	str	r3, [r7, #12]
  s->timer = ifp->now + n;
 800c2ac:	697b      	ldr	r3, [r7, #20]
 800c2ae:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800c2b2:	68f9      	ldr	r1, [r7, #12]
 800c2b4:	2000      	movs	r0, #0
 800c2b6:	460c      	mov	r4, r1
 800c2b8:	4605      	mov	r5, r0
 800c2ba:	eb12 0804 	adds.w	r8, r2, r4
 800c2be:	eb43 0905 	adc.w	r9, r3, r5
 800c2c2:	693b      	ldr	r3, [r7, #16]
 800c2c4:	e9c3 8902 	strd	r8, r9, [r3, #8]
  s->ttype = type;
 800c2c8:	693b      	ldr	r3, [r7, #16]
 800c2ca:	78fa      	ldrb	r2, [r7, #3]
 800c2cc:	759a      	strb	r2, [r3, #22]
  MG_VERBOSE(("%lu %d -> %llx", c->id, type, s->timer));
 800c2ce:	4b0d      	ldr	r3, [pc, #52]	; (800c304 <settmout+0x84>)
 800c2d0:	f641 7268 	movw	r2, #8040	; 0x1f68
 800c2d4:	490c      	ldr	r1, [pc, #48]	; (800c308 <settmout+0x88>)
 800c2d6:	2004      	movs	r0, #4
 800c2d8:	f7fa fe9c 	bl	8007014 <mg_log_prefix>
 800c2dc:	4603      	mov	r3, r0
 800c2de:	2b00      	cmp	r3, #0
 800c2e0:	d00b      	beq.n	800c2fa <settmout+0x7a>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c2e6:	78f8      	ldrb	r0, [r7, #3]
 800c2e8:	693b      	ldr	r3, [r7, #16]
 800c2ea:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800c2ee:	e9cd 2300 	strd	r2, r3, [sp]
 800c2f2:	4602      	mov	r2, r0
 800c2f4:	4805      	ldr	r0, [pc, #20]	; (800c30c <settmout+0x8c>)
 800c2f6:	f7fa fee7 	bl	80070c8 <mg_log>
}
 800c2fa:	bf00      	nop
 800c2fc:	3718      	adds	r7, #24
 800c2fe:	46bd      	mov	sp, r7
 800c300:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800c304:	080175b8 	.word	0x080175b8
 800c308:	0801544c 	.word	0x0801544c
 800c30c:	08016b00 	.word	0x08016b00

0800c310 <accept_conn>:

static struct mg_connection *accept_conn(struct mg_connection *lsn,
                                         struct pkt *pkt) {
 800c310:	b5b0      	push	{r4, r5, r7, lr}
 800c312:	b084      	sub	sp, #16
 800c314:	af00      	add	r7, sp, #0
 800c316:	6078      	str	r0, [r7, #4]
 800c318:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = mg_alloc_conn(lsn->mgr);
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	685b      	ldr	r3, [r3, #4]
 800c31e:	4618      	mov	r0, r3
 800c320:	f7fc f9ec 	bl	80086fc <mg_alloc_conn>
 800c324:	60f8      	str	r0, [r7, #12]
  if (c == NULL) {
 800c326:	68fb      	ldr	r3, [r7, #12]
 800c328:	2b00      	cmp	r3, #0
 800c32a:	d10e      	bne.n	800c34a <accept_conn+0x3a>
    MG_ERROR(("OOM"));
 800c32c:	4b4b      	ldr	r3, [pc, #300]	; (800c45c <accept_conn+0x14c>)
 800c32e:	f641 726f 	movw	r2, #8047	; 0x1f6f
 800c332:	494b      	ldr	r1, [pc, #300]	; (800c460 <accept_conn+0x150>)
 800c334:	2001      	movs	r0, #1
 800c336:	f7fa fe6d 	bl	8007014 <mg_log_prefix>
 800c33a:	4603      	mov	r3, r0
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d002      	beq.n	800c346 <accept_conn+0x36>
 800c340:	4848      	ldr	r0, [pc, #288]	; (800c464 <accept_conn+0x154>)
 800c342:	f7fa fec1 	bl	80070c8 <mg_log>
    return NULL;
 800c346:	2300      	movs	r3, #0
 800c348:	e083      	b.n	800c452 <accept_conn+0x142>
  }
  struct connstate *s = (struct connstate *) (c + 1);
 800c34a:	68fb      	ldr	r3, [r7, #12]
 800c34c:	3390      	adds	r3, #144	; 0x90
 800c34e:	60bb      	str	r3, [r7, #8]
  s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq);
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	4618      	mov	r0, r3
 800c358:	f7fe f898 	bl	800a48c <mg_ntohl>
 800c35c:	4602      	mov	r2, r0
 800c35e:	68bb      	ldr	r3, [r7, #8]
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	683b      	ldr	r3, [r7, #0]
 800c364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c366:	685b      	ldr	r3, [r3, #4]
 800c368:	4618      	mov	r0, r3
 800c36a:	f7fe f88f 	bl	800a48c <mg_ntohl>
 800c36e:	4602      	mov	r2, r0
 800c370:	68bb      	ldr	r3, [r7, #8]
 800c372:	605a      	str	r2, [r3, #4]
  memcpy(s->mac, pkt->eth->src, sizeof(s->mac));
 800c374:	68bb      	ldr	r3, [r7, #8]
 800c376:	f103 0010 	add.w	r0, r3, #16
 800c37a:	683b      	ldr	r3, [r7, #0]
 800c37c:	691b      	ldr	r3, [r3, #16]
 800c37e:	3306      	adds	r3, #6
 800c380:	2206      	movs	r2, #6
 800c382:	4619      	mov	r1, r3
 800c384:	f008 fabe 	bl	8014904 <memcpy>
  settmout(c, MIP_TTYPE_KEEPALIVE);
 800c388:	2100      	movs	r1, #0
 800c38a:	68f8      	ldr	r0, [r7, #12]
 800c38c:	f7ff ff78 	bl	800c280 <settmout>
  memcpy(c->rem.ip, &pkt->ip->src, sizeof(uint32_t));
 800c390:	68fb      	ldr	r3, [r7, #12]
 800c392:	331c      	adds	r3, #28
 800c394:	683a      	ldr	r2, [r7, #0]
 800c396:	69d2      	ldr	r2, [r2, #28]
 800c398:	320c      	adds	r2, #12
 800c39a:	6812      	ldr	r2, [r2, #0]
 800c39c:	601a      	str	r2, [r3, #0]
  c->rem.port = pkt->tcp->sport;
 800c39e:	683b      	ldr	r3, [r7, #0]
 800c3a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c3a2:	881b      	ldrh	r3, [r3, #0]
 800c3a4:	b29a      	uxth	r2, r3
 800c3a6:	68fb      	ldr	r3, [r7, #12]
 800c3a8:	859a      	strh	r2, [r3, #44]	; 0x2c
  MG_DEBUG(("%lu accepted %M", c->id, mg_print_ip_port, &c->rem));
 800c3aa:	4b2c      	ldr	r3, [pc, #176]	; (800c45c <accept_conn+0x14c>)
 800c3ac:	f641 7278 	movw	r2, #8056	; 0x1f78
 800c3b0:	492b      	ldr	r1, [pc, #172]	; (800c460 <accept_conn+0x150>)
 800c3b2:	2003      	movs	r0, #3
 800c3b4:	f7fa fe2e 	bl	8007014 <mg_log_prefix>
 800c3b8:	4603      	mov	r3, r0
 800c3ba:	2b00      	cmp	r3, #0
 800c3bc:	d007      	beq.n	800c3ce <accept_conn+0xbe>
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	331c      	adds	r3, #28
 800c3c6:	4a28      	ldr	r2, [pc, #160]	; (800c468 <accept_conn+0x158>)
 800c3c8:	4828      	ldr	r0, [pc, #160]	; (800c46c <accept_conn+0x15c>)
 800c3ca:	f7fa fe7d 	bl	80070c8 <mg_log>
  LIST_ADD_HEAD(struct mg_connection, &lsn->mgr->conns, c);
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	685b      	ldr	r3, [r3, #4]
 800c3d2:	681a      	ldr	r2, [r3, #0]
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	601a      	str	r2, [r3, #0]
 800c3d8:	687b      	ldr	r3, [r7, #4]
 800c3da:	685b      	ldr	r3, [r3, #4]
 800c3dc:	68fa      	ldr	r2, [r7, #12]
 800c3de:	601a      	str	r2, [r3, #0]
  c->is_accepted = 1;
 800c3e0:	68fa      	ldr	r2, [r7, #12]
 800c3e2:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800c3e6:	f043 0304 	orr.w	r3, r3, #4
 800c3ea:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  c->is_hexdumping = lsn->is_hexdumping;
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c3f4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800c3f8:	b2d9      	uxtb	r1, r3
 800c3fa:	68fa      	ldr	r2, [r7, #12]
 800c3fc:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800c400:	f361 03c3 	bfi	r3, r1, #3, #1
 800c404:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
  c->pfn = lsn->pfn;
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	661a      	str	r2, [r3, #96]	; 0x60
  c->loc = lsn->loc;
 800c410:	68fa      	ldr	r2, [r7, #12]
 800c412:	687b      	ldr	r3, [r7, #4]
 800c414:	f102 0408 	add.w	r4, r2, #8
 800c418:	f103 0508 	add.w	r5, r3, #8
 800c41c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800c41e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800c420:	682b      	ldr	r3, [r5, #0]
 800c422:	6023      	str	r3, [r4, #0]
  c->pfn_data = lsn->pfn_data;
 800c424:	687b      	ldr	r3, [r7, #4]
 800c426:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	665a      	str	r2, [r3, #100]	; 0x64
  c->fn = lsn->fn;
 800c42c:	687b      	ldr	r3, [r7, #4]
 800c42e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	659a      	str	r2, [r3, #88]	; 0x58
  c->fn_data = lsn->fn_data;
 800c434:	687b      	ldr	r3, [r7, #4]
 800c436:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	65da      	str	r2, [r3, #92]	; 0x5c
  mg_call(c, MG_EV_OPEN, NULL);
 800c43c:	2200      	movs	r2, #0
 800c43e:	2101      	movs	r1, #1
 800c440:	68f8      	ldr	r0, [r7, #12]
 800c442:	f7f5 fe07 	bl	8002054 <mg_call>
  mg_call(c, MG_EV_ACCEPT, NULL);
 800c446:	2200      	movs	r2, #0
 800c448:	2105      	movs	r1, #5
 800c44a:	68f8      	ldr	r0, [r7, #12]
 800c44c:	f7f5 fe02 	bl	8002054 <mg_call>
  return c;
 800c450:	68fb      	ldr	r3, [r7, #12]
}
 800c452:	4618      	mov	r0, r3
 800c454:	3710      	adds	r7, #16
 800c456:	46bd      	mov	sp, r7
 800c458:	bdb0      	pop	{r4, r5, r7, pc}
 800c45a:	bf00      	nop
 800c45c:	080175c4 	.word	0x080175c4
 800c460:	0801544c 	.word	0x0801544c
 800c464:	08016178 	.word	0x08016178
 800c468:	08008dc9 	.word	0x08008dc9
 800c46c:	08016b10 	.word	0x08016b10

0800c470 <mg_io_send>:

long mg_io_send(struct mg_connection *c, const void *buf, size_t len) {
 800c470:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c472:	b093      	sub	sp, #76	; 0x4c
 800c474:	af06      	add	r7, sp, #24
 800c476:	6178      	str	r0, [r7, #20]
 800c478:	6139      	str	r1, [r7, #16]
 800c47a:	60fa      	str	r2, [r7, #12]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800c47c:	697b      	ldr	r3, [r7, #20]
 800c47e:	685b      	ldr	r3, [r3, #4]
 800c480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c482:	62fb      	str	r3, [r7, #44]	; 0x2c
  struct connstate *s = (struct connstate *) (c + 1);
 800c484:	697b      	ldr	r3, [r7, #20]
 800c486:	3390      	adds	r3, #144	; 0x90
 800c488:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800c48a:	697b      	ldr	r3, [r7, #20]
 800c48c:	331c      	adds	r3, #28
 800c48e:	681b      	ldr	r3, [r3, #0]
 800c490:	61fb      	str	r3, [r7, #28]
  if (c->is_udp) {
 800c492:	697b      	ldr	r3, [r7, #20]
 800c494:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800c498:	f003 0301 	and.w	r3, r3, #1
 800c49c:	b2db      	uxtb	r3, r3
 800c49e:	2b00      	cmp	r3, #0
 800c4a0:	d024      	beq.n	800c4ec <mg_io_send+0x7c>
    size_t max_headers_len = 14 + 24 /* max IP */ + 8 /* UDP */;
 800c4a2:	232e      	movs	r3, #46	; 0x2e
 800c4a4:	623b      	str	r3, [r7, #32]
    if (len + max_headers_len > ifp->tx.len) {
 800c4a6:	68fa      	ldr	r2, [r7, #12]
 800c4a8:	6a3b      	ldr	r3, [r7, #32]
 800c4aa:	441a      	add	r2, r3
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	699b      	ldr	r3, [r3, #24]
 800c4b0:	429a      	cmp	r2, r3
 800c4b2:	d904      	bls.n	800c4be <mg_io_send+0x4e>
      len = ifp->tx.len - max_headers_len;
 800c4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4b6:	699a      	ldr	r2, [r3, #24]
 800c4b8:	6a3b      	ldr	r3, [r7, #32]
 800c4ba:	1ad3      	subs	r3, r2, r3
 800c4bc:	60fb      	str	r3, [r7, #12]
    }
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800c4be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c4c0:	f103 0010 	add.w	r0, r3, #16
 800c4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4c6:	689c      	ldr	r4, [r3, #8]
 800c4c8:	697b      	ldr	r3, [r7, #20]
 800c4ca:	8b1d      	ldrh	r5, [r3, #24]
 800c4cc:	69fb      	ldr	r3, [r7, #28]
 800c4ce:	697a      	ldr	r2, [r7, #20]
 800c4d0:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800c4d2:	68f9      	ldr	r1, [r7, #12]
 800c4d4:	9103      	str	r1, [sp, #12]
 800c4d6:	6939      	ldr	r1, [r7, #16]
 800c4d8:	9102      	str	r1, [sp, #8]
 800c4da:	9201      	str	r2, [sp, #4]
 800c4dc:	9300      	str	r3, [sp, #0]
 800c4de:	462b      	mov	r3, r5
 800c4e0:	4622      	mov	r2, r4
 800c4e2:	4601      	mov	r1, r0
 800c4e4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4e6:	f7fe fe9d 	bl	800b224 <tx_udp>
 800c4ea:	e046      	b.n	800c57a <mg_io_send+0x10a>
  } else {
    size_t max_headers_len = 14 + 24 /* max IP */ + 60 /* max TCP */;
 800c4ec:	2362      	movs	r3, #98	; 0x62
 800c4ee:	627b      	str	r3, [r7, #36]	; 0x24
    if (len + max_headers_len > ifp->tx.len)
 800c4f0:	68fa      	ldr	r2, [r7, #12]
 800c4f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c4f4:	441a      	add	r2, r3
 800c4f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4f8:	699b      	ldr	r3, [r3, #24]
 800c4fa:	429a      	cmp	r2, r3
 800c4fc:	d904      	bls.n	800c508 <mg_io_send+0x98>
      len = ifp->tx.len - max_headers_len;
 800c4fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c500:	699a      	ldr	r2, [r3, #24]
 800c502:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c504:	1ad3      	subs	r3, r2, r3
 800c506:	60fb      	str	r3, [r7, #12]
    if (tx_tcp(ifp, s->mac, rem_ip, TH_PUSH | TH_ACK, c->loc.port, c->rem.port,
 800c508:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c50a:	f103 0610 	add.w	r6, r3, #16
 800c50e:	69fb      	ldr	r3, [r7, #28]
 800c510:	60bb      	str	r3, [r7, #8]
 800c512:	697b      	ldr	r3, [r7, #20]
 800c514:	8b1c      	ldrh	r4, [r3, #24]
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800c51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	4618      	mov	r0, r3
 800c520:	f7fd ffb4 	bl	800a48c <mg_ntohl>
 800c524:	6078      	str	r0, [r7, #4]
 800c526:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c528:	685b      	ldr	r3, [r3, #4]
 800c52a:	4618      	mov	r0, r3
 800c52c:	f7fd ffae 	bl	800a48c <mg_ntohl>
 800c530:	4602      	mov	r2, r0
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	9305      	str	r3, [sp, #20]
 800c536:	693b      	ldr	r3, [r7, #16]
 800c538:	9304      	str	r3, [sp, #16]
 800c53a:	9203      	str	r2, [sp, #12]
 800c53c:	6879      	ldr	r1, [r7, #4]
 800c53e:	9102      	str	r1, [sp, #8]
 800c540:	9501      	str	r5, [sp, #4]
 800c542:	9400      	str	r4, [sp, #0]
 800c544:	2318      	movs	r3, #24
 800c546:	68ba      	ldr	r2, [r7, #8]
 800c548:	4631      	mov	r1, r6
 800c54a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c54c:	f7ff fd88 	bl	800c060 <tx_tcp>
 800c550:	4603      	mov	r3, r0
 800c552:	2b00      	cmp	r3, #0
 800c554:	d00e      	beq.n	800c574 <mg_io_send+0x104>
               mg_htonl(s->seq), mg_htonl(s->ack), buf, len) > 0) {
      s->seq += (uint32_t) len;
 800c556:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c558:	681a      	ldr	r2, [r3, #0]
 800c55a:	68fb      	ldr	r3, [r7, #12]
 800c55c:	441a      	add	r2, r3
 800c55e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c560:	601a      	str	r2, [r3, #0]
      if (s->ttype == MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_KEEPALIVE);
 800c562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c564:	7d9b      	ldrb	r3, [r3, #22]
 800c566:	2b01      	cmp	r3, #1
 800c568:	d107      	bne.n	800c57a <mg_io_send+0x10a>
 800c56a:	2100      	movs	r1, #0
 800c56c:	6978      	ldr	r0, [r7, #20]
 800c56e:	f7ff fe87 	bl	800c280 <settmout>
 800c572:	e002      	b.n	800c57a <mg_io_send+0x10a>
    } else {
      return MG_IO_ERR;
 800c574:	f04f 33ff 	mov.w	r3, #4294967295
 800c578:	e000      	b.n	800c57c <mg_io_send+0x10c>
    }
  }
  return (long) len;
 800c57a:	68fb      	ldr	r3, [r7, #12]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3734      	adds	r7, #52	; 0x34
 800c580:	46bd      	mov	sp, r7
 800c582:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800c584 <read_conn>:
  mg_iobuf_del(&s->raw, 0, len);
  MG_DEBUG(("%lu", len));
  return (long) len;
}

static void read_conn(struct mg_connection *c, struct pkt *pkt) {
 800c584:	b590      	push	{r4, r7, lr}
 800c586:	b08b      	sub	sp, #44	; 0x2c
 800c588:	af02      	add	r7, sp, #8
 800c58a:	6078      	str	r0, [r7, #4]
 800c58c:	6039      	str	r1, [r7, #0]
  struct connstate *s = (struct connstate *) (c + 1);
 800c58e:	687b      	ldr	r3, [r7, #4]
 800c590:	3390      	adds	r3, #144	; 0x90
 800c592:	61fb      	str	r3, [r7, #28]
  struct mg_iobuf *io = c->is_tls ? &s->raw : &c->recv;
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c59a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c59e:	b2db      	uxtb	r3, r3
 800c5a0:	2b00      	cmp	r3, #0
 800c5a2:	d002      	beq.n	800c5aa <read_conn+0x26>
 800c5a4:	69fb      	ldr	r3, [r7, #28]
 800c5a6:	3318      	adds	r3, #24
 800c5a8:	e001      	b.n	800c5ae <read_conn+0x2a>
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	3338      	adds	r3, #56	; 0x38
 800c5ae:	61bb      	str	r3, [r7, #24]
  uint32_t seq = mg_ntohl(pkt->tcp->seq);
 800c5b0:	683b      	ldr	r3, [r7, #0]
 800c5b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5b4:	685b      	ldr	r3, [r3, #4]
 800c5b6:	4618      	mov	r0, r3
 800c5b8:	f7fd ff68 	bl	800a48c <mg_ntohl>
 800c5bc:	6178      	str	r0, [r7, #20]
  s->raw.align = c->recv.align;
 800c5be:	687b      	ldr	r3, [r7, #4]
 800c5c0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800c5c2:	69fb      	ldr	r3, [r7, #28]
 800c5c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (pkt->tcp->flags & TH_FIN) {
 800c5c6:	683b      	ldr	r3, [r7, #0]
 800c5c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ca:	7b5b      	ldrb	r3, [r3, #13]
 800c5cc:	f003 0301 	and.w	r3, r3, #1
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d01a      	beq.n	800c60a <read_conn+0x86>
    s->ack = mg_htonl(pkt->tcp->seq) + 1, s->seq = mg_htonl(pkt->tcp->ack);
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5d8:	685b      	ldr	r3, [r3, #4]
 800c5da:	4618      	mov	r0, r3
 800c5dc:	f7fd ff56 	bl	800a48c <mg_ntohl>
 800c5e0:	4603      	mov	r3, r0
 800c5e2:	1c5a      	adds	r2, r3, #1
 800c5e4:	69fb      	ldr	r3, [r7, #28]
 800c5e6:	605a      	str	r2, [r3, #4]
 800c5e8:	683b      	ldr	r3, [r7, #0]
 800c5ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c5ec:	689b      	ldr	r3, [r3, #8]
 800c5ee:	4618      	mov	r0, r3
 800c5f0:	f7fd ff4c 	bl	800a48c <mg_ntohl>
 800c5f4:	4602      	mov	r2, r0
 800c5f6:	69fb      	ldr	r3, [r7, #28]
 800c5f8:	601a      	str	r2, [r3, #0]
    c->is_closing = 1;
 800c5fa:	687a      	ldr	r2, [r7, #4]
 800c5fc:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800c600:	f043 0320 	orr.w	r3, r3, #32
 800c604:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
      // Plain text connection, data is already in c->recv, trigger
      // MG_EV_READ
      mg_call(c, MG_EV_READ, &pkt->pay.len);
    }
  }
}
 800c608:	e0e4      	b.n	800c7d4 <read_conn+0x250>
  } else if (pkt->pay.len == 0) {
 800c60a:	683b      	ldr	r3, [r7, #0]
 800c60c:	68db      	ldr	r3, [r3, #12]
 800c60e:	2b00      	cmp	r3, #0
 800c610:	f000 80e0 	beq.w	800c7d4 <read_conn+0x250>
  } else if (seq != s->ack) {
 800c614:	69fb      	ldr	r3, [r7, #28]
 800c616:	685b      	ldr	r3, [r3, #4]
 800c618:	697a      	ldr	r2, [r7, #20]
 800c61a:	429a      	cmp	r2, r3
 800c61c:	d029      	beq.n	800c672 <read_conn+0xee>
    uint32_t ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800c61e:	683b      	ldr	r3, [r7, #0]
 800c620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c622:	685b      	ldr	r3, [r3, #4]
 800c624:	4618      	mov	r0, r3
 800c626:	f7fd ff31 	bl	800a48c <mg_ntohl>
 800c62a:	4602      	mov	r2, r0
 800c62c:	683b      	ldr	r3, [r7, #0]
 800c62e:	68db      	ldr	r3, [r3, #12]
 800c630:	4413      	add	r3, r2
 800c632:	613b      	str	r3, [r7, #16]
    if (s->ack == ack) {
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	685b      	ldr	r3, [r3, #4]
 800c638:	693a      	ldr	r2, [r7, #16]
 800c63a:	429a      	cmp	r2, r3
 800c63c:	d10e      	bne.n	800c65c <read_conn+0xd8>
      MG_VERBOSE(("ignoring duplicate pkt"));
 800c63e:	4b67      	ldr	r3, [pc, #412]	; (800c7dc <read_conn+0x258>)
 800c640:	f641 72b7 	movw	r2, #8119	; 0x1fb7
 800c644:	4966      	ldr	r1, [pc, #408]	; (800c7e0 <read_conn+0x25c>)
 800c646:	2004      	movs	r0, #4
 800c648:	f7fa fce4 	bl	8007014 <mg_log_prefix>
 800c64c:	4603      	mov	r3, r0
 800c64e:	2b00      	cmp	r3, #0
 800c650:	f000 80c0 	beq.w	800c7d4 <read_conn+0x250>
 800c654:	4863      	ldr	r0, [pc, #396]	; (800c7e4 <read_conn+0x260>)
 800c656:	f7fa fd37 	bl	80070c8 <mg_log>
}
 800c65a:	e0bb      	b.n	800c7d4 <read_conn+0x250>
      mg_error(c, "SEQ != ACK: %x %x %x", seq, s->ack, ack);
 800c65c:	69fb      	ldr	r3, [r7, #28]
 800c65e:	685a      	ldr	r2, [r3, #4]
 800c660:	693b      	ldr	r3, [r7, #16]
 800c662:	9300      	str	r3, [sp, #0]
 800c664:	4613      	mov	r3, r2
 800c666:	697a      	ldr	r2, [r7, #20]
 800c668:	495f      	ldr	r1, [pc, #380]	; (800c7e8 <read_conn+0x264>)
 800c66a:	6878      	ldr	r0, [r7, #4]
 800c66c:	f7f5 fd14 	bl	8002098 <mg_error>
}
 800c670:	e0b0      	b.n	800c7d4 <read_conn+0x250>
  } else if (io->size - io->len < pkt->pay.len &&
 800c672:	69bb      	ldr	r3, [r7, #24]
 800c674:	685a      	ldr	r2, [r3, #4]
 800c676:	69bb      	ldr	r3, [r7, #24]
 800c678:	689b      	ldr	r3, [r3, #8]
 800c67a:	1ad2      	subs	r2, r2, r3
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	68db      	ldr	r3, [r3, #12]
 800c680:	429a      	cmp	r2, r3
 800c682:	d210      	bcs.n	800c6a6 <read_conn+0x122>
             !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800c684:	69bb      	ldr	r3, [r7, #24]
 800c686:	689a      	ldr	r2, [r3, #8]
 800c688:	683b      	ldr	r3, [r7, #0]
 800c68a:	68db      	ldr	r3, [r3, #12]
 800c68c:	4413      	add	r3, r2
 800c68e:	4619      	mov	r1, r3
 800c690:	69b8      	ldr	r0, [r7, #24]
 800c692:	f7f9 fccf 	bl	8006034 <mg_iobuf_resize>
 800c696:	4603      	mov	r3, r0
  } else if (io->size - io->len < pkt->pay.len &&
 800c698:	2b00      	cmp	r3, #0
 800c69a:	d104      	bne.n	800c6a6 <read_conn+0x122>
    mg_error(c, "oom");
 800c69c:	4953      	ldr	r1, [pc, #332]	; (800c7ec <read_conn+0x268>)
 800c69e:	6878      	ldr	r0, [r7, #4]
 800c6a0:	f7f5 fcfa 	bl	8002098 <mg_error>
 800c6a4:	e096      	b.n	800c7d4 <read_conn+0x250>
    memcpy(&io->buf[io->len], pkt->pay.ptr, pkt->pay.len);
 800c6a6:	69bb      	ldr	r3, [r7, #24]
 800c6a8:	681a      	ldr	r2, [r3, #0]
 800c6aa:	69bb      	ldr	r3, [r7, #24]
 800c6ac:	689b      	ldr	r3, [r3, #8]
 800c6ae:	18d0      	adds	r0, r2, r3
 800c6b0:	683b      	ldr	r3, [r7, #0]
 800c6b2:	6899      	ldr	r1, [r3, #8]
 800c6b4:	683b      	ldr	r3, [r7, #0]
 800c6b6:	68db      	ldr	r3, [r3, #12]
 800c6b8:	461a      	mov	r2, r3
 800c6ba:	f008 f923 	bl	8014904 <memcpy>
    io->len += pkt->pay.len;
 800c6be:	69bb      	ldr	r3, [r7, #24]
 800c6c0:	689a      	ldr	r2, [r3, #8]
 800c6c2:	683b      	ldr	r3, [r7, #0]
 800c6c4:	68db      	ldr	r3, [r3, #12]
 800c6c6:	441a      	add	r2, r3
 800c6c8:	69bb      	ldr	r3, [r7, #24]
 800c6ca:	609a      	str	r2, [r3, #8]
    MG_DEBUG(("%lu SEQ %x -> %x", c->id, mg_htonl(pkt->tcp->seq), s->ack));
 800c6cc:	4b43      	ldr	r3, [pc, #268]	; (800c7dc <read_conn+0x258>)
 800c6ce:	f641 72c9 	movw	r2, #8137	; 0x1fc9
 800c6d2:	4943      	ldr	r1, [pc, #268]	; (800c7e0 <read_conn+0x25c>)
 800c6d4:	2003      	movs	r0, #3
 800c6d6:	f7fa fc9d 	bl	8007014 <mg_log_prefix>
 800c6da:	4603      	mov	r3, r0
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d00e      	beq.n	800c6fe <read_conn+0x17a>
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 800c6e4:	683b      	ldr	r3, [r7, #0]
 800c6e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c6e8:	685b      	ldr	r3, [r3, #4]
 800c6ea:	4618      	mov	r0, r3
 800c6ec:	f7fd fece 	bl	800a48c <mg_ntohl>
 800c6f0:	4602      	mov	r2, r0
 800c6f2:	69fb      	ldr	r3, [r7, #28]
 800c6f4:	685b      	ldr	r3, [r3, #4]
 800c6f6:	4621      	mov	r1, r4
 800c6f8:	483d      	ldr	r0, [pc, #244]	; (800c7f0 <read_conn+0x26c>)
 800c6fa:	f7fa fce5 	bl	80070c8 <mg_log>
    s->ack = (uint32_t) (mg_htonl(pkt->tcp->seq) + pkt->pay.len);
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c702:	685b      	ldr	r3, [r3, #4]
 800c704:	4618      	mov	r0, r3
 800c706:	f7fd fec1 	bl	800a48c <mg_ntohl>
 800c70a:	4602      	mov	r2, r0
 800c70c:	683b      	ldr	r3, [r7, #0]
 800c70e:	68db      	ldr	r3, [r3, #12]
 800c710:	441a      	add	r2, r3
 800c712:	69fb      	ldr	r3, [r7, #28]
 800c714:	605a      	str	r2, [r3, #4]
    if (s->ttype != MIP_TTYPE_ACK) settmout(c, MIP_TTYPE_ACK);
 800c716:	69fb      	ldr	r3, [r7, #28]
 800c718:	7d9b      	ldrb	r3, [r3, #22]
 800c71a:	2b01      	cmp	r3, #1
 800c71c:	d003      	beq.n	800c726 <read_conn+0x1a2>
 800c71e:	2101      	movs	r1, #1
 800c720:	6878      	ldr	r0, [r7, #4]
 800c722:	f7ff fdad 	bl	800c280 <settmout>
    if (c->is_tls) {
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c72c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c730:	b2db      	uxtb	r3, r3
 800c732:	2b00      	cmp	r3, #0
 800c734:	d046      	beq.n	800c7c4 <read_conn+0x240>
      io = &c->recv;
 800c736:	687b      	ldr	r3, [r7, #4]
 800c738:	3338      	adds	r3, #56	; 0x38
 800c73a:	61bb      	str	r3, [r7, #24]
      if (io->size - io->len < pkt->pay.len &&
 800c73c:	69bb      	ldr	r3, [r7, #24]
 800c73e:	685a      	ldr	r2, [r3, #4]
 800c740:	69bb      	ldr	r3, [r7, #24]
 800c742:	689b      	ldr	r3, [r3, #8]
 800c744:	1ad2      	subs	r2, r2, r3
 800c746:	683b      	ldr	r3, [r7, #0]
 800c748:	68db      	ldr	r3, [r3, #12]
 800c74a:	429a      	cmp	r2, r3
 800c74c:	d210      	bcs.n	800c770 <read_conn+0x1ec>
          !mg_iobuf_resize(io, io->len + pkt->pay.len)) {
 800c74e:	69bb      	ldr	r3, [r7, #24]
 800c750:	689a      	ldr	r2, [r3, #8]
 800c752:	683b      	ldr	r3, [r7, #0]
 800c754:	68db      	ldr	r3, [r3, #12]
 800c756:	4413      	add	r3, r2
 800c758:	4619      	mov	r1, r3
 800c75a:	69b8      	ldr	r0, [r7, #24]
 800c75c:	f7f9 fc6a 	bl	8006034 <mg_iobuf_resize>
 800c760:	4603      	mov	r3, r0
      if (io->size - io->len < pkt->pay.len &&
 800c762:	2b00      	cmp	r3, #0
 800c764:	d104      	bne.n	800c770 <read_conn+0x1ec>
        mg_error(c, "oom");
 800c766:	4921      	ldr	r1, [pc, #132]	; (800c7ec <read_conn+0x268>)
 800c768:	6878      	ldr	r0, [r7, #4]
 800c76a:	f7f5 fc95 	bl	8002098 <mg_error>
 800c76e:	e031      	b.n	800c7d4 <read_conn+0x250>
        long n = mg_tls_recv(c, &io->buf[io->len], io->size - io->len);
 800c770:	69bb      	ldr	r3, [r7, #24]
 800c772:	681a      	ldr	r2, [r3, #0]
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	689b      	ldr	r3, [r3, #8]
 800c778:	18d1      	adds	r1, r2, r3
 800c77a:	69bb      	ldr	r3, [r7, #24]
 800c77c:	685a      	ldr	r2, [r3, #4]
 800c77e:	69bb      	ldr	r3, [r7, #24]
 800c780:	689b      	ldr	r3, [r3, #8]
 800c782:	1ad3      	subs	r3, r2, r3
 800c784:	461a      	mov	r2, r3
 800c786:	6878      	ldr	r0, [r7, #4]
 800c788:	f7fd fd36 	bl	800a1f8 <mg_tls_recv>
 800c78c:	4603      	mov	r3, r0
 800c78e:	60fb      	str	r3, [r7, #12]
        if (n == MG_IO_ERR) {
 800c790:	68fb      	ldr	r3, [r7, #12]
 800c792:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c796:	d104      	bne.n	800c7a2 <read_conn+0x21e>
          mg_error(c, "TLS recv error");
 800c798:	4916      	ldr	r1, [pc, #88]	; (800c7f4 <read_conn+0x270>)
 800c79a:	6878      	ldr	r0, [r7, #4]
 800c79c:	f7f5 fc7c 	bl	8002098 <mg_error>
}
 800c7a0:	e018      	b.n	800c7d4 <read_conn+0x250>
        } else if (n > 0) {
 800c7a2:	68fb      	ldr	r3, [r7, #12]
 800c7a4:	2b00      	cmp	r3, #0
 800c7a6:	dd15      	ble.n	800c7d4 <read_conn+0x250>
          io->len += (size_t) n;
 800c7a8:	69bb      	ldr	r3, [r7, #24]
 800c7aa:	689b      	ldr	r3, [r3, #8]
 800c7ac:	68fa      	ldr	r2, [r7, #12]
 800c7ae:	441a      	add	r2, r3
 800c7b0:	69bb      	ldr	r3, [r7, #24]
 800c7b2:	609a      	str	r2, [r3, #8]
          mg_call(c, MG_EV_READ, &n);
 800c7b4:	f107 030c 	add.w	r3, r7, #12
 800c7b8:	461a      	mov	r2, r3
 800c7ba:	2107      	movs	r1, #7
 800c7bc:	6878      	ldr	r0, [r7, #4]
 800c7be:	f7f5 fc49 	bl	8002054 <mg_call>
}
 800c7c2:	e007      	b.n	800c7d4 <read_conn+0x250>
      mg_call(c, MG_EV_READ, &pkt->pay.len);
 800c7c4:	683b      	ldr	r3, [r7, #0]
 800c7c6:	330c      	adds	r3, #12
 800c7c8:	461a      	mov	r2, r3
 800c7ca:	2107      	movs	r1, #7
 800c7cc:	6878      	ldr	r0, [r7, #4]
 800c7ce:	f7f5 fc41 	bl	8002054 <mg_call>
}
 800c7d2:	e7ff      	b.n	800c7d4 <read_conn+0x250>
 800c7d4:	bf00      	nop
 800c7d6:	3724      	adds	r7, #36	; 0x24
 800c7d8:	46bd      	mov	sp, r7
 800c7da:	bd90      	pop	{r4, r7, pc}
 800c7dc:	080175d0 	.word	0x080175d0
 800c7e0:	0801544c 	.word	0x0801544c
 800c7e4:	08016b24 	.word	0x08016b24
 800c7e8:	08016b3c 	.word	0x08016b3c
 800c7ec:	08016ad8 	.word	0x08016ad8
 800c7f0:	08016b54 	.word	0x08016b54
 800c7f4:	08016b68 	.word	0x08016b68

0800c7f8 <rx_tcp>:

static void rx_tcp(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800c7f8:	b590      	push	{r4, r7, lr}
 800c7fa:	b089      	sub	sp, #36	; 0x24
 800c7fc:	af02      	add	r7, sp, #8
 800c7fe:	6078      	str	r0, [r7, #4]
 800c800:	6039      	str	r1, [r7, #0]
  struct mg_connection *c = getpeer(ifp->mgr, pkt, false);
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c806:	2200      	movs	r2, #0
 800c808:	6839      	ldr	r1, [r7, #0]
 800c80a:	4618      	mov	r0, r3
 800c80c:	f7fe feb2 	bl	800b574 <getpeer>
 800c810:	6178      	str	r0, [r7, #20]
  struct connstate *s = c == NULL ? NULL : (struct connstate *) (c + 1);
 800c812:	697b      	ldr	r3, [r7, #20]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d002      	beq.n	800c81e <rx_tcp+0x26>
 800c818:	697b      	ldr	r3, [r7, #20]
 800c81a:	3390      	adds	r3, #144	; 0x90
 800c81c:	e000      	b.n	800c820 <rx_tcp+0x28>
 800c81e:	2300      	movs	r3, #0
 800c820:	613b      	str	r3, [r7, #16]
#if 0
  MG_INFO(("%lu %hhu %d", c ? c->id : 0, pkt->tcp->flags, (int) pkt->pay.len));
#endif
  if (c != NULL && c->is_connecting && pkt->tcp->flags & (TH_SYN | TH_ACK)) {
 800c822:	697b      	ldr	r3, [r7, #20]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d03e      	beq.n	800c8a6 <rx_tcp+0xae>
 800c828:	697b      	ldr	r3, [r7, #20]
 800c82a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c82e:	f003 0320 	and.w	r3, r3, #32
 800c832:	b2db      	uxtb	r3, r3
 800c834:	2b00      	cmp	r3, #0
 800c836:	d036      	beq.n	800c8a6 <rx_tcp+0xae>
 800c838:	683b      	ldr	r3, [r7, #0]
 800c83a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c83c:	7b5b      	ldrb	r3, [r3, #13]
 800c83e:	f003 0312 	and.w	r3, r3, #18
 800c842:	2b00      	cmp	r3, #0
 800c844:	d02f      	beq.n	800c8a6 <rx_tcp+0xae>
    s->seq = mg_ntohl(pkt->tcp->ack), s->ack = mg_ntohl(pkt->tcp->seq) + 1;
 800c846:	683b      	ldr	r3, [r7, #0]
 800c848:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c84a:	689b      	ldr	r3, [r3, #8]
 800c84c:	4618      	mov	r0, r3
 800c84e:	f7fd fe1d 	bl	800a48c <mg_ntohl>
 800c852:	4602      	mov	r2, r0
 800c854:	693b      	ldr	r3, [r7, #16]
 800c856:	601a      	str	r2, [r3, #0]
 800c858:	683b      	ldr	r3, [r7, #0]
 800c85a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c85c:	685b      	ldr	r3, [r3, #4]
 800c85e:	4618      	mov	r0, r3
 800c860:	f7fd fe14 	bl	800a48c <mg_ntohl>
 800c864:	4603      	mov	r3, r0
 800c866:	1c5a      	adds	r2, r3, #1
 800c868:	693b      	ldr	r3, [r7, #16]
 800c86a:	605a      	str	r2, [r3, #4]
    tx_tcp_pkt(ifp, pkt, TH_ACK, pkt->tcp->ack, NULL, 0);
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c870:	689b      	ldr	r3, [r3, #8]
 800c872:	2200      	movs	r2, #0
 800c874:	9201      	str	r2, [sp, #4]
 800c876:	2200      	movs	r2, #0
 800c878:	9200      	str	r2, [sp, #0]
 800c87a:	2210      	movs	r2, #16
 800c87c:	6839      	ldr	r1, [r7, #0]
 800c87e:	6878      	ldr	r0, [r7, #4]
 800c880:	f7ff fcb8 	bl	800c1f4 <tx_tcp_pkt>
    c->is_connecting = 0;  // Client connected
 800c884:	697a      	ldr	r2, [r7, #20]
 800c886:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800c88a:	f36f 1345 	bfc	r3, #5, #1
 800c88e:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    settmout(c, MIP_TTYPE_KEEPALIVE);
 800c892:	2100      	movs	r1, #0
 800c894:	6978      	ldr	r0, [r7, #20]
 800c896:	f7ff fcf3 	bl	800c280 <settmout>
    mg_call(c, MG_EV_CONNECT, NULL);  // Let user know
 800c89a:	2200      	movs	r2, #0
 800c89c:	2104      	movs	r1, #4
 800c89e:	6978      	ldr	r0, [r7, #20]
 800c8a0:	f7f5 fbd8 	bl	8002054 <mg_call>
 800c8a4:	e0c3      	b.n	800ca2e <rx_tcp+0x236>
  } else if (c != NULL && c->is_connecting) {
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d014      	beq.n	800c8d6 <rx_tcp+0xde>
 800c8ac:	697b      	ldr	r3, [r7, #20]
 800c8ae:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c8b2:	f003 0320 	and.w	r3, r3, #32
 800c8b6:	b2db      	uxtb	r3, r3
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d00c      	beq.n	800c8d6 <rx_tcp+0xde>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800c8bc:	683b      	ldr	r3, [r7, #0]
 800c8be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8c0:	689b      	ldr	r3, [r3, #8]
 800c8c2:	2200      	movs	r2, #0
 800c8c4:	9201      	str	r2, [sp, #4]
 800c8c6:	2200      	movs	r2, #0
 800c8c8:	9200      	str	r2, [sp, #0]
 800c8ca:	2214      	movs	r2, #20
 800c8cc:	6839      	ldr	r1, [r7, #0]
 800c8ce:	6878      	ldr	r0, [r7, #4]
 800c8d0:	f7ff fc90 	bl	800c1f4 <tx_tcp_pkt>
 800c8d4:	e0ab      	b.n	800ca2e <rx_tcp+0x236>
  } else if (c != NULL && pkt->tcp->flags & TH_RST) {
 800c8d6:	697b      	ldr	r3, [r7, #20]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d00b      	beq.n	800c8f4 <rx_tcp+0xfc>
 800c8dc:	683b      	ldr	r3, [r7, #0]
 800c8de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c8e0:	7b5b      	ldrb	r3, [r3, #13]
 800c8e2:	f003 0304 	and.w	r3, r3, #4
 800c8e6:	2b00      	cmp	r3, #0
 800c8e8:	d004      	beq.n	800c8f4 <rx_tcp+0xfc>
    mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800c8ea:	4953      	ldr	r1, [pc, #332]	; (800ca38 <rx_tcp+0x240>)
 800c8ec:	6978      	ldr	r0, [r7, #20]
 800c8ee:	f7f5 fbd3 	bl	8002098 <mg_error>
 800c8f2:	e09c      	b.n	800ca2e <rx_tcp+0x236>
  } else if (c != NULL) {
 800c8f4:	697b      	ldr	r3, [r7, #20]
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d00f      	beq.n	800c91a <rx_tcp+0x122>
    MG_DEBUG(("%lu %d %M:%hu -> %M:%hu", c->id, (int) pkt->raw.len,
              mg_print_ip4, &pkt->ip->src, mg_ntohs(pkt->tcp->sport),
              mg_print_ip4, &pkt->ip->dst, mg_ntohs(pkt->tcp->dport)));
    mg_hexdump(pkt->pay.buf, pkt->pay.len);
#endif
    s->tmiss = 0;                         // Reset missed keep-alive counter
 800c8fa:	693b      	ldr	r3, [r7, #16]
 800c8fc:	2200      	movs	r2, #0
 800c8fe:	75da      	strb	r2, [r3, #23]
    if (s->ttype == MIP_TTYPE_KEEPALIVE)  // Advance keep-alive timer
 800c900:	693b      	ldr	r3, [r7, #16]
 800c902:	7d9b      	ldrb	r3, [r3, #22]
 800c904:	2b00      	cmp	r3, #0
 800c906:	d103      	bne.n	800c910 <rx_tcp+0x118>
      settmout(c,
 800c908:	2100      	movs	r1, #0
 800c90a:	6978      	ldr	r0, [r7, #20]
 800c90c:	f7ff fcb8 	bl	800c280 <settmout>
               MIP_TTYPE_KEEPALIVE);  // unless a former ACK timeout is pending
    read_conn(c, pkt);  // Override timer with ACK timeout if needed
 800c910:	6839      	ldr	r1, [r7, #0]
 800c912:	6978      	ldr	r0, [r7, #20]
 800c914:	f7ff fe36 	bl	800c584 <read_conn>
  } else if (!c->is_accepted) {  // no peer
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
  } else {
    // MG_DEBUG(("dropped silently.."));
  }
}
 800c918:	e089      	b.n	800ca2e <rx_tcp+0x236>
  } else if ((c = getpeer(ifp->mgr, pkt, true)) == NULL) {
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c91e:	2201      	movs	r2, #1
 800c920:	6839      	ldr	r1, [r7, #0]
 800c922:	4618      	mov	r0, r3
 800c924:	f7fe fe26 	bl	800b574 <getpeer>
 800c928:	6178      	str	r0, [r7, #20]
 800c92a:	697b      	ldr	r3, [r7, #20]
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d10c      	bne.n	800c94a <rx_tcp+0x152>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800c930:	683b      	ldr	r3, [r7, #0]
 800c932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c934:	689b      	ldr	r3, [r3, #8]
 800c936:	2200      	movs	r2, #0
 800c938:	9201      	str	r2, [sp, #4]
 800c93a:	2200      	movs	r2, #0
 800c93c:	9200      	str	r2, [sp, #0]
 800c93e:	2214      	movs	r2, #20
 800c940:	6839      	ldr	r1, [r7, #0]
 800c942:	6878      	ldr	r0, [r7, #4]
 800c944:	f7ff fc56 	bl	800c1f4 <tx_tcp_pkt>
}
 800c948:	e071      	b.n	800ca2e <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_RST) {
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c94e:	7b5b      	ldrb	r3, [r3, #13]
 800c950:	f003 0304 	and.w	r3, r3, #4
 800c954:	2b00      	cmp	r3, #0
 800c956:	d00c      	beq.n	800c972 <rx_tcp+0x17a>
    if (c->is_accepted) mg_error(c, "peer RST");  // RFC-1122 4.2.2.13
 800c958:	697b      	ldr	r3, [r7, #20]
 800c95a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800c95e:	f003 0304 	and.w	r3, r3, #4
 800c962:	b2db      	uxtb	r3, r3
 800c964:	2b00      	cmp	r3, #0
 800c966:	d062      	beq.n	800ca2e <rx_tcp+0x236>
 800c968:	4933      	ldr	r1, [pc, #204]	; (800ca38 <rx_tcp+0x240>)
 800c96a:	6978      	ldr	r0, [r7, #20]
 800c96c:	f7f5 fb94 	bl	8002098 <mg_error>
}
 800c970:	e05d      	b.n	800ca2e <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_SYN) {
 800c972:	683b      	ldr	r3, [r7, #0]
 800c974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c976:	7b5b      	ldrb	r3, [r3, #13]
 800c978:	f003 0302 	and.w	r3, r3, #2
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d016      	beq.n	800c9ae <rx_tcp+0x1b6>
    uint32_t isn = mg_htonl((uint32_t) mg_ntohs(pkt->tcp->sport));
 800c980:	683b      	ldr	r3, [r7, #0]
 800c982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c984:	881b      	ldrh	r3, [r3, #0]
 800c986:	b29b      	uxth	r3, r3
 800c988:	4618      	mov	r0, r3
 800c98a:	f7fd fd98 	bl	800a4be <mg_ntohs>
 800c98e:	4603      	mov	r3, r0
 800c990:	4618      	mov	r0, r3
 800c992:	f7fd fd7b 	bl	800a48c <mg_ntohl>
 800c996:	60f8      	str	r0, [r7, #12]
    tx_tcp_pkt(ifp, pkt, TH_SYN | TH_ACK, isn, NULL, 0);
 800c998:	2300      	movs	r3, #0
 800c99a:	9301      	str	r3, [sp, #4]
 800c99c:	2300      	movs	r3, #0
 800c99e:	9300      	str	r3, [sp, #0]
 800c9a0:	68fb      	ldr	r3, [r7, #12]
 800c9a2:	2212      	movs	r2, #18
 800c9a4:	6839      	ldr	r1, [r7, #0]
 800c9a6:	6878      	ldr	r0, [r7, #4]
 800c9a8:	f7ff fc24 	bl	800c1f4 <tx_tcp_pkt>
}
 800c9ac:	e03f      	b.n	800ca2e <rx_tcp+0x236>
  } else if (pkt->tcp->flags & TH_FIN) {
 800c9ae:	683b      	ldr	r3, [r7, #0]
 800c9b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9b2:	7b5b      	ldrb	r3, [r3, #13]
 800c9b4:	f003 0301 	and.w	r3, r3, #1
 800c9b8:	2b00      	cmp	r3, #0
 800c9ba:	d00c      	beq.n	800c9d6 <rx_tcp+0x1de>
    tx_tcp_pkt(ifp, pkt, TH_FIN | TH_ACK, pkt->tcp->ack, NULL, 0);
 800c9bc:	683b      	ldr	r3, [r7, #0]
 800c9be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9c0:	689b      	ldr	r3, [r3, #8]
 800c9c2:	2200      	movs	r2, #0
 800c9c4:	9201      	str	r2, [sp, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	9200      	str	r2, [sp, #0]
 800c9ca:	2211      	movs	r2, #17
 800c9cc:	6839      	ldr	r1, [r7, #0]
 800c9ce:	6878      	ldr	r0, [r7, #4]
 800c9d0:	f7ff fc10 	bl	800c1f4 <tx_tcp_pkt>
}
 800c9d4:	e02b      	b.n	800ca2e <rx_tcp+0x236>
  } else if (mg_htonl(pkt->tcp->ack) == mg_htons(pkt->tcp->sport) + 1U) {
 800c9d6:	683b      	ldr	r3, [r7, #0]
 800c9d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9da:	689b      	ldr	r3, [r3, #8]
 800c9dc:	4618      	mov	r0, r3
 800c9de:	f7fd fd55 	bl	800a48c <mg_ntohl>
 800c9e2:	4604      	mov	r4, r0
 800c9e4:	683b      	ldr	r3, [r7, #0]
 800c9e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800c9e8:	881b      	ldrh	r3, [r3, #0]
 800c9ea:	b29b      	uxth	r3, r3
 800c9ec:	4618      	mov	r0, r3
 800c9ee:	f7fd fd66 	bl	800a4be <mg_ntohs>
 800c9f2:	4603      	mov	r3, r0
 800c9f4:	3301      	adds	r3, #1
 800c9f6:	429c      	cmp	r4, r3
 800c9f8:	d104      	bne.n	800ca04 <rx_tcp+0x20c>
    accept_conn(c, pkt);
 800c9fa:	6839      	ldr	r1, [r7, #0]
 800c9fc:	6978      	ldr	r0, [r7, #20]
 800c9fe:	f7ff fc87 	bl	800c310 <accept_conn>
}
 800ca02:	e014      	b.n	800ca2e <rx_tcp+0x236>
  } else if (!c->is_accepted) {  // no peer
 800ca04:	697b      	ldr	r3, [r7, #20]
 800ca06:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ca0a:	f003 0304 	and.w	r3, r3, #4
 800ca0e:	b2db      	uxtb	r3, r3
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d10c      	bne.n	800ca2e <rx_tcp+0x236>
    tx_tcp_pkt(ifp, pkt, TH_RST | TH_ACK, pkt->tcp->ack, NULL, 0);
 800ca14:	683b      	ldr	r3, [r7, #0]
 800ca16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ca18:	689b      	ldr	r3, [r3, #8]
 800ca1a:	2200      	movs	r2, #0
 800ca1c:	9201      	str	r2, [sp, #4]
 800ca1e:	2200      	movs	r2, #0
 800ca20:	9200      	str	r2, [sp, #0]
 800ca22:	2214      	movs	r2, #20
 800ca24:	6839      	ldr	r1, [r7, #0]
 800ca26:	6878      	ldr	r0, [r7, #4]
 800ca28:	f7ff fbe4 	bl	800c1f4 <tx_tcp_pkt>
}
 800ca2c:	e7ff      	b.n	800ca2e <rx_tcp+0x236>
 800ca2e:	bf00      	nop
 800ca30:	371c      	adds	r7, #28
 800ca32:	46bd      	mov	sp, r7
 800ca34:	bd90      	pop	{r4, r7, pc}
 800ca36:	bf00      	nop
 800ca38:	08016b78 	.word	0x08016b78

0800ca3c <rx_ip>:

static void rx_ip(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800ca3c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ca3e:	b089      	sub	sp, #36	; 0x24
 800ca40:	af04      	add	r7, sp, #16
 800ca42:	6078      	str	r0, [r7, #4]
 800ca44:	6039      	str	r1, [r7, #0]
  if (pkt->ip->proto == 1) {
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	69db      	ldr	r3, [r3, #28]
 800ca4a:	7a5b      	ldrb	r3, [r3, #9]
 800ca4c:	2b01      	cmp	r3, #1
 800ca4e:	d116      	bne.n	800ca7e <rx_ip+0x42>
    pkt->icmp = (struct icmp *) (pkt->ip + 1);
 800ca50:	683b      	ldr	r3, [r7, #0]
 800ca52:	69db      	ldr	r3, [r3, #28]
 800ca54:	f103 0214 	add.w	r2, r3, #20
 800ca58:	683b      	ldr	r3, [r7, #0]
 800ca5a:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800ca5c:	683b      	ldr	r3, [r7, #0]
 800ca5e:	68db      	ldr	r3, [r3, #12]
 800ca60:	2b03      	cmp	r3, #3
 800ca62:	f240 8101 	bls.w	800cc68 <rx_ip+0x22c>
    mkpay(pkt, pkt->icmp + 1);
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ca6a:	3304      	adds	r3, #4
 800ca6c:	4619      	mov	r1, r3
 800ca6e:	6838      	ldr	r0, [r7, #0]
 800ca70:	f7fe fa0a 	bl	800ae88 <mkpay>
    rx_icmp(ifp, pkt);
 800ca74:	6839      	ldr	r1, [r7, #0]
 800ca76:	6878      	ldr	r0, [r7, #4]
 800ca78:	f7fe fed4 	bl	800b824 <rx_icmp>
 800ca7c:	e0f9      	b.n	800cc72 <rx_ip+0x236>
  } else if (pkt->ip->proto == 17) {
 800ca7e:	683b      	ldr	r3, [r7, #0]
 800ca80:	69db      	ldr	r3, [r3, #28]
 800ca82:	7a5b      	ldrb	r3, [r3, #9]
 800ca84:	2b11      	cmp	r3, #17
 800ca86:	f040 8086 	bne.w	800cb96 <rx_ip+0x15a>
    pkt->udp = (struct udp *) (pkt->ip + 1);
 800ca8a:	683b      	ldr	r3, [r7, #0]
 800ca8c:	69db      	ldr	r3, [r3, #28]
 800ca8e:	f103 0214 	add.w	r2, r3, #20
 800ca92:	683b      	ldr	r3, [r7, #0]
 800ca94:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800ca96:	683b      	ldr	r3, [r7, #0]
 800ca98:	68db      	ldr	r3, [r3, #12]
 800ca9a:	2b07      	cmp	r3, #7
 800ca9c:	f240 80e6 	bls.w	800cc6c <rx_ip+0x230>
    mkpay(pkt, pkt->udp + 1);
 800caa0:	683b      	ldr	r3, [r7, #0]
 800caa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800caa4:	3308      	adds	r3, #8
 800caa6:	4619      	mov	r1, r3
 800caa8:	6838      	ldr	r0, [r7, #0]
 800caaa:	f7fe f9ed 	bl	800ae88 <mkpay>
    MG_DEBUG(("UDP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800caae:	4b72      	ldr	r3, [pc, #456]	; (800cc78 <rx_ip+0x23c>)
 800cab0:	f242 0229 	movw	r2, #8233	; 0x2029
 800cab4:	4971      	ldr	r1, [pc, #452]	; (800cc7c <rx_ip+0x240>)
 800cab6:	2003      	movs	r0, #3
 800cab8:	f7fa faac 	bl	8007014 <mg_log_prefix>
 800cabc:	4603      	mov	r3, r0
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d026      	beq.n	800cb10 <rx_ip+0xd4>
 800cac2:	683b      	ldr	r3, [r7, #0]
 800cac4:	69db      	ldr	r3, [r3, #28]
 800cac6:	f103 050c 	add.w	r5, r3, #12
 800caca:	683b      	ldr	r3, [r7, #0]
 800cacc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cace:	881b      	ldrh	r3, [r3, #0]
 800cad0:	b29b      	uxth	r3, r3
 800cad2:	4618      	mov	r0, r3
 800cad4:	f7fd fcf3 	bl	800a4be <mg_ntohs>
 800cad8:	4603      	mov	r3, r0
 800cada:	461e      	mov	r6, r3
 800cadc:	683b      	ldr	r3, [r7, #0]
 800cade:	69db      	ldr	r3, [r3, #28]
 800cae0:	f103 0410 	add.w	r4, r3, #16
 800cae4:	683b      	ldr	r3, [r7, #0]
 800cae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cae8:	885b      	ldrh	r3, [r3, #2]
 800caea:	b29b      	uxth	r3, r3
 800caec:	4618      	mov	r0, r3
 800caee:	f7fd fce6 	bl	800a4be <mg_ntohs>
 800caf2:	4603      	mov	r3, r0
 800caf4:	461a      	mov	r2, r3
 800caf6:	683b      	ldr	r3, [r7, #0]
 800caf8:	68db      	ldr	r3, [r3, #12]
 800cafa:	9303      	str	r3, [sp, #12]
 800cafc:	9202      	str	r2, [sp, #8]
 800cafe:	9401      	str	r4, [sp, #4]
 800cb00:	4b5f      	ldr	r3, [pc, #380]	; (800cc80 <rx_ip+0x244>)
 800cb02:	9300      	str	r3, [sp, #0]
 800cb04:	4633      	mov	r3, r6
 800cb06:	462a      	mov	r2, r5
 800cb08:	495d      	ldr	r1, [pc, #372]	; (800cc80 <rx_ip+0x244>)
 800cb0a:	485e      	ldr	r0, [pc, #376]	; (800cc84 <rx_ip+0x248>)
 800cb0c:	f7fa fadc 	bl	80070c8 <mg_log>
              mg_ntohs(pkt->udp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->udp->dport), (int) pkt->pay.len));
    if (pkt->udp->dport == mg_htons(68)) {
 800cb10:	683b      	ldr	r3, [r7, #0]
 800cb12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb14:	885b      	ldrh	r3, [r3, #2]
 800cb16:	b29c      	uxth	r4, r3
 800cb18:	2044      	movs	r0, #68	; 0x44
 800cb1a:	f7fd fcd0 	bl	800a4be <mg_ntohs>
 800cb1e:	4603      	mov	r3, r0
 800cb20:	429c      	cmp	r4, r3
 800cb22:	d112      	bne.n	800cb4a <rx_ip+0x10e>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb28:	f103 0208 	add.w	r2, r3, #8
 800cb2c:	683b      	ldr	r3, [r7, #0]
 800cb2e:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb34:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800cb38:	4619      	mov	r1, r3
 800cb3a:	6838      	ldr	r0, [r7, #0]
 800cb3c:	f7fe f9a4 	bl	800ae88 <mkpay>
      rx_dhcp_client(ifp, pkt);
 800cb40:	6839      	ldr	r1, [r7, #0]
 800cb42:	6878      	ldr	r0, [r7, #4]
 800cb44:	f7fe feca 	bl	800b8dc <rx_dhcp_client>
 800cb48:	e093      	b.n	800cc72 <rx_ip+0x236>
    } else if (ifp->enable_dhcp_server && pkt->udp->dport == mg_htons(67)) {
 800cb4a:	687b      	ldr	r3, [r7, #4]
 800cb4c:	7f5b      	ldrb	r3, [r3, #29]
 800cb4e:	2b00      	cmp	r3, #0
 800cb50:	d01c      	beq.n	800cb8c <rx_ip+0x150>
 800cb52:	683b      	ldr	r3, [r7, #0]
 800cb54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb56:	885b      	ldrh	r3, [r3, #2]
 800cb58:	b29c      	uxth	r4, r3
 800cb5a:	2043      	movs	r0, #67	; 0x43
 800cb5c:	f7fd fcaf 	bl	800a4be <mg_ntohs>
 800cb60:	4603      	mov	r3, r0
 800cb62:	429c      	cmp	r4, r3
 800cb64:	d112      	bne.n	800cb8c <rx_ip+0x150>
      pkt->dhcp = (struct dhcp *) (pkt->udp + 1);
 800cb66:	683b      	ldr	r3, [r7, #0]
 800cb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6a:	f103 0208 	add.w	r2, r3, #8
 800cb6e:	683b      	ldr	r3, [r7, #0]
 800cb70:	631a      	str	r2, [r3, #48]	; 0x30
      mkpay(pkt, pkt->dhcp + 1);
 800cb72:	683b      	ldr	r3, [r7, #0]
 800cb74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb76:	f503 7388 	add.w	r3, r3, #272	; 0x110
 800cb7a:	4619      	mov	r1, r3
 800cb7c:	6838      	ldr	r0, [r7, #0]
 800cb7e:	f7fe f983 	bl	800ae88 <mkpay>
      rx_dhcp_server(ifp, pkt);
 800cb82:	6839      	ldr	r1, [r7, #0]
 800cb84:	6878      	ldr	r0, [r7, #4]
 800cb86:	f7ff f82f 	bl	800bbe8 <rx_dhcp_server>
 800cb8a:	e072      	b.n	800cc72 <rx_ip+0x236>
    } else {
      rx_udp(ifp, pkt);
 800cb8c:	6839      	ldr	r1, [r7, #0]
 800cb8e:	6878      	ldr	r0, [r7, #4]
 800cb90:	f7ff f9f4 	bl	800bf7c <rx_udp>
 800cb94:	e06d      	b.n	800cc72 <rx_ip+0x236>
    }
  } else if (pkt->ip->proto == 6) {
 800cb96:	683b      	ldr	r3, [r7, #0]
 800cb98:	69db      	ldr	r3, [r3, #28]
 800cb9a:	7a5b      	ldrb	r3, [r3, #9]
 800cb9c:	2b06      	cmp	r3, #6
 800cb9e:	d168      	bne.n	800cc72 <rx_ip+0x236>
    pkt->tcp = (struct tcp *) (pkt->ip + 1);
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	69db      	ldr	r3, [r3, #28]
 800cba4:	f103 0214 	add.w	r2, r3, #20
 800cba8:	683b      	ldr	r3, [r7, #0]
 800cbaa:	629a      	str	r2, [r3, #40]	; 0x28
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800cbac:	683b      	ldr	r3, [r7, #0]
 800cbae:	68db      	ldr	r3, [r3, #12]
 800cbb0:	2b13      	cmp	r3, #19
 800cbb2:	d95d      	bls.n	800cc70 <rx_ip+0x234>
    mkpay(pkt, pkt->tcp + 1);
 800cbb4:	683b      	ldr	r3, [r7, #0]
 800cbb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbb8:	3314      	adds	r3, #20
 800cbba:	4619      	mov	r1, r3
 800cbbc:	6838      	ldr	r0, [r7, #0]
 800cbbe:	f7fe f963 	bl	800ae88 <mkpay>
    uint16_t iplen = mg_ntohs(pkt->ip->len);
 800cbc2:	683b      	ldr	r3, [r7, #0]
 800cbc4:	69db      	ldr	r3, [r3, #28]
 800cbc6:	885b      	ldrh	r3, [r3, #2]
 800cbc8:	b29b      	uxth	r3, r3
 800cbca:	4618      	mov	r0, r3
 800cbcc:	f7fd fc77 	bl	800a4be <mg_ntohs>
 800cbd0:	4603      	mov	r3, r0
 800cbd2:	81fb      	strh	r3, [r7, #14]
    uint16_t off = (uint16_t) (sizeof(*pkt->ip) + ((pkt->tcp->off >> 4) * 4U));
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cbd8:	7b1b      	ldrb	r3, [r3, #12]
 800cbda:	091b      	lsrs	r3, r3, #4
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	b29b      	uxth	r3, r3
 800cbe0:	3305      	adds	r3, #5
 800cbe2:	b29b      	uxth	r3, r3
 800cbe4:	009b      	lsls	r3, r3, #2
 800cbe6:	81bb      	strh	r3, [r7, #12]
    if (iplen >= off) pkt->pay.len = (size_t) (iplen - off);
 800cbe8:	89fa      	ldrh	r2, [r7, #14]
 800cbea:	89bb      	ldrh	r3, [r7, #12]
 800cbec:	429a      	cmp	r2, r3
 800cbee:	d305      	bcc.n	800cbfc <rx_ip+0x1c0>
 800cbf0:	89fa      	ldrh	r2, [r7, #14]
 800cbf2:	89bb      	ldrh	r3, [r7, #12]
 800cbf4:	1ad3      	subs	r3, r2, r3
 800cbf6:	461a      	mov	r2, r3
 800cbf8:	683b      	ldr	r3, [r7, #0]
 800cbfa:	60da      	str	r2, [r3, #12]
    MG_DEBUG(("TCP %M:%hu -> %M:%hu len %u", mg_print_ip4, &pkt->ip->src,
 800cbfc:	4b1e      	ldr	r3, [pc, #120]	; (800cc78 <rx_ip+0x23c>)
 800cbfe:	f242 023e 	movw	r2, #8254	; 0x203e
 800cc02:	491e      	ldr	r1, [pc, #120]	; (800cc7c <rx_ip+0x240>)
 800cc04:	2003      	movs	r0, #3
 800cc06:	f7fa fa05 	bl	8007014 <mg_log_prefix>
 800cc0a:	4603      	mov	r3, r0
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	d026      	beq.n	800cc5e <rx_ip+0x222>
 800cc10:	683b      	ldr	r3, [r7, #0]
 800cc12:	69db      	ldr	r3, [r3, #28]
 800cc14:	f103 050c 	add.w	r5, r3, #12
 800cc18:	683b      	ldr	r3, [r7, #0]
 800cc1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc1c:	881b      	ldrh	r3, [r3, #0]
 800cc1e:	b29b      	uxth	r3, r3
 800cc20:	4618      	mov	r0, r3
 800cc22:	f7fd fc4c 	bl	800a4be <mg_ntohs>
 800cc26:	4603      	mov	r3, r0
 800cc28:	461e      	mov	r6, r3
 800cc2a:	683b      	ldr	r3, [r7, #0]
 800cc2c:	69db      	ldr	r3, [r3, #28]
 800cc2e:	f103 0410 	add.w	r4, r3, #16
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc36:	885b      	ldrh	r3, [r3, #2]
 800cc38:	b29b      	uxth	r3, r3
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	f7fd fc3f 	bl	800a4be <mg_ntohs>
 800cc40:	4603      	mov	r3, r0
 800cc42:	461a      	mov	r2, r3
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	68db      	ldr	r3, [r3, #12]
 800cc48:	9303      	str	r3, [sp, #12]
 800cc4a:	9202      	str	r2, [sp, #8]
 800cc4c:	9401      	str	r4, [sp, #4]
 800cc4e:	4b0c      	ldr	r3, [pc, #48]	; (800cc80 <rx_ip+0x244>)
 800cc50:	9300      	str	r3, [sp, #0]
 800cc52:	4633      	mov	r3, r6
 800cc54:	462a      	mov	r2, r5
 800cc56:	490a      	ldr	r1, [pc, #40]	; (800cc80 <rx_ip+0x244>)
 800cc58:	480b      	ldr	r0, [pc, #44]	; (800cc88 <rx_ip+0x24c>)
 800cc5a:	f7fa fa35 	bl	80070c8 <mg_log>
              mg_ntohs(pkt->tcp->sport), mg_print_ip4, &pkt->ip->dst,
              mg_ntohs(pkt->tcp->dport), (int) pkt->pay.len));
    rx_tcp(ifp, pkt);
 800cc5e:	6839      	ldr	r1, [r7, #0]
 800cc60:	6878      	ldr	r0, [r7, #4]
 800cc62:	f7ff fdc9 	bl	800c7f8 <rx_tcp>
 800cc66:	e004      	b.n	800cc72 <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800cc68:	bf00      	nop
 800cc6a:	e002      	b.n	800cc72 <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800cc6c:	bf00      	nop
 800cc6e:	e000      	b.n	800cc72 <rx_ip+0x236>
    if (pkt->pay.len < sizeof(*pkt->tcp)) return;
 800cc70:	bf00      	nop
  }
}
 800cc72:	3714      	adds	r7, #20
 800cc74:	46bd      	mov	sp, r7
 800cc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cc78:	080175dc 	.word	0x080175dc
 800cc7c:	0801544c 	.word	0x0801544c
 800cc80:	08008d51 	.word	0x08008d51
 800cc84:	08016b84 	.word	0x08016b84
 800cc88:	08016ba0 	.word	0x08016ba0

0800cc8c <rx_ip6>:

static void rx_ip6(struct mg_tcpip_if *ifp, struct pkt *pkt) {
 800cc8c:	b580      	push	{r7, lr}
 800cc8e:	b082      	sub	sp, #8
 800cc90:	af00      	add	r7, sp, #0
 800cc92:	6078      	str	r0, [r7, #4]
 800cc94:	6039      	str	r1, [r7, #0]
  // MG_DEBUG(("IP %d", (int) len));
  if (pkt->ip6->proto == 1 || pkt->ip6->proto == 58) {
 800cc96:	683b      	ldr	r3, [r7, #0]
 800cc98:	6a1b      	ldr	r3, [r3, #32]
 800cc9a:	799b      	ldrb	r3, [r3, #6]
 800cc9c:	2b01      	cmp	r3, #1
 800cc9e:	d004      	beq.n	800ccaa <rx_ip6+0x1e>
 800cca0:	683b      	ldr	r3, [r7, #0]
 800cca2:	6a1b      	ldr	r3, [r3, #32]
 800cca4:	799b      	ldrb	r3, [r3, #6]
 800cca6:	2b3a      	cmp	r3, #58	; 0x3a
 800cca8:	d115      	bne.n	800ccd6 <rx_ip6+0x4a>
    pkt->icmp = (struct icmp *) (pkt->ip6 + 1);
 800ccaa:	683b      	ldr	r3, [r7, #0]
 800ccac:	6a1b      	ldr	r3, [r3, #32]
 800ccae:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ccb2:	683b      	ldr	r3, [r7, #0]
 800ccb4:	625a      	str	r2, [r3, #36]	; 0x24
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800ccb6:	683b      	ldr	r3, [r7, #0]
 800ccb8:	68db      	ldr	r3, [r3, #12]
 800ccba:	2b03      	cmp	r3, #3
 800ccbc:	d922      	bls.n	800cd04 <rx_ip6+0x78>
    mkpay(pkt, pkt->icmp + 1);
 800ccbe:	683b      	ldr	r3, [r7, #0]
 800ccc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccc2:	3304      	adds	r3, #4
 800ccc4:	4619      	mov	r1, r3
 800ccc6:	6838      	ldr	r0, [r7, #0]
 800ccc8:	f7fe f8de 	bl	800ae88 <mkpay>
    rx_icmp(ifp, pkt);
 800cccc:	6839      	ldr	r1, [r7, #0]
 800ccce:	6878      	ldr	r0, [r7, #4]
 800ccd0:	f7fe fda8 	bl	800b824 <rx_icmp>
 800ccd4:	e019      	b.n	800cd0a <rx_ip6+0x7e>
  } else if (pkt->ip6->proto == 17) {
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	6a1b      	ldr	r3, [r3, #32]
 800ccda:	799b      	ldrb	r3, [r3, #6]
 800ccdc:	2b11      	cmp	r3, #17
 800ccde:	d114      	bne.n	800cd0a <rx_ip6+0x7e>
    pkt->udp = (struct udp *) (pkt->ip6 + 1);
 800cce0:	683b      	ldr	r3, [r7, #0]
 800cce2:	6a1b      	ldr	r3, [r3, #32]
 800cce4:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800cce8:	683b      	ldr	r3, [r7, #0]
 800ccea:	62da      	str	r2, [r3, #44]	; 0x2c
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800ccec:	683b      	ldr	r3, [r7, #0]
 800ccee:	68db      	ldr	r3, [r3, #12]
 800ccf0:	2b07      	cmp	r3, #7
 800ccf2:	d909      	bls.n	800cd08 <rx_ip6+0x7c>
    // MG_DEBUG(("  UDP %u %u -> %u", len, mg_htons(udp->sport),
    // mg_htons(udp->dport)));
    mkpay(pkt, pkt->udp + 1);
 800ccf4:	683b      	ldr	r3, [r7, #0]
 800ccf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccf8:	3308      	adds	r3, #8
 800ccfa:	4619      	mov	r1, r3
 800ccfc:	6838      	ldr	r0, [r7, #0]
 800ccfe:	f7fe f8c3 	bl	800ae88 <mkpay>
 800cd02:	e002      	b.n	800cd0a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->icmp)) return;
 800cd04:	bf00      	nop
 800cd06:	e000      	b.n	800cd0a <rx_ip6+0x7e>
    if (pkt->pay.len < sizeof(*pkt->udp)) return;
 800cd08:	bf00      	nop
  }
}
 800cd0a:	3708      	adds	r7, #8
 800cd0c:	46bd      	mov	sp, r7
 800cd0e:	bd80      	pop	{r7, pc}

0800cd10 <mg_tcpip_rx>:

static void mg_tcpip_rx(struct mg_tcpip_if *ifp, void *buf, size_t len) {
 800cd10:	b590      	push	{r4, r7, lr}
 800cd12:	b093      	sub	sp, #76	; 0x4c
 800cd14:	af00      	add	r7, sp, #0
 800cd16:	60f8      	str	r0, [r7, #12]
 800cd18:	60b9      	str	r1, [r7, #8]
 800cd1a:	607a      	str	r2, [r7, #4]
  struct pkt pkt;
  memset(&pkt, 0, sizeof(pkt));
 800cd1c:	f107 0314 	add.w	r3, r7, #20
 800cd20:	2234      	movs	r2, #52	; 0x34
 800cd22:	2100      	movs	r1, #0
 800cd24:	4618      	mov	r0, r3
 800cd26:	f007 fd05 	bl	8014734 <memset>
  pkt.raw.ptr = (char *) buf;
 800cd2a:	68bb      	ldr	r3, [r7, #8]
 800cd2c:	617b      	str	r3, [r7, #20]
  pkt.raw.len = len;
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	61bb      	str	r3, [r7, #24]
  pkt.eth = (struct eth *) buf;
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	627b      	str	r3, [r7, #36]	; 0x24
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800cd36:	69bb      	ldr	r3, [r7, #24]
 800cd38:	2b0d      	cmp	r3, #13
 800cd3a:	f240 80d1 	bls.w	800cee0 <mg_tcpip_rx+0x1d0>
  if (ifp->enable_mac_check &&
 800cd3e:	68fb      	ldr	r3, [r7, #12]
 800cd40:	7fdb      	ldrb	r3, [r3, #31]
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d013      	beq.n	800cd6e <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800cd46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd48:	4618      	mov	r0, r3
 800cd4a:	68fb      	ldr	r3, [r7, #12]
 800cd4c:	2206      	movs	r2, #6
 800cd4e:	4619      	mov	r1, r3
 800cd50:	f007 fcc6 	bl	80146e0 <memcmp>
 800cd54:	4603      	mov	r3, r0
  if (ifp->enable_mac_check &&
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d009      	beq.n	800cd6e <mg_tcpip_rx+0x5e>
      memcmp(pkt.eth->dst, broadcast, sizeof(pkt.eth->dst)) != 0)
 800cd5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd5c:	2206      	movs	r2, #6
 800cd5e:	496a      	ldr	r1, [pc, #424]	; (800cf08 <mg_tcpip_rx+0x1f8>)
 800cd60:	4618      	mov	r0, r3
 800cd62:	f007 fcbd 	bl	80146e0 <memcmp>
 800cd66:	4603      	mov	r3, r0
      memcmp(pkt.eth->dst, ifp->mac, sizeof(pkt.eth->dst)) != 0 &&
 800cd68:	2b00      	cmp	r3, #0
 800cd6a:	f040 80bb 	bne.w	800cee4 <mg_tcpip_rx+0x1d4>
    return;
  if (ifp->enable_crc32_check && len > 4) {
 800cd6e:	68fb      	ldr	r3, [r7, #12]
 800cd70:	7f9b      	ldrb	r3, [r3, #30]
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d01a      	beq.n	800cdac <mg_tcpip_rx+0x9c>
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	2b04      	cmp	r3, #4
 800cd7a:	d917      	bls.n	800cdac <mg_tcpip_rx+0x9c>
    len -= 4;  // TODO(scaprile): check on bigendian
 800cd7c:	687b      	ldr	r3, [r7, #4]
 800cd7e:	3b04      	subs	r3, #4
 800cd80:	607b      	str	r3, [r7, #4]
    uint32_t crc = mg_crc32(0, (const char *) buf, len);
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	68b9      	ldr	r1, [r7, #8]
 800cd86:	2000      	movs	r0, #0
 800cd88:	f7fd fbb0 	bl	800a4ec <mg_crc32>
 800cd8c:	4603      	mov	r3, r0
 800cd8e:	613b      	str	r3, [r7, #16]
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800cd90:	68ba      	ldr	r2, [r7, #8]
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	4413      	add	r3, r2
 800cd96:	4618      	mov	r0, r3
 800cd98:	f107 0310 	add.w	r3, r7, #16
 800cd9c:	2204      	movs	r2, #4
 800cd9e:	4619      	mov	r1, r3
 800cda0:	f007 fc9e 	bl	80146e0 <memcmp>
 800cda4:	4603      	mov	r3, r0
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	f040 809e 	bne.w	800cee8 <mg_tcpip_rx+0x1d8>
  }
  if (pkt.eth->type == mg_htons(0x806)) {
 800cdac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdae:	899b      	ldrh	r3, [r3, #12]
 800cdb0:	b29c      	uxth	r4, r3
 800cdb2:	f640 0006 	movw	r0, #2054	; 0x806
 800cdb6:	f7fd fb82 	bl	800a4be <mg_ntohs>
 800cdba:	4603      	mov	r3, r0
 800cdbc:	429c      	cmp	r4, r3
 800cdbe:	d10d      	bne.n	800cddc <mg_tcpip_rx+0xcc>
    pkt.arp = (struct arp *) (pkt.eth + 1);
 800cdc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdc2:	330e      	adds	r3, #14
 800cdc4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800cdc6:	69bb      	ldr	r3, [r7, #24]
 800cdc8:	2b29      	cmp	r3, #41	; 0x29
 800cdca:	f240 808f 	bls.w	800ceec <mg_tcpip_rx+0x1dc>
    rx_arp(ifp, &pkt);
 800cdce:	f107 0314 	add.w	r3, r7, #20
 800cdd2:	4619      	mov	r1, r3
 800cdd4:	68f8      	ldr	r0, [r7, #12]
 800cdd6:	f7fe fc25 	bl	800b624 <rx_arp>
 800cdda:	e092      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x86dd)) {
 800cddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdde:	899b      	ldrh	r3, [r3, #12]
 800cde0:	b29c      	uxth	r4, r3
 800cde2:	f248 60dd 	movw	r0, #34525	; 0x86dd
 800cde6:	f7fd fb6a 	bl	800a4be <mg_ntohs>
 800cdea:	4603      	mov	r3, r0
 800cdec:	429c      	cmp	r4, r3
 800cdee:	d11b      	bne.n	800ce28 <mg_tcpip_rx+0x118>
    pkt.ip6 = (struct ip6 *) (pkt.eth + 1);
 800cdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf2:	330e      	adds	r3, #14
 800cdf4:	637b      	str	r3, [r7, #52]	; 0x34
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800cdf6:	69bb      	ldr	r3, [r7, #24]
 800cdf8:	2b35      	cmp	r3, #53	; 0x35
 800cdfa:	d979      	bls.n	800cef0 <mg_tcpip_rx+0x1e0>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800cdfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cdfe:	781b      	ldrb	r3, [r3, #0]
 800ce00:	091b      	lsrs	r3, r3, #4
 800ce02:	b2db      	uxtb	r3, r3
 800ce04:	2b06      	cmp	r3, #6
 800ce06:	d175      	bne.n	800cef4 <mg_tcpip_rx+0x1e4>
    mkpay(&pkt, pkt.ip6 + 1);
 800ce08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce0a:	f103 0228 	add.w	r2, r3, #40	; 0x28
 800ce0e:	f107 0314 	add.w	r3, r7, #20
 800ce12:	4611      	mov	r1, r2
 800ce14:	4618      	mov	r0, r3
 800ce16:	f7fe f837 	bl	800ae88 <mkpay>
    rx_ip6(ifp, &pkt);
 800ce1a:	f107 0314 	add.w	r3, r7, #20
 800ce1e:	4619      	mov	r1, r3
 800ce20:	68f8      	ldr	r0, [r7, #12]
 800ce22:	f7ff ff33 	bl	800cc8c <rx_ip6>
 800ce26:	e06c      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
  } else if (pkt.eth->type == mg_htons(0x800)) {
 800ce28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce2a:	899b      	ldrh	r3, [r3, #12]
 800ce2c:	b29c      	uxth	r4, r3
 800ce2e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800ce32:	f7fd fb44 	bl	800a4be <mg_ntohs>
 800ce36:	4603      	mov	r3, r0
 800ce38:	429c      	cmp	r4, r3
 800ce3a:	d133      	bne.n	800cea4 <mg_tcpip_rx+0x194>
    pkt.ip = (struct ip *) (pkt.eth + 1);
 800ce3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce3e:	330e      	adds	r3, #14
 800ce40:	633b      	str	r3, [r7, #48]	; 0x30
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800ce42:	69bb      	ldr	r3, [r7, #24]
 800ce44:	2b21      	cmp	r3, #33	; 0x21
 800ce46:	d957      	bls.n	800cef8 <mg_tcpip_rx+0x1e8>
    // Truncate frame to what IP header tells us
    if ((size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth) < pkt.raw.len) {
 800ce48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce4a:	885b      	ldrh	r3, [r3, #2]
 800ce4c:	b29b      	uxth	r3, r3
 800ce4e:	4618      	mov	r0, r3
 800ce50:	f7fd fb35 	bl	800a4be <mg_ntohs>
 800ce54:	4603      	mov	r3, r0
 800ce56:	f103 020e 	add.w	r2, r3, #14
 800ce5a:	69bb      	ldr	r3, [r7, #24]
 800ce5c:	429a      	cmp	r2, r3
 800ce5e:	d208      	bcs.n	800ce72 <mg_tcpip_rx+0x162>
      pkt.raw.len = (size_t) mg_ntohs(pkt.ip->len) + sizeof(struct eth);
 800ce60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce62:	885b      	ldrh	r3, [r3, #2]
 800ce64:	b29b      	uxth	r3, r3
 800ce66:	4618      	mov	r0, r3
 800ce68:	f7fd fb29 	bl	800a4be <mg_ntohs>
 800ce6c:	4603      	mov	r3, r0
 800ce6e:	330e      	adds	r3, #14
 800ce70:	61bb      	str	r3, [r7, #24]
    }
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800ce72:	69bb      	ldr	r3, [r7, #24]
 800ce74:	2b21      	cmp	r3, #33	; 0x21
 800ce76:	d941      	bls.n	800cefc <mg_tcpip_rx+0x1ec>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800ce78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce7a:	781b      	ldrb	r3, [r3, #0]
 800ce7c:	091b      	lsrs	r3, r3, #4
 800ce7e:	b2db      	uxtb	r3, r3
 800ce80:	2b04      	cmp	r3, #4
 800ce82:	d13d      	bne.n	800cf00 <mg_tcpip_rx+0x1f0>
    mkpay(&pkt, pkt.ip + 1);
 800ce84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ce86:	f103 0214 	add.w	r2, r3, #20
 800ce8a:	f107 0314 	add.w	r3, r7, #20
 800ce8e:	4611      	mov	r1, r2
 800ce90:	4618      	mov	r0, r3
 800ce92:	f7fd fff9 	bl	800ae88 <mkpay>
    rx_ip(ifp, &pkt);
 800ce96:	f107 0314 	add.w	r3, r7, #20
 800ce9a:	4619      	mov	r1, r3
 800ce9c:	68f8      	ldr	r0, [r7, #12]
 800ce9e:	f7ff fdcd 	bl	800ca3c <rx_ip>
 800cea2:	e02e      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
  } else {
    MG_DEBUG(("  Unknown eth type %x", mg_htons(pkt.eth->type)));
 800cea4:	4b19      	ldr	r3, [pc, #100]	; (800cf0c <mg_tcpip_rx+0x1fc>)
 800cea6:	f242 027b 	movw	r2, #8315	; 0x207b
 800ceaa:	4919      	ldr	r1, [pc, #100]	; (800cf10 <mg_tcpip_rx+0x200>)
 800ceac:	2003      	movs	r0, #3
 800ceae:	f7fa f8b1 	bl	8007014 <mg_log_prefix>
 800ceb2:	4603      	mov	r3, r0
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d00a      	beq.n	800cece <mg_tcpip_rx+0x1be>
 800ceb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ceba:	899b      	ldrh	r3, [r3, #12]
 800cebc:	b29b      	uxth	r3, r3
 800cebe:	4618      	mov	r0, r3
 800cec0:	f7fd fafd 	bl	800a4be <mg_ntohs>
 800cec4:	4603      	mov	r3, r0
 800cec6:	4619      	mov	r1, r3
 800cec8:	4812      	ldr	r0, [pc, #72]	; (800cf14 <mg_tcpip_rx+0x204>)
 800ceca:	f7fa f8fd 	bl	80070c8 <mg_log>
    mg_hexdump(buf, len >= 16 ? 16 : len);
 800cece:	687b      	ldr	r3, [r7, #4]
 800ced0:	2b10      	cmp	r3, #16
 800ced2:	bf28      	it	cs
 800ced4:	2310      	movcs	r3, #16
 800ced6:	4619      	mov	r1, r3
 800ced8:	68b8      	ldr	r0, [r7, #8]
 800ceda:	f7fa f929 	bl	8007130 <mg_hexdump>
 800cede:	e010      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
  if (pkt.raw.len < sizeof(*pkt.eth)) return;  // Truncated - runt?
 800cee0:	bf00      	nop
 800cee2:	e00e      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
    return;
 800cee4:	bf00      	nop
 800cee6:	e00c      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
    if (memcmp((void *) ((size_t) buf + len), &crc, sizeof(crc))) return;
 800cee8:	bf00      	nop
 800ceea:	e00a      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
    if (sizeof(*pkt.eth) + sizeof(*pkt.arp) > pkt.raw.len) return;  // Truncated
 800ceec:	bf00      	nop
 800ceee:	e008      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip6)) return;  // Truncated
 800cef0:	bf00      	nop
 800cef2:	e006      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
    if ((pkt.ip6->ver >> 4) != 0x6) return;                         // Not IP
 800cef4:	bf00      	nop
 800cef6:	e004      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800cef8:	bf00      	nop
 800cefa:	e002      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
    if (pkt.raw.len < sizeof(*pkt.eth) + sizeof(*pkt.ip)) return;  // Truncated
 800cefc:	bf00      	nop
 800cefe:	e000      	b.n	800cf02 <mg_tcpip_rx+0x1f2>
    if ((pkt.ip->ver >> 4) != 4) return;                           // Not IP
 800cf00:	bf00      	nop
  }
}
 800cf02:	374c      	adds	r7, #76	; 0x4c
 800cf04:	46bd      	mov	sp, r7
 800cf06:	bd90      	pop	{r4, r7, pc}
 800cf08:	080173b8 	.word	0x080173b8
 800cf0c:	080175e4 	.word	0x080175e4
 800cf10:	0801544c 	.word	0x0801544c
 800cf14:	08016bbc 	.word	0x08016bbc

0800cf18 <mg_tcpip_poll>:

static void mg_tcpip_poll(struct mg_tcpip_if *ifp, uint64_t uptime_ms) {
 800cf18:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cf1a:	b095      	sub	sp, #84	; 0x54
 800cf1c:	af06      	add	r7, sp, #24
 800cf1e:	6178      	str	r0, [r7, #20]
 800cf20:	e9c7 2302 	strd	r2, r3, [r7, #8]
  if (ifp == NULL || ifp->driver == NULL) return;
 800cf24:	697b      	ldr	r3, [r7, #20]
 800cf26:	2b00      	cmp	r3, #0
 800cf28:	f000 81b9 	beq.w	800d29e <mg_tcpip_poll+0x386>
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	6a1b      	ldr	r3, [r3, #32]
 800cf30:	2b00      	cmp	r3, #0
 800cf32:	f000 81b4 	beq.w	800d29e <mg_tcpip_poll+0x386>
  bool expired_1000ms = mg_timer_expired(&ifp->timer_1000ms, 1000, uptime_ms);
 800cf36:	697b      	ldr	r3, [r7, #20]
 800cf38:	f103 0150 	add.w	r1, r3, #80	; 0x50
 800cf3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf40:	e9cd 2300 	strd	r2, r3, [sp]
 800cf44:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800cf48:	f04f 0300 	mov.w	r3, #0
 800cf4c:	4608      	mov	r0, r1
 800cf4e:	f7fd f864 	bl	800a01a <mg_timer_expired>
 800cf52:	4603      	mov	r3, r0
 800cf54:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  ifp->now = uptime_ms;
 800cf58:	6979      	ldr	r1, [r7, #20]
 800cf5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800cf5e:	e9c1 2312 	strd	r2, r3, [r1, #72]	; 0x48

  // Handle physical interface up/down status
  if (expired_1000ms && ifp->driver->up) {
 800cf62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d03f      	beq.n	800cfea <mg_tcpip_poll+0xd2>
 800cf6a:	697b      	ldr	r3, [r7, #20]
 800cf6c:	6a1b      	ldr	r3, [r3, #32]
 800cf6e:	68db      	ldr	r3, [r3, #12]
 800cf70:	2b00      	cmp	r3, #0
 800cf72:	d03a      	beq.n	800cfea <mg_tcpip_poll+0xd2>
    bool up = ifp->driver->up(ifp);
 800cf74:	697b      	ldr	r3, [r7, #20]
 800cf76:	6a1b      	ldr	r3, [r3, #32]
 800cf78:	68db      	ldr	r3, [r3, #12]
 800cf7a:	6978      	ldr	r0, [r7, #20]
 800cf7c:	4798      	blx	r3
 800cf7e:	4603      	mov	r3, r0
 800cf80:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
    bool current = ifp->state != MG_TCPIP_STATE_DOWN;
 800cf84:	697b      	ldr	r3, [r7, #20]
 800cf86:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cf8a:	2b00      	cmp	r3, #0
 800cf8c:	bf14      	ite	ne
 800cf8e:	2301      	movne	r3, #1
 800cf90:	2300      	moveq	r3, #0
 800cf92:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
    if (up != current) {
 800cf96:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 800cf9a:	f897 3031 	ldrb.w	r3, [r7, #49]	; 0x31
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d023      	beq.n	800cfea <mg_tcpip_poll+0xd2>
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800cfa2:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cfa6:	f083 0301 	eor.w	r3, r3, #1
 800cfaa:	b2db      	uxtb	r3, r3
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d001      	beq.n	800cfb4 <mg_tcpip_poll+0x9c>
 800cfb0:	2300      	movs	r3, #0
 800cfb2:	e006      	b.n	800cfc2 <mg_tcpip_poll+0xaa>
                   : ifp->enable_dhcp_client ? MG_TCPIP_STATE_UP
 800cfb4:	697b      	ldr	r3, [r7, #20]
 800cfb6:	7f1b      	ldrb	r3, [r3, #28]
      ifp->state = up == false               ? MG_TCPIP_STATE_DOWN
 800cfb8:	2b00      	cmp	r3, #0
 800cfba:	d001      	beq.n	800cfc0 <mg_tcpip_poll+0xa8>
 800cfbc:	2301      	movs	r3, #1
 800cfbe:	e000      	b.n	800cfc2 <mg_tcpip_poll+0xaa>
 800cfc0:	2303      	movs	r3, #3
 800cfc2:	697a      	ldr	r2, [r7, #20]
 800cfc4:	f882 3074 	strb.w	r3, [r2, #116]	; 0x74
                                             : MG_TCPIP_STATE_READY;
      if (!up && ifp->enable_dhcp_client) ifp->ip = 0;
 800cfc8:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 800cfcc:	f083 0301 	eor.w	r3, r3, #1
 800cfd0:	b2db      	uxtb	r3, r3
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d006      	beq.n	800cfe4 <mg_tcpip_poll+0xcc>
 800cfd6:	697b      	ldr	r3, [r7, #20]
 800cfd8:	7f1b      	ldrb	r3, [r3, #28]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d002      	beq.n	800cfe4 <mg_tcpip_poll+0xcc>
 800cfde:	697b      	ldr	r3, [r7, #20]
 800cfe0:	2200      	movs	r2, #0
 800cfe2:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800cfe4:	6978      	ldr	r0, [r7, #20]
 800cfe6:	f7fe f841 	bl	800b06c <onstatechange>
    }
  }
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800cfea:	697b      	ldr	r3, [r7, #20]
 800cfec:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	f000 8156 	beq.w	800d2a2 <mg_tcpip_poll+0x38a>

  // DHCP RFC-2131 (4.4)
  if (ifp->state == MG_TCPIP_STATE_UP && expired_1000ms) {
 800cff6:	697b      	ldr	r3, [r7, #20]
 800cff8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800cffc:	2b01      	cmp	r3, #1
 800cffe:	d107      	bne.n	800d010 <mg_tcpip_poll+0xf8>
 800d000:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d004:	2b00      	cmp	r3, #0
 800d006:	d003      	beq.n	800d010 <mg_tcpip_poll+0xf8>
    tx_dhcp_discover(ifp);  // INIT (4.4.1)
 800d008:	6978      	ldr	r0, [r7, #20]
 800d00a:	f7fe fa79 	bl	800b500 <tx_dhcp_discover>
 800d00e:	e04c      	b.n	800d0aa <mg_tcpip_poll+0x192>
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800d010:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d014:	2b00      	cmp	r3, #0
 800d016:	d048      	beq.n	800d0aa <mg_tcpip_poll+0x192>
 800d018:	697b      	ldr	r3, [r7, #20]
 800d01a:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800d01e:	2b03      	cmp	r3, #3
 800d020:	d143      	bne.n	800d0aa <mg_tcpip_poll+0x192>
             ifp->lease_expire > 0) {  // BOUND / RENEWING / REBINDING
 800d022:	697b      	ldr	r3, [r7, #20]
 800d024:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
  } else if (expired_1000ms && ifp->state == MG_TCPIP_STATE_READY &&
 800d028:	4313      	orrs	r3, r2
 800d02a:	d03e      	beq.n	800d0aa <mg_tcpip_poll+0x192>
    if (ifp->now >= ifp->lease_expire) {
 800d02c:	697b      	ldr	r3, [r7, #20]
 800d02e:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800d032:	697b      	ldr	r3, [r7, #20]
 800d034:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800d038:	4290      	cmp	r0, r2
 800d03a:	eb71 0303 	sbcs.w	r3, r1, r3
 800d03e:	d30a      	bcc.n	800d056 <mg_tcpip_poll+0x13e>
      ifp->state = MG_TCPIP_STATE_UP, ifp->ip = 0;  // expired, release IP
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	2201      	movs	r2, #1
 800d044:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
 800d048:	697b      	ldr	r3, [r7, #20]
 800d04a:	2200      	movs	r2, #0
 800d04c:	609a      	str	r2, [r3, #8]
      onstatechange(ifp);
 800d04e:	6978      	ldr	r0, [r7, #20]
 800d050:	f7fe f80c 	bl	800b06c <onstatechange>
 800d054:	e029      	b.n	800d0aa <mg_tcpip_poll+0x192>
    } else if (ifp->now + 30 * 60 * 1000 > ifp->lease_expire &&
 800d056:	697b      	ldr	r3, [r7, #20]
 800d058:	e9d3 2312 	ldrd	r2, r3, [r3, #72]	; 0x48
 800d05c:	4993      	ldr	r1, [pc, #588]	; (800d2ac <mg_tcpip_poll+0x394>)
 800d05e:	1854      	adds	r4, r2, r1
 800d060:	f143 0500 	adc.w	r5, r3, #0
 800d064:	697b      	ldr	r3, [r7, #20]
 800d066:	e9d3 2316 	ldrd	r2, r3, [r3, #88]	; 0x58
 800d06a:	42a2      	cmp	r2, r4
 800d06c:	41ab      	sbcs	r3, r5
 800d06e:	d21c      	bcs.n	800d0aa <mg_tcpip_poll+0x192>
               ((ifp->now / 1000) % 60) == 0) {
 800d070:	697b      	ldr	r3, [r7, #20]
 800d072:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800d076:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800d07a:	f04f 0300 	mov.w	r3, #0
 800d07e:	f7f3 fbbb 	bl	80007f8 <__aeabi_uldivmod>
 800d082:	4602      	mov	r2, r0
 800d084:	460b      	mov	r3, r1
 800d086:	4610      	mov	r0, r2
 800d088:	4619      	mov	r1, r3
 800d08a:	f04f 023c 	mov.w	r2, #60	; 0x3c
 800d08e:	f04f 0300 	mov.w	r3, #0
 800d092:	f7f3 fbb1 	bl	80007f8 <__aeabi_uldivmod>
    } else if (ifp->now + 30 * 60 * 1000 > ifp->lease_expire &&
 800d096:	4313      	orrs	r3, r2
 800d098:	d107      	bne.n	800d0aa <mg_tcpip_poll+0x192>
      // hack: 30 min before deadline, try to rebind (4.3.6) every min
      tx_dhcp_request_re(ifp, (uint8_t *) broadcast, ifp->ip, 0xffffffff);
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	689a      	ldr	r2, [r3, #8]
 800d09e:	f04f 33ff 	mov.w	r3, #4294967295
 800d0a2:	4983      	ldr	r1, [pc, #524]	; (800d2b0 <mg_tcpip_poll+0x398>)
 800d0a4:	6978      	ldr	r0, [r7, #20]
 800d0a6:	f7fe f9fb 	bl	800b4a0 <tx_dhcp_request_re>
    }  // TODO(): Handle T1 (RENEWING) and T2 (REBINDING) (4.4.5)
  }

  // Read data from the network
  if (ifp->driver->rx != NULL) {  // Polling driver. We must call it
 800d0aa:	697b      	ldr	r3, [r7, #20]
 800d0ac:	6a1b      	ldr	r3, [r3, #32]
 800d0ae:	689b      	ldr	r3, [r3, #8]
 800d0b0:	2b00      	cmp	r3, #0
 800d0b2:	d014      	beq.n	800d0de <mg_tcpip_poll+0x1c6>
    size_t len =
        ifp->driver->rx(ifp->recv_queue.buf, ifp->recv_queue.size, ifp);
 800d0b4:	697b      	ldr	r3, [r7, #20]
 800d0b6:	6a1b      	ldr	r3, [r3, #32]
 800d0b8:	689b      	ldr	r3, [r3, #8]
 800d0ba:	697a      	ldr	r2, [r7, #20]
 800d0bc:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 800d0be:	697a      	ldr	r2, [r7, #20]
 800d0c0:	6b11      	ldr	r1, [r2, #48]	; 0x30
 800d0c2:	697a      	ldr	r2, [r7, #20]
 800d0c4:	4798      	blx	r3
 800d0c6:	62b8      	str	r0, [r7, #40]	; 0x28
    if (len > 0) mg_tcpip_rx(ifp, ifp->recv_queue.buf, len);
 800d0c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d01f      	beq.n	800d10e <mg_tcpip_poll+0x1f6>
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d0d2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d0d4:	4619      	mov	r1, r3
 800d0d6:	6978      	ldr	r0, [r7, #20]
 800d0d8:	f7ff fe1a 	bl	800cd10 <mg_tcpip_rx>
 800d0dc:	e017      	b.n	800d10e <mg_tcpip_poll+0x1f6>
  } else {  // Interrupt-based driver. Fills recv queue itself
    char *buf;
    size_t len = mg_queue_next(&ifp->recv_queue, &buf);
 800d0de:	697b      	ldr	r3, [r7, #20]
 800d0e0:	332c      	adds	r3, #44	; 0x2c
 800d0e2:	f107 0220 	add.w	r2, r7, #32
 800d0e6:	4611      	mov	r1, r2
 800d0e8:	4618      	mov	r0, r3
 800d0ea:	f7fc f81b 	bl	8009124 <mg_queue_next>
 800d0ee:	62f8      	str	r0, [r7, #44]	; 0x2c
    if (len > 0) {
 800d0f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d0f2:	2b00      	cmp	r3, #0
 800d0f4:	d00b      	beq.n	800d10e <mg_tcpip_poll+0x1f6>
      mg_tcpip_rx(ifp, buf, len);
 800d0f6:	6a3b      	ldr	r3, [r7, #32]
 800d0f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d0fa:	4619      	mov	r1, r3
 800d0fc:	6978      	ldr	r0, [r7, #20]
 800d0fe:	f7ff fe07 	bl	800cd10 <mg_tcpip_rx>
      mg_queue_del(&ifp->recv_queue, len);
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	332c      	adds	r3, #44	; 0x2c
 800d106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d108:	4618      	mov	r0, r3
 800d10a:	f7fc f889 	bl	8009220 <mg_queue_del>
    }
  }

  // Process timeouts
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800d10e:	697b      	ldr	r3, [r7, #20]
 800d110:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	637b      	str	r3, [r7, #52]	; 0x34
 800d116:	e0bd      	b.n	800d294 <mg_tcpip_poll+0x37c>
    if (c->is_udp || c->is_listening) continue;
 800d118:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d11a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d11e:	f003 0301 	and.w	r3, r3, #1
 800d122:	b2db      	uxtb	r3, r3
 800d124:	2b00      	cmp	r3, #0
 800d126:	f040 80af 	bne.w	800d288 <mg_tcpip_poll+0x370>
 800d12a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d12c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d130:	f003 0301 	and.w	r3, r3, #1
 800d134:	b2db      	uxtb	r3, r3
 800d136:	2b00      	cmp	r3, #0
 800d138:	f040 80a6 	bne.w	800d288 <mg_tcpip_poll+0x370>
    if (c->is_connecting || c->is_resolving) continue;
 800d13c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d13e:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d142:	f003 0320 	and.w	r3, r3, #32
 800d146:	b2db      	uxtb	r3, r3
 800d148:	2b00      	cmp	r3, #0
 800d14a:	f040 809f 	bne.w	800d28c <mg_tcpip_poll+0x374>
 800d14e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d150:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d154:	f003 0308 	and.w	r3, r3, #8
 800d158:	b2db      	uxtb	r3, r3
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	f040 8096 	bne.w	800d28c <mg_tcpip_poll+0x374>
    struct connstate *s = (struct connstate *) (c + 1);
 800d160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d162:	3390      	adds	r3, #144	; 0x90
 800d164:	627b      	str	r3, [r7, #36]	; 0x24
    uint32_t rem_ip;
    memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800d166:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d168:	331c      	adds	r3, #28
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	61fb      	str	r3, [r7, #28]
    if (uptime_ms > s->timer) {
 800d16e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d170:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800d174:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d178:	4290      	cmp	r0, r2
 800d17a:	eb71 0303 	sbcs.w	r3, r1, r3
 800d17e:	f080 8086 	bcs.w	800d28e <mg_tcpip_poll+0x376>
      if (s->ttype == MIP_TTYPE_ACK) {
 800d182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d184:	7d9b      	ldrb	r3, [r3, #22]
 800d186:	2b01      	cmp	r3, #1
 800d188:	d137      	bne.n	800d1fa <mg_tcpip_poll+0x2e2>
        MG_DEBUG(("%lu ack %x %x", c->id, s->seq, s->ack));
 800d18a:	4b4a      	ldr	r3, [pc, #296]	; (800d2b4 <mg_tcpip_poll+0x39c>)
 800d18c:	f242 02b9 	movw	r2, #8377	; 0x20b9
 800d190:	4949      	ldr	r1, [pc, #292]	; (800d2b8 <mg_tcpip_poll+0x3a0>)
 800d192:	2003      	movs	r0, #3
 800d194:	f7f9 ff3e 	bl	8007014 <mg_log_prefix>
 800d198:	4603      	mov	r3, r0
 800d19a:	2b00      	cmp	r3, #0
 800d19c:	d008      	beq.n	800d1b0 <mg_tcpip_poll+0x298>
 800d19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1a0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d1a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1a8:	685b      	ldr	r3, [r3, #4]
 800d1aa:	4844      	ldr	r0, [pc, #272]	; (800d2bc <mg_tcpip_poll+0x3a4>)
 800d1ac:	f7f9 ff8c 	bl	80070c8 <mg_log>
        tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800d1b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1b2:	f103 0610 	add.w	r6, r3, #16
 800d1b6:	69fb      	ldr	r3, [r7, #28]
 800d1b8:	613b      	str	r3, [r7, #16]
 800d1ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1bc:	8b1c      	ldrh	r4, [r3, #24]
 800d1be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d1c0:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800d1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1c4:	681b      	ldr	r3, [r3, #0]
 800d1c6:	4618      	mov	r0, r3
 800d1c8:	f7fd f960 	bl	800a48c <mg_ntohl>
 800d1cc:	6078      	str	r0, [r7, #4]
 800d1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1d0:	685b      	ldr	r3, [r3, #4]
 800d1d2:	4618      	mov	r0, r3
 800d1d4:	f7fd f95a 	bl	800a48c <mg_ntohl>
 800d1d8:	4603      	mov	r3, r0
 800d1da:	2200      	movs	r2, #0
 800d1dc:	9205      	str	r2, [sp, #20]
 800d1de:	4a38      	ldr	r2, [pc, #224]	; (800d2c0 <mg_tcpip_poll+0x3a8>)
 800d1e0:	9204      	str	r2, [sp, #16]
 800d1e2:	9303      	str	r3, [sp, #12]
 800d1e4:	6879      	ldr	r1, [r7, #4]
 800d1e6:	9102      	str	r1, [sp, #8]
 800d1e8:	9501      	str	r5, [sp, #4]
 800d1ea:	9400      	str	r4, [sp, #0]
 800d1ec:	2310      	movs	r3, #16
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	4631      	mov	r1, r6
 800d1f2:	6978      	ldr	r0, [r7, #20]
 800d1f4:	f7fe ff34 	bl	800c060 <tx_tcp>
 800d1f8:	e041      	b.n	800d27e <mg_tcpip_poll+0x366>
               mg_htonl(s->seq), mg_htonl(s->ack), "", 0);
      } else {
        if (s->tmiss++ > 2) {
 800d1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1fc:	7ddb      	ldrb	r3, [r3, #23]
 800d1fe:	1c5a      	adds	r2, r3, #1
 800d200:	b2d1      	uxtb	r1, r2
 800d202:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d204:	75d1      	strb	r1, [r2, #23]
 800d206:	2b02      	cmp	r3, #2
 800d208:	d904      	bls.n	800d214 <mg_tcpip_poll+0x2fc>
          mg_error(c, "keepalive");
 800d20a:	492e      	ldr	r1, [pc, #184]	; (800d2c4 <mg_tcpip_poll+0x3ac>)
 800d20c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d20e:	f7f4 ff43 	bl	8002098 <mg_error>
 800d212:	e034      	b.n	800d27e <mg_tcpip_poll+0x366>
        } else {
          MG_DEBUG(("%lu keepalive", c->id));
 800d214:	4b27      	ldr	r3, [pc, #156]	; (800d2b4 <mg_tcpip_poll+0x39c>)
 800d216:	f44f 5203 	mov.w	r2, #8384	; 0x20c0
 800d21a:	4927      	ldr	r1, [pc, #156]	; (800d2b8 <mg_tcpip_poll+0x3a0>)
 800d21c:	2003      	movs	r0, #3
 800d21e:	f7f9 fef9 	bl	8007014 <mg_log_prefix>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d005      	beq.n	800d234 <mg_tcpip_poll+0x31c>
 800d228:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d22a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d22c:	4619      	mov	r1, r3
 800d22e:	4826      	ldr	r0, [pc, #152]	; (800d2c8 <mg_tcpip_poll+0x3b0>)
 800d230:	f7f9 ff4a 	bl	80070c8 <mg_log>
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800d234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d236:	f103 0610 	add.w	r6, r3, #16
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	613b      	str	r3, [r7, #16]
 800d23e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d240:	8b1c      	ldrh	r4, [r3, #24]
 800d242:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d244:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
                 mg_htonl(s->seq - 1), mg_htonl(s->ack), "", 0);
 800d246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d248:	681b      	ldr	r3, [r3, #0]
          tx_tcp(ifp, s->mac, rem_ip, TH_ACK, c->loc.port, c->rem.port,
 800d24a:	3b01      	subs	r3, #1
 800d24c:	4618      	mov	r0, r3
 800d24e:	f7fd f91d 	bl	800a48c <mg_ntohl>
 800d252:	6078      	str	r0, [r7, #4]
 800d254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d256:	685b      	ldr	r3, [r3, #4]
 800d258:	4618      	mov	r0, r3
 800d25a:	f7fd f917 	bl	800a48c <mg_ntohl>
 800d25e:	4603      	mov	r3, r0
 800d260:	2200      	movs	r2, #0
 800d262:	9205      	str	r2, [sp, #20]
 800d264:	4a16      	ldr	r2, [pc, #88]	; (800d2c0 <mg_tcpip_poll+0x3a8>)
 800d266:	9204      	str	r2, [sp, #16]
 800d268:	9303      	str	r3, [sp, #12]
 800d26a:	6879      	ldr	r1, [r7, #4]
 800d26c:	9102      	str	r1, [sp, #8]
 800d26e:	9501      	str	r5, [sp, #4]
 800d270:	9400      	str	r4, [sp, #0]
 800d272:	2310      	movs	r3, #16
 800d274:	693a      	ldr	r2, [r7, #16]
 800d276:	4631      	mov	r1, r6
 800d278:	6978      	ldr	r0, [r7, #20]
 800d27a:	f7fe fef1 	bl	800c060 <tx_tcp>
        }
      }
      settmout(c, MIP_TTYPE_KEEPALIVE);
 800d27e:	2100      	movs	r1, #0
 800d280:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800d282:	f7fe fffd 	bl	800c280 <settmout>
 800d286:	e002      	b.n	800d28e <mg_tcpip_poll+0x376>
    if (c->is_udp || c->is_listening) continue;
 800d288:	bf00      	nop
 800d28a:	e000      	b.n	800d28e <mg_tcpip_poll+0x376>
    if (c->is_connecting || c->is_resolving) continue;
 800d28c:	bf00      	nop
  for (struct mg_connection *c = ifp->mgr->conns; c != NULL; c = c->next) {
 800d28e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	637b      	str	r3, [r7, #52]	; 0x34
 800d294:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d296:	2b00      	cmp	r3, #0
 800d298:	f47f af3e 	bne.w	800d118 <mg_tcpip_poll+0x200>
 800d29c:	e002      	b.n	800d2a4 <mg_tcpip_poll+0x38c>
  if (ifp == NULL || ifp->driver == NULL) return;
 800d29e:	bf00      	nop
 800d2a0:	e000      	b.n	800d2a4 <mg_tcpip_poll+0x38c>
  if (ifp->state == MG_TCPIP_STATE_DOWN) return;
 800d2a2:	bf00      	nop
    }
  }
}
 800d2a4:	373c      	adds	r7, #60	; 0x3c
 800d2a6:	46bd      	mov	sp, r7
 800d2a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2aa:	bf00      	nop
 800d2ac:	001b7740 	.word	0x001b7740
 800d2b0:	080173b8 	.word	0x080173b8
 800d2b4:	080175f0 	.word	0x080175f0
 800d2b8:	0801544c 	.word	0x0801544c
 800d2bc:	08016bd4 	.word	0x08016bd4
 800d2c0:	08015ae8 	.word	0x08015ae8
 800d2c4:	08016be4 	.word	0x08016be4
 800d2c8:	08016bf0 	.word	0x08016bf0

0800d2cc <mg_tcpip_qwrite>:

// This function executes in interrupt context, thus it should copy data
// somewhere fast. Note that newlib's malloc is not thread safe, thus use
// our lock-free queue with preallocated buffer to copy data and return asap
void mg_tcpip_qwrite(void *buf, size_t len, struct mg_tcpip_if *ifp) {
 800d2cc:	b580      	push	{r7, lr}
 800d2ce:	b086      	sub	sp, #24
 800d2d0:	af00      	add	r7, sp, #0
 800d2d2:	60f8      	str	r0, [r7, #12]
 800d2d4:	60b9      	str	r1, [r7, #8]
 800d2d6:	607a      	str	r2, [r7, #4]
  char *p;
  if (mg_queue_book(&ifp->recv_queue, &p, len) >= len) {
 800d2d8:	687b      	ldr	r3, [r7, #4]
 800d2da:	332c      	adds	r3, #44	; 0x2c
 800d2dc:	f107 0114 	add.w	r1, r7, #20
 800d2e0:	68ba      	ldr	r2, [r7, #8]
 800d2e2:	4618      	mov	r0, r3
 800d2e4:	f7fb fec6 	bl	8009074 <mg_queue_book>
 800d2e8:	4602      	mov	r2, r0
 800d2ea:	68bb      	ldr	r3, [r7, #8]
 800d2ec:	4293      	cmp	r3, r2
 800d2ee:	d811      	bhi.n	800d314 <mg_tcpip_qwrite+0x48>
    memcpy(p, buf, len);
 800d2f0:	697b      	ldr	r3, [r7, #20]
 800d2f2:	68ba      	ldr	r2, [r7, #8]
 800d2f4:	68f9      	ldr	r1, [r7, #12]
 800d2f6:	4618      	mov	r0, r3
 800d2f8:	f007 fb04 	bl	8014904 <memcpy>
    mg_queue_add(&ifp->recv_queue, len);
 800d2fc:	687b      	ldr	r3, [r7, #4]
 800d2fe:	332c      	adds	r3, #44	; 0x2c
 800d300:	68b9      	ldr	r1, [r7, #8]
 800d302:	4618      	mov	r0, r3
 800d304:	f7fb ff54 	bl	80091b0 <mg_queue_add>
    ifp->nrecv++;
 800d308:	687b      	ldr	r3, [r7, #4]
 800d30a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800d30c:	1c5a      	adds	r2, r3, #1
 800d30e:	687b      	ldr	r3, [r7, #4]
 800d310:	669a      	str	r2, [r3, #104]	; 0x68
  } else {
    ifp->ndrop++;
  }
}
 800d312:	e004      	b.n	800d31e <mg_tcpip_qwrite+0x52>
    ifp->ndrop++;
 800d314:	687b      	ldr	r3, [r7, #4]
 800d316:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800d318:	1c5a      	adds	r2, r3, #1
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	665a      	str	r2, [r3, #100]	; 0x64
}
 800d31e:	bf00      	nop
 800d320:	3718      	adds	r7, #24
 800d322:	46bd      	mov	sp, r7
 800d324:	bd80      	pop	{r7, pc}
	...

0800d328 <mg_tcpip_init>:

void mg_tcpip_init(struct mg_mgr *mgr, struct mg_tcpip_if *ifp) {
 800d328:	b580      	push	{r7, lr}
 800d32a:	b084      	sub	sp, #16
 800d32c:	af00      	add	r7, sp, #0
 800d32e:	6078      	str	r0, [r7, #4]
 800d330:	6039      	str	r1, [r7, #0]
  // If MAC address is not set, make a random one
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800d332:	683b      	ldr	r3, [r7, #0]
 800d334:	781b      	ldrb	r3, [r3, #0]
 800d336:	2b00      	cmp	r3, #0
 800d338:	d12c      	bne.n	800d394 <mg_tcpip_init+0x6c>
 800d33a:	683b      	ldr	r3, [r7, #0]
 800d33c:	785b      	ldrb	r3, [r3, #1]
 800d33e:	2b00      	cmp	r3, #0
 800d340:	d128      	bne.n	800d394 <mg_tcpip_init+0x6c>
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	789b      	ldrb	r3, [r3, #2]
 800d346:	2b00      	cmp	r3, #0
 800d348:	d124      	bne.n	800d394 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800d34a:	683b      	ldr	r3, [r7, #0]
 800d34c:	78db      	ldrb	r3, [r3, #3]
  if (ifp->mac[0] == 0 && ifp->mac[1] == 0 && ifp->mac[2] == 0 &&
 800d34e:	2b00      	cmp	r3, #0
 800d350:	d120      	bne.n	800d394 <mg_tcpip_init+0x6c>
      ifp->mac[3] == 0 && ifp->mac[4] == 0 && ifp->mac[5] == 0) {
 800d352:	683b      	ldr	r3, [r7, #0]
 800d354:	791b      	ldrb	r3, [r3, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d11c      	bne.n	800d394 <mg_tcpip_init+0x6c>
 800d35a:	683b      	ldr	r3, [r7, #0]
 800d35c:	795b      	ldrb	r3, [r3, #5]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d118      	bne.n	800d394 <mg_tcpip_init+0x6c>
    ifp->mac[0] = 0x02;  // Locally administered, unicast
 800d362:	683b      	ldr	r3, [r7, #0]
 800d364:	2202      	movs	r2, #2
 800d366:	701a      	strb	r2, [r3, #0]
    mg_random(&ifp->mac[1], sizeof(ifp->mac) - 1);
 800d368:	683b      	ldr	r3, [r7, #0]
 800d36a:	3301      	adds	r3, #1
 800d36c:	2105      	movs	r1, #5
 800d36e:	4618      	mov	r0, r3
 800d370:	f7f3 fc68 	bl	8000c44 <mg_random>
    MG_INFO(("MAC not set. Generated random: %M", mg_print_mac, ifp->mac));
 800d374:	4b4d      	ldr	r3, [pc, #308]	; (800d4ac <mg_tcpip_init+0x184>)
 800d376:	f242 02de 	movw	r2, #8414	; 0x20de
 800d37a:	494d      	ldr	r1, [pc, #308]	; (800d4b0 <mg_tcpip_init+0x188>)
 800d37c:	2002      	movs	r0, #2
 800d37e:	f7f9 fe49 	bl	8007014 <mg_log_prefix>
 800d382:	4603      	mov	r3, r0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d005      	beq.n	800d394 <mg_tcpip_init+0x6c>
 800d388:	683b      	ldr	r3, [r7, #0]
 800d38a:	461a      	mov	r2, r3
 800d38c:	4949      	ldr	r1, [pc, #292]	; (800d4b4 <mg_tcpip_init+0x18c>)
 800d38e:	484a      	ldr	r0, [pc, #296]	; (800d4b8 <mg_tcpip_init+0x190>)
 800d390:	f7f9 fe9a 	bl	80070c8 <mg_log>
  }

  if (ifp->driver->init && !ifp->driver->init(ifp)) {
 800d394:	683b      	ldr	r3, [r7, #0]
 800d396:	6a1b      	ldr	r3, [r3, #32]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	2b00      	cmp	r3, #0
 800d39c:	d018      	beq.n	800d3d0 <mg_tcpip_init+0xa8>
 800d39e:	683b      	ldr	r3, [r7, #0]
 800d3a0:	6a1b      	ldr	r3, [r3, #32]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	6838      	ldr	r0, [r7, #0]
 800d3a6:	4798      	blx	r3
 800d3a8:	4603      	mov	r3, r0
 800d3aa:	f083 0301 	eor.w	r3, r3, #1
 800d3ae:	b2db      	uxtb	r3, r3
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d00d      	beq.n	800d3d0 <mg_tcpip_init+0xa8>
    MG_ERROR(("driver init failed"));
 800d3b4:	4b3d      	ldr	r3, [pc, #244]	; (800d4ac <mg_tcpip_init+0x184>)
 800d3b6:	f242 02e2 	movw	r2, #8418	; 0x20e2
 800d3ba:	493d      	ldr	r1, [pc, #244]	; (800d4b0 <mg_tcpip_init+0x188>)
 800d3bc:	2001      	movs	r0, #1
 800d3be:	f7f9 fe29 	bl	8007014 <mg_log_prefix>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b00      	cmp	r3, #0
 800d3c6:	d06d      	beq.n	800d4a4 <mg_tcpip_init+0x17c>
 800d3c8:	483c      	ldr	r0, [pc, #240]	; (800d4bc <mg_tcpip_init+0x194>)
 800d3ca:	f7f9 fe7d 	bl	80070c8 <mg_log>
 800d3ce:	e069      	b.n	800d4a4 <mg_tcpip_init+0x17c>
  } else {
    size_t framesize = 1540;
 800d3d0:	f240 6304 	movw	r3, #1540	; 0x604
 800d3d4:	60fb      	str	r3, [r7, #12]
    ifp->tx.ptr = (char *) calloc(1, framesize), ifp->tx.len = framesize;
 800d3d6:	68f9      	ldr	r1, [r7, #12]
 800d3d8:	2001      	movs	r0, #1
 800d3da:	f006 fdb1 	bl	8013f40 <calloc>
 800d3de:	4603      	mov	r3, r0
 800d3e0:	461a      	mov	r2, r3
 800d3e2:	683b      	ldr	r3, [r7, #0]
 800d3e4:	615a      	str	r2, [r3, #20]
 800d3e6:	683b      	ldr	r3, [r7, #0]
 800d3e8:	68fa      	ldr	r2, [r7, #12]
 800d3ea:	619a      	str	r2, [r3, #24]
    if (ifp->recv_queue.size == 0)
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	d10a      	bne.n	800d40a <mg_tcpip_init+0xe2>
      ifp->recv_queue.size = ifp->driver->rx ? framesize : 8192;
 800d3f4:	683b      	ldr	r3, [r7, #0]
 800d3f6:	6a1b      	ldr	r3, [r3, #32]
 800d3f8:	689b      	ldr	r3, [r3, #8]
 800d3fa:	2b00      	cmp	r3, #0
 800d3fc:	d001      	beq.n	800d402 <mg_tcpip_init+0xda>
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	e001      	b.n	800d406 <mg_tcpip_init+0xde>
 800d402:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800d406:	683a      	ldr	r2, [r7, #0]
 800d408:	6313      	str	r3, [r2, #48]	; 0x30
    ifp->recv_queue.buf = (char *) calloc(1, ifp->recv_queue.size);
 800d40a:	683b      	ldr	r3, [r7, #0]
 800d40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d40e:	4619      	mov	r1, r3
 800d410:	2001      	movs	r0, #1
 800d412:	f006 fd95 	bl	8013f40 <calloc>
 800d416:	4603      	mov	r3, r0
 800d418:	461a      	mov	r2, r3
 800d41a:	683b      	ldr	r3, [r7, #0]
 800d41c:	62da      	str	r2, [r3, #44]	; 0x2c
    ifp->timer_1000ms = mg_millis();
 800d41e:	f7f3 fc03 	bl	8000c28 <mg_millis>
 800d422:	4602      	mov	r2, r0
 800d424:	460b      	mov	r3, r1
 800d426:	6839      	ldr	r1, [r7, #0]
 800d428:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
    mgr->priv = ifp;
 800d42c:	687b      	ldr	r3, [r7, #4]
 800d42e:	683a      	ldr	r2, [r7, #0]
 800d430:	63da      	str	r2, [r3, #60]	; 0x3c
    ifp->mgr = mgr;
 800d432:	683b      	ldr	r3, [r7, #0]
 800d434:	687a      	ldr	r2, [r7, #4]
 800d436:	629a      	str	r2, [r3, #40]	; 0x28
    mgr->extraconnsize = sizeof(struct connstate);
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	2228      	movs	r2, #40	; 0x28
 800d43c:	641a      	str	r2, [r3, #64]	; 0x40
    if (ifp->ip == 0) ifp->enable_dhcp_client = true;
 800d43e:	683b      	ldr	r3, [r7, #0]
 800d440:	689b      	ldr	r3, [r3, #8]
 800d442:	2b00      	cmp	r3, #0
 800d444:	d102      	bne.n	800d44c <mg_tcpip_init+0x124>
 800d446:	683b      	ldr	r3, [r7, #0]
 800d448:	2201      	movs	r2, #1
 800d44a:	771a      	strb	r2, [r3, #28]
    memset(ifp->gwmac, 255, sizeof(ifp->gwmac));  // Set to broadcast
 800d44c:	683b      	ldr	r3, [r7, #0]
 800d44e:	333c      	adds	r3, #60	; 0x3c
 800d450:	2206      	movs	r2, #6
 800d452:	21ff      	movs	r1, #255	; 0xff
 800d454:	4618      	mov	r0, r3
 800d456:	f007 f96d 	bl	8014734 <memset>
    mg_random(&ifp->eport, sizeof(ifp->eport));   // Random from 0 to 65535
 800d45a:	683b      	ldr	r3, [r7, #0]
 800d45c:	3360      	adds	r3, #96	; 0x60
 800d45e:	2102      	movs	r1, #2
 800d460:	4618      	mov	r0, r3
 800d462:	f7f3 fbef 	bl	8000c44 <mg_random>
    ifp->eport |= MG_EPHEMERAL_PORT_BASE;         // Random from
 800d466:	683b      	ldr	r3, [r7, #0]
 800d468:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800d46c:	4b14      	ldr	r3, [pc, #80]	; (800d4c0 <mg_tcpip_init+0x198>)
 800d46e:	4313      	orrs	r3, r2
 800d470:	b29a      	uxth	r2, r3
 800d472:	683b      	ldr	r3, [r7, #0]
 800d474:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
                                           // MG_EPHEMERAL_PORT_BASE to 65535
    if (ifp->tx.ptr == NULL || ifp->recv_queue.buf == NULL) MG_ERROR(("OOM"));
 800d478:	683b      	ldr	r3, [r7, #0]
 800d47a:	695b      	ldr	r3, [r3, #20]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d003      	beq.n	800d488 <mg_tcpip_init+0x160>
 800d480:	683b      	ldr	r3, [r7, #0]
 800d482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d484:	2b00      	cmp	r3, #0
 800d486:	d10d      	bne.n	800d4a4 <mg_tcpip_init+0x17c>
 800d488:	4b08      	ldr	r3, [pc, #32]	; (800d4ac <mg_tcpip_init+0x184>)
 800d48a:	f242 02f2 	movw	r2, #8434	; 0x20f2
 800d48e:	4908      	ldr	r1, [pc, #32]	; (800d4b0 <mg_tcpip_init+0x188>)
 800d490:	2001      	movs	r0, #1
 800d492:	f7f9 fdbf 	bl	8007014 <mg_log_prefix>
 800d496:	4603      	mov	r3, r0
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d003      	beq.n	800d4a4 <mg_tcpip_init+0x17c>
 800d49c:	4809      	ldr	r0, [pc, #36]	; (800d4c4 <mg_tcpip_init+0x19c>)
 800d49e:	f7f9 fe13 	bl	80070c8 <mg_log>
  }
}
 800d4a2:	e7ff      	b.n	800d4a4 <mg_tcpip_init+0x17c>
 800d4a4:	bf00      	nop
 800d4a6:	3710      	adds	r7, #16
 800d4a8:	46bd      	mov	sp, r7
 800d4aa:	bd80      	pop	{r7, pc}
 800d4ac:	08017600 	.word	0x08017600
 800d4b0:	0801544c 	.word	0x0801544c
 800d4b4:	08008e15 	.word	0x08008e15
 800d4b8:	08016c00 	.word	0x08016c00
 800d4bc:	08016c24 	.word	0x08016c24
 800d4c0:	ffff8000 	.word	0xffff8000
 800d4c4:	08016178 	.word	0x08016178

0800d4c8 <send_syn>:
  (void) m, (void) fn, (void) d, (void) udp;
  MG_ERROR(("Not implemented"));
  return -1;
}

static void send_syn(struct mg_connection *c) {
 800d4c8:	b590      	push	{r4, r7, lr}
 800d4ca:	b08d      	sub	sp, #52	; 0x34
 800d4cc:	af06      	add	r7, sp, #24
 800d4ce:	6078      	str	r0, [r7, #4]
  struct connstate *s = (struct connstate *) (c + 1);
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	3390      	adds	r3, #144	; 0x90
 800d4d4:	617b      	str	r3, [r7, #20]
  uint32_t isn = mg_htonl((uint32_t) mg_ntohs(c->loc.port));
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	8b1b      	ldrh	r3, [r3, #24]
 800d4da:	4618      	mov	r0, r3
 800d4dc:	f7fc ffef 	bl	800a4be <mg_ntohs>
 800d4e0:	4603      	mov	r3, r0
 800d4e2:	4618      	mov	r0, r3
 800d4e4:	f7fc ffd2 	bl	800a48c <mg_ntohl>
 800d4e8:	6138      	str	r0, [r7, #16]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800d4ea:	687b      	ldr	r3, [r7, #4]
 800d4ec:	685b      	ldr	r3, [r3, #4]
 800d4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4f0:	60fb      	str	r3, [r7, #12]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	331c      	adds	r3, #28
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	60bb      	str	r3, [r7, #8]
  tx_tcp(ifp, s->mac, rem_ip, TH_SYN, c->loc.port, c->rem.port, isn, 0, NULL,
 800d4fa:	697b      	ldr	r3, [r7, #20]
 800d4fc:	f103 0010 	add.w	r0, r3, #16
 800d500:	68bc      	ldr	r4, [r7, #8]
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	8b1b      	ldrh	r3, [r3, #24]
 800d506:	687a      	ldr	r2, [r7, #4]
 800d508:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800d50a:	2100      	movs	r1, #0
 800d50c:	9105      	str	r1, [sp, #20]
 800d50e:	2100      	movs	r1, #0
 800d510:	9104      	str	r1, [sp, #16]
 800d512:	2100      	movs	r1, #0
 800d514:	9103      	str	r1, [sp, #12]
 800d516:	6939      	ldr	r1, [r7, #16]
 800d518:	9102      	str	r1, [sp, #8]
 800d51a:	9201      	str	r2, [sp, #4]
 800d51c:	9300      	str	r3, [sp, #0]
 800d51e:	2302      	movs	r3, #2
 800d520:	4622      	mov	r2, r4
 800d522:	4601      	mov	r1, r0
 800d524:	68f8      	ldr	r0, [r7, #12]
 800d526:	f7fe fd9b 	bl	800c060 <tx_tcp>
         0);
}
 800d52a:	bf00      	nop
 800d52c:	371c      	adds	r7, #28
 800d52e:	46bd      	mov	sp, r7
 800d530:	bd90      	pop	{r4, r7, pc}
	...

0800d534 <mg_connect_resolved>:

void mg_connect_resolved(struct mg_connection *c) {
 800d534:	b580      	push	{r7, lr}
 800d536:	b08a      	sub	sp, #40	; 0x28
 800d538:	af02      	add	r7, sp, #8
 800d53a:	6078      	str	r0, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	685b      	ldr	r3, [r3, #4]
 800d540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d542:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800d544:	687b      	ldr	r3, [r7, #4]
 800d546:	331c      	adds	r3, #28
 800d548:	681b      	ldr	r3, [r3, #0]
 800d54a:	60fb      	str	r3, [r7, #12]
  c->is_resolving = 0;
 800d54c:	687a      	ldr	r2, [r7, #4]
 800d54e:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800d552:	f36f 03c3 	bfc	r3, #3, #1
 800d556:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
  if (ifp->eport < MG_EPHEMERAL_PORT_BASE) ifp->eport = MG_EPHEMERAL_PORT_BASE;
 800d55a:	69fb      	ldr	r3, [r7, #28]
 800d55c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d560:	b21b      	sxth	r3, r3
 800d562:	2b00      	cmp	r3, #0
 800d564:	db04      	blt.n	800d570 <mg_connect_resolved+0x3c>
 800d566:	69fb      	ldr	r3, [r7, #28]
 800d568:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800d56c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  memcpy(c->loc.ip, &ifp->ip, sizeof(uint32_t));
 800d570:	687b      	ldr	r3, [r7, #4]
 800d572:	3308      	adds	r3, #8
 800d574:	69fa      	ldr	r2, [r7, #28]
 800d576:	3208      	adds	r2, #8
 800d578:	6812      	ldr	r2, [r2, #0]
 800d57a:	601a      	str	r2, [r3, #0]
  c->loc.port = mg_htons(ifp->eport++);
 800d57c:	69fb      	ldr	r3, [r7, #28]
 800d57e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800d582:	1c5a      	adds	r2, r3, #1
 800d584:	b291      	uxth	r1, r2
 800d586:	69fa      	ldr	r2, [r7, #28]
 800d588:	f8a2 1060 	strh.w	r1, [r2, #96]	; 0x60
 800d58c:	4618      	mov	r0, r3
 800d58e:	f7fc ff96 	bl	800a4be <mg_ntohs>
 800d592:	4603      	mov	r3, r0
 800d594:	461a      	mov	r2, r3
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	831a      	strh	r2, [r3, #24]
  MG_DEBUG(("%lu %M -> %M", c->id, mg_print_ip_port, &c->loc, mg_print_ip_port,
 800d59a:	4b57      	ldr	r3, [pc, #348]	; (800d6f8 <mg_connect_resolved+0x1c4>)
 800d59c:	f242 1213 	movw	r2, #8467	; 0x2113
 800d5a0:	4956      	ldr	r1, [pc, #344]	; (800d6fc <mg_connect_resolved+0x1c8>)
 800d5a2:	2003      	movs	r0, #3
 800d5a4:	f7f9 fd36 	bl	8007014 <mg_log_prefix>
 800d5a8:	4603      	mov	r3, r0
 800d5aa:	2b00      	cmp	r3, #0
 800d5ac:	d00e      	beq.n	800d5cc <mg_connect_resolved+0x98>
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d5b2:	687b      	ldr	r3, [r7, #4]
 800d5b4:	f103 0208 	add.w	r2, r3, #8
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	331c      	adds	r3, #28
 800d5bc:	9301      	str	r3, [sp, #4]
 800d5be:	4b50      	ldr	r3, [pc, #320]	; (800d700 <mg_connect_resolved+0x1cc>)
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	4613      	mov	r3, r2
 800d5c4:	4a4e      	ldr	r2, [pc, #312]	; (800d700 <mg_connect_resolved+0x1cc>)
 800d5c6:	484f      	ldr	r0, [pc, #316]	; (800d704 <mg_connect_resolved+0x1d0>)
 800d5c8:	f7f9 fd7e 	bl	80070c8 <mg_log>
            &c->rem));
  mg_call(c, MG_EV_RESOLVE, NULL);
 800d5cc:	2200      	movs	r2, #0
 800d5ce:	2103      	movs	r1, #3
 800d5d0:	6878      	ldr	r0, [r7, #4]
 800d5d2:	f7f4 fd3f 	bl	8002054 <mg_call>
  if (((rem_ip & ifp->mask) == (ifp->ip & ifp->mask))) {
 800d5d6:	69fb      	ldr	r3, [r7, #28]
 800d5d8:	689a      	ldr	r2, [r3, #8]
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	405a      	eors	r2, r3
 800d5de:	69fb      	ldr	r3, [r7, #28]
 800d5e0:	68db      	ldr	r3, [r3, #12]
 800d5e2:	4013      	ands	r3, r2
 800d5e4:	2b00      	cmp	r3, #0
 800d5e6:	d11c      	bne.n	800d622 <mg_connect_resolved+0xee>
    // If we're in the same LAN, fire an ARP lookup. TODO(cpq): handle this!
    MG_DEBUG(("%lu ARP lookup...", c->id));
 800d5e8:	4b43      	ldr	r3, [pc, #268]	; (800d6f8 <mg_connect_resolved+0x1c4>)
 800d5ea:	f242 1218 	movw	r2, #8472	; 0x2118
 800d5ee:	4943      	ldr	r1, [pc, #268]	; (800d6fc <mg_connect_resolved+0x1c8>)
 800d5f0:	2003      	movs	r0, #3
 800d5f2:	f7f9 fd0f 	bl	8007014 <mg_log_prefix>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	2b00      	cmp	r3, #0
 800d5fa:	d005      	beq.n	800d608 <mg_connect_resolved+0xd4>
 800d5fc:	687b      	ldr	r3, [r7, #4]
 800d5fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800d600:	4619      	mov	r1, r3
 800d602:	4841      	ldr	r0, [pc, #260]	; (800d708 <mg_connect_resolved+0x1d4>)
 800d604:	f7f9 fd60 	bl	80070c8 <mg_log>
    arp_ask(ifp, rem_ip);
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	4619      	mov	r1, r3
 800d60c:	69f8      	ldr	r0, [r7, #28]
 800d60e:	f7fd fcd0 	bl	800afb2 <arp_ask>
    c->is_arplooking = 1;
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800d618:	f043 0310 	orr.w	r3, r3, #16
 800d61c:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
    } else {
      send_syn(c);
      c->is_connecting = 1;
    }
  }
}
 800d620:	e065      	b.n	800d6ee <mg_connect_resolved+0x1ba>
  } else if (rem_ip == (ifp->ip | ~ifp->mask)) {
 800d622:	69fb      	ldr	r3, [r7, #28]
 800d624:	689a      	ldr	r2, [r3, #8]
 800d626:	69fb      	ldr	r3, [r7, #28]
 800d628:	68db      	ldr	r3, [r3, #12]
 800d62a:	43db      	mvns	r3, r3
 800d62c:	431a      	orrs	r2, r3
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	429a      	cmp	r2, r3
 800d632:	d10a      	bne.n	800d64a <mg_connect_resolved+0x116>
    struct connstate *s = (struct connstate *) (c + 1);
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	3390      	adds	r3, #144	; 0x90
 800d638:	613b      	str	r3, [r7, #16]
    memset(s->mac, 0xFF, sizeof(s->mac));  // local broadcast
 800d63a:	693b      	ldr	r3, [r7, #16]
 800d63c:	3310      	adds	r3, #16
 800d63e:	2206      	movs	r2, #6
 800d640:	21ff      	movs	r1, #255	; 0xff
 800d642:	4618      	mov	r0, r3
 800d644:	f007 f876 	bl	8014734 <memset>
}
 800d648:	e051      	b.n	800d6ee <mg_connect_resolved+0x1ba>
  } else if ((*((uint8_t *) &rem_ip) & 0xE0) == 0xE0) {
 800d64a:	f107 030c 	add.w	r3, r7, #12
 800d64e:	781b      	ldrb	r3, [r3, #0]
 800d650:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800d654:	2be0      	cmp	r3, #224	; 0xe0
 800d656:	d126      	bne.n	800d6a6 <mg_connect_resolved+0x172>
    struct connstate *s = (struct connstate *) (c + 1);  // 224 to 239, E0 to EF
 800d658:	687b      	ldr	r3, [r7, #4]
 800d65a:	3390      	adds	r3, #144	; 0x90
 800d65c:	617b      	str	r3, [r7, #20]
    uint8_t mcastp[3] = {0x01, 0x00, 0x5E};              // multicast group
 800d65e:	4a2b      	ldr	r2, [pc, #172]	; (800d70c <mg_connect_resolved+0x1d8>)
 800d660:	f107 0308 	add.w	r3, r7, #8
 800d664:	6812      	ldr	r2, [r2, #0]
 800d666:	4611      	mov	r1, r2
 800d668:	8019      	strh	r1, [r3, #0]
 800d66a:	3302      	adds	r3, #2
 800d66c:	0c12      	lsrs	r2, r2, #16
 800d66e:	701a      	strb	r2, [r3, #0]
    memcpy(s->mac, mcastp, 3);
 800d670:	697b      	ldr	r3, [r7, #20]
 800d672:	3310      	adds	r3, #16
 800d674:	461a      	mov	r2, r3
 800d676:	f107 0308 	add.w	r3, r7, #8
 800d67a:	8819      	ldrh	r1, [r3, #0]
 800d67c:	789b      	ldrb	r3, [r3, #2]
 800d67e:	8011      	strh	r1, [r2, #0]
 800d680:	7093      	strb	r3, [r2, #2]
    memcpy(s->mac + 3, ((uint8_t *) &rem_ip) + 1, 3);  // 23 LSb
 800d682:	697b      	ldr	r3, [r7, #20]
 800d684:	3310      	adds	r3, #16
 800d686:	1cd8      	adds	r0, r3, #3
 800d688:	f107 030c 	add.w	r3, r7, #12
 800d68c:	3301      	adds	r3, #1
 800d68e:	2203      	movs	r2, #3
 800d690:	4619      	mov	r1, r3
 800d692:	f007 f937 	bl	8014904 <memcpy>
    s->mac[3] &= 0x7F;
 800d696:	697b      	ldr	r3, [r7, #20]
 800d698:	7cdb      	ldrb	r3, [r3, #19]
 800d69a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d69e:	b2da      	uxtb	r2, r3
 800d6a0:	697b      	ldr	r3, [r7, #20]
 800d6a2:	74da      	strb	r2, [r3, #19]
}
 800d6a4:	e023      	b.n	800d6ee <mg_connect_resolved+0x1ba>
    struct connstate *s = (struct connstate *) (c + 1);
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	3390      	adds	r3, #144	; 0x90
 800d6aa:	61bb      	str	r3, [r7, #24]
    memcpy(s->mac, ifp->gwmac, sizeof(ifp->gwmac));
 800d6ac:	69bb      	ldr	r3, [r7, #24]
 800d6ae:	f103 0010 	add.w	r0, r3, #16
 800d6b2:	69fb      	ldr	r3, [r7, #28]
 800d6b4:	333c      	adds	r3, #60	; 0x3c
 800d6b6:	2206      	movs	r2, #6
 800d6b8:	4619      	mov	r1, r3
 800d6ba:	f007 f923 	bl	8014904 <memcpy>
    if (c->is_udp) {
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d6c4:	f003 0301 	and.w	r3, r3, #1
 800d6c8:	b2db      	uxtb	r3, r3
 800d6ca:	2b00      	cmp	r3, #0
 800d6cc:	d005      	beq.n	800d6da <mg_connect_resolved+0x1a6>
      mg_call(c, MG_EV_CONNECT, NULL);
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	2104      	movs	r1, #4
 800d6d2:	6878      	ldr	r0, [r7, #4]
 800d6d4:	f7f4 fcbe 	bl	8002054 <mg_call>
}
 800d6d8:	e009      	b.n	800d6ee <mg_connect_resolved+0x1ba>
      send_syn(c);
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f7ff fef4 	bl	800d4c8 <send_syn>
      c->is_connecting = 1;
 800d6e0:	687a      	ldr	r2, [r7, #4]
 800d6e2:	f892 308c 	ldrb.w	r3, [r2, #140]	; 0x8c
 800d6e6:	f043 0320 	orr.w	r3, r3, #32
 800d6ea:	f882 308c 	strb.w	r3, [r2, #140]	; 0x8c
}
 800d6ee:	bf00      	nop
 800d6f0:	3720      	adds	r7, #32
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	bd80      	pop	{r7, pc}
 800d6f6:	bf00      	nop
 800d6f8:	08017610 	.word	0x08017610
 800d6fc:	0801544c 	.word	0x0801544c
 800d700:	08008dc9 	.word	0x08008dc9
 800d704:	08016c48 	.word	0x08016c48
 800d708:	08016c58 	.word	0x08016c58
 800d70c:	08016c6c 	.word	0x08016c6c

0800d710 <mg_open_listener>:

bool mg_open_listener(struct mg_connection *c, const char *url) {
 800d710:	b580      	push	{r7, lr}
 800d712:	b082      	sub	sp, #8
 800d714:	af00      	add	r7, sp, #0
 800d716:	6078      	str	r0, [r7, #4]
 800d718:	6039      	str	r1, [r7, #0]
  c->loc.port = mg_htons(mg_url_port(url));
 800d71a:	6838      	ldr	r0, [r7, #0]
 800d71c:	f7fc fe52 	bl	800a3c4 <mg_url_port>
 800d720:	4603      	mov	r3, r0
 800d722:	4618      	mov	r0, r3
 800d724:	f7fc fecb 	bl	800a4be <mg_ntohs>
 800d728:	4603      	mov	r3, r0
 800d72a:	461a      	mov	r2, r3
 800d72c:	687b      	ldr	r3, [r7, #4]
 800d72e:	831a      	strh	r2, [r3, #24]
  return true;
 800d730:	2301      	movs	r3, #1
}
 800d732:	4618      	mov	r0, r3
 800d734:	3708      	adds	r7, #8
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}

0800d73a <write_conn>:

static void write_conn(struct mg_connection *c) {
 800d73a:	b580      	push	{r7, lr}
 800d73c:	b084      	sub	sp, #16
 800d73e:	af00      	add	r7, sp, #0
 800d740:	6078      	str	r0, [r7, #4]
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800d742:	687b      	ldr	r3, [r7, #4]
 800d744:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d748:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d74c:	b2db      	uxtb	r3, r3
                       : mg_io_send(c, c->send.buf, c->send.len);
 800d74e:	2b00      	cmp	r3, #0
 800d750:	d009      	beq.n	800d766 <write_conn+0x2c>
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800d752:	687b      	ldr	r3, [r7, #4]
 800d754:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d75a:	461a      	mov	r2, r3
 800d75c:	6878      	ldr	r0, [r7, #4]
 800d75e:	f7fc fd64 	bl	800a22a <mg_tls_send>
 800d762:	4603      	mov	r3, r0
 800d764:	e008      	b.n	800d778 <write_conn+0x3e>
                       : mg_io_send(c, c->send.buf, c->send.len);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	6c99      	ldr	r1, [r3, #72]	; 0x48
 800d76a:	687b      	ldr	r3, [r7, #4]
 800d76c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d76e:	461a      	mov	r2, r3
 800d770:	6878      	ldr	r0, [r7, #4]
 800d772:	f7fe fe7d 	bl	800c470 <mg_io_send>
 800d776:	4603      	mov	r3, r0
  long len = c->is_tls ? mg_tls_send(c, c->send.buf, c->send.len)
 800d778:	60fb      	str	r3, [r7, #12]
  if (len > 0) {
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	2b00      	cmp	r3, #0
 800d77e:	dd0d      	ble.n	800d79c <write_conn+0x62>
    mg_iobuf_del(&c->send, 0, (size_t) len);
 800d780:	687b      	ldr	r3, [r7, #4]
 800d782:	3348      	adds	r3, #72	; 0x48
 800d784:	68fa      	ldr	r2, [r7, #12]
 800d786:	2100      	movs	r1, #0
 800d788:	4618      	mov	r0, r3
 800d78a:	f7f8 fd2f 	bl	80061ec <mg_iobuf_del>
    mg_call(c, MG_EV_WRITE, &len);
 800d78e:	f107 030c 	add.w	r3, r7, #12
 800d792:	461a      	mov	r2, r3
 800d794:	2108      	movs	r1, #8
 800d796:	6878      	ldr	r0, [r7, #4]
 800d798:	f7f4 fc5c 	bl	8002054 <mg_call>
  }
}
 800d79c:	bf00      	nop
 800d79e:	3710      	adds	r7, #16
 800d7a0:	46bd      	mov	sp, r7
 800d7a2:	bd80      	pop	{r7, pc}

0800d7a4 <close_conn>:

static void close_conn(struct mg_connection *c) {
 800d7a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d7a6:	b08f      	sub	sp, #60	; 0x3c
 800d7a8:	af06      	add	r7, sp, #24
 800d7aa:	60f8      	str	r0, [r7, #12]
  struct connstate *s = (struct connstate *) (c + 1);
 800d7ac:	68fb      	ldr	r3, [r7, #12]
 800d7ae:	3390      	adds	r3, #144	; 0x90
 800d7b0:	61fb      	str	r3, [r7, #28]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800d7b2:	68fb      	ldr	r3, [r7, #12]
 800d7b4:	331c      	adds	r3, #28
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	617b      	str	r3, [r7, #20]
  mg_iobuf_free(&s->raw);  // For TLS connections, release raw data
 800d7ba:	69fb      	ldr	r3, [r7, #28]
 800d7bc:	3318      	adds	r3, #24
 800d7be:	4618      	mov	r0, r3
 800d7c0:	f7f8 fd5f 	bl	8006282 <mg_iobuf_free>
  if (c->is_udp == false && c->is_listening == false) {  // For TCP conns,
 800d7c4:	68fb      	ldr	r3, [r7, #12]
 800d7c6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d7ca:	f003 0301 	and.w	r3, r3, #1
 800d7ce:	b2db      	uxtb	r3, r3
 800d7d0:	2b00      	cmp	r3, #0
 800d7d2:	d12f      	bne.n	800d834 <close_conn+0x90>
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d7da:	f003 0301 	and.w	r3, r3, #1
 800d7de:	b2db      	uxtb	r3, r3
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d127      	bne.n	800d834 <close_conn+0x90>
    struct mg_tcpip_if *ifp =
        (struct mg_tcpip_if *) c->mgr->priv;  // send TCP FIN
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	685b      	ldr	r3, [r3, #4]
    struct mg_tcpip_if *ifp =
 800d7e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d7ea:	61bb      	str	r3, [r7, #24]
    tx_tcp(ifp, s->mac, rem_ip, TH_FIN | TH_ACK, c->loc.port, c->rem.port,
 800d7ec:	69fb      	ldr	r3, [r7, #28]
 800d7ee:	f103 0610 	add.w	r6, r3, #16
 800d7f2:	697b      	ldr	r3, [r7, #20]
 800d7f4:	60bb      	str	r3, [r7, #8]
 800d7f6:	68fb      	ldr	r3, [r7, #12]
 800d7f8:	8b1c      	ldrh	r4, [r3, #24]
 800d7fa:	68fb      	ldr	r3, [r7, #12]
 800d7fc:	8d9d      	ldrh	r5, [r3, #44]	; 0x2c
 800d7fe:	69fb      	ldr	r3, [r7, #28]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	4618      	mov	r0, r3
 800d804:	f7fc fe42 	bl	800a48c <mg_ntohl>
 800d808:	6078      	str	r0, [r7, #4]
 800d80a:	69fb      	ldr	r3, [r7, #28]
 800d80c:	685b      	ldr	r3, [r3, #4]
 800d80e:	4618      	mov	r0, r3
 800d810:	f7fc fe3c 	bl	800a48c <mg_ntohl>
 800d814:	4603      	mov	r3, r0
 800d816:	2200      	movs	r2, #0
 800d818:	9205      	str	r2, [sp, #20]
 800d81a:	2200      	movs	r2, #0
 800d81c:	9204      	str	r2, [sp, #16]
 800d81e:	9303      	str	r3, [sp, #12]
 800d820:	6879      	ldr	r1, [r7, #4]
 800d822:	9102      	str	r1, [sp, #8]
 800d824:	9501      	str	r5, [sp, #4]
 800d826:	9400      	str	r4, [sp, #0]
 800d828:	2311      	movs	r3, #17
 800d82a:	68ba      	ldr	r2, [r7, #8]
 800d82c:	4631      	mov	r1, r6
 800d82e:	69b8      	ldr	r0, [r7, #24]
 800d830:	f7fe fc16 	bl	800c060 <tx_tcp>
           mg_htonl(s->seq), mg_htonl(s->ack), NULL, 0);
  }
  mg_close_conn(c);
 800d834:	68f8      	ldr	r0, [r7, #12]
 800d836:	f7fa ff8b 	bl	8008750 <mg_close_conn>
}
 800d83a:	bf00      	nop
 800d83c:	3724      	adds	r7, #36	; 0x24
 800d83e:	46bd      	mov	sp, r7
 800d840:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800d842 <can_write>:

static bool can_write(struct mg_connection *c) {
 800d842:	b480      	push	{r7}
 800d844:	b083      	sub	sp, #12
 800d846:	af00      	add	r7, sp, #0
 800d848:	6078      	str	r0, [r7, #4]
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800d84a:	687b      	ldr	r3, [r7, #4]
 800d84c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d850:	f003 0320 	and.w	r3, r3, #32
 800d854:	b2db      	uxtb	r3, r3
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800d856:	2b00      	cmp	r3, #0
 800d858:	d11d      	bne.n	800d896 <can_write+0x54>
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800d85a:	687b      	ldr	r3, [r7, #4]
 800d85c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d860:	f003 0308 	and.w	r3, r3, #8
 800d864:	b2db      	uxtb	r3, r3
 800d866:	2b00      	cmp	r3, #0
 800d868:	d115      	bne.n	800d896 <can_write+0x54>
 800d86a:	687b      	ldr	r3, [r7, #4]
 800d86c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d86e:	2b00      	cmp	r3, #0
 800d870:	d011      	beq.n	800d896 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800d872:	687b      	ldr	r3, [r7, #4]
 800d874:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d878:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d87c:	b2db      	uxtb	r3, r3
  return c->is_connecting == 0 && c->is_resolving == 0 && c->send.len > 0 &&
 800d87e:	2b00      	cmp	r3, #0
 800d880:	d109      	bne.n	800d896 <can_write+0x54>
         c->is_tls_hs == 0 && c->is_arplooking == 0;
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d888:	f003 0310 	and.w	r3, r3, #16
 800d88c:	b2db      	uxtb	r3, r3
 800d88e:	2b00      	cmp	r3, #0
 800d890:	d101      	bne.n	800d896 <can_write+0x54>
 800d892:	2301      	movs	r3, #1
 800d894:	e000      	b.n	800d898 <can_write+0x56>
 800d896:	2300      	movs	r3, #0
 800d898:	f003 0301 	and.w	r3, r3, #1
 800d89c:	b2db      	uxtb	r3, r3
}
 800d89e:	4618      	mov	r0, r3
 800d8a0:	370c      	adds	r7, #12
 800d8a2:	46bd      	mov	sp, r7
 800d8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8a8:	4770      	bx	lr
	...

0800d8ac <mg_mgr_poll>:

void mg_mgr_poll(struct mg_mgr *mgr, int ms) {
 800d8ac:	b5b0      	push	{r4, r5, r7, lr}
 800d8ae:	b08a      	sub	sp, #40	; 0x28
 800d8b0:	af04      	add	r7, sp, #16
 800d8b2:	6078      	str	r0, [r7, #4]
 800d8b4:	6039      	str	r1, [r7, #0]
  struct mg_connection *c, *tmp;
  uint64_t now = mg_millis();
 800d8b6:	f7f3 f9b7 	bl	8000c28 <mg_millis>
 800d8ba:	4602      	mov	r2, r0
 800d8bc:	460b      	mov	r3, r1
 800d8be:	e9c7 2302 	strd	r2, r3, [r7, #8]
  mg_tcpip_poll((struct mg_tcpip_if *) mgr->priv, now);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 800d8c6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d8ca:	4608      	mov	r0, r1
 800d8cc:	f7ff fb24 	bl	800cf18 <mg_tcpip_poll>
  mg_timer_poll(&mgr->timers, now);
 800d8d0:	687b      	ldr	r3, [r7, #4]
 800d8d2:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800d8d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800d8da:	4608      	mov	r0, r1
 800d8dc:	f7fc fc01 	bl	800a0e2 <mg_timer_poll>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	681b      	ldr	r3, [r3, #0]
 800d8e4:	617b      	str	r3, [r7, #20]
 800d8e6:	e089      	b.n	800d9fc <mg_mgr_poll+0x150>
    tmp = c->next;
 800d8e8:	697b      	ldr	r3, [r7, #20]
 800d8ea:	681b      	ldr	r3, [r3, #0]
 800d8ec:	613b      	str	r3, [r7, #16]
    mg_call(c, MG_EV_POLL, &now);
 800d8ee:	f107 0308 	add.w	r3, r7, #8
 800d8f2:	461a      	mov	r2, r3
 800d8f4:	2102      	movs	r1, #2
 800d8f6:	6978      	ldr	r0, [r7, #20]
 800d8f8:	f7f4 fbac 	bl	8002054 <mg_call>
    MG_VERBOSE(("%lu .. %c%c%c%c%c", c->id, c->is_tls ? 'T' : 't',
 800d8fc:	4b44      	ldr	r3, [pc, #272]	; (800da10 <mg_mgr_poll+0x164>)
 800d8fe:	f242 1259 	movw	r2, #8537	; 0x2159
 800d902:	4944      	ldr	r1, [pc, #272]	; (800da14 <mg_mgr_poll+0x168>)
 800d904:	2004      	movs	r0, #4
 800d906:	f7f9 fb85 	bl	8007014 <mg_log_prefix>
 800d90a:	4603      	mov	r3, r0
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d041      	beq.n	800d994 <mg_mgr_poll+0xe8>
 800d910:	697b      	ldr	r3, [r7, #20]
 800d912:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800d914:	697b      	ldr	r3, [r7, #20]
 800d916:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d91a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d91e:	b2db      	uxtb	r3, r3
 800d920:	2b00      	cmp	r3, #0
 800d922:	d001      	beq.n	800d928 <mg_mgr_poll+0x7c>
 800d924:	2454      	movs	r4, #84	; 0x54
 800d926:	e000      	b.n	800d92a <mg_mgr_poll+0x7e>
 800d928:	2474      	movs	r4, #116	; 0x74
 800d92a:	697b      	ldr	r3, [r7, #20]
 800d92c:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d930:	f003 0320 	and.w	r3, r3, #32
 800d934:	b2db      	uxtb	r3, r3
 800d936:	2b00      	cmp	r3, #0
 800d938:	d001      	beq.n	800d93e <mg_mgr_poll+0x92>
 800d93a:	2543      	movs	r5, #67	; 0x43
 800d93c:	e000      	b.n	800d940 <mg_mgr_poll+0x94>
 800d93e:	2563      	movs	r5, #99	; 0x63
 800d940:	697b      	ldr	r3, [r7, #20]
 800d942:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d946:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d94a:	b2db      	uxtb	r3, r3
 800d94c:	2b00      	cmp	r3, #0
 800d94e:	d001      	beq.n	800d954 <mg_mgr_poll+0xa8>
 800d950:	2348      	movs	r3, #72	; 0x48
 800d952:	e000      	b.n	800d956 <mg_mgr_poll+0xaa>
 800d954:	2368      	movs	r3, #104	; 0x68
 800d956:	697a      	ldr	r2, [r7, #20]
 800d958:	f892 208c 	ldrb.w	r2, [r2, #140]	; 0x8c
 800d95c:	f002 0208 	and.w	r2, r2, #8
 800d960:	b2d2      	uxtb	r2, r2
 800d962:	2a00      	cmp	r2, #0
 800d964:	d001      	beq.n	800d96a <mg_mgr_poll+0xbe>
 800d966:	2252      	movs	r2, #82	; 0x52
 800d968:	e000      	b.n	800d96c <mg_mgr_poll+0xc0>
 800d96a:	2272      	movs	r2, #114	; 0x72
 800d96c:	6979      	ldr	r1, [r7, #20]
 800d96e:	f891 108d 	ldrb.w	r1, [r1, #141]	; 0x8d
 800d972:	f001 0120 	and.w	r1, r1, #32
 800d976:	b2c9      	uxtb	r1, r1
 800d978:	2900      	cmp	r1, #0
 800d97a:	d001      	beq.n	800d980 <mg_mgr_poll+0xd4>
 800d97c:	2143      	movs	r1, #67	; 0x43
 800d97e:	e000      	b.n	800d982 <mg_mgr_poll+0xd6>
 800d980:	2163      	movs	r1, #99	; 0x63
 800d982:	9102      	str	r1, [sp, #8]
 800d984:	9201      	str	r2, [sp, #4]
 800d986:	9300      	str	r3, [sp, #0]
 800d988:	462b      	mov	r3, r5
 800d98a:	4622      	mov	r2, r4
 800d98c:	4601      	mov	r1, r0
 800d98e:	4822      	ldr	r0, [pc, #136]	; (800da18 <mg_mgr_poll+0x16c>)
 800d990:	f7f9 fb9a 	bl	80070c8 <mg_log>
                c->is_connecting ? 'C' : 'c', c->is_tls_hs ? 'H' : 'h',
                c->is_resolving ? 'R' : 'r', c->is_closing ? 'C' : 'c'));
    if (c->is_tls_hs) mg_tls_handshake(c);
 800d994:	697b      	ldr	r3, [r7, #20]
 800d996:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800d99a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800d99e:	b2db      	uxtb	r3, r3
 800d9a0:	2b00      	cmp	r3, #0
 800d9a2:	d002      	beq.n	800d9aa <mg_mgr_poll+0xfe>
 800d9a4:	6978      	ldr	r0, [r7, #20]
 800d9a6:	f7fc fc13 	bl	800a1d0 <mg_tls_handshake>
    if (can_write(c)) write_conn(c);
 800d9aa:	6978      	ldr	r0, [r7, #20]
 800d9ac:	f7ff ff49 	bl	800d842 <can_write>
 800d9b0:	4603      	mov	r3, r0
 800d9b2:	2b00      	cmp	r3, #0
 800d9b4:	d002      	beq.n	800d9bc <mg_mgr_poll+0x110>
 800d9b6:	6978      	ldr	r0, [r7, #20]
 800d9b8:	f7ff febf 	bl	800d73a <write_conn>
    if (c->is_draining && c->send.len == 0) c->is_closing = 1;
 800d9bc:	697b      	ldr	r3, [r7, #20]
 800d9be:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d9c2:	f003 0310 	and.w	r3, r3, #16
 800d9c6:	b2db      	uxtb	r3, r3
 800d9c8:	2b00      	cmp	r3, #0
 800d9ca:	d00a      	beq.n	800d9e2 <mg_mgr_poll+0x136>
 800d9cc:	697b      	ldr	r3, [r7, #20]
 800d9ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9d0:	2b00      	cmp	r3, #0
 800d9d2:	d106      	bne.n	800d9e2 <mg_mgr_poll+0x136>
 800d9d4:	697a      	ldr	r2, [r7, #20]
 800d9d6:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800d9da:	f043 0320 	orr.w	r3, r3, #32
 800d9de:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
    if (c->is_closing) close_conn(c);
 800d9e2:	697b      	ldr	r3, [r7, #20]
 800d9e4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800d9e8:	f003 0320 	and.w	r3, r3, #32
 800d9ec:	b2db      	uxtb	r3, r3
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	d002      	beq.n	800d9f8 <mg_mgr_poll+0x14c>
 800d9f2:	6978      	ldr	r0, [r7, #20]
 800d9f4:	f7ff fed6 	bl	800d7a4 <close_conn>
  for (c = mgr->conns; c != NULL; c = tmp) {
 800d9f8:	693b      	ldr	r3, [r7, #16]
 800d9fa:	617b      	str	r3, [r7, #20]
 800d9fc:	697b      	ldr	r3, [r7, #20]
 800d9fe:	2b00      	cmp	r3, #0
 800da00:	f47f af72 	bne.w	800d8e8 <mg_mgr_poll+0x3c>
  }
  (void) ms;
}
 800da04:	bf00      	nop
 800da06:	bf00      	nop
 800da08:	3718      	adds	r7, #24
 800da0a:	46bd      	mov	sp, r7
 800da0c:	bdb0      	pop	{r4, r5, r7, pc}
 800da0e:	bf00      	nop
 800da10:	08017624 	.word	0x08017624
 800da14:	0801544c 	.word	0x0801544c
 800da18:	08016c70 	.word	0x08016c70

0800da1c <mg_send>:

bool mg_send(struct mg_connection *c, const void *buf, size_t len) {
 800da1c:	b5b0      	push	{r4, r5, r7, lr}
 800da1e:	b08c      	sub	sp, #48	; 0x30
 800da20:	af04      	add	r7, sp, #16
 800da22:	60f8      	str	r0, [r7, #12]
 800da24:	60b9      	str	r1, [r7, #8]
 800da26:	607a      	str	r2, [r7, #4]
  struct mg_tcpip_if *ifp = (struct mg_tcpip_if *) c->mgr->priv;
 800da28:	68fb      	ldr	r3, [r7, #12]
 800da2a:	685b      	ldr	r3, [r3, #4]
 800da2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800da2e:	61bb      	str	r3, [r7, #24]
  bool res = false;
 800da30:	2300      	movs	r3, #0
 800da32:	77fb      	strb	r3, [r7, #31]
  uint32_t rem_ip;
  memcpy(&rem_ip, c->rem.ip, sizeof(uint32_t));
 800da34:	68fb      	ldr	r3, [r7, #12]
 800da36:	331c      	adds	r3, #28
 800da38:	681b      	ldr	r3, [r3, #0]
 800da3a:	613b      	str	r3, [r7, #16]
  if (ifp->ip == 0 || ifp->state != MG_TCPIP_STATE_READY) {
 800da3c:	69bb      	ldr	r3, [r7, #24]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	2b00      	cmp	r3, #0
 800da42:	d004      	beq.n	800da4e <mg_send+0x32>
 800da44:	69bb      	ldr	r3, [r7, #24]
 800da46:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800da4a:	2b03      	cmp	r3, #3
 800da4c:	d004      	beq.n	800da58 <mg_send+0x3c>
    mg_error(c, "net down");
 800da4e:	491e      	ldr	r1, [pc, #120]	; (800dac8 <mg_send+0xac>)
 800da50:	68f8      	ldr	r0, [r7, #12]
 800da52:	f7f4 fb21 	bl	8002098 <mg_error>
 800da56:	e032      	b.n	800dabe <mg_send+0xa2>
  } else if (c->is_udp) {
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800da5e:	f003 0301 	and.w	r3, r3, #1
 800da62:	b2db      	uxtb	r3, r3
 800da64:	2b00      	cmp	r3, #0
 800da66:	d01b      	beq.n	800daa0 <mg_send+0x84>
    struct connstate *s = (struct connstate *) (c + 1);
 800da68:	68fb      	ldr	r3, [r7, #12]
 800da6a:	3390      	adds	r3, #144	; 0x90
 800da6c:	617b      	str	r3, [r7, #20]
    tx_udp(ifp, s->mac, ifp->ip, c->loc.port, rem_ip, c->rem.port, buf, len);
 800da6e:	697b      	ldr	r3, [r7, #20]
 800da70:	f103 0010 	add.w	r0, r3, #16
 800da74:	69bb      	ldr	r3, [r7, #24]
 800da76:	689c      	ldr	r4, [r3, #8]
 800da78:	68fb      	ldr	r3, [r7, #12]
 800da7a:	8b1d      	ldrh	r5, [r3, #24]
 800da7c:	693b      	ldr	r3, [r7, #16]
 800da7e:	68fa      	ldr	r2, [r7, #12]
 800da80:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
 800da82:	6879      	ldr	r1, [r7, #4]
 800da84:	9103      	str	r1, [sp, #12]
 800da86:	68b9      	ldr	r1, [r7, #8]
 800da88:	9102      	str	r1, [sp, #8]
 800da8a:	9201      	str	r2, [sp, #4]
 800da8c:	9300      	str	r3, [sp, #0]
 800da8e:	462b      	mov	r3, r5
 800da90:	4622      	mov	r2, r4
 800da92:	4601      	mov	r1, r0
 800da94:	69b8      	ldr	r0, [r7, #24]
 800da96:	f7fd fbc5 	bl	800b224 <tx_udp>
    res = true;
 800da9a:	2301      	movs	r3, #1
 800da9c:	77fb      	strb	r3, [r7, #31]
 800da9e:	e00e      	b.n	800dabe <mg_send+0xa2>
  } else {
    res = mg_iobuf_add(&c->send, c->send.len, buf, len);
 800daa0:	68fb      	ldr	r3, [r7, #12]
 800daa2:	f103 0048 	add.w	r0, r3, #72	; 0x48
 800daa6:	68fb      	ldr	r3, [r7, #12]
 800daa8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68ba      	ldr	r2, [r7, #8]
 800daae:	f7f8 fb4b 	bl	8006148 <mg_iobuf_add>
 800dab2:	4603      	mov	r3, r0
 800dab4:	2b00      	cmp	r3, #0
 800dab6:	bf14      	ite	ne
 800dab8:	2301      	movne	r3, #1
 800daba:	2300      	moveq	r3, #0
 800dabc:	77fb      	strb	r3, [r7, #31]
  }
  return res;
 800dabe:	7ffb      	ldrb	r3, [r7, #31]
}
 800dac0:	4618      	mov	r0, r3
 800dac2:	3720      	adds	r7, #32
 800dac4:	46bd      	mov	sp, r7
 800dac6:	bdb0      	pop	{r4, r5, r7, pc}
 800dac8:	08016c84 	.word	0x08016c84

0800dacc <mg_now>:
    "AwEHoUQDQgAEc0kEuTh3de5VHjSPupKfVmLtHMbhCIvyU46YWwpnSQ9XFL4ZszPf\n"
    "6YbyU/ZGtdGfbaGYYJwatKNMX00OIwtb8A==\n"
    "-----END EC PRIVATE KEY-----\n";

// This is for newlib and TLS (mbedTLS)
uint64_t mg_now(void) {
 800dacc:	b5b0      	push	{r4, r5, r7, lr}
 800dace:	af00      	add	r7, sp, #0
  return mg_millis() + s_boot_timestamp;
 800dad0:	f7f3 f8aa 	bl	8000c28 <mg_millis>
 800dad4:	4b05      	ldr	r3, [pc, #20]	; (800daec <mg_now+0x20>)
 800dad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dada:	1884      	adds	r4, r0, r2
 800dadc:	eb41 0503 	adc.w	r5, r1, r3
 800dae0:	4622      	mov	r2, r4
 800dae2:	462b      	mov	r3, r5
}
 800dae4:	4610      	mov	r0, r2
 800dae6:	4619      	mov	r1, r3
 800dae8:	bdb0      	pop	{r4, r5, r7, pc}
 800daea:	bf00      	nop
 800daec:	24003640 	.word	0x24003640

0800daf0 <ui_event_next>:

int ui_event_next(int no, struct ui_event *e) {
 800daf0:	b590      	push	{r4, r7, lr}
 800daf2:	b083      	sub	sp, #12
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
 800daf8:	6039      	str	r1, [r7, #0]
  if (no < 0 || no >= MAX_EVENTS_NO)
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	2b00      	cmp	r3, #0
 800dafe:	db03      	blt.n	800db08 <ui_event_next+0x18>
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800db06:	db01      	blt.n	800db0c <ui_event_next+0x1c>
    return 0;
 800db08:	2300      	movs	r3, #0
 800db0a:	e04b      	b.n	800dba4 <ui_event_next+0xb4>

  srand(no);
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	4618      	mov	r0, r3
 800db10:	f006 faf0 	bl	80140f4 <srand>
  e->type = (uint8_t) rand() % 4;
 800db14:	f006 fb1c 	bl	8014150 <rand>
 800db18:	4603      	mov	r3, r0
 800db1a:	b2db      	uxtb	r3, r3
 800db1c:	f003 0303 	and.w	r3, r3, #3
 800db20:	b2da      	uxtb	r2, r3
 800db22:	683b      	ldr	r3, [r7, #0]
 800db24:	701a      	strb	r2, [r3, #0]
  e->prio = (uint8_t) rand() % 3;
 800db26:	f006 fb13 	bl	8014150 <rand>
 800db2a:	4603      	mov	r3, r0
 800db2c:	b2da      	uxtb	r2, r3
 800db2e:	4b1f      	ldr	r3, [pc, #124]	; (800dbac <ui_event_next+0xbc>)
 800db30:	fba3 1302 	umull	r1, r3, r3, r2
 800db34:	0859      	lsrs	r1, r3, #1
 800db36:	460b      	mov	r3, r1
 800db38:	005b      	lsls	r3, r3, #1
 800db3a:	440b      	add	r3, r1
 800db3c:	1ad3      	subs	r3, r2, r3
 800db3e:	b2da      	uxtb	r2, r3
 800db40:	683b      	ldr	r3, [r7, #0]
 800db42:	705a      	strb	r2, [r3, #1]
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800db44:	f7ff ffc2 	bl	800dacc <mg_now>
 800db48:	4602      	mov	r2, r0
 800db4a:	460b      	mov	r3, r1
                              no * 300 * 1000 /* 5 mins between alerts */ +
 800db4c:	4614      	mov	r4, r2
                              1000 * (rand() % 300) /* randomize event time */) /
 800db4e:	f006 faff 	bl	8014150 <rand>
 800db52:	4602      	mov	r2, r0
 800db54:	4b16      	ldr	r3, [pc, #88]	; (800dbb0 <ui_event_next+0xc0>)
 800db56:	fb83 1302 	smull	r1, r3, r3, r2
 800db5a:	1159      	asrs	r1, r3, #5
 800db5c:	17d3      	asrs	r3, r2, #31
 800db5e:	1acb      	subs	r3, r1, r3
 800db60:	f44f 7196 	mov.w	r1, #300	; 0x12c
 800db64:	fb01 f303 	mul.w	r3, r1, r3
 800db68:	1ad3      	subs	r3, r2, r3
 800db6a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800db6e:	fb02 f303 	mul.w	r3, r2, r3
                              no * 300 * 1000 /* 5 mins between alerts */ +
 800db72:	4619      	mov	r1, r3
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	4a0f      	ldr	r2, [pc, #60]	; (800dbb4 <ui_event_next+0xc4>)
 800db78:	fb02 f303 	mul.w	r3, r2, r3
 800db7c:	440b      	add	r3, r1
 800db7e:	18e2      	adds	r2, r4, r3
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800db80:	4b0d      	ldr	r3, [pc, #52]	; (800dbb8 <ui_event_next+0xc8>)
 800db82:	4413      	add	r3, r2
                              1000 * (rand() % 300) /* randomize event time */) /
 800db84:	4a0d      	ldr	r2, [pc, #52]	; (800dbbc <ui_event_next+0xcc>)
 800db86:	fba2 2303 	umull	r2, r3, r2, r3
 800db8a:	099a      	lsrs	r2, r3, #6
  e->timestamp = (unsigned long) (mg_now() - 86400 * 1000 /* one day back */ +
 800db8c:	683b      	ldr	r3, [r7, #0]
 800db8e:	605a      	str	r2, [r3, #4]
             1000;

  mg_snprintf(e->text, MAX_EVENT_TEXT_SIZE,
 800db90:	683b      	ldr	r3, [r7, #0]
 800db92:	f103 0008 	add.w	r0, r3, #8
 800db96:	687b      	ldr	r3, [r7, #4]
 800db98:	4a09      	ldr	r2, [pc, #36]	; (800dbc0 <ui_event_next+0xd0>)
 800db9a:	210a      	movs	r1, #10
 800db9c:	f7fb f82e 	bl	8008bfc <mg_snprintf>
              "event#%d", no);
  return no + 1;
 800dba0:	687b      	ldr	r3, [r7, #4]
 800dba2:	3301      	adds	r3, #1
}
 800dba4:	4618      	mov	r0, r3
 800dba6:	370c      	adds	r7, #12
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	bd90      	pop	{r4, r7, pc}
 800dbac:	aaaaaaab 	.word	0xaaaaaaab
 800dbb0:	1b4e81b5 	.word	0x1b4e81b5
 800dbb4:	000493e0 	.word	0x000493e0
 800dbb8:	fad9a400 	.word	0xfad9a400
 800dbbc:	10624dd3 	.word	0x10624dd3
 800dbc0:	08016f58 	.word	0x08016f58

0800dbc4 <sfn>:

// SNTP connection event handler. When we get a response from an SNTP server,
// adjust s_boot_timestamp. We'll get a valid time from that point on
static void sfn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 800dbc4:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800dbc8:	b088      	sub	sp, #32
 800dbca:	af00      	add	r7, sp, #0
 800dbcc:	60f8      	str	r0, [r7, #12]
 800dbce:	60b9      	str	r1, [r7, #8]
 800dbd0:	607a      	str	r2, [r7, #4]
 800dbd2:	603b      	str	r3, [r7, #0]
  uint64_t *expiration_time = (uint64_t *) c->data;
 800dbd4:	68fb      	ldr	r3, [r7, #12]
 800dbd6:	3368      	adds	r3, #104	; 0x68
 800dbd8:	61fb      	str	r3, [r7, #28]
  if (ev == MG_EV_OPEN) {
 800dbda:	68bb      	ldr	r3, [r7, #8]
 800dbdc:	2b01      	cmp	r3, #1
 800dbde:	d10d      	bne.n	800dbfc <sfn+0x38>
    *expiration_time = mg_millis() + 3000;  // Store expiration time in 3s
 800dbe0:	f7f3 f822 	bl	8000c28 <mg_millis>
 800dbe4:	4602      	mov	r2, r0
 800dbe6:	460b      	mov	r3, r1
 800dbe8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800dbec:	eb12 0801 	adds.w	r8, r2, r1
 800dbf0:	f143 0900 	adc.w	r9, r3, #0
 800dbf4:	69fb      	ldr	r3, [r7, #28]
 800dbf6:	e9c3 8900 	strd	r8, r9, [r3]
    c->is_closing = 1;
  } else if (ev == MG_EV_POLL) {
    if (mg_millis() > *expiration_time) c->is_closing = 1;
  }
  (void) fn_data;
}
 800dbfa:	e02b      	b.n	800dc54 <sfn+0x90>
  } else if (ev == MG_EV_SNTP_TIME) {
 800dbfc:	68bb      	ldr	r3, [r7, #8]
 800dbfe:	2b12      	cmp	r3, #18
 800dc00:	d116      	bne.n	800dc30 <sfn+0x6c>
    uint64_t t = *(uint64_t *) ev_data;
 800dc02:	687b      	ldr	r3, [r7, #4]
 800dc04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc08:	e9c7 2304 	strd	r2, r3, [r7, #16]
    s_boot_timestamp = t - mg_millis();
 800dc0c:	f7f3 f80c 	bl	8000c28 <mg_millis>
 800dc10:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800dc14:	1a14      	subs	r4, r2, r0
 800dc16:	eb63 0501 	sbc.w	r5, r3, r1
 800dc1a:	4b11      	ldr	r3, [pc, #68]	; (800dc60 <sfn+0x9c>)
 800dc1c:	e9c3 4500 	strd	r4, r5, [r3]
    c->is_closing = 1;
 800dc20:	68fa      	ldr	r2, [r7, #12]
 800dc22:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800dc26:	f043 0320 	orr.w	r3, r3, #32
 800dc2a:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800dc2e:	e011      	b.n	800dc54 <sfn+0x90>
  } else if (ev == MG_EV_POLL) {
 800dc30:	68bb      	ldr	r3, [r7, #8]
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d10e      	bne.n	800dc54 <sfn+0x90>
    if (mg_millis() > *expiration_time) c->is_closing = 1;
 800dc36:	f7f2 fff7 	bl	8000c28 <mg_millis>
 800dc3a:	69fb      	ldr	r3, [r7, #28]
 800dc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc40:	4282      	cmp	r2, r0
 800dc42:	418b      	sbcs	r3, r1
 800dc44:	d206      	bcs.n	800dc54 <sfn+0x90>
 800dc46:	68fa      	ldr	r2, [r7, #12]
 800dc48:	f892 308d 	ldrb.w	r3, [r2, #141]	; 0x8d
 800dc4c:	f043 0320 	orr.w	r3, r3, #32
 800dc50:	f882 308d 	strb.w	r3, [r2, #141]	; 0x8d
}
 800dc54:	bf00      	nop
 800dc56:	3720      	adds	r7, #32
 800dc58:	46bd      	mov	sp, r7
 800dc5a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800dc5e:	bf00      	nop
 800dc60:	24003640 	.word	0x24003640

0800dc64 <timer_sntp_fn>:

static void timer_sntp_fn(void *param) {  // SNTP timer function. Sync up time
 800dc64:	b580      	push	{r7, lr}
 800dc66:	b082      	sub	sp, #8
 800dc68:	af00      	add	r7, sp, #0
 800dc6a:	6078      	str	r0, [r7, #4]
  mg_sntp_connect(param, "udp://time.google.com:123", sfn, NULL);
 800dc6c:	2300      	movs	r3, #0
 800dc6e:	4a04      	ldr	r2, [pc, #16]	; (800dc80 <timer_sntp_fn+0x1c>)
 800dc70:	4904      	ldr	r1, [pc, #16]	; (800dc84 <timer_sntp_fn+0x20>)
 800dc72:	6878      	ldr	r0, [r7, #4]
 800dc74:	f7fb fd64 	bl	8009740 <mg_sntp_connect>
}
 800dc78:	bf00      	nop
 800dc7a:	3708      	adds	r7, #8
 800dc7c:	46bd      	mov	sp, r7
 800dc7e:	bd80      	pop	{r7, pc}
 800dc80:	0800dbc5 	.word	0x0800dbc5
 800dc84:	08016f64 	.word	0x08016f64

0800dc88 <authenticate>:

// Parse HTTP requests, return authenticated user or NULL
static struct user *authenticate(struct mg_http_message *hm) {
 800dc88:	b580      	push	{r7, lr}
 800dc8a:	b0a6      	sub	sp, #152	; 0x98
 800dc8c:	af02      	add	r7, sp, #8
 800dc8e:	6078      	str	r0, [r7, #4]
      {"user1", "user1", "user1_token"},
      {"user2", "user2", "user2_token"},
      {NULL, NULL, NULL},
  };
  char user[64], pass[64];
  struct user *u, *result = NULL;
 800dc90:	2300      	movs	r3, #0
 800dc92:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  mg_http_creds(hm, user, sizeof(user), pass, sizeof(pass));
 800dc96:	f107 0308 	add.w	r3, r7, #8
 800dc9a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 800dc9e:	2240      	movs	r2, #64	; 0x40
 800dca0:	9200      	str	r2, [sp, #0]
 800dca2:	2240      	movs	r2, #64	; 0x40
 800dca4:	6878      	ldr	r0, [r7, #4]
 800dca6:	f7f7 fc7b 	bl	80055a0 <mg_http_creds>
  MG_INFO(("user [%s] pass [%s]", user, pass));
 800dcaa:	4b3a      	ldr	r3, [pc, #232]	; (800dd94 <authenticate+0x10c>)
 800dcac:	226b      	movs	r2, #107	; 0x6b
 800dcae:	493a      	ldr	r1, [pc, #232]	; (800dd98 <authenticate+0x110>)
 800dcb0:	2002      	movs	r0, #2
 800dcb2:	f7f9 f9af 	bl	8007014 <mg_log_prefix>
 800dcb6:	4603      	mov	r3, r0
 800dcb8:	2b00      	cmp	r3, #0
 800dcba:	d007      	beq.n	800dccc <authenticate+0x44>
 800dcbc:	f107 0208 	add.w	r2, r7, #8
 800dcc0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcc4:	4619      	mov	r1, r3
 800dcc6:	4835      	ldr	r0, [pc, #212]	; (800dd9c <authenticate+0x114>)
 800dcc8:	f7f9 f9fe 	bl	80070c8 <mg_log>

  if (user[0] != '\0' && pass[0] != '\0') {
 800dccc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800dcd0:	2b00      	cmp	r3, #0
 800dcd2:	d031      	beq.n	800dd38 <authenticate+0xb0>
 800dcd4:	7a3b      	ldrb	r3, [r7, #8]
 800dcd6:	2b00      	cmp	r3, #0
 800dcd8:	d02e      	beq.n	800dd38 <authenticate+0xb0>
    // Both user and password is set, search by user/password
    for (u = users; result == NULL && u->name != NULL; u++)
 800dcda:	4b31      	ldr	r3, [pc, #196]	; (800dda0 <authenticate+0x118>)
 800dcdc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dce0:	e020      	b.n	800dd24 <authenticate+0x9c>
      if (strcmp(user, u->name) == 0 && strcmp(pass, u->pass) == 0) result = u;
 800dce2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dce6:	681a      	ldr	r2, [r3, #0]
 800dce8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800dcec:	4611      	mov	r1, r2
 800dcee:	4618      	mov	r0, r3
 800dcf0:	f7f2 fb0e 	bl	8000310 <strcmp>
 800dcf4:	4603      	mov	r3, r0
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d10f      	bne.n	800dd1a <authenticate+0x92>
 800dcfa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dcfe:	685a      	ldr	r2, [r3, #4]
 800dd00:	f107 0308 	add.w	r3, r7, #8
 800dd04:	4611      	mov	r1, r2
 800dd06:	4618      	mov	r0, r3
 800dd08:	f7f2 fb02 	bl	8000310 <strcmp>
 800dd0c:	4603      	mov	r3, r0
 800dd0e:	2b00      	cmp	r3, #0
 800dd10:	d103      	bne.n	800dd1a <authenticate+0x92>
 800dd12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd16:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for (u = users; result == NULL && u->name != NULL; u++)
 800dd1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd1e:	330c      	adds	r3, #12
 800dd20:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dd24:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd28:	2b00      	cmp	r3, #0
 800dd2a:	d12c      	bne.n	800dd86 <authenticate+0xfe>
 800dd2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b00      	cmp	r3, #0
 800dd34:	d1d5      	bne.n	800dce2 <authenticate+0x5a>
  if (user[0] != '\0' && pass[0] != '\0') {
 800dd36:	e026      	b.n	800dd86 <authenticate+0xfe>
  } else if (user[0] == '\0') {
 800dd38:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d123      	bne.n	800dd88 <authenticate+0x100>
    // Only password is set, search by token
    for (u = users; result == NULL && u->name != NULL; u++)
 800dd40:	4b17      	ldr	r3, [pc, #92]	; (800dda0 <authenticate+0x118>)
 800dd42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dd46:	e014      	b.n	800dd72 <authenticate+0xea>
      if (strcmp(pass, u->access_token) == 0) result = u;
 800dd48:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd4c:	689a      	ldr	r2, [r3, #8]
 800dd4e:	f107 0308 	add.w	r3, r7, #8
 800dd52:	4611      	mov	r1, r2
 800dd54:	4618      	mov	r0, r3
 800dd56:	f7f2 fadb 	bl	8000310 <strcmp>
 800dd5a:	4603      	mov	r3, r0
 800dd5c:	2b00      	cmp	r3, #0
 800dd5e:	d103      	bne.n	800dd68 <authenticate+0xe0>
 800dd60:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd64:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for (u = users; result == NULL && u->name != NULL; u++)
 800dd68:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd6c:	330c      	adds	r3, #12
 800dd6e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800dd72:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800dd76:	2b00      	cmp	r3, #0
 800dd78:	d106      	bne.n	800dd88 <authenticate+0x100>
 800dd7a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800dd7e:	681b      	ldr	r3, [r3, #0]
 800dd80:	2b00      	cmp	r3, #0
 800dd82:	d1e1      	bne.n	800dd48 <authenticate+0xc0>
 800dd84:	e000      	b.n	800dd88 <authenticate+0x100>
  if (user[0] != '\0' && pass[0] != '\0') {
 800dd86:	bf00      	nop
  }
  return result;
 800dd88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
}
 800dd8c:	4618      	mov	r0, r3
 800dd8e:	3790      	adds	r7, #144	; 0x90
 800dd90:	46bd      	mov	sp, r7
 800dd92:	bd80      	pop	{r7, pc}
 800dd94:	08017630 	.word	0x08017630
 800dd98:	08016f80 	.word	0x08016f80
 800dd9c:	08016f94 	.word	0x08016f94
 800dda0:	24000278 	.word	0x24000278

0800dda4 <handle_login>:

static void handle_login(struct mg_connection *c, struct user *u) {
 800dda4:	b580      	push	{r7, lr}
 800dda6:	b0c8      	sub	sp, #288	; 0x120
 800dda8:	af06      	add	r7, sp, #24
 800ddaa:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddae:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddb2:	6018      	str	r0, [r3, #0]
 800ddb4:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddb8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddbc:	6019      	str	r1, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
 800ddbe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddc2:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800ddc6:	681b      	ldr	r3, [r3, #0]
 800ddc8:	689a      	ldr	r2, [r3, #8]
              "Set-Cookie: access_token=%s; Path=/; "
              "%sHttpOnly; SameSite=Lax; Max-Age=%d\r\n",
              u->access_token, c->is_tls ? "Secure; " : "", 3600 * 24);
 800ddca:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800ddce:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800ddd2:	681b      	ldr	r3, [r3, #0]
 800ddd4:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800ddd8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800dddc:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 800ddde:	2b00      	cmp	r3, #0
 800dde0:	d001      	beq.n	800dde6 <handle_login+0x42>
 800dde2:	4b17      	ldr	r3, [pc, #92]	; (800de40 <handle_login+0x9c>)
 800dde4:	e000      	b.n	800dde8 <handle_login+0x44>
 800dde6:	4b17      	ldr	r3, [pc, #92]	; (800de44 <handle_login+0xa0>)
 800dde8:	f107 0008 	add.w	r0, r7, #8
 800ddec:	4916      	ldr	r1, [pc, #88]	; (800de48 <handle_login+0xa4>)
 800ddee:	9101      	str	r1, [sp, #4]
 800ddf0:	9300      	str	r3, [sp, #0]
 800ddf2:	4613      	mov	r3, r2
 800ddf4:	4a15      	ldr	r2, [pc, #84]	; (800de4c <handle_login+0xa8>)
 800ddf6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800ddfa:	f7fa feff 	bl	8008bfc <mg_snprintf>
  mg_http_reply(c, 200, cookie, "{%m:%m}", MG_ESC("user"), MG_ESC(u->name));
 800ddfe:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de02:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 800de06:	681b      	ldr	r3, [r3, #0]
 800de08:	681b      	ldr	r3, [r3, #0]
 800de0a:	f107 0208 	add.w	r2, r7, #8
 800de0e:	f507 7184 	add.w	r1, r7, #264	; 0x108
 800de12:	f5a1 7082 	sub.w	r0, r1, #260	; 0x104
 800de16:	9305      	str	r3, [sp, #20]
 800de18:	2300      	movs	r3, #0
 800de1a:	9304      	str	r3, [sp, #16]
 800de1c:	4b0c      	ldr	r3, [pc, #48]	; (800de50 <handle_login+0xac>)
 800de1e:	9303      	str	r3, [sp, #12]
 800de20:	4b0c      	ldr	r3, [pc, #48]	; (800de54 <handle_login+0xb0>)
 800de22:	9302      	str	r3, [sp, #8]
 800de24:	2300      	movs	r3, #0
 800de26:	9301      	str	r3, [sp, #4]
 800de28:	4b09      	ldr	r3, [pc, #36]	; (800de50 <handle_login+0xac>)
 800de2a:	9300      	str	r3, [sp, #0]
 800de2c:	4b0a      	ldr	r3, [pc, #40]	; (800de58 <handle_login+0xb4>)
 800de2e:	21c8      	movs	r1, #200	; 0xc8
 800de30:	6800      	ldr	r0, [r0, #0]
 800de32:	f7f6 fce3 	bl	80047fc <mg_http_reply>
}
 800de36:	bf00      	nop
 800de38:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}
 800de40:	08016fa8 	.word	0x08016fa8
 800de44:	08016fb4 	.word	0x08016fb4
 800de48:	00015180 	.word	0x00015180
 800de4c:	08016fb8 	.word	0x08016fb8
 800de50:	08008f9d 	.word	0x08008f9d
 800de54:	0801700c 	.word	0x0801700c
 800de58:	08017004 	.word	0x08017004

0800de5c <handle_logout>:

static void handle_logout(struct mg_connection *c) {
 800de5c:	b580      	push	{r7, lr}
 800de5e:	b0c2      	sub	sp, #264	; 0x108
 800de60:	af00      	add	r7, sp, #0
 800de62:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de66:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de6a:	6018      	str	r0, [r3, #0]
  char cookie[256];
  mg_snprintf(cookie, sizeof(cookie),
              "Set-Cookie: access_token=; Path=/; "
              "Expires=Thu, 01 Jan 1970 00:00:00 UTC; "
              "%sHttpOnly; Max-Age=0; \r\n",
              c->is_tls ? "Secure; " : "");
 800de6c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800de70:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800de7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800de7e:	b2db      	uxtb	r3, r3
  mg_snprintf(cookie, sizeof(cookie),
 800de80:	2b00      	cmp	r3, #0
 800de82:	d001      	beq.n	800de88 <handle_logout+0x2c>
 800de84:	4b0c      	ldr	r3, [pc, #48]	; (800deb8 <handle_logout+0x5c>)
 800de86:	e000      	b.n	800de8a <handle_logout+0x2e>
 800de88:	4b0c      	ldr	r3, [pc, #48]	; (800debc <handle_logout+0x60>)
 800de8a:	f107 0008 	add.w	r0, r7, #8
 800de8e:	4a0c      	ldr	r2, [pc, #48]	; (800dec0 <handle_logout+0x64>)
 800de90:	f44f 7180 	mov.w	r1, #256	; 0x100
 800de94:	f7fa feb2 	bl	8008bfc <mg_snprintf>
  mg_http_reply(c, 200, cookie, "true\n");
 800de98:	f107 0208 	add.w	r2, r7, #8
 800de9c:	f507 7384 	add.w	r3, r7, #264	; 0x108
 800dea0:	f5a3 7082 	sub.w	r0, r3, #260	; 0x104
 800dea4:	4b07      	ldr	r3, [pc, #28]	; (800dec4 <handle_logout+0x68>)
 800dea6:	21c8      	movs	r1, #200	; 0xc8
 800dea8:	6800      	ldr	r0, [r0, #0]
 800deaa:	f7f6 fca7 	bl	80047fc <mg_http_reply>
}
 800deae:	bf00      	nop
 800deb0:	f507 7784 	add.w	r7, r7, #264	; 0x108
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}
 800deb8:	08016fa8 	.word	0x08016fa8
 800debc:	08016fb4 	.word	0x08016fb4
 800dec0:	08017014 	.word	0x08017014
 800dec4:	08017078 	.word	0x08017078

0800dec8 <handle_debug>:

static void handle_debug(struct mg_connection *c, struct mg_http_message *hm) {
 800dec8:	b580      	push	{r7, lr}
 800deca:	b086      	sub	sp, #24
 800decc:	af02      	add	r7, sp, #8
 800dece:	6078      	str	r0, [r7, #4]
 800ded0:	6039      	str	r1, [r7, #0]
  int level = mg_json_get_long(hm->body, "$.level", MG_LL_DEBUG);
 800ded2:	6839      	ldr	r1, [r7, #0]
 800ded4:	2303      	movs	r3, #3
 800ded6:	4a0b      	ldr	r2, [pc, #44]	; (800df04 <handle_debug+0x3c>)
 800ded8:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800dedc:	c903      	ldmia	r1, {r0, r1}
 800dede:	f7f9 f825 	bl	8006f2c <mg_json_get_long>
 800dee2:	60f8      	str	r0, [r7, #12]
  mg_log_set(level);
 800dee4:	68f8      	ldr	r0, [r7, #12]
 800dee6:	f7f9 f873 	bl	8006fd0 <mg_log_set>
  mg_http_reply(c, 200, "", "Debug level set to %d\n", level);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	9300      	str	r3, [sp, #0]
 800deee:	4b06      	ldr	r3, [pc, #24]	; (800df08 <handle_debug+0x40>)
 800def0:	4a06      	ldr	r2, [pc, #24]	; (800df0c <handle_debug+0x44>)
 800def2:	21c8      	movs	r1, #200	; 0xc8
 800def4:	6878      	ldr	r0, [r7, #4]
 800def6:	f7f6 fc81 	bl	80047fc <mg_http_reply>
}
 800defa:	bf00      	nop
 800defc:	3710      	adds	r7, #16
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}
 800df02:	bf00      	nop
 800df04:	08017080 	.word	0x08017080
 800df08:	08017088 	.word	0x08017088
 800df0c:	08016fb4 	.word	0x08016fb4

0800df10 <print_int_arr>:

static size_t print_int_arr(void (*out)(char, void *), void *ptr, va_list *ap) {
 800df10:	b580      	push	{r7, lr}
 800df12:	b08a      	sub	sp, #40	; 0x28
 800df14:	af02      	add	r7, sp, #8
 800df16:	60f8      	str	r0, [r7, #12]
 800df18:	60b9      	str	r1, [r7, #8]
 800df1a:	607a      	str	r2, [r7, #4]
  size_t len = 0, num = va_arg(*ap, size_t);  // Number of items in the array
 800df1c:	2300      	movs	r3, #0
 800df1e:	61fb      	str	r3, [r7, #28]
 800df20:	687b      	ldr	r3, [r7, #4]
 800df22:	681b      	ldr	r3, [r3, #0]
 800df24:	1d19      	adds	r1, r3, #4
 800df26:	687a      	ldr	r2, [r7, #4]
 800df28:	6011      	str	r1, [r2, #0]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	617b      	str	r3, [r7, #20]
  int *arr = va_arg(*ap, int *);              // Array ptr
 800df2e:	687b      	ldr	r3, [r7, #4]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	1d19      	adds	r1, r3, #4
 800df34:	687a      	ldr	r2, [r7, #4]
 800df36:	6011      	str	r1, [r2, #0]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	613b      	str	r3, [r7, #16]
  for (size_t i = 0; i < num; i++) {
 800df3c:	2300      	movs	r3, #0
 800df3e:	61bb      	str	r3, [r7, #24]
 800df40:	e018      	b.n	800df74 <print_int_arr+0x64>
    len += mg_xprintf(out, ptr, "%s%d", i == 0 ? "" : ",", arr[i]);
 800df42:	69bb      	ldr	r3, [r7, #24]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d101      	bne.n	800df4c <print_int_arr+0x3c>
 800df48:	490f      	ldr	r1, [pc, #60]	; (800df88 <print_int_arr+0x78>)
 800df4a:	e000      	b.n	800df4e <print_int_arr+0x3e>
 800df4c:	490f      	ldr	r1, [pc, #60]	; (800df8c <print_int_arr+0x7c>)
 800df4e:	69bb      	ldr	r3, [r7, #24]
 800df50:	009b      	lsls	r3, r3, #2
 800df52:	693a      	ldr	r2, [r7, #16]
 800df54:	4413      	add	r3, r2
 800df56:	681b      	ldr	r3, [r3, #0]
 800df58:	9300      	str	r3, [sp, #0]
 800df5a:	460b      	mov	r3, r1
 800df5c:	4a0c      	ldr	r2, [pc, #48]	; (800df90 <print_int_arr+0x80>)
 800df5e:	68b9      	ldr	r1, [r7, #8]
 800df60:	68f8      	ldr	r0, [r7, #12]
 800df62:	f7f4 fd2a 	bl	80029ba <mg_xprintf>
 800df66:	4602      	mov	r2, r0
 800df68:	69fb      	ldr	r3, [r7, #28]
 800df6a:	4413      	add	r3, r2
 800df6c:	61fb      	str	r3, [r7, #28]
  for (size_t i = 0; i < num; i++) {
 800df6e:	69bb      	ldr	r3, [r7, #24]
 800df70:	3301      	adds	r3, #1
 800df72:	61bb      	str	r3, [r7, #24]
 800df74:	69ba      	ldr	r2, [r7, #24]
 800df76:	697b      	ldr	r3, [r7, #20]
 800df78:	429a      	cmp	r2, r3
 800df7a:	d3e2      	bcc.n	800df42 <print_int_arr+0x32>
  }
  return len;
 800df7c:	69fb      	ldr	r3, [r7, #28]
}
 800df7e:	4618      	mov	r0, r3
 800df80:	3720      	adds	r7, #32
 800df82:	46bd      	mov	sp, r7
 800df84:	bd80      	pop	{r7, pc}
 800df86:	bf00      	nop
 800df88:	08016fb4 	.word	0x08016fb4
 800df8c:	080170a0 	.word	0x080170a0
 800df90:	080170a4 	.word	0x080170a4

0800df94 <handle_stats_get>:

static void handle_stats_get(struct mg_connection *c) {
 800df94:	b5b0      	push	{r4, r5, r7, lr}
 800df96:	b09e      	sub	sp, #120	; 0x78
 800df98:	af0e      	add	r7, sp, #56	; 0x38
 800df9a:	6078      	str	r0, [r7, #4]
  int points[] = {21, 22, 22, 19, 18, 20, 23, 23, 22, 22, 22, 23, 22};
 800df9c:	4b19      	ldr	r3, [pc, #100]	; (800e004 <handle_stats_get+0x70>)
 800df9e:	f107 040c 	add.w	r4, r7, #12
 800dfa2:	461d      	mov	r5, r3
 800dfa4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfa6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfa8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfaa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800dfae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dfb0:	682b      	ldr	r3, [r5, #0]
 800dfb2:	6023      	str	r3, [r4, #0]
  mg_http_reply(c, 200, s_json_header, "{%m:%d,%m:%d,%m:[%M]}",
 800dfb4:	4b14      	ldr	r3, [pc, #80]	; (800e008 <handle_stats_get+0x74>)
 800dfb6:	681a      	ldr	r2, [r3, #0]
 800dfb8:	f107 030c 	add.w	r3, r7, #12
 800dfbc:	930d      	str	r3, [sp, #52]	; 0x34
 800dfbe:	230d      	movs	r3, #13
 800dfc0:	930c      	str	r3, [sp, #48]	; 0x30
 800dfc2:	4b12      	ldr	r3, [pc, #72]	; (800e00c <handle_stats_get+0x78>)
 800dfc4:	930b      	str	r3, [sp, #44]	; 0x2c
 800dfc6:	4b12      	ldr	r3, [pc, #72]	; (800e010 <handle_stats_get+0x7c>)
 800dfc8:	930a      	str	r3, [sp, #40]	; 0x28
 800dfca:	2300      	movs	r3, #0
 800dfcc:	9309      	str	r3, [sp, #36]	; 0x24
 800dfce:	4b11      	ldr	r3, [pc, #68]	; (800e014 <handle_stats_get+0x80>)
 800dfd0:	9308      	str	r3, [sp, #32]
 800dfd2:	2343      	movs	r3, #67	; 0x43
 800dfd4:	9307      	str	r3, [sp, #28]
 800dfd6:	4b10      	ldr	r3, [pc, #64]	; (800e018 <handle_stats_get+0x84>)
 800dfd8:	9306      	str	r3, [sp, #24]
 800dfda:	2300      	movs	r3, #0
 800dfdc:	9305      	str	r3, [sp, #20]
 800dfde:	4b0d      	ldr	r3, [pc, #52]	; (800e014 <handle_stats_get+0x80>)
 800dfe0:	9304      	str	r3, [sp, #16]
 800dfe2:	2315      	movs	r3, #21
 800dfe4:	9303      	str	r3, [sp, #12]
 800dfe6:	4b0d      	ldr	r3, [pc, #52]	; (800e01c <handle_stats_get+0x88>)
 800dfe8:	9302      	str	r3, [sp, #8]
 800dfea:	2300      	movs	r3, #0
 800dfec:	9301      	str	r3, [sp, #4]
 800dfee:	4b09      	ldr	r3, [pc, #36]	; (800e014 <handle_stats_get+0x80>)
 800dff0:	9300      	str	r3, [sp, #0]
 800dff2:	4b0b      	ldr	r3, [pc, #44]	; (800e020 <handle_stats_get+0x8c>)
 800dff4:	21c8      	movs	r1, #200	; 0xc8
 800dff6:	6878      	ldr	r0, [r7, #4]
 800dff8:	f7f6 fc00 	bl	80047fc <mg_http_reply>
                MG_ESC("temperature"), 21,  //
                MG_ESC("humidity"), 67,     //
                MG_ESC("points"), print_int_arr,
                sizeof(points) / sizeof(points[0]), points);
}
 800dffc:	bf00      	nop
 800dffe:	3740      	adds	r7, #64	; 0x40
 800e000:	46bd      	mov	sp, r7
 800e002:	bdb0      	pop	{r4, r5, r7, pc}
 800e004:	080170e4 	.word	0x080170e4
 800e008:	2400026c 	.word	0x2400026c
 800e00c:	0800df11 	.word	0x0800df11
 800e010:	080170c4 	.word	0x080170c4
 800e014:	08008f9d 	.word	0x08008f9d
 800e018:	080170cc 	.word	0x080170cc
 800e01c:	080170d8 	.word	0x080170d8
 800e020:	080170ac 	.word	0x080170ac

0800e024 <print_events>:

static size_t print_events(void (*out)(char, void *), void *ptr, va_list *ap) {
 800e024:	b590      	push	{r4, r7, lr}
 800e026:	b0a1      	sub	sp, #132	; 0x84
 800e028:	af12      	add	r7, sp, #72	; 0x48
 800e02a:	60f8      	str	r0, [r7, #12]
 800e02c:	60b9      	str	r1, [r7, #8]
 800e02e:	607a      	str	r2, [r7, #4]
  size_t len = 0;
 800e030:	2300      	movs	r3, #0
 800e032:	637b      	str	r3, [r7, #52]	; 0x34
  struct ui_event ev;
  int pageno = va_arg(*ap, unsigned);
 800e034:	687b      	ldr	r3, [r7, #4]
 800e036:	681b      	ldr	r3, [r3, #0]
 800e038:	1d19      	adds	r1, r3, #4
 800e03a:	687a      	ldr	r2, [r7, #4]
 800e03c:	6011      	str	r1, [r2, #0]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	62fb      	str	r3, [r7, #44]	; 0x2c
  int no = (pageno - 1) * EVENTS_PER_PAGE;
 800e042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e044:	1e5a      	subs	r2, r3, #1
 800e046:	4613      	mov	r3, r2
 800e048:	009b      	lsls	r3, r3, #2
 800e04a:	4413      	add	r3, r2
 800e04c:	009b      	lsls	r3, r3, #2
 800e04e:	633b      	str	r3, [r7, #48]	; 0x30
  int end = no + EVENTS_PER_PAGE;
 800e050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e052:	3314      	adds	r3, #20
 800e054:	62bb      	str	r3, [r7, #40]	; 0x28

  while ((no = ui_event_next(no, &ev)) != 0 && no <= end) {
 800e056:	e037      	b.n	800e0c8 <print_events+0xa4>
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800e058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d101      	bne.n	800e062 <print_events+0x3e>
 800e05e:	4924      	ldr	r1, [pc, #144]	; (800e0f0 <print_events+0xcc>)
 800e060:	e000      	b.n	800e064 <print_events+0x40>
 800e062:	4924      	ldr	r1, [pc, #144]	; (800e0f4 <print_events+0xd0>)
 800e064:	69bb      	ldr	r3, [r7, #24]
                      len == 0 ? "" : ",",                       //
                      MG_ESC("time"), ev.timestamp,       //
                      MG_ESC("type"), ev.type,            //
 800e066:	7d3a      	ldrb	r2, [r7, #20]
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800e068:	4610      	mov	r0, r2
                      MG_ESC("prio"), ev.prio,            //
 800e06a:	7d7a      	ldrb	r2, [r7, #21]
    len += mg_xprintf(out, ptr, "%s{%m:%lu,%m:%d,%m:%d,%m:%m}",  //
 800e06c:	4614      	mov	r4, r2
 800e06e:	f107 0214 	add.w	r2, r7, #20
 800e072:	3208      	adds	r2, #8
 800e074:	9211      	str	r2, [sp, #68]	; 0x44
 800e076:	2200      	movs	r2, #0
 800e078:	9210      	str	r2, [sp, #64]	; 0x40
 800e07a:	4a1f      	ldr	r2, [pc, #124]	; (800e0f8 <print_events+0xd4>)
 800e07c:	920f      	str	r2, [sp, #60]	; 0x3c
 800e07e:	4a1f      	ldr	r2, [pc, #124]	; (800e0fc <print_events+0xd8>)
 800e080:	920e      	str	r2, [sp, #56]	; 0x38
 800e082:	2200      	movs	r2, #0
 800e084:	920d      	str	r2, [sp, #52]	; 0x34
 800e086:	4a1c      	ldr	r2, [pc, #112]	; (800e0f8 <print_events+0xd4>)
 800e088:	920c      	str	r2, [sp, #48]	; 0x30
 800e08a:	940b      	str	r4, [sp, #44]	; 0x2c
 800e08c:	4a1c      	ldr	r2, [pc, #112]	; (800e100 <print_events+0xdc>)
 800e08e:	920a      	str	r2, [sp, #40]	; 0x28
 800e090:	2200      	movs	r2, #0
 800e092:	9209      	str	r2, [sp, #36]	; 0x24
 800e094:	4a18      	ldr	r2, [pc, #96]	; (800e0f8 <print_events+0xd4>)
 800e096:	9208      	str	r2, [sp, #32]
 800e098:	9007      	str	r0, [sp, #28]
 800e09a:	4a1a      	ldr	r2, [pc, #104]	; (800e104 <print_events+0xe0>)
 800e09c:	9206      	str	r2, [sp, #24]
 800e09e:	2200      	movs	r2, #0
 800e0a0:	9205      	str	r2, [sp, #20]
 800e0a2:	4a15      	ldr	r2, [pc, #84]	; (800e0f8 <print_events+0xd4>)
 800e0a4:	9204      	str	r2, [sp, #16]
 800e0a6:	9303      	str	r3, [sp, #12]
 800e0a8:	4b17      	ldr	r3, [pc, #92]	; (800e108 <print_events+0xe4>)
 800e0aa:	9302      	str	r3, [sp, #8]
 800e0ac:	2300      	movs	r3, #0
 800e0ae:	9301      	str	r3, [sp, #4]
 800e0b0:	4b11      	ldr	r3, [pc, #68]	; (800e0f8 <print_events+0xd4>)
 800e0b2:	9300      	str	r3, [sp, #0]
 800e0b4:	460b      	mov	r3, r1
 800e0b6:	4a15      	ldr	r2, [pc, #84]	; (800e10c <print_events+0xe8>)
 800e0b8:	68b9      	ldr	r1, [r7, #8]
 800e0ba:	68f8      	ldr	r0, [r7, #12]
 800e0bc:	f7f4 fc7d 	bl	80029ba <mg_xprintf>
 800e0c0:	4602      	mov	r2, r0
 800e0c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e0c4:	4413      	add	r3, r2
 800e0c6:	637b      	str	r3, [r7, #52]	; 0x34
  while ((no = ui_event_next(no, &ev)) != 0 && no <= end) {
 800e0c8:	f107 0314 	add.w	r3, r7, #20
 800e0cc:	4619      	mov	r1, r3
 800e0ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800e0d0:	f7ff fd0e 	bl	800daf0 <ui_event_next>
 800e0d4:	6338      	str	r0, [r7, #48]	; 0x30
 800e0d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e0d8:	2b00      	cmp	r3, #0
 800e0da:	d003      	beq.n	800e0e4 <print_events+0xc0>
 800e0dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e0de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e0e0:	429a      	cmp	r2, r3
 800e0e2:	ddb9      	ble.n	800e058 <print_events+0x34>
                      MG_ESC("text"), MG_ESC(ev.text));
  }

  return len;
 800e0e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800e0e6:	4618      	mov	r0, r3
 800e0e8:	373c      	adds	r7, #60	; 0x3c
 800e0ea:	46bd      	mov	sp, r7
 800e0ec:	bd90      	pop	{r4, r7, pc}
 800e0ee:	bf00      	nop
 800e0f0:	08016fb4 	.word	0x08016fb4
 800e0f4:	080170a0 	.word	0x080170a0
 800e0f8:	08008f9d 	.word	0x08008f9d
 800e0fc:	08017138 	.word	0x08017138
 800e100:	08017140 	.word	0x08017140
 800e104:	08017148 	.word	0x08017148
 800e108:	08017150 	.word	0x08017150
 800e10c:	08017118 	.word	0x08017118

0800e110 <handle_events_get>:

static void handle_events_get(struct mg_connection *c, struct mg_http_message *hm) {
 800e110:	b580      	push	{r7, lr}
 800e112:	b08e      	sub	sp, #56	; 0x38
 800e114:	af0a      	add	r7, sp, #40	; 0x28
 800e116:	6078      	str	r0, [r7, #4]
 800e118:	6039      	str	r1, [r7, #0]
  int pageno = mg_json_get_long(hm->body, "$.page", 1);
 800e11a:	6839      	ldr	r1, [r7, #0]
 800e11c:	2301      	movs	r3, #1
 800e11e:	4a12      	ldr	r2, [pc, #72]	; (800e168 <handle_events_get+0x58>)
 800e120:	f501 7100 	add.w	r1, r1, #512	; 0x200
 800e124:	c903      	ldmia	r1, {r0, r1}
 800e126:	f7f8 ff01 	bl	8006f2c <mg_json_get_long>
 800e12a:	60f8      	str	r0, [r7, #12]
  mg_http_reply(c, 200, s_json_header, "{%m:[%M], %m:%d}", MG_ESC("arr"),
 800e12c:	4b0f      	ldr	r3, [pc, #60]	; (800e16c <handle_events_get+0x5c>)
 800e12e:	681a      	ldr	r2, [r3, #0]
 800e130:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800e134:	9308      	str	r3, [sp, #32]
 800e136:	4b0e      	ldr	r3, [pc, #56]	; (800e170 <handle_events_get+0x60>)
 800e138:	9307      	str	r3, [sp, #28]
 800e13a:	2300      	movs	r3, #0
 800e13c:	9306      	str	r3, [sp, #24]
 800e13e:	4b0d      	ldr	r3, [pc, #52]	; (800e174 <handle_events_get+0x64>)
 800e140:	9305      	str	r3, [sp, #20]
 800e142:	68fb      	ldr	r3, [r7, #12]
 800e144:	9304      	str	r3, [sp, #16]
 800e146:	4b0c      	ldr	r3, [pc, #48]	; (800e178 <handle_events_get+0x68>)
 800e148:	9303      	str	r3, [sp, #12]
 800e14a:	4b0c      	ldr	r3, [pc, #48]	; (800e17c <handle_events_get+0x6c>)
 800e14c:	9302      	str	r3, [sp, #8]
 800e14e:	2300      	movs	r3, #0
 800e150:	9301      	str	r3, [sp, #4]
 800e152:	4b08      	ldr	r3, [pc, #32]	; (800e174 <handle_events_get+0x64>)
 800e154:	9300      	str	r3, [sp, #0]
 800e156:	4b0a      	ldr	r3, [pc, #40]	; (800e180 <handle_events_get+0x70>)
 800e158:	21c8      	movs	r1, #200	; 0xc8
 800e15a:	6878      	ldr	r0, [r7, #4]
 800e15c:	f7f6 fb4e 	bl	80047fc <mg_http_reply>
                print_events, pageno, MG_ESC("totalCount"), MAX_EVENTS_NO);
}
 800e160:	bf00      	nop
 800e162:	3710      	adds	r7, #16
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	08017158 	.word	0x08017158
 800e16c:	2400026c 	.word	0x2400026c
 800e170:	08017174 	.word	0x08017174
 800e174:	08008f9d 	.word	0x08008f9d
 800e178:	0800e025 	.word	0x0800e025
 800e17c:	08017180 	.word	0x08017180
 800e180:	08017160 	.word	0x08017160

0800e184 <handle_settings_set>:

static void handle_settings_set(struct mg_connection *c, struct mg_str body) {
 800e184:	b590      	push	{r4, r7, lr}
 800e186:	b095      	sub	sp, #84	; 0x54
 800e188:	af0a      	add	r7, sp, #40	; 0x28
 800e18a:	60f8      	str	r0, [r7, #12]
 800e18c:	1d3b      	adds	r3, r7, #4
 800e18e:	e883 0006 	stmia.w	r3, {r1, r2}
  struct settings settings;
  memset(&settings, 0, sizeof(settings));
 800e192:	f107 0310 	add.w	r3, r7, #16
 800e196:	2210      	movs	r2, #16
 800e198:	2100      	movs	r1, #0
 800e19a:	4618      	mov	r0, r3
 800e19c:	f006 faca 	bl	8014734 <memset>
  mg_json_get_bool(body, "$.log_enabled", &settings.log_enabled);
 800e1a0:	f107 0310 	add.w	r3, r7, #16
 800e1a4:	4a32      	ldr	r2, [pc, #200]	; (800e270 <handle_settings_set+0xec>)
 800e1a6:	1d39      	adds	r1, r7, #4
 800e1a8:	c903      	ldmia	r1, {r0, r1}
 800e1aa:	f7f8 fda6 	bl	8006cfa <mg_json_get_bool>
  settings.log_level = mg_json_get_long(body, "$.log_level", 0);
 800e1ae:	2300      	movs	r3, #0
 800e1b0:	4a30      	ldr	r2, [pc, #192]	; (800e274 <handle_settings_set+0xf0>)
 800e1b2:	1d39      	adds	r1, r7, #4
 800e1b4:	c903      	ldmia	r1, {r0, r1}
 800e1b6:	f7f8 feb9 	bl	8006f2c <mg_json_get_long>
 800e1ba:	4603      	mov	r3, r0
 800e1bc:	617b      	str	r3, [r7, #20]
  settings.brightness = mg_json_get_long(body, "$.brightness", 0);
 800e1be:	2300      	movs	r3, #0
 800e1c0:	4a2d      	ldr	r2, [pc, #180]	; (800e278 <handle_settings_set+0xf4>)
 800e1c2:	1d39      	adds	r1, r7, #4
 800e1c4:	c903      	ldmia	r1, {r0, r1}
 800e1c6:	f7f8 feb1 	bl	8006f2c <mg_json_get_long>
 800e1ca:	4603      	mov	r3, r0
 800e1cc:	61bb      	str	r3, [r7, #24]
  char *s = mg_json_get_str(body, "$.device_name");
 800e1ce:	4a2b      	ldr	r2, [pc, #172]	; (800e27c <handle_settings_set+0xf8>)
 800e1d0:	1d3b      	adds	r3, r7, #4
 800e1d2:	e893 0003 	ldmia.w	r3, {r0, r1}
 800e1d6:	f7f8 fe5b 	bl	8006e90 <mg_json_get_str>
 800e1da:	6278      	str	r0, [r7, #36]	; 0x24
  if (s && strlen(s) < MAX_DEVICE_NAME) {
 800e1dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d00c      	beq.n	800e1fc <handle_settings_set+0x78>
 800e1e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1e4:	f7f2 f8f4 	bl	80003d0 <strlen>
 800e1e8:	4603      	mov	r3, r0
 800e1ea:	2b27      	cmp	r3, #39	; 0x27
 800e1ec:	d806      	bhi.n	800e1fc <handle_settings_set+0x78>
    free(settings.device_name);
 800e1ee:	69fb      	ldr	r3, [r7, #28]
 800e1f0:	4618      	mov	r0, r3
 800e1f2:	f005 fecb 	bl	8013f8c <free>
    settings.device_name = s;
 800e1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1f8:	61fb      	str	r3, [r7, #28]
 800e1fa:	e002      	b.n	800e202 <handle_settings_set+0x7e>
  } else {
    free(s);
 800e1fc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800e1fe:	f005 fec5 	bl	8013f8c <free>
  }

  // Save to the device flash
  s_settings = settings;
 800e202:	4b1f      	ldr	r3, [pc, #124]	; (800e280 <handle_settings_set+0xfc>)
 800e204:	461c      	mov	r4, r3
 800e206:	f107 0310 	add.w	r3, r7, #16
 800e20a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800e20c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  bool ok = true;
 800e210:	2301      	movs	r3, #1
 800e212:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  mg_http_reply(c, 200, s_json_header,
 800e216:	4b1b      	ldr	r3, [pc, #108]	; (800e284 <handle_settings_set+0x100>)
 800e218:	6819      	ldr	r1, [r3, #0]
 800e21a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d001      	beq.n	800e226 <handle_settings_set+0xa2>
 800e222:	4b19      	ldr	r3, [pc, #100]	; (800e288 <handle_settings_set+0x104>)
 800e224:	e000      	b.n	800e228 <handle_settings_set+0xa4>
 800e226:	4b19      	ldr	r3, [pc, #100]	; (800e28c <handle_settings_set+0x108>)
 800e228:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 800e22c:	2a00      	cmp	r2, #0
 800e22e:	d001      	beq.n	800e234 <handle_settings_set+0xb0>
 800e230:	4a17      	ldr	r2, [pc, #92]	; (800e290 <handle_settings_set+0x10c>)
 800e232:	e000      	b.n	800e236 <handle_settings_set+0xb2>
 800e234:	4a17      	ldr	r2, [pc, #92]	; (800e294 <handle_settings_set+0x110>)
 800e236:	9209      	str	r2, [sp, #36]	; 0x24
 800e238:	2200      	movs	r2, #0
 800e23a:	9208      	str	r2, [sp, #32]
 800e23c:	4a16      	ldr	r2, [pc, #88]	; (800e298 <handle_settings_set+0x114>)
 800e23e:	9207      	str	r2, [sp, #28]
 800e240:	4a16      	ldr	r2, [pc, #88]	; (800e29c <handle_settings_set+0x118>)
 800e242:	9206      	str	r2, [sp, #24]
 800e244:	2200      	movs	r2, #0
 800e246:	9205      	str	r2, [sp, #20]
 800e248:	4a13      	ldr	r2, [pc, #76]	; (800e298 <handle_settings_set+0x114>)
 800e24a:	9204      	str	r2, [sp, #16]
 800e24c:	9303      	str	r3, [sp, #12]
 800e24e:	4b14      	ldr	r3, [pc, #80]	; (800e2a0 <handle_settings_set+0x11c>)
 800e250:	9302      	str	r3, [sp, #8]
 800e252:	2300      	movs	r3, #0
 800e254:	9301      	str	r3, [sp, #4]
 800e256:	4b10      	ldr	r3, [pc, #64]	; (800e298 <handle_settings_set+0x114>)
 800e258:	9300      	str	r3, [sp, #0]
 800e25a:	4b12      	ldr	r3, [pc, #72]	; (800e2a4 <handle_settings_set+0x120>)
 800e25c:	460a      	mov	r2, r1
 800e25e:	21c8      	movs	r1, #200	; 0xc8
 800e260:	68f8      	ldr	r0, [r7, #12]
 800e262:	f7f6 facb 	bl	80047fc <mg_http_reply>
                "{%m:%s,%m:%m}",                          //
                MG_ESC("status"), ok ? "true" : "false",  //
                MG_ESC("message"), MG_ESC(ok ? "Success" : "Failed"));
}
 800e266:	bf00      	nop
 800e268:	372c      	adds	r7, #44	; 0x2c
 800e26a:	46bd      	mov	sp, r7
 800e26c:	bd90      	pop	{r4, r7, pc}
 800e26e:	bf00      	nop
 800e270:	08017184 	.word	0x08017184
 800e274:	08017194 	.word	0x08017194
 800e278:	080171a0 	.word	0x080171a0
 800e27c:	080171b0 	.word	0x080171b0
 800e280:	2400025c 	.word	0x2400025c
 800e284:	2400026c 	.word	0x2400026c
 800e288:	080171c0 	.word	0x080171c0
 800e28c:	080171c8 	.word	0x080171c8
 800e290:	080171d0 	.word	0x080171d0
 800e294:	080171d8 	.word	0x080171d8
 800e298:	08008f9d 	.word	0x08008f9d
 800e29c:	080171f0 	.word	0x080171f0
 800e2a0:	080171f8 	.word	0x080171f8
 800e2a4:	080171e0 	.word	0x080171e0

0800e2a8 <handle_settings_get>:

static void handle_settings_get(struct mg_connection *c) {
 800e2a8:	b590      	push	{r4, r7, lr}
 800e2aa:	b095      	sub	sp, #84	; 0x54
 800e2ac:	af12      	add	r7, sp, #72	; 0x48
 800e2ae:	6078      	str	r0, [r7, #4]
  mg_http_reply(c, 200, s_json_header, "{%m:%s,%m:%hhu,%m:%hhu,%m:%m}",  //
 800e2b0:	4b1c      	ldr	r3, [pc, #112]	; (800e324 <handle_settings_get+0x7c>)
 800e2b2:	681c      	ldr	r4, [r3, #0]
                MG_ESC("log_enabled"),
                s_settings.log_enabled ? "true" : "false",    //
 800e2b4:	4b1c      	ldr	r3, [pc, #112]	; (800e328 <handle_settings_get+0x80>)
 800e2b6:	781b      	ldrb	r3, [r3, #0]
  mg_http_reply(c, 200, s_json_header, "{%m:%s,%m:%hhu,%m:%hhu,%m:%m}",  //
 800e2b8:	2b00      	cmp	r3, #0
 800e2ba:	d001      	beq.n	800e2c0 <handle_settings_get+0x18>
 800e2bc:	4b1b      	ldr	r3, [pc, #108]	; (800e32c <handle_settings_get+0x84>)
 800e2be:	e000      	b.n	800e2c2 <handle_settings_get+0x1a>
 800e2c0:	4b1b      	ldr	r3, [pc, #108]	; (800e330 <handle_settings_get+0x88>)
 800e2c2:	4a19      	ldr	r2, [pc, #100]	; (800e328 <handle_settings_get+0x80>)
 800e2c4:	6852      	ldr	r2, [r2, #4]
 800e2c6:	4918      	ldr	r1, [pc, #96]	; (800e328 <handle_settings_get+0x80>)
 800e2c8:	6889      	ldr	r1, [r1, #8]
 800e2ca:	4817      	ldr	r0, [pc, #92]	; (800e328 <handle_settings_get+0x80>)
 800e2cc:	68c0      	ldr	r0, [r0, #12]
 800e2ce:	9011      	str	r0, [sp, #68]	; 0x44
 800e2d0:	2000      	movs	r0, #0
 800e2d2:	9010      	str	r0, [sp, #64]	; 0x40
 800e2d4:	4817      	ldr	r0, [pc, #92]	; (800e334 <handle_settings_get+0x8c>)
 800e2d6:	900f      	str	r0, [sp, #60]	; 0x3c
 800e2d8:	4817      	ldr	r0, [pc, #92]	; (800e338 <handle_settings_get+0x90>)
 800e2da:	900e      	str	r0, [sp, #56]	; 0x38
 800e2dc:	2000      	movs	r0, #0
 800e2de:	900d      	str	r0, [sp, #52]	; 0x34
 800e2e0:	4814      	ldr	r0, [pc, #80]	; (800e334 <handle_settings_get+0x8c>)
 800e2e2:	900c      	str	r0, [sp, #48]	; 0x30
 800e2e4:	910b      	str	r1, [sp, #44]	; 0x2c
 800e2e6:	4915      	ldr	r1, [pc, #84]	; (800e33c <handle_settings_get+0x94>)
 800e2e8:	910a      	str	r1, [sp, #40]	; 0x28
 800e2ea:	2100      	movs	r1, #0
 800e2ec:	9109      	str	r1, [sp, #36]	; 0x24
 800e2ee:	4911      	ldr	r1, [pc, #68]	; (800e334 <handle_settings_get+0x8c>)
 800e2f0:	9108      	str	r1, [sp, #32]
 800e2f2:	9207      	str	r2, [sp, #28]
 800e2f4:	4a12      	ldr	r2, [pc, #72]	; (800e340 <handle_settings_get+0x98>)
 800e2f6:	9206      	str	r2, [sp, #24]
 800e2f8:	2200      	movs	r2, #0
 800e2fa:	9205      	str	r2, [sp, #20]
 800e2fc:	4a0d      	ldr	r2, [pc, #52]	; (800e334 <handle_settings_get+0x8c>)
 800e2fe:	9204      	str	r2, [sp, #16]
 800e300:	9303      	str	r3, [sp, #12]
 800e302:	4b10      	ldr	r3, [pc, #64]	; (800e344 <handle_settings_get+0x9c>)
 800e304:	9302      	str	r3, [sp, #8]
 800e306:	2300      	movs	r3, #0
 800e308:	9301      	str	r3, [sp, #4]
 800e30a:	4b0a      	ldr	r3, [pc, #40]	; (800e334 <handle_settings_get+0x8c>)
 800e30c:	9300      	str	r3, [sp, #0]
 800e30e:	4b0e      	ldr	r3, [pc, #56]	; (800e348 <handle_settings_get+0xa0>)
 800e310:	4622      	mov	r2, r4
 800e312:	21c8      	movs	r1, #200	; 0xc8
 800e314:	6878      	ldr	r0, [r7, #4]
 800e316:	f7f6 fa71 	bl	80047fc <mg_http_reply>
                MG_ESC("log_level"), s_settings.log_level,    //
                MG_ESC("brightness"), s_settings.brightness,  //
                MG_ESC("device_name"), MG_ESC(s_settings.device_name));
}
 800e31a:	bf00      	nop
 800e31c:	370c      	adds	r7, #12
 800e31e:	46bd      	mov	sp, r7
 800e320:	bd90      	pop	{r4, r7, pc}
 800e322:	bf00      	nop
 800e324:	2400026c 	.word	0x2400026c
 800e328:	2400025c 	.word	0x2400025c
 800e32c:	080171c0 	.word	0x080171c0
 800e330:	080171c8 	.word	0x080171c8
 800e334:	08008f9d 	.word	0x08008f9d
 800e338:	08017220 	.word	0x08017220
 800e33c:	0801722c 	.word	0x0801722c
 800e340:	08017238 	.word	0x08017238
 800e344:	08017244 	.word	0x08017244
 800e348:	08017200 	.word	0x08017200

0800e34c <fn>:

// HTTP request handler function
static void fn(struct mg_connection *c, int ev, void *ev_data, void *fn_data) {
 800e34c:	b5b0      	push	{r4, r5, r7, lr}
 800e34e:	b098      	sub	sp, #96	; 0x60
 800e350:	af04      	add	r7, sp, #16
 800e352:	60f8      	str	r0, [r7, #12]
 800e354:	60b9      	str	r1, [r7, #8]
 800e356:	607a      	str	r2, [r7, #4]
 800e358:	603b      	str	r3, [r7, #0]
  if (ev == MG_EV_ACCEPT && fn_data != NULL) {
 800e35a:	68bb      	ldr	r3, [r7, #8]
 800e35c:	2b05      	cmp	r3, #5
 800e35e:	d117      	bne.n	800e390 <fn+0x44>
 800e360:	683b      	ldr	r3, [r7, #0]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d014      	beq.n	800e390 <fn+0x44>
    struct mg_tls_opts opts = {.cert = s_ssl_cert, .certkey = s_ssl_key};
 800e366:	f107 0310 	add.w	r3, r7, #16
 800e36a:	2220      	movs	r2, #32
 800e36c:	2100      	movs	r1, #0
 800e36e:	4618      	mov	r0, r3
 800e370:	f006 f9e0 	bl	8014734 <memset>
 800e374:	4b5b      	ldr	r3, [pc, #364]	; (800e4e4 <fn+0x198>)
 800e376:	681b      	ldr	r3, [r3, #0]
 800e378:	61bb      	str	r3, [r7, #24]
 800e37a:	4b5b      	ldr	r3, [pc, #364]	; (800e4e8 <fn+0x19c>)
 800e37c:	681b      	ldr	r3, [r3, #0]
 800e37e:	61fb      	str	r3, [r7, #28]
    mg_tls_init(c, &opts);
 800e380:	f107 0310 	add.w	r3, r7, #16
 800e384:	4619      	mov	r1, r3
 800e386:	68f8      	ldr	r0, [r7, #12]
 800e388:	f7fb ff12 	bl	800a1b0 <mg_tls_init>
  if (ev == MG_EV_ACCEPT && fn_data != NULL) {
 800e38c:	bf00      	nop
    }
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
              hm->method.ptr, (int) hm->uri.len, hm->uri.ptr, (int) 3,
              &c->send.buf[9]));
  }
}
 800e38e:	e0a5      	b.n	800e4dc <fn+0x190>
  } else if (ev == MG_EV_HTTP_MSG) {
 800e390:	68bb      	ldr	r3, [r7, #8]
 800e392:	2b0a      	cmp	r3, #10
 800e394:	f040 80a2 	bne.w	800e4dc <fn+0x190>
    struct mg_http_message *hm = (struct mg_http_message *) ev_data;
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	64fb      	str	r3, [r7, #76]	; 0x4c
    struct user *u = authenticate(hm);
 800e39c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e39e:	f7ff fc73 	bl	800dc88 <authenticate>
 800e3a2:	64b8      	str	r0, [r7, #72]	; 0x48
    if (mg_http_match_uri(hm, "/api/#") && u == NULL) {
 800e3a4:	4951      	ldr	r1, [pc, #324]	; (800e4ec <fn+0x1a0>)
 800e3a6:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e3a8:	f7f7 fad5 	bl	8005956 <mg_http_match_uri>
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d00a      	beq.n	800e3c8 <fn+0x7c>
 800e3b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e3b4:	2b00      	cmp	r3, #0
 800e3b6:	d107      	bne.n	800e3c8 <fn+0x7c>
      mg_http_reply(c, 403, "", "Not Authorised\n");
 800e3b8:	4b4d      	ldr	r3, [pc, #308]	; (800e4f0 <fn+0x1a4>)
 800e3ba:	4a4e      	ldr	r2, [pc, #312]	; (800e4f4 <fn+0x1a8>)
 800e3bc:	f240 1193 	movw	r1, #403	; 0x193
 800e3c0:	68f8      	ldr	r0, [r7, #12]
 800e3c2:	f7f6 fa1b 	bl	80047fc <mg_http_reply>
 800e3c6:	e066      	b.n	800e496 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/login")) {
 800e3c8:	494b      	ldr	r1, [pc, #300]	; (800e4f8 <fn+0x1ac>)
 800e3ca:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e3cc:	f7f7 fac3 	bl	8005956 <mg_http_match_uri>
 800e3d0:	4603      	mov	r3, r0
 800e3d2:	2b00      	cmp	r3, #0
 800e3d4:	d004      	beq.n	800e3e0 <fn+0x94>
      handle_login(c, u);
 800e3d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800e3d8:	68f8      	ldr	r0, [r7, #12]
 800e3da:	f7ff fce3 	bl	800dda4 <handle_login>
 800e3de:	e05a      	b.n	800e496 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/logout")) {
 800e3e0:	4946      	ldr	r1, [pc, #280]	; (800e4fc <fn+0x1b0>)
 800e3e2:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e3e4:	f7f7 fab7 	bl	8005956 <mg_http_match_uri>
 800e3e8:	4603      	mov	r3, r0
 800e3ea:	2b00      	cmp	r3, #0
 800e3ec:	d003      	beq.n	800e3f6 <fn+0xaa>
      handle_logout(c);
 800e3ee:	68f8      	ldr	r0, [r7, #12]
 800e3f0:	f7ff fd34 	bl	800de5c <handle_logout>
 800e3f4:	e04f      	b.n	800e496 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/debug")) {
 800e3f6:	4942      	ldr	r1, [pc, #264]	; (800e500 <fn+0x1b4>)
 800e3f8:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e3fa:	f7f7 faac 	bl	8005956 <mg_http_match_uri>
 800e3fe:	4603      	mov	r3, r0
 800e400:	2b00      	cmp	r3, #0
 800e402:	d004      	beq.n	800e40e <fn+0xc2>
      handle_debug(c, hm);
 800e404:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e406:	68f8      	ldr	r0, [r7, #12]
 800e408:	f7ff fd5e 	bl	800dec8 <handle_debug>
 800e40c:	e043      	b.n	800e496 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/stats/get")) {
 800e40e:	493d      	ldr	r1, [pc, #244]	; (800e504 <fn+0x1b8>)
 800e410:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e412:	f7f7 faa0 	bl	8005956 <mg_http_match_uri>
 800e416:	4603      	mov	r3, r0
 800e418:	2b00      	cmp	r3, #0
 800e41a:	d003      	beq.n	800e424 <fn+0xd8>
      handle_stats_get(c);
 800e41c:	68f8      	ldr	r0, [r7, #12]
 800e41e:	f7ff fdb9 	bl	800df94 <handle_stats_get>
 800e422:	e038      	b.n	800e496 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/events/get")) {
 800e424:	4938      	ldr	r1, [pc, #224]	; (800e508 <fn+0x1bc>)
 800e426:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e428:	f7f7 fa95 	bl	8005956 <mg_http_match_uri>
 800e42c:	4603      	mov	r3, r0
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d004      	beq.n	800e43c <fn+0xf0>
      handle_events_get(c, hm);
 800e432:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 800e434:	68f8      	ldr	r0, [r7, #12]
 800e436:	f7ff fe6b 	bl	800e110 <handle_events_get>
 800e43a:	e02c      	b.n	800e496 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/settings/get")) {
 800e43c:	4933      	ldr	r1, [pc, #204]	; (800e50c <fn+0x1c0>)
 800e43e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e440:	f7f7 fa89 	bl	8005956 <mg_http_match_uri>
 800e444:	4603      	mov	r3, r0
 800e446:	2b00      	cmp	r3, #0
 800e448:	d003      	beq.n	800e452 <fn+0x106>
      handle_settings_get(c);
 800e44a:	68f8      	ldr	r0, [r7, #12]
 800e44c:	f7ff ff2c 	bl	800e2a8 <handle_settings_get>
 800e450:	e021      	b.n	800e496 <fn+0x14a>
    } else if (mg_http_match_uri(hm, "/api/settings/set")) {
 800e452:	492f      	ldr	r1, [pc, #188]	; (800e510 <fn+0x1c4>)
 800e454:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800e456:	f7f7 fa7e 	bl	8005956 <mg_http_match_uri>
 800e45a:	4603      	mov	r3, r0
 800e45c:	2b00      	cmp	r3, #0
 800e45e:	d008      	beq.n	800e472 <fn+0x126>
      handle_settings_set(c, hm->body);
 800e460:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e462:	f503 7300 	add.w	r3, r3, #512	; 0x200
 800e466:	e893 0006 	ldmia.w	r3, {r1, r2}
 800e46a:	68f8      	ldr	r0, [r7, #12]
 800e46c:	f7ff fe8a 	bl	800e184 <handle_settings_set>
 800e470:	e011      	b.n	800e496 <fn+0x14a>
      memset(&opts, 0, sizeof(opts));
 800e472:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e476:	2218      	movs	r2, #24
 800e478:	2100      	movs	r1, #0
 800e47a:	4618      	mov	r0, r3
 800e47c:	f006 f95a 	bl	8014734 <memset>
      opts.root_dir = "/web_root";
 800e480:	4b24      	ldr	r3, [pc, #144]	; (800e514 <fn+0x1c8>)
 800e482:	633b      	str	r3, [r7, #48]	; 0x30
      opts.fs = &mg_fs_packed;
 800e484:	4b24      	ldr	r3, [pc, #144]	; (800e518 <fn+0x1cc>)
 800e486:	647b      	str	r3, [r7, #68]	; 0x44
      mg_http_serve_dir(c, ev_data, &opts);
 800e488:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e48c:	461a      	mov	r2, r3
 800e48e:	6879      	ldr	r1, [r7, #4]
 800e490:	68f8      	ldr	r0, [r7, #12]
 800e492:	f7f7 f831 	bl	80054f8 <mg_http_serve_dir>
    MG_DEBUG(("%lu %.*s %.*s -> %.*s", c->id, (int) hm->method.len,
 800e496:	4b21      	ldr	r3, [pc, #132]	; (800e51c <fn+0x1d0>)
 800e498:	f240 1201 	movw	r2, #257	; 0x101
 800e49c:	4920      	ldr	r1, [pc, #128]	; (800e520 <fn+0x1d4>)
 800e49e:	2003      	movs	r0, #3
 800e4a0:	f7f8 fdb8 	bl	8007014 <mg_log_prefix>
 800e4a4:	4603      	mov	r3, r0
 800e4a6:	2b00      	cmp	r3, #0
 800e4a8:	d018      	beq.n	800e4dc <fn+0x190>
 800e4aa:	68fb      	ldr	r3, [r7, #12]
 800e4ac:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800e4ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4b0:	685b      	ldr	r3, [r3, #4]
 800e4b2:	461d      	mov	r5, r3
 800e4b4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4b6:	6818      	ldr	r0, [r3, #0]
 800e4b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4ba:	68db      	ldr	r3, [r3, #12]
 800e4bc:	461c      	mov	r4, r3
 800e4be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e4c0:	689b      	ldr	r3, [r3, #8]
 800e4c2:	68fa      	ldr	r2, [r7, #12]
 800e4c4:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800e4c6:	3209      	adds	r2, #9
 800e4c8:	9203      	str	r2, [sp, #12]
 800e4ca:	2203      	movs	r2, #3
 800e4cc:	9202      	str	r2, [sp, #8]
 800e4ce:	9301      	str	r3, [sp, #4]
 800e4d0:	9400      	str	r4, [sp, #0]
 800e4d2:	4603      	mov	r3, r0
 800e4d4:	462a      	mov	r2, r5
 800e4d6:	4813      	ldr	r0, [pc, #76]	; (800e524 <fn+0x1d8>)
 800e4d8:	f7f8 fdf6 	bl	80070c8 <mg_log>
}
 800e4dc:	bf00      	nop
 800e4de:	3750      	adds	r7, #80	; 0x50
 800e4e0:	46bd      	mov	sp, r7
 800e4e2:	bdb0      	pop	{r4, r5, r7, pc}
 800e4e4:	24000270 	.word	0x24000270
 800e4e8:	24000274 	.word	0x24000274
 800e4ec:	08017250 	.word	0x08017250
 800e4f0:	08017258 	.word	0x08017258
 800e4f4:	08016fb4 	.word	0x08016fb4
 800e4f8:	08017268 	.word	0x08017268
 800e4fc:	08017274 	.word	0x08017274
 800e500:	08017280 	.word	0x08017280
 800e504:	0801728c 	.word	0x0801728c
 800e508:	0801729c 	.word	0x0801729c
 800e50c:	080172ac 	.word	0x080172ac
 800e510:	080172c0 	.word	0x080172c0
 800e514:	080172d4 	.word	0x080172d4
 800e518:	2400000c 	.word	0x2400000c
 800e51c:	08017640 	.word	0x08017640
 800e520:	08016f80 	.word	0x08016f80
 800e524:	080172e0 	.word	0x080172e0

0800e528 <web_init>:

void web_init(struct mg_mgr *mgr) {
 800e528:	b580      	push	{r7, lr}
 800e52a:	b086      	sub	sp, #24
 800e52c:	af04      	add	r7, sp, #16
 800e52e:	6078      	str	r0, [r7, #4]
  s_settings.device_name = strdup("My Device");
 800e530:	480e      	ldr	r0, [pc, #56]	; (800e56c <web_init+0x44>)
 800e532:	f006 f915 	bl	8014760 <strdup>
 800e536:	4603      	mov	r3, r0
 800e538:	461a      	mov	r2, r3
 800e53a:	4b0d      	ldr	r3, [pc, #52]	; (800e570 <web_init+0x48>)
 800e53c:	60da      	str	r2, [r3, #12]

  mg_http_listen(mgr, HTTP_URL, fn, NULL);
 800e53e:	2300      	movs	r3, #0
 800e540:	4a0c      	ldr	r2, [pc, #48]	; (800e574 <web_init+0x4c>)
 800e542:	490d      	ldr	r1, [pc, #52]	; (800e578 <web_init+0x50>)
 800e544:	6878      	ldr	r0, [r7, #4]
 800e546:	f7f7 fd25 	bl	8005f94 <mg_http_listen>
#if MG_ENABLE_MBEDTLS || MG_ENABLE_OPENSSL
  mg_http_listen(mgr, HTTPS_URL, fn, "");
#endif

  // mg_timer_add(c->mgr, 1000, MG_TIMER_REPEAT, timer_mqtt_fn, c->mgr);
  mg_timer_add(mgr, 3600 * 1000, MG_TIMER_RUN_NOW | MG_TIMER_REPEAT,
 800e54a:	687b      	ldr	r3, [r7, #4]
 800e54c:	9302      	str	r3, [sp, #8]
 800e54e:	4b0b      	ldr	r3, [pc, #44]	; (800e57c <web_init+0x54>)
 800e550:	9301      	str	r3, [sp, #4]
 800e552:	2303      	movs	r3, #3
 800e554:	9300      	str	r3, [sp, #0]
 800e556:	4a0a      	ldr	r2, [pc, #40]	; (800e580 <web_init+0x58>)
 800e558:	f04f 0300 	mov.w	r3, #0
 800e55c:	6878      	ldr	r0, [r7, #4]
 800e55e:	f7fa fa73 	bl	8008a48 <mg_timer_add>
               timer_sntp_fn, mgr);
}
 800e562:	bf00      	nop
 800e564:	3708      	adds	r7, #8
 800e566:	46bd      	mov	sp, r7
 800e568:	bd80      	pop	{r7, pc}
 800e56a:	bf00      	nop
 800e56c:	080172f8 	.word	0x080172f8
 800e570:	2400025c 	.word	0x2400025c
 800e574:	0800e34d 	.word	0x0800e34d
 800e578:	08017304 	.word	0x08017304
 800e57c:	0800dc65 	.word	0x0800dc65
 800e580:	0036ee80 	.word	0x0036ee80

0800e584 <scmp>:


  {NULL, NULL, 0, 0}
};

static int scmp(const char *a, const char *b) {
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
 800e58c:	6039      	str	r1, [r7, #0]
  while (*a && (*a == *b)) a++, b++;
 800e58e:	e005      	b.n	800e59c <scmp+0x18>
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	3301      	adds	r3, #1
 800e594:	607b      	str	r3, [r7, #4]
 800e596:	683b      	ldr	r3, [r7, #0]
 800e598:	3301      	adds	r3, #1
 800e59a:	603b      	str	r3, [r7, #0]
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	781b      	ldrb	r3, [r3, #0]
 800e5a0:	2b00      	cmp	r3, #0
 800e5a2:	d005      	beq.n	800e5b0 <scmp+0x2c>
 800e5a4:	687b      	ldr	r3, [r7, #4]
 800e5a6:	781a      	ldrb	r2, [r3, #0]
 800e5a8:	683b      	ldr	r3, [r7, #0]
 800e5aa:	781b      	ldrb	r3, [r3, #0]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d0ef      	beq.n	800e590 <scmp+0xc>
  return *(const unsigned char *) a - *(const unsigned char *) b;
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	781b      	ldrb	r3, [r3, #0]
 800e5b4:	461a      	mov	r2, r3
 800e5b6:	683b      	ldr	r3, [r7, #0]
 800e5b8:	781b      	ldrb	r3, [r3, #0]
 800e5ba:	1ad3      	subs	r3, r2, r3
}
 800e5bc:	4618      	mov	r0, r3
 800e5be:	370c      	adds	r7, #12
 800e5c0:	46bd      	mov	sp, r7
 800e5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5c6:	4770      	bx	lr

0800e5c8 <mg_unlist>:
const char *mg_unlist(size_t no);
const char *mg_unlist(size_t no) {
 800e5c8:	b480      	push	{r7}
 800e5ca:	b083      	sub	sp, #12
 800e5cc:	af00      	add	r7, sp, #0
 800e5ce:	6078      	str	r0, [r7, #4]
  return packed_files[no].name;
 800e5d0:	4906      	ldr	r1, [pc, #24]	; (800e5ec <mg_unlist+0x24>)
 800e5d2:	687a      	ldr	r2, [r7, #4]
 800e5d4:	4613      	mov	r3, r2
 800e5d6:	005b      	lsls	r3, r3, #1
 800e5d8:	4413      	add	r3, r2
 800e5da:	00db      	lsls	r3, r3, #3
 800e5dc:	440b      	add	r3, r1
 800e5de:	681b      	ldr	r3, [r3, #0]
}
 800e5e0:	4618      	mov	r0, r3
 800e5e2:	370c      	adds	r7, #12
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5ea:	4770      	bx	lr
 800e5ec:	08018120 	.word	0x08018120

0800e5f0 <mg_unpack>:
const char *mg_unpack(const char *path, size_t *size, time_t *mtime);
const char *mg_unpack(const char *name, size_t *size, time_t *mtime) {
 800e5f0:	b580      	push	{r7, lr}
 800e5f2:	b086      	sub	sp, #24
 800e5f4:	af00      	add	r7, sp, #0
 800e5f6:	60f8      	str	r0, [r7, #12]
 800e5f8:	60b9      	str	r1, [r7, #8]
 800e5fa:	607a      	str	r2, [r7, #4]
  const struct packed_file *p;
  for (p = packed_files; p->name != NULL; p++) {
 800e5fc:	4b16      	ldr	r3, [pc, #88]	; (800e658 <mg_unpack+0x68>)
 800e5fe:	617b      	str	r3, [r7, #20]
 800e600:	e020      	b.n	800e644 <mg_unpack+0x54>
    if (scmp(p->name, name) != 0) continue;
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	68f9      	ldr	r1, [r7, #12]
 800e608:	4618      	mov	r0, r3
 800e60a:	f7ff ffbb 	bl	800e584 <scmp>
 800e60e:	4603      	mov	r3, r0
 800e610:	2b00      	cmp	r3, #0
 800e612:	d113      	bne.n	800e63c <mg_unpack+0x4c>
    if (size != NULL) *size = p->size - 1;
 800e614:	68bb      	ldr	r3, [r7, #8]
 800e616:	2b00      	cmp	r3, #0
 800e618:	d004      	beq.n	800e624 <mg_unpack+0x34>
 800e61a:	697b      	ldr	r3, [r7, #20]
 800e61c:	689b      	ldr	r3, [r3, #8]
 800e61e:	1e5a      	subs	r2, r3, #1
 800e620:	68bb      	ldr	r3, [r7, #8]
 800e622:	601a      	str	r2, [r3, #0]
    if (mtime != NULL) *mtime = p->mtime;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	2b00      	cmp	r3, #0
 800e628:	d005      	beq.n	800e636 <mg_unpack+0x46>
 800e62a:	697b      	ldr	r3, [r7, #20]
 800e62c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800e630:	6879      	ldr	r1, [r7, #4]
 800e632:	e9c1 2300 	strd	r2, r3, [r1]
    return (const char *) p->data;
 800e636:	697b      	ldr	r3, [r7, #20]
 800e638:	685b      	ldr	r3, [r3, #4]
 800e63a:	e008      	b.n	800e64e <mg_unpack+0x5e>
    if (scmp(p->name, name) != 0) continue;
 800e63c:	bf00      	nop
  for (p = packed_files; p->name != NULL; p++) {
 800e63e:	697b      	ldr	r3, [r7, #20]
 800e640:	3318      	adds	r3, #24
 800e642:	617b      	str	r3, [r7, #20]
 800e644:	697b      	ldr	r3, [r7, #20]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d1da      	bne.n	800e602 <mg_unpack+0x12>
  }
  return NULL;
 800e64c:	2300      	movs	r3, #0
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	08018120 	.word	0x08018120

0800e65c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800e65c:	b480      	push	{r7}
 800e65e:	b083      	sub	sp, #12
 800e660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800e662:	4b0a      	ldr	r3, [pc, #40]	; (800e68c <HAL_MspInit+0x30>)
 800e664:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e668:	4a08      	ldr	r2, [pc, #32]	; (800e68c <HAL_MspInit+0x30>)
 800e66a:	f043 0302 	orr.w	r3, r3, #2
 800e66e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800e672:	4b06      	ldr	r3, [pc, #24]	; (800e68c <HAL_MspInit+0x30>)
 800e674:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800e678:	f003 0302 	and.w	r3, r3, #2
 800e67c:	607b      	str	r3, [r7, #4]
 800e67e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800e680:	bf00      	nop
 800e682:	370c      	adds	r7, #12
 800e684:	46bd      	mov	sp, r7
 800e686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e68a:	4770      	bx	lr
 800e68c:	58024400 	.word	0x58024400

0800e690 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800e690:	b580      	push	{r7, lr}
 800e692:	b08e      	sub	sp, #56	; 0x38
 800e694:	af00      	add	r7, sp, #0
 800e696:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e698:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e69c:	2200      	movs	r2, #0
 800e69e:	601a      	str	r2, [r3, #0]
 800e6a0:	605a      	str	r2, [r3, #4]
 800e6a2:	609a      	str	r2, [r3, #8]
 800e6a4:	60da      	str	r2, [r3, #12]
 800e6a6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	681b      	ldr	r3, [r3, #0]
 800e6ac:	4a5d      	ldr	r2, [pc, #372]	; (800e824 <HAL_ETH_MspInit+0x194>)
 800e6ae:	4293      	cmp	r3, r2
 800e6b0:	f040 80b3 	bne.w	800e81a <HAL_ETH_MspInit+0x18a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 800e6b4:	4b5c      	ldr	r3, [pc, #368]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e6b6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e6ba:	4a5b      	ldr	r2, [pc, #364]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e6bc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800e6c0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e6c4:	4b58      	ldr	r3, [pc, #352]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e6c6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e6ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800e6ce:	623b      	str	r3, [r7, #32]
 800e6d0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800e6d2:	4b55      	ldr	r3, [pc, #340]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e6d4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e6d8:	4a53      	ldr	r2, [pc, #332]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e6da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800e6de:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e6e2:	4b51      	ldr	r3, [pc, #324]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e6e4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e6e8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800e6ec:	61fb      	str	r3, [r7, #28]
 800e6ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800e6f0:	4b4d      	ldr	r3, [pc, #308]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e6f2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e6f6:	4a4c      	ldr	r2, [pc, #304]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e6f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800e6fc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 800e700:	4b49      	ldr	r3, [pc, #292]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e702:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800e706:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800e70a:	61bb      	str	r3, [r7, #24]
 800e70c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e70e:	4b46      	ldr	r3, [pc, #280]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e710:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e714:	4a44      	ldr	r2, [pc, #272]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e716:	f043 0304 	orr.w	r3, r3, #4
 800e71a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e71e:	4b42      	ldr	r3, [pc, #264]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e720:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e724:	f003 0304 	and.w	r3, r3, #4
 800e728:	617b      	str	r3, [r7, #20]
 800e72a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e72c:	4b3e      	ldr	r3, [pc, #248]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e72e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e732:	4a3d      	ldr	r2, [pc, #244]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e734:	f043 0301 	orr.w	r3, r3, #1
 800e738:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e73c:	4b3a      	ldr	r3, [pc, #232]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e73e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e742:	f003 0301 	and.w	r3, r3, #1
 800e746:	613b      	str	r3, [r7, #16]
 800e748:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e74a:	4b37      	ldr	r3, [pc, #220]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e74c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e750:	4a35      	ldr	r2, [pc, #212]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e752:	f043 0302 	orr.w	r3, r3, #2
 800e756:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e75a:	4b33      	ldr	r3, [pc, #204]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e75c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e760:	f003 0302 	and.w	r3, r3, #2
 800e764:	60fb      	str	r3, [r7, #12]
 800e766:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e768:	4b2f      	ldr	r3, [pc, #188]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e76a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e76e:	4a2e      	ldr	r2, [pc, #184]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e770:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e774:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e778:	4b2b      	ldr	r3, [pc, #172]	; (800e828 <HAL_ETH_MspInit+0x198>)
 800e77a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e77e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e782:	60bb      	str	r3, [r7, #8]
 800e784:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800e786:	2332      	movs	r3, #50	; 0x32
 800e788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e78a:	2302      	movs	r3, #2
 800e78c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e78e:	2300      	movs	r3, #0
 800e790:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e792:	2300      	movs	r3, #0
 800e794:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e796:	230b      	movs	r3, #11
 800e798:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e79a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e79e:	4619      	mov	r1, r3
 800e7a0:	4822      	ldr	r0, [pc, #136]	; (800e82c <HAL_ETH_MspInit+0x19c>)
 800e7a2:	f001 f857 	bl	800f854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800e7a6:	2386      	movs	r3, #134	; 0x86
 800e7a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7aa:	2302      	movs	r3, #2
 800e7ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7ae:	2300      	movs	r3, #0
 800e7b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e7b6:	230b      	movs	r3, #11
 800e7b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e7ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7be:	4619      	mov	r1, r3
 800e7c0:	481b      	ldr	r0, [pc, #108]	; (800e830 <HAL_ETH_MspInit+0x1a0>)
 800e7c2:	f001 f847 	bl	800f854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800e7c6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e7ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7cc:	2302      	movs	r3, #2
 800e7ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7d0:	2300      	movs	r3, #0
 800e7d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7d4:	2300      	movs	r3, #0
 800e7d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e7d8:	230b      	movs	r3, #11
 800e7da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800e7dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e7e0:	4619      	mov	r1, r3
 800e7e2:	4814      	ldr	r0, [pc, #80]	; (800e834 <HAL_ETH_MspInit+0x1a4>)
 800e7e4:	f001 f836 	bl	800f854 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800e7e8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e7ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e7ee:	2302      	movs	r3, #2
 800e7f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e7fa:	230b      	movs	r3, #11
 800e7fc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e7fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e802:	4619      	mov	r1, r3
 800e804:	480c      	ldr	r0, [pc, #48]	; (800e838 <HAL_ETH_MspInit+0x1a8>)
 800e806:	f001 f825 	bl	800f854 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 0, 0);
 800e80a:	2200      	movs	r2, #0
 800e80c:	2100      	movs	r1, #0
 800e80e:	203d      	movs	r0, #61	; 0x3d
 800e810:	f000 fbc7 	bl	800efa2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e814:	203d      	movs	r0, #61	; 0x3d
 800e816:	f000 fbde 	bl	800efd6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800e81a:	bf00      	nop
 800e81c:	3738      	adds	r7, #56	; 0x38
 800e81e:	46bd      	mov	sp, r7
 800e820:	bd80      	pop	{r7, pc}
 800e822:	bf00      	nop
 800e824:	40028000 	.word	0x40028000
 800e828:	58024400 	.word	0x58024400
 800e82c:	58020800 	.word	0x58020800
 800e830:	58020000 	.word	0x58020000
 800e834:	58020400 	.word	0x58020400
 800e838:	58021800 	.word	0x58021800

0800e83c <HAL_RNG_MspInit>:
* This function configures the hardware resources used in this example
* @param hrng: RNG handle pointer
* @retval None
*/
void HAL_RNG_MspInit(RNG_HandleTypeDef* hrng)
{
 800e83c:	b580      	push	{r7, lr}
 800e83e:	b0b2      	sub	sp, #200	; 0xc8
 800e840:	af00      	add	r7, sp, #0
 800e842:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e844:	f107 0310 	add.w	r3, r7, #16
 800e848:	22b8      	movs	r2, #184	; 0xb8
 800e84a:	2100      	movs	r1, #0
 800e84c:	4618      	mov	r0, r3
 800e84e:	f005 ff71 	bl	8014734 <memset>
  if(hrng->Instance==RNG)
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	681b      	ldr	r3, [r3, #0]
 800e856:	4a14      	ldr	r2, [pc, #80]	; (800e8a8 <HAL_RNG_MspInit+0x6c>)
 800e858:	4293      	cmp	r3, r2
 800e85a:	d121      	bne.n	800e8a0 <HAL_RNG_MspInit+0x64>

  /* USER CODE END RNG_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RNG;
 800e85c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800e860:	f04f 0300 	mov.w	r3, #0
 800e864:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.RngClockSelection = RCC_RNGCLKSOURCE_HSI48;
 800e868:	2300      	movs	r3, #0
 800e86a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e86e:	f107 0310 	add.w	r3, r7, #16
 800e872:	4618      	mov	r0, r3
 800e874:	f002 f96a 	bl	8010b4c <HAL_RCCEx_PeriphCLKConfig>
 800e878:	4603      	mov	r3, r0
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d001      	beq.n	800e882 <HAL_RNG_MspInit+0x46>
    {
      Error_Handler();
 800e87e:	f7f2 fd6d 	bl	800135c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RNG_CLK_ENABLE();
 800e882:	4b0a      	ldr	r3, [pc, #40]	; (800e8ac <HAL_RNG_MspInit+0x70>)
 800e884:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e888:	4a08      	ldr	r2, [pc, #32]	; (800e8ac <HAL_RNG_MspInit+0x70>)
 800e88a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e88e:	f8c2 30dc 	str.w	r3, [r2, #220]	; 0xdc
 800e892:	4b06      	ldr	r3, [pc, #24]	; (800e8ac <HAL_RNG_MspInit+0x70>)
 800e894:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800e898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e89c:	60fb      	str	r3, [r7, #12]
 800e89e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN RNG_MspInit 1 */

  /* USER CODE END RNG_MspInit 1 */
  }

}
 800e8a0:	bf00      	nop
 800e8a2:	37c8      	adds	r7, #200	; 0xc8
 800e8a4:	46bd      	mov	sp, r7
 800e8a6:	bd80      	pop	{r7, pc}
 800e8a8:	48021800 	.word	0x48021800
 800e8ac:	58024400 	.word	0x58024400

0800e8b0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800e8b0:	b580      	push	{r7, lr}
 800e8b2:	b0b8      	sub	sp, #224	; 0xe0
 800e8b4:	af00      	add	r7, sp, #0
 800e8b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e8b8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e8bc:	2200      	movs	r2, #0
 800e8be:	601a      	str	r2, [r3, #0]
 800e8c0:	605a      	str	r2, [r3, #4]
 800e8c2:	609a      	str	r2, [r3, #8]
 800e8c4:	60da      	str	r2, [r3, #12]
 800e8c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800e8c8:	f107 0310 	add.w	r3, r7, #16
 800e8cc:	22b8      	movs	r2, #184	; 0xb8
 800e8ce:	2100      	movs	r1, #0
 800e8d0:	4618      	mov	r0, r3
 800e8d2:	f005 ff2f 	bl	8014734 <memset>
  if(huart->Instance==USART3)
 800e8d6:	687b      	ldr	r3, [r7, #4]
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	4a27      	ldr	r2, [pc, #156]	; (800e978 <HAL_UART_MspInit+0xc8>)
 800e8dc:	4293      	cmp	r3, r2
 800e8de:	d146      	bne.n	800e96e <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800e8e0:	f04f 0202 	mov.w	r2, #2
 800e8e4:	f04f 0300 	mov.w	r3, #0
 800e8e8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800e8ec:	2300      	movs	r3, #0
 800e8ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800e8f2:	f107 0310 	add.w	r3, r7, #16
 800e8f6:	4618      	mov	r0, r3
 800e8f8:	f002 f928 	bl	8010b4c <HAL_RCCEx_PeriphCLKConfig>
 800e8fc:	4603      	mov	r3, r0
 800e8fe:	2b00      	cmp	r3, #0
 800e900:	d001      	beq.n	800e906 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 800e902:	f7f2 fd2b 	bl	800135c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800e906:	4b1d      	ldr	r3, [pc, #116]	; (800e97c <HAL_UART_MspInit+0xcc>)
 800e908:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e90c:	4a1b      	ldr	r2, [pc, #108]	; (800e97c <HAL_UART_MspInit+0xcc>)
 800e90e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800e912:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 800e916:	4b19      	ldr	r3, [pc, #100]	; (800e97c <HAL_UART_MspInit+0xcc>)
 800e918:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 800e91c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e920:	60fb      	str	r3, [r7, #12]
 800e922:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800e924:	4b15      	ldr	r3, [pc, #84]	; (800e97c <HAL_UART_MspInit+0xcc>)
 800e926:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e92a:	4a14      	ldr	r2, [pc, #80]	; (800e97c <HAL_UART_MspInit+0xcc>)
 800e92c:	f043 0308 	orr.w	r3, r3, #8
 800e930:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800e934:	4b11      	ldr	r3, [pc, #68]	; (800e97c <HAL_UART_MspInit+0xcc>)
 800e936:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800e93a:	f003 0308 	and.w	r3, r3, #8
 800e93e:	60bb      	str	r3, [r7, #8]
 800e940:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_VCP_RX_Pin|STLK_VCP_TX_Pin;
 800e942:	f44f 7340 	mov.w	r3, #768	; 0x300
 800e946:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e94a:	2302      	movs	r3, #2
 800e94c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e950:	2300      	movs	r3, #0
 800e952:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800e956:	2300      	movs	r3, #0
 800e958:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800e95c:	2307      	movs	r3, #7
 800e95e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800e962:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800e966:	4619      	mov	r1, r3
 800e968:	4805      	ldr	r0, [pc, #20]	; (800e980 <HAL_UART_MspInit+0xd0>)
 800e96a:	f000 ff73 	bl	800f854 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800e96e:	bf00      	nop
 800e970:	37e0      	adds	r7, #224	; 0xe0
 800e972:	46bd      	mov	sp, r7
 800e974:	bd80      	pop	{r7, pc}
 800e976:	bf00      	nop
 800e978:	40004800 	.word	0x40004800
 800e97c:	58024400 	.word	0x58024400
 800e980:	58020c00 	.word	0x58020c00

0800e984 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800e984:	b480      	push	{r7}
 800e986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800e988:	e7fe      	b.n	800e988 <NMI_Handler+0x4>

0800e98a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800e98a:	b480      	push	{r7}
 800e98c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800e98e:	e7fe      	b.n	800e98e <HardFault_Handler+0x4>

0800e990 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800e990:	b480      	push	{r7}
 800e992:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800e994:	e7fe      	b.n	800e994 <MemManage_Handler+0x4>

0800e996 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800e996:	b480      	push	{r7}
 800e998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800e99a:	e7fe      	b.n	800e99a <BusFault_Handler+0x4>

0800e99c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800e99c:	b480      	push	{r7}
 800e99e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800e9a0:	e7fe      	b.n	800e9a0 <UsageFault_Handler+0x4>

0800e9a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800e9a2:	b480      	push	{r7}
 800e9a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800e9a6:	bf00      	nop
 800e9a8:	46bd      	mov	sp, r7
 800e9aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ae:	4770      	bx	lr

0800e9b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800e9b0:	b480      	push	{r7}
 800e9b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800e9b4:	bf00      	nop
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9bc:	4770      	bx	lr

0800e9be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800e9be:	b480      	push	{r7}
 800e9c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800e9c2:	bf00      	nop
 800e9c4:	46bd      	mov	sp, r7
 800e9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ca:	4770      	bx	lr

0800e9cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800e9cc:	b580      	push	{r7, lr}
 800e9ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800e9d0:	f000 f9d8 	bl	800ed84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800e9d4:	bf00      	nop
 800e9d6:	bd80      	pop	{r7, pc}

0800e9d8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800e9d8:	b480      	push	{r7}
 800e9da:	af00      	add	r7, sp, #0
  return 1;
 800e9dc:	2301      	movs	r3, #1
}
 800e9de:	4618      	mov	r0, r3
 800e9e0:	46bd      	mov	sp, r7
 800e9e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e6:	4770      	bx	lr

0800e9e8 <_kill>:

int _kill(int pid, int sig)
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b082      	sub	sp, #8
 800e9ec:	af00      	add	r7, sp, #0
 800e9ee:	6078      	str	r0, [r7, #4]
 800e9f0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800e9f2:	f005 ff53 	bl	801489c <__errno>
 800e9f6:	4603      	mov	r3, r0
 800e9f8:	2216      	movs	r2, #22
 800e9fa:	601a      	str	r2, [r3, #0]
  return -1;
 800e9fc:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea00:	4618      	mov	r0, r3
 800ea02:	3708      	adds	r7, #8
 800ea04:	46bd      	mov	sp, r7
 800ea06:	bd80      	pop	{r7, pc}

0800ea08 <_exit>:

void _exit (int status)
{
 800ea08:	b580      	push	{r7, lr}
 800ea0a:	b082      	sub	sp, #8
 800ea0c:	af00      	add	r7, sp, #0
 800ea0e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ea10:	f04f 31ff 	mov.w	r1, #4294967295
 800ea14:	6878      	ldr	r0, [r7, #4]
 800ea16:	f7ff ffe7 	bl	800e9e8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ea1a:	e7fe      	b.n	800ea1a <_exit+0x12>

0800ea1c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b086      	sub	sp, #24
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea28:	2300      	movs	r3, #0
 800ea2a:	617b      	str	r3, [r7, #20]
 800ea2c:	e00a      	b.n	800ea44 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ea2e:	f3af 8000 	nop.w
 800ea32:	4601      	mov	r1, r0
 800ea34:	68bb      	ldr	r3, [r7, #8]
 800ea36:	1c5a      	adds	r2, r3, #1
 800ea38:	60ba      	str	r2, [r7, #8]
 800ea3a:	b2ca      	uxtb	r2, r1
 800ea3c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ea3e:	697b      	ldr	r3, [r7, #20]
 800ea40:	3301      	adds	r3, #1
 800ea42:	617b      	str	r3, [r7, #20]
 800ea44:	697a      	ldr	r2, [r7, #20]
 800ea46:	687b      	ldr	r3, [r7, #4]
 800ea48:	429a      	cmp	r2, r3
 800ea4a:	dbf0      	blt.n	800ea2e <_read+0x12>
  }

  return len;
 800ea4c:	687b      	ldr	r3, [r7, #4]
}
 800ea4e:	4618      	mov	r0, r3
 800ea50:	3718      	adds	r7, #24
 800ea52:	46bd      	mov	sp, r7
 800ea54:	bd80      	pop	{r7, pc}
	...

0800ea58 <_write>:
  if (file == 1) uart_write_buf(USART1, ptr, len);
  return len;
}
#else
__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800ea58:	b580      	push	{r7, lr}
 800ea5a:	b084      	sub	sp, #16
 800ea5c:	af00      	add	r7, sp, #0
 800ea5e:	60f8      	str	r0, [r7, #12]
 800ea60:	60b9      	str	r1, [r7, #8]
 800ea62:	607a      	str	r2, [r7, #4]
//  for (DataIdx = 0; DataIdx < len; DataIdx++)
//  {
//    __io_putchar(*ptr++);
//  }
	extern UART_HandleTypeDef huart3;
	if (file == 1) HAL_UART_Transmit(&huart3, (uint8_t *)ptr, len, 1000);
 800ea64:	68fb      	ldr	r3, [r7, #12]
 800ea66:	2b01      	cmp	r3, #1
 800ea68:	d107      	bne.n	800ea7a <_write+0x22>
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	b29a      	uxth	r2, r3
 800ea6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ea72:	68b9      	ldr	r1, [r7, #8]
 800ea74:	4803      	ldr	r0, [pc, #12]	; (800ea84 <_write+0x2c>)
 800ea76:	f004 f829 	bl	8012acc <HAL_UART_Transmit>
  return len;
 800ea7a:	687b      	ldr	r3, [r7, #4]
}
 800ea7c:	4618      	mov	r0, r3
 800ea7e:	3710      	adds	r7, #16
 800ea80:	46bd      	mov	sp, r7
 800ea82:	bd80      	pop	{r7, pc}
 800ea84:	240004f0 	.word	0x240004f0

0800ea88 <_close>:
#endif

int _close(int file)
{
 800ea88:	b480      	push	{r7}
 800ea8a:	b083      	sub	sp, #12
 800ea8c:	af00      	add	r7, sp, #0
 800ea8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ea90:	f04f 33ff 	mov.w	r3, #4294967295
}
 800ea94:	4618      	mov	r0, r3
 800ea96:	370c      	adds	r7, #12
 800ea98:	46bd      	mov	sp, r7
 800ea9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea9e:	4770      	bx	lr

0800eaa0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800eaa0:	b480      	push	{r7}
 800eaa2:	b083      	sub	sp, #12
 800eaa4:	af00      	add	r7, sp, #0
 800eaa6:	6078      	str	r0, [r7, #4]
 800eaa8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800eaaa:	683b      	ldr	r3, [r7, #0]
 800eaac:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800eab0:	605a      	str	r2, [r3, #4]
  return 0;
 800eab2:	2300      	movs	r3, #0
}
 800eab4:	4618      	mov	r0, r3
 800eab6:	370c      	adds	r7, #12
 800eab8:	46bd      	mov	sp, r7
 800eaba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eabe:	4770      	bx	lr

0800eac0 <_isatty>:

int _isatty(int file)
{
 800eac0:	b480      	push	{r7}
 800eac2:	b083      	sub	sp, #12
 800eac4:	af00      	add	r7, sp, #0
 800eac6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800eac8:	2301      	movs	r3, #1
}
 800eaca:	4618      	mov	r0, r3
 800eacc:	370c      	adds	r7, #12
 800eace:	46bd      	mov	sp, r7
 800ead0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead4:	4770      	bx	lr

0800ead6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ead6:	b480      	push	{r7}
 800ead8:	b085      	sub	sp, #20
 800eada:	af00      	add	r7, sp, #0
 800eadc:	60f8      	str	r0, [r7, #12]
 800eade:	60b9      	str	r1, [r7, #8]
 800eae0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800eae2:	2300      	movs	r3, #0
}
 800eae4:	4618      	mov	r0, r3
 800eae6:	3714      	adds	r7, #20
 800eae8:	46bd      	mov	sp, r7
 800eaea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaee:	4770      	bx	lr

0800eaf0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800eaf0:	b580      	push	{r7, lr}
 800eaf2:	b086      	sub	sp, #24
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800eaf8:	4a14      	ldr	r2, [pc, #80]	; (800eb4c <_sbrk+0x5c>)
 800eafa:	4b15      	ldr	r3, [pc, #84]	; (800eb50 <_sbrk+0x60>)
 800eafc:	1ad3      	subs	r3, r2, r3
 800eafe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800eb00:	697b      	ldr	r3, [r7, #20]
 800eb02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800eb04:	4b13      	ldr	r3, [pc, #76]	; (800eb54 <_sbrk+0x64>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d102      	bne.n	800eb12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800eb0c:	4b11      	ldr	r3, [pc, #68]	; (800eb54 <_sbrk+0x64>)
 800eb0e:	4a12      	ldr	r2, [pc, #72]	; (800eb58 <_sbrk+0x68>)
 800eb10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800eb12:	4b10      	ldr	r3, [pc, #64]	; (800eb54 <_sbrk+0x64>)
 800eb14:	681a      	ldr	r2, [r3, #0]
 800eb16:	687b      	ldr	r3, [r7, #4]
 800eb18:	4413      	add	r3, r2
 800eb1a:	693a      	ldr	r2, [r7, #16]
 800eb1c:	429a      	cmp	r2, r3
 800eb1e:	d207      	bcs.n	800eb30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800eb20:	f005 febc 	bl	801489c <__errno>
 800eb24:	4603      	mov	r3, r0
 800eb26:	220c      	movs	r2, #12
 800eb28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800eb2a:	f04f 33ff 	mov.w	r3, #4294967295
 800eb2e:	e009      	b.n	800eb44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800eb30:	4b08      	ldr	r3, [pc, #32]	; (800eb54 <_sbrk+0x64>)
 800eb32:	681b      	ldr	r3, [r3, #0]
 800eb34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800eb36:	4b07      	ldr	r3, [pc, #28]	; (800eb54 <_sbrk+0x64>)
 800eb38:	681a      	ldr	r2, [r3, #0]
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	4413      	add	r3, r2
 800eb3e:	4a05      	ldr	r2, [pc, #20]	; (800eb54 <_sbrk+0x64>)
 800eb40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800eb42:	68fb      	ldr	r3, [r7, #12]
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3718      	adds	r7, #24
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	24050000 	.word	0x24050000
 800eb50:	00000400 	.word	0x00000400
 800eb54:	24003648 	.word	0x24003648
 800eb58:	240037a0 	.word	0x240037a0

0800eb5c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800eb5c:	b480      	push	{r7}
 800eb5e:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800eb60:	4b32      	ldr	r3, [pc, #200]	; (800ec2c <SystemInit+0xd0>)
 800eb62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800eb66:	4a31      	ldr	r2, [pc, #196]	; (800ec2c <SystemInit+0xd0>)
 800eb68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800eb6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800eb70:	4b2f      	ldr	r3, [pc, #188]	; (800ec30 <SystemInit+0xd4>)
 800eb72:	681b      	ldr	r3, [r3, #0]
 800eb74:	f003 030f 	and.w	r3, r3, #15
 800eb78:	2b06      	cmp	r3, #6
 800eb7a:	d807      	bhi.n	800eb8c <SystemInit+0x30>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800eb7c:	4b2c      	ldr	r3, [pc, #176]	; (800ec30 <SystemInit+0xd4>)
 800eb7e:	681b      	ldr	r3, [r3, #0]
 800eb80:	f023 030f 	bic.w	r3, r3, #15
 800eb84:	4a2a      	ldr	r2, [pc, #168]	; (800ec30 <SystemInit+0xd4>)
 800eb86:	f043 0307 	orr.w	r3, r3, #7
 800eb8a:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 800eb8c:	4b29      	ldr	r3, [pc, #164]	; (800ec34 <SystemInit+0xd8>)
 800eb8e:	681b      	ldr	r3, [r3, #0]
 800eb90:	4a28      	ldr	r2, [pc, #160]	; (800ec34 <SystemInit+0xd8>)
 800eb92:	f043 0301 	orr.w	r3, r3, #1
 800eb96:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800eb98:	4b26      	ldr	r3, [pc, #152]	; (800ec34 <SystemInit+0xd8>)
 800eb9a:	2200      	movs	r2, #0
 800eb9c:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 800eb9e:	4b25      	ldr	r3, [pc, #148]	; (800ec34 <SystemInit+0xd8>)
 800eba0:	681a      	ldr	r2, [r3, #0]
 800eba2:	4924      	ldr	r1, [pc, #144]	; (800ec34 <SystemInit+0xd8>)
 800eba4:	4b24      	ldr	r3, [pc, #144]	; (800ec38 <SystemInit+0xdc>)
 800eba6:	4013      	ands	r3, r2
 800eba8:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800ebaa:	4b21      	ldr	r3, [pc, #132]	; (800ec30 <SystemInit+0xd4>)
 800ebac:	681b      	ldr	r3, [r3, #0]
 800ebae:	f003 0308 	and.w	r3, r3, #8
 800ebb2:	2b00      	cmp	r3, #0
 800ebb4:	d007      	beq.n	800ebc6 <SystemInit+0x6a>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800ebb6:	4b1e      	ldr	r3, [pc, #120]	; (800ec30 <SystemInit+0xd4>)
 800ebb8:	681b      	ldr	r3, [r3, #0]
 800ebba:	f023 030f 	bic.w	r3, r3, #15
 800ebbe:	4a1c      	ldr	r2, [pc, #112]	; (800ec30 <SystemInit+0xd4>)
 800ebc0:	f043 0307 	orr.w	r3, r3, #7
 800ebc4:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800ebc6:	4b1b      	ldr	r3, [pc, #108]	; (800ec34 <SystemInit+0xd8>)
 800ebc8:	2200      	movs	r2, #0
 800ebca:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 800ebcc:	4b19      	ldr	r3, [pc, #100]	; (800ec34 <SystemInit+0xd8>)
 800ebce:	2200      	movs	r2, #0
 800ebd0:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800ebd2:	4b18      	ldr	r3, [pc, #96]	; (800ec34 <SystemInit+0xd8>)
 800ebd4:	2200      	movs	r2, #0
 800ebd6:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800ebd8:	4b16      	ldr	r3, [pc, #88]	; (800ec34 <SystemInit+0xd8>)
 800ebda:	4a18      	ldr	r2, [pc, #96]	; (800ec3c <SystemInit+0xe0>)
 800ebdc:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800ebde:	4b15      	ldr	r3, [pc, #84]	; (800ec34 <SystemInit+0xd8>)
 800ebe0:	4a17      	ldr	r2, [pc, #92]	; (800ec40 <SystemInit+0xe4>)
 800ebe2:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800ebe4:	4b13      	ldr	r3, [pc, #76]	; (800ec34 <SystemInit+0xd8>)
 800ebe6:	4a17      	ldr	r2, [pc, #92]	; (800ec44 <SystemInit+0xe8>)
 800ebe8:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800ebea:	4b12      	ldr	r3, [pc, #72]	; (800ec34 <SystemInit+0xd8>)
 800ebec:	2200      	movs	r2, #0
 800ebee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800ebf0:	4b10      	ldr	r3, [pc, #64]	; (800ec34 <SystemInit+0xd8>)
 800ebf2:	4a14      	ldr	r2, [pc, #80]	; (800ec44 <SystemInit+0xe8>)
 800ebf4:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800ebf6:	4b0f      	ldr	r3, [pc, #60]	; (800ec34 <SystemInit+0xd8>)
 800ebf8:	2200      	movs	r2, #0
 800ebfa:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800ebfc:	4b0d      	ldr	r3, [pc, #52]	; (800ec34 <SystemInit+0xd8>)
 800ebfe:	4a11      	ldr	r2, [pc, #68]	; (800ec44 <SystemInit+0xe8>)
 800ec00:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800ec02:	4b0c      	ldr	r3, [pc, #48]	; (800ec34 <SystemInit+0xd8>)
 800ec04:	2200      	movs	r2, #0
 800ec06:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800ec08:	4b0a      	ldr	r3, [pc, #40]	; (800ec34 <SystemInit+0xd8>)
 800ec0a:	681b      	ldr	r3, [r3, #0]
 800ec0c:	4a09      	ldr	r2, [pc, #36]	; (800ec34 <SystemInit+0xd8>)
 800ec0e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800ec12:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800ec14:	4b07      	ldr	r3, [pc, #28]	; (800ec34 <SystemInit+0xd8>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	661a      	str	r2, [r3, #96]	; 0x60
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800ec1a:	4b0b      	ldr	r3, [pc, #44]	; (800ec48 <SystemInit+0xec>)
 800ec1c:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800ec20:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 800ec22:	bf00      	nop
 800ec24:	46bd      	mov	sp, r7
 800ec26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ec2a:	4770      	bx	lr
 800ec2c:	e000ed00 	.word	0xe000ed00
 800ec30:	52002000 	.word	0x52002000
 800ec34:	58024400 	.word	0x58024400
 800ec38:	eaf6ed7f 	.word	0xeaf6ed7f
 800ec3c:	02020200 	.word	0x02020200
 800ec40:	01ff0000 	.word	0x01ff0000
 800ec44:	01010280 	.word	0x01010280
 800ec48:	52004000 	.word	0x52004000

0800ec4c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800ec4c:	f8df d034 	ldr.w	sp, [pc, #52]	; 800ec84 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800ec50:	f7ff ff84 	bl	800eb5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800ec54:	480c      	ldr	r0, [pc, #48]	; (800ec88 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800ec56:	490d      	ldr	r1, [pc, #52]	; (800ec8c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800ec58:	4a0d      	ldr	r2, [pc, #52]	; (800ec90 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800ec5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800ec5c:	e002      	b.n	800ec64 <LoopCopyDataInit>

0800ec5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800ec5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800ec60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800ec62:	3304      	adds	r3, #4

0800ec64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800ec64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800ec66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800ec68:	d3f9      	bcc.n	800ec5e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800ec6a:	4a0a      	ldr	r2, [pc, #40]	; (800ec94 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800ec6c:	4c0a      	ldr	r4, [pc, #40]	; (800ec98 <LoopFillZerobss+0x22>)
  movs r3, #0
 800ec6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800ec70:	e001      	b.n	800ec76 <LoopFillZerobss>

0800ec72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800ec72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800ec74:	3204      	adds	r2, #4

0800ec76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800ec76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800ec78:	d3fb      	bcc.n	800ec72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800ec7a:	f005 fe15 	bl	80148a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800ec7e:	f7f2 f857 	bl	8000d30 <main>
  bx  lr
 800ec82:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800ec84:	24050000 	.word	0x24050000
  ldr r0, =_sdata
 800ec88:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800ec8c:	24000314 	.word	0x24000314
  ldr r2, =_sidata
 800ec90:	08018378 	.word	0x08018378
  ldr r2, =_sbss
 800ec94:	240003d8 	.word	0x240003d8
  ldr r4, =_ebss
 800ec98:	2400379c 	.word	0x2400379c

0800ec9c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800ec9c:	e7fe      	b.n	800ec9c <ADC3_IRQHandler>
	...

0800eca0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800eca0:	b580      	push	{r7, lr}
 800eca2:	b082      	sub	sp, #8
 800eca4:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800eca6:	2003      	movs	r0, #3
 800eca8:	f000 f970 	bl	800ef8c <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800ecac:	f001 fd78 	bl	80107a0 <HAL_RCC_GetSysClockFreq>
 800ecb0:	4602      	mov	r2, r0
 800ecb2:	4b15      	ldr	r3, [pc, #84]	; (800ed08 <HAL_Init+0x68>)
 800ecb4:	699b      	ldr	r3, [r3, #24]
 800ecb6:	0a1b      	lsrs	r3, r3, #8
 800ecb8:	f003 030f 	and.w	r3, r3, #15
 800ecbc:	4913      	ldr	r1, [pc, #76]	; (800ed0c <HAL_Init+0x6c>)
 800ecbe:	5ccb      	ldrb	r3, [r1, r3]
 800ecc0:	f003 031f 	and.w	r3, r3, #31
 800ecc4:	fa22 f303 	lsr.w	r3, r2, r3
 800ecc8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800ecca:	4b0f      	ldr	r3, [pc, #60]	; (800ed08 <HAL_Init+0x68>)
 800eccc:	699b      	ldr	r3, [r3, #24]
 800ecce:	f003 030f 	and.w	r3, r3, #15
 800ecd2:	4a0e      	ldr	r2, [pc, #56]	; (800ed0c <HAL_Init+0x6c>)
 800ecd4:	5cd3      	ldrb	r3, [r2, r3]
 800ecd6:	f003 031f 	and.w	r3, r3, #31
 800ecda:	687a      	ldr	r2, [r7, #4]
 800ecdc:	fa22 f303 	lsr.w	r3, r2, r3
 800ece0:	4a0b      	ldr	r2, [pc, #44]	; (800ed10 <HAL_Init+0x70>)
 800ece2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800ece4:	4a0b      	ldr	r2, [pc, #44]	; (800ed14 <HAL_Init+0x74>)
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800ecea:	2000      	movs	r0, #0
 800ecec:	f000 f814 	bl	800ed18 <HAL_InitTick>
 800ecf0:	4603      	mov	r3, r0
 800ecf2:	2b00      	cmp	r3, #0
 800ecf4:	d001      	beq.n	800ecfa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800ecf6:	2301      	movs	r3, #1
 800ecf8:	e002      	b.n	800ed00 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 800ecfa:	f7ff fcaf 	bl	800e65c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800ecfe:	2300      	movs	r3, #0
}
 800ed00:	4618      	mov	r0, r3
 800ed02:	3708      	adds	r7, #8
 800ed04:	46bd      	mov	sp, r7
 800ed06:	bd80      	pop	{r7, pc}
 800ed08:	58024400 	.word	0x58024400
 800ed0c:	08018150 	.word	0x08018150
 800ed10:	240002ac 	.word	0x240002ac
 800ed14:	240002a8 	.word	0x240002a8

0800ed18 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800ed18:	b580      	push	{r7, lr}
 800ed1a:	b082      	sub	sp, #8
 800ed1c:	af00      	add	r7, sp, #0
 800ed1e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 800ed20:	4b15      	ldr	r3, [pc, #84]	; (800ed78 <HAL_InitTick+0x60>)
 800ed22:	781b      	ldrb	r3, [r3, #0]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d101      	bne.n	800ed2c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 800ed28:	2301      	movs	r3, #1
 800ed2a:	e021      	b.n	800ed70 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800ed2c:	4b13      	ldr	r3, [pc, #76]	; (800ed7c <HAL_InitTick+0x64>)
 800ed2e:	681a      	ldr	r2, [r3, #0]
 800ed30:	4b11      	ldr	r3, [pc, #68]	; (800ed78 <HAL_InitTick+0x60>)
 800ed32:	781b      	ldrb	r3, [r3, #0]
 800ed34:	4619      	mov	r1, r3
 800ed36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800ed3a:	fbb3 f3f1 	udiv	r3, r3, r1
 800ed3e:	fbb2 f3f3 	udiv	r3, r2, r3
 800ed42:	4618      	mov	r0, r3
 800ed44:	f000 f955 	bl	800eff2 <HAL_SYSTICK_Config>
 800ed48:	4603      	mov	r3, r0
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d001      	beq.n	800ed52 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800ed4e:	2301      	movs	r3, #1
 800ed50:	e00e      	b.n	800ed70 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	2b0f      	cmp	r3, #15
 800ed56:	d80a      	bhi.n	800ed6e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800ed58:	2200      	movs	r2, #0
 800ed5a:	6879      	ldr	r1, [r7, #4]
 800ed5c:	f04f 30ff 	mov.w	r0, #4294967295
 800ed60:	f000 f91f 	bl	800efa2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800ed64:	4a06      	ldr	r2, [pc, #24]	; (800ed80 <HAL_InitTick+0x68>)
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800ed6a:	2300      	movs	r3, #0
 800ed6c:	e000      	b.n	800ed70 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800ed6e:	2301      	movs	r3, #1
}
 800ed70:	4618      	mov	r0, r3
 800ed72:	3708      	adds	r7, #8
 800ed74:	46bd      	mov	sp, r7
 800ed76:	bd80      	pop	{r7, pc}
 800ed78:	240002b4 	.word	0x240002b4
 800ed7c:	240002a8 	.word	0x240002a8
 800ed80:	240002b0 	.word	0x240002b0

0800ed84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800ed84:	b480      	push	{r7}
 800ed86:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800ed88:	4b06      	ldr	r3, [pc, #24]	; (800eda4 <HAL_IncTick+0x20>)
 800ed8a:	781b      	ldrb	r3, [r3, #0]
 800ed8c:	461a      	mov	r2, r3
 800ed8e:	4b06      	ldr	r3, [pc, #24]	; (800eda8 <HAL_IncTick+0x24>)
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	4413      	add	r3, r2
 800ed94:	4a04      	ldr	r2, [pc, #16]	; (800eda8 <HAL_IncTick+0x24>)
 800ed96:	6013      	str	r3, [r2, #0]
}
 800ed98:	bf00      	nop
 800ed9a:	46bd      	mov	sp, r7
 800ed9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eda0:	4770      	bx	lr
 800eda2:	bf00      	nop
 800eda4:	240002b4 	.word	0x240002b4
 800eda8:	2400364c 	.word	0x2400364c

0800edac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800edac:	b480      	push	{r7}
 800edae:	af00      	add	r7, sp, #0
  return uwTick;
 800edb0:	4b03      	ldr	r3, [pc, #12]	; (800edc0 <HAL_GetTick+0x14>)
 800edb2:	681b      	ldr	r3, [r3, #0]
}
 800edb4:	4618      	mov	r0, r3
 800edb6:	46bd      	mov	sp, r7
 800edb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800edbc:	4770      	bx	lr
 800edbe:	bf00      	nop
 800edc0:	2400364c 	.word	0x2400364c

0800edc4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800edc4:	b480      	push	{r7}
 800edc6:	b083      	sub	sp, #12
 800edc8:	af00      	add	r7, sp, #0
 800edca:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 800edcc:	4b06      	ldr	r3, [pc, #24]	; (800ede8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800edce:	685b      	ldr	r3, [r3, #4]
 800edd0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800edd4:	4904      	ldr	r1, [pc, #16]	; (800ede8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	4313      	orrs	r3, r2
 800edda:	604b      	str	r3, [r1, #4]
}
 800eddc:	bf00      	nop
 800edde:	370c      	adds	r7, #12
 800ede0:	46bd      	mov	sp, r7
 800ede2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ede6:	4770      	bx	lr
 800ede8:	58000400 	.word	0x58000400

0800edec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800edec:	b480      	push	{r7}
 800edee:	b085      	sub	sp, #20
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800edf4:	687b      	ldr	r3, [r7, #4]
 800edf6:	f003 0307 	and.w	r3, r3, #7
 800edfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800edfc:	4b0b      	ldr	r3, [pc, #44]	; (800ee2c <__NVIC_SetPriorityGrouping+0x40>)
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800ee02:	68ba      	ldr	r2, [r7, #8]
 800ee04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800ee08:	4013      	ands	r3, r2
 800ee0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800ee0c:	68fb      	ldr	r3, [r7, #12]
 800ee0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800ee14:	4b06      	ldr	r3, [pc, #24]	; (800ee30 <__NVIC_SetPriorityGrouping+0x44>)
 800ee16:	4313      	orrs	r3, r2
 800ee18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800ee1a:	4a04      	ldr	r2, [pc, #16]	; (800ee2c <__NVIC_SetPriorityGrouping+0x40>)
 800ee1c:	68bb      	ldr	r3, [r7, #8]
 800ee1e:	60d3      	str	r3, [r2, #12]
}
 800ee20:	bf00      	nop
 800ee22:	3714      	adds	r7, #20
 800ee24:	46bd      	mov	sp, r7
 800ee26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee2a:	4770      	bx	lr
 800ee2c:	e000ed00 	.word	0xe000ed00
 800ee30:	05fa0000 	.word	0x05fa0000

0800ee34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800ee34:	b480      	push	{r7}
 800ee36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800ee38:	4b04      	ldr	r3, [pc, #16]	; (800ee4c <__NVIC_GetPriorityGrouping+0x18>)
 800ee3a:	68db      	ldr	r3, [r3, #12]
 800ee3c:	0a1b      	lsrs	r3, r3, #8
 800ee3e:	f003 0307 	and.w	r3, r3, #7
}
 800ee42:	4618      	mov	r0, r3
 800ee44:	46bd      	mov	sp, r7
 800ee46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee4a:	4770      	bx	lr
 800ee4c:	e000ed00 	.word	0xe000ed00

0800ee50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800ee50:	b480      	push	{r7}
 800ee52:	b083      	sub	sp, #12
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	4603      	mov	r3, r0
 800ee58:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ee5a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	db0b      	blt.n	800ee7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800ee62:	88fb      	ldrh	r3, [r7, #6]
 800ee64:	f003 021f 	and.w	r2, r3, #31
 800ee68:	4907      	ldr	r1, [pc, #28]	; (800ee88 <__NVIC_EnableIRQ+0x38>)
 800ee6a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee6e:	095b      	lsrs	r3, r3, #5
 800ee70:	2001      	movs	r0, #1
 800ee72:	fa00 f202 	lsl.w	r2, r0, r2
 800ee76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800ee7a:	bf00      	nop
 800ee7c:	370c      	adds	r7, #12
 800ee7e:	46bd      	mov	sp, r7
 800ee80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee84:	4770      	bx	lr
 800ee86:	bf00      	nop
 800ee88:	e000e100 	.word	0xe000e100

0800ee8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ee8c:	b480      	push	{r7}
 800ee8e:	b083      	sub	sp, #12
 800ee90:	af00      	add	r7, sp, #0
 800ee92:	4603      	mov	r3, r0
 800ee94:	6039      	str	r1, [r7, #0]
 800ee96:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800ee98:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800ee9c:	2b00      	cmp	r3, #0
 800ee9e:	db0a      	blt.n	800eeb6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eea0:	683b      	ldr	r3, [r7, #0]
 800eea2:	b2da      	uxtb	r2, r3
 800eea4:	490c      	ldr	r1, [pc, #48]	; (800eed8 <__NVIC_SetPriority+0x4c>)
 800eea6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800eeaa:	0112      	lsls	r2, r2, #4
 800eeac:	b2d2      	uxtb	r2, r2
 800eeae:	440b      	add	r3, r1
 800eeb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800eeb4:	e00a      	b.n	800eecc <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800eeb6:	683b      	ldr	r3, [r7, #0]
 800eeb8:	b2da      	uxtb	r2, r3
 800eeba:	4908      	ldr	r1, [pc, #32]	; (800eedc <__NVIC_SetPriority+0x50>)
 800eebc:	88fb      	ldrh	r3, [r7, #6]
 800eebe:	f003 030f 	and.w	r3, r3, #15
 800eec2:	3b04      	subs	r3, #4
 800eec4:	0112      	lsls	r2, r2, #4
 800eec6:	b2d2      	uxtb	r2, r2
 800eec8:	440b      	add	r3, r1
 800eeca:	761a      	strb	r2, [r3, #24]
}
 800eecc:	bf00      	nop
 800eece:	370c      	adds	r7, #12
 800eed0:	46bd      	mov	sp, r7
 800eed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eed6:	4770      	bx	lr
 800eed8:	e000e100 	.word	0xe000e100
 800eedc:	e000ed00 	.word	0xe000ed00

0800eee0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800eee0:	b480      	push	{r7}
 800eee2:	b089      	sub	sp, #36	; 0x24
 800eee4:	af00      	add	r7, sp, #0
 800eee6:	60f8      	str	r0, [r7, #12]
 800eee8:	60b9      	str	r1, [r7, #8]
 800eeea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800eeec:	68fb      	ldr	r3, [r7, #12]
 800eeee:	f003 0307 	and.w	r3, r3, #7
 800eef2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800eef4:	69fb      	ldr	r3, [r7, #28]
 800eef6:	f1c3 0307 	rsb	r3, r3, #7
 800eefa:	2b04      	cmp	r3, #4
 800eefc:	bf28      	it	cs
 800eefe:	2304      	movcs	r3, #4
 800ef00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800ef02:	69fb      	ldr	r3, [r7, #28]
 800ef04:	3304      	adds	r3, #4
 800ef06:	2b06      	cmp	r3, #6
 800ef08:	d902      	bls.n	800ef10 <NVIC_EncodePriority+0x30>
 800ef0a:	69fb      	ldr	r3, [r7, #28]
 800ef0c:	3b03      	subs	r3, #3
 800ef0e:	e000      	b.n	800ef12 <NVIC_EncodePriority+0x32>
 800ef10:	2300      	movs	r3, #0
 800ef12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef14:	f04f 32ff 	mov.w	r2, #4294967295
 800ef18:	69bb      	ldr	r3, [r7, #24]
 800ef1a:	fa02 f303 	lsl.w	r3, r2, r3
 800ef1e:	43da      	mvns	r2, r3
 800ef20:	68bb      	ldr	r3, [r7, #8]
 800ef22:	401a      	ands	r2, r3
 800ef24:	697b      	ldr	r3, [r7, #20]
 800ef26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800ef28:	f04f 31ff 	mov.w	r1, #4294967295
 800ef2c:	697b      	ldr	r3, [r7, #20]
 800ef2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ef32:	43d9      	mvns	r1, r3
 800ef34:	687b      	ldr	r3, [r7, #4]
 800ef36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800ef38:	4313      	orrs	r3, r2
         );
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3724      	adds	r7, #36	; 0x24
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef44:	4770      	bx	lr
	...

0800ef48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800ef48:	b580      	push	{r7, lr}
 800ef4a:	b082      	sub	sp, #8
 800ef4c:	af00      	add	r7, sp, #0
 800ef4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800ef50:	687b      	ldr	r3, [r7, #4]
 800ef52:	3b01      	subs	r3, #1
 800ef54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800ef58:	d301      	bcc.n	800ef5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800ef5a:	2301      	movs	r3, #1
 800ef5c:	e00f      	b.n	800ef7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800ef5e:	4a0a      	ldr	r2, [pc, #40]	; (800ef88 <SysTick_Config+0x40>)
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	3b01      	subs	r3, #1
 800ef64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800ef66:	210f      	movs	r1, #15
 800ef68:	f04f 30ff 	mov.w	r0, #4294967295
 800ef6c:	f7ff ff8e 	bl	800ee8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800ef70:	4b05      	ldr	r3, [pc, #20]	; (800ef88 <SysTick_Config+0x40>)
 800ef72:	2200      	movs	r2, #0
 800ef74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800ef76:	4b04      	ldr	r3, [pc, #16]	; (800ef88 <SysTick_Config+0x40>)
 800ef78:	2207      	movs	r2, #7
 800ef7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800ef7c:	2300      	movs	r3, #0
}
 800ef7e:	4618      	mov	r0, r3
 800ef80:	3708      	adds	r7, #8
 800ef82:	46bd      	mov	sp, r7
 800ef84:	bd80      	pop	{r7, pc}
 800ef86:	bf00      	nop
 800ef88:	e000e010 	.word	0xe000e010

0800ef8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800ef8c:	b580      	push	{r7, lr}
 800ef8e:	b082      	sub	sp, #8
 800ef90:	af00      	add	r7, sp, #0
 800ef92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800ef94:	6878      	ldr	r0, [r7, #4]
 800ef96:	f7ff ff29 	bl	800edec <__NVIC_SetPriorityGrouping>
}
 800ef9a:	bf00      	nop
 800ef9c:	3708      	adds	r7, #8
 800ef9e:	46bd      	mov	sp, r7
 800efa0:	bd80      	pop	{r7, pc}

0800efa2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800efa2:	b580      	push	{r7, lr}
 800efa4:	b086      	sub	sp, #24
 800efa6:	af00      	add	r7, sp, #0
 800efa8:	4603      	mov	r3, r0
 800efaa:	60b9      	str	r1, [r7, #8]
 800efac:	607a      	str	r2, [r7, #4]
 800efae:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800efb0:	f7ff ff40 	bl	800ee34 <__NVIC_GetPriorityGrouping>
 800efb4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800efb6:	687a      	ldr	r2, [r7, #4]
 800efb8:	68b9      	ldr	r1, [r7, #8]
 800efba:	6978      	ldr	r0, [r7, #20]
 800efbc:	f7ff ff90 	bl	800eee0 <NVIC_EncodePriority>
 800efc0:	4602      	mov	r2, r0
 800efc2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800efc6:	4611      	mov	r1, r2
 800efc8:	4618      	mov	r0, r3
 800efca:	f7ff ff5f 	bl	800ee8c <__NVIC_SetPriority>
}
 800efce:	bf00      	nop
 800efd0:	3718      	adds	r7, #24
 800efd2:	46bd      	mov	sp, r7
 800efd4:	bd80      	pop	{r7, pc}

0800efd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800efd6:	b580      	push	{r7, lr}
 800efd8:	b082      	sub	sp, #8
 800efda:	af00      	add	r7, sp, #0
 800efdc:	4603      	mov	r3, r0
 800efde:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800efe0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800efe4:	4618      	mov	r0, r3
 800efe6:	f7ff ff33 	bl	800ee50 <__NVIC_EnableIRQ>
}
 800efea:	bf00      	nop
 800efec:	3708      	adds	r7, #8
 800efee:	46bd      	mov	sp, r7
 800eff0:	bd80      	pop	{r7, pc}

0800eff2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800eff2:	b580      	push	{r7, lr}
 800eff4:	b082      	sub	sp, #8
 800eff6:	af00      	add	r7, sp, #0
 800eff8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800effa:	6878      	ldr	r0, [r7, #4]
 800effc:	f7ff ffa4 	bl	800ef48 <SysTick_Config>
 800f000:	4603      	mov	r3, r0
}
 800f002:	4618      	mov	r0, r3
 800f004:	3708      	adds	r7, #8
 800f006:	46bd      	mov	sp, r7
 800f008:	bd80      	pop	{r7, pc}
	...

0800f00c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800f00c:	b580      	push	{r7, lr}
 800f00e:	b084      	sub	sp, #16
 800f010:	af00      	add	r7, sp, #0
 800f012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	2b00      	cmp	r3, #0
 800f018:	d101      	bne.n	800f01e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800f01a:	2301      	movs	r3, #1
 800f01c:	e0cf      	b.n	800f1be <HAL_ETH_Init+0x1b2>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800f01e:	687b      	ldr	r3, [r7, #4]
 800f020:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f024:	2b00      	cmp	r3, #0
 800f026:	d106      	bne.n	800f036 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800f028:	687b      	ldr	r3, [r7, #4]
 800f02a:	2223      	movs	r2, #35	; 0x23
 800f02c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 800f030:	6878      	ldr	r0, [r7, #4]
 800f032:	f7ff fb2d 	bl	800e690 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f036:	4b64      	ldr	r3, [pc, #400]	; (800f1c8 <HAL_ETH_Init+0x1bc>)
 800f038:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f03c:	4a62      	ldr	r2, [pc, #392]	; (800f1c8 <HAL_ETH_Init+0x1bc>)
 800f03e:	f043 0302 	orr.w	r3, r3, #2
 800f042:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f046:	4b60      	ldr	r3, [pc, #384]	; (800f1c8 <HAL_ETH_Init+0x1bc>)
 800f048:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f04c:	f003 0302 	and.w	r3, r3, #2
 800f050:	60bb      	str	r3, [r7, #8]
 800f052:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800f054:	687b      	ldr	r3, [r7, #4]
 800f056:	7a1b      	ldrb	r3, [r3, #8]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	d103      	bne.n	800f064 <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 800f05c:	2000      	movs	r0, #0
 800f05e:	f7ff feb1 	bl	800edc4 <HAL_SYSCFG_ETHInterfaceSelect>
 800f062:	e003      	b.n	800f06c <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800f064:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 800f068:	f7ff feac 	bl	800edc4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 800f06c:	4b57      	ldr	r3, [pc, #348]	; (800f1cc <HAL_ETH_Init+0x1c0>)
 800f06e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 800f070:	687b      	ldr	r3, [r7, #4]
 800f072:	681b      	ldr	r3, [r3, #0]
 800f074:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	687a      	ldr	r2, [r7, #4]
 800f07c:	6812      	ldr	r2, [r2, #0]
 800f07e:	f043 0301 	orr.w	r3, r3, #1
 800f082:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f086:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800f088:	f7ff fe90 	bl	800edac <HAL_GetTick>
 800f08c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800f08e:	e011      	b.n	800f0b4 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800f090:	f7ff fe8c 	bl	800edac <HAL_GetTick>
 800f094:	4602      	mov	r2, r0
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	1ad3      	subs	r3, r2, r3
 800f09a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800f09e:	d909      	bls.n	800f0b4 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800f0a0:	687b      	ldr	r3, [r7, #4]
 800f0a2:	2204      	movs	r2, #4
 800f0a4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800f0a8:	687b      	ldr	r3, [r7, #4]
 800f0aa:	22e0      	movs	r2, #224	; 0xe0
 800f0ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e084      	b.n	800f1be <HAL_ETH_Init+0x1b2>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	681b      	ldr	r3, [r3, #0]
 800f0b8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0bc:	681b      	ldr	r3, [r3, #0]
 800f0be:	f003 0301 	and.w	r3, r3, #1
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d1e4      	bne.n	800f090 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800f0c6:	6878      	ldr	r0, [r7, #4]
 800f0c8:	f000 f886 	bl	800f1d8 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 800f0cc:	f001 fce2 	bl	8010a94 <HAL_RCC_GetHCLKFreq>
 800f0d0:	4603      	mov	r3, r0
 800f0d2:	4a3f      	ldr	r2, [pc, #252]	; (800f1d0 <HAL_ETH_Init+0x1c4>)
 800f0d4:	fba2 2303 	umull	r2, r3, r2, r3
 800f0d8:	0c9a      	lsrs	r2, r3, #18
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	681b      	ldr	r3, [r3, #0]
 800f0de:	3a01      	subs	r2, #1
 800f0e0:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800f0e4:	6878      	ldr	r0, [r7, #4]
 800f0e6:	f000 fa71 	bl	800f5cc <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	681b      	ldr	r3, [r3, #0]
 800f0ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f0f2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 800f0f6:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 800f0fa:	687a      	ldr	r2, [r7, #4]
 800f0fc:	6812      	ldr	r2, [r2, #0]
 800f0fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800f102:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f106:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	695b      	ldr	r3, [r3, #20]
 800f10e:	f003 0303 	and.w	r3, r3, #3
 800f112:	2b00      	cmp	r3, #0
 800f114:	d009      	beq.n	800f12a <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2201      	movs	r2, #1
 800f11a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 800f11e:	687b      	ldr	r3, [r7, #4]
 800f120:	22e0      	movs	r2, #224	; 0xe0
 800f122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 800f126:	2301      	movs	r3, #1
 800f128:	e049      	b.n	800f1be <HAL_ETH_Init+0x1b2>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 800f12a:	687b      	ldr	r3, [r7, #4]
 800f12c:	681b      	ldr	r3, [r3, #0]
 800f12e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f132:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800f136:	4b27      	ldr	r3, [pc, #156]	; (800f1d4 <HAL_ETH_Init+0x1c8>)
 800f138:	4013      	ands	r3, r2
 800f13a:	687a      	ldr	r2, [r7, #4]
 800f13c:	6952      	ldr	r2, [r2, #20]
 800f13e:	0051      	lsls	r1, r2, #1
 800f140:	687a      	ldr	r2, [r7, #4]
 800f142:	6812      	ldr	r2, [r2, #0]
 800f144:	430b      	orrs	r3, r1
 800f146:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f14a:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800f14e:	6878      	ldr	r0, [r7, #4]
 800f150:	f000 fad9 	bl	800f706 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800f154:	6878      	ldr	r0, [r7, #4]
 800f156:	f000 fb1f 	bl	800f798 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 800f15a:	687b      	ldr	r3, [r7, #4]
 800f15c:	685b      	ldr	r3, [r3, #4]
 800f15e:	3305      	adds	r3, #5
 800f160:	781b      	ldrb	r3, [r3, #0]
 800f162:	021a      	lsls	r2, r3, #8
 800f164:	687b      	ldr	r3, [r7, #4]
 800f166:	685b      	ldr	r3, [r3, #4]
 800f168:	3304      	adds	r3, #4
 800f16a:	781b      	ldrb	r3, [r3, #0]
 800f16c:	4619      	mov	r1, r3
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	430a      	orrs	r2, r1
 800f174:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800f178:	687b      	ldr	r3, [r7, #4]
 800f17a:	685b      	ldr	r3, [r3, #4]
 800f17c:	3303      	adds	r3, #3
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	061a      	lsls	r2, r3, #24
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	685b      	ldr	r3, [r3, #4]
 800f186:	3302      	adds	r3, #2
 800f188:	781b      	ldrb	r3, [r3, #0]
 800f18a:	041b      	lsls	r3, r3, #16
 800f18c:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	685b      	ldr	r3, [r3, #4]
 800f192:	3301      	adds	r3, #1
 800f194:	781b      	ldrb	r3, [r3, #0]
 800f196:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800f198:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	685b      	ldr	r3, [r3, #4]
 800f19e:	781b      	ldrb	r3, [r3, #0]
 800f1a0:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800f1a6:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800f1a8:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800f1ac:	687b      	ldr	r3, [r7, #4]
 800f1ae:	2200      	movs	r2, #0
 800f1b0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2210      	movs	r2, #16
 800f1b8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800f1bc:	2300      	movs	r3, #0
}
 800f1be:	4618      	mov	r0, r3
 800f1c0:	3710      	adds	r7, #16
 800f1c2:	46bd      	mov	sp, r7
 800f1c4:	bd80      	pop	{r7, pc}
 800f1c6:	bf00      	nop
 800f1c8:	58024400 	.word	0x58024400
 800f1cc:	58000400 	.word	0x58000400
 800f1d0:	431bde83 	.word	0x431bde83
 800f1d4:	ffff8001 	.word	0xffff8001

0800f1d8 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 800f1d8:	b580      	push	{r7, lr}
 800f1da:	b084      	sub	sp, #16
 800f1dc:	af00      	add	r7, sp, #0
 800f1de:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	681b      	ldr	r3, [r3, #0]
 800f1e4:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800f1e8:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800f1ea:	68fb      	ldr	r3, [r7, #12]
 800f1ec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800f1f0:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800f1f2:	f001 fc4f 	bl	8010a94 <HAL_RCC_GetHCLKFreq>
 800f1f6:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 800f1f8:	68bb      	ldr	r3, [r7, #8]
 800f1fa:	4a1e      	ldr	r2, [pc, #120]	; (800f274 <HAL_ETH_SetMDIOClockRange+0x9c>)
 800f1fc:	4293      	cmp	r3, r2
 800f1fe:	d908      	bls.n	800f212 <HAL_ETH_SetMDIOClockRange+0x3a>
 800f200:	68bb      	ldr	r3, [r7, #8]
 800f202:	4a1d      	ldr	r2, [pc, #116]	; (800f278 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800f204:	4293      	cmp	r3, r2
 800f206:	d804      	bhi.n	800f212 <HAL_ETH_SetMDIOClockRange+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800f20e:	60fb      	str	r3, [r7, #12]
 800f210:	e027      	b.n	800f262 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 800f212:	68bb      	ldr	r3, [r7, #8]
 800f214:	4a18      	ldr	r2, [pc, #96]	; (800f278 <HAL_ETH_SetMDIOClockRange+0xa0>)
 800f216:	4293      	cmp	r3, r2
 800f218:	d908      	bls.n	800f22c <HAL_ETH_SetMDIOClockRange+0x54>
 800f21a:	68bb      	ldr	r3, [r7, #8]
 800f21c:	4a17      	ldr	r2, [pc, #92]	; (800f27c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800f21e:	4293      	cmp	r3, r2
 800f220:	d204      	bcs.n	800f22c <HAL_ETH_SetMDIOClockRange+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 800f228:	60fb      	str	r3, [r7, #12]
 800f22a:	e01a      	b.n	800f262 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 800f22c:	68bb      	ldr	r3, [r7, #8]
 800f22e:	4a13      	ldr	r2, [pc, #76]	; (800f27c <HAL_ETH_SetMDIOClockRange+0xa4>)
 800f230:	4293      	cmp	r3, r2
 800f232:	d303      	bcc.n	800f23c <HAL_ETH_SetMDIOClockRange+0x64>
 800f234:	68bb      	ldr	r3, [r7, #8]
 800f236:	4a12      	ldr	r2, [pc, #72]	; (800f280 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800f238:	4293      	cmp	r3, r2
 800f23a:	d911      	bls.n	800f260 <HAL_ETH_SetMDIOClockRange+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 800f23c:	68bb      	ldr	r3, [r7, #8]
 800f23e:	4a10      	ldr	r2, [pc, #64]	; (800f280 <HAL_ETH_SetMDIOClockRange+0xa8>)
 800f240:	4293      	cmp	r3, r2
 800f242:	d908      	bls.n	800f256 <HAL_ETH_SetMDIOClockRange+0x7e>
 800f244:	68bb      	ldr	r3, [r7, #8]
 800f246:	4a0f      	ldr	r2, [pc, #60]	; (800f284 <HAL_ETH_SetMDIOClockRange+0xac>)
 800f248:	4293      	cmp	r3, r2
 800f24a:	d804      	bhi.n	800f256 <HAL_ETH_SetMDIOClockRange+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 800f24c:	68fb      	ldr	r3, [r7, #12]
 800f24e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800f252:	60fb      	str	r3, [r7, #12]
 800f254:	e005      	b.n	800f262 <HAL_ETH_SetMDIOClockRange+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 800f256:	68fb      	ldr	r3, [r7, #12]
 800f258:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f25c:	60fb      	str	r3, [r7, #12]
 800f25e:	e000      	b.n	800f262 <HAL_ETH_SetMDIOClockRange+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 800f260:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 800f262:	687b      	ldr	r3, [r7, #4]
 800f264:	681b      	ldr	r3, [r3, #0]
 800f266:	68fa      	ldr	r2, [r7, #12]
 800f268:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 800f26c:	bf00      	nop
 800f26e:	3710      	adds	r7, #16
 800f270:	46bd      	mov	sp, r7
 800f272:	bd80      	pop	{r7, pc}
 800f274:	01312cff 	.word	0x01312cff
 800f278:	02160ebf 	.word	0x02160ebf
 800f27c:	03938700 	.word	0x03938700
 800f280:	05f5e0ff 	.word	0x05f5e0ff
 800f284:	08f0d17f 	.word	0x08f0d17f

0800f288 <ETH_SetMACConfig>:
  * @{
  */


static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800f288:	b480      	push	{r7}
 800f28a:	b085      	sub	sp, #20
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	6078      	str	r0, [r7, #4]
 800f290:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800f292:	683b      	ldr	r3, [r7, #0]
 800f294:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800f296:	683b      	ldr	r3, [r7, #0]
 800f298:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 800f29a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800f29c:	683b      	ldr	r3, [r7, #0]
 800f29e:	791b      	ldrb	r3, [r3, #4]
 800f2a0:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800f2a2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	7b1b      	ldrb	r3, [r3, #12]
 800f2a8:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 800f2aa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	7b5b      	ldrb	r3, [r3, #13]
 800f2b0:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800f2b2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	7b9b      	ldrb	r3, [r3, #14]
 800f2b8:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 800f2ba:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800f2bc:	683b      	ldr	r3, [r7, #0]
 800f2be:	7bdb      	ldrb	r3, [r3, #15]
 800f2c0:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800f2c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800f2c4:	683a      	ldr	r2, [r7, #0]
 800f2c6:	7c12      	ldrb	r2, [r2, #16]
 800f2c8:	2a00      	cmp	r2, #0
 800f2ca:	d102      	bne.n	800f2d2 <ETH_SetMACConfig+0x4a>
 800f2cc:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800f2d0:	e000      	b.n	800f2d4 <ETH_SetMACConfig+0x4c>
 800f2d2:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 800f2d4:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800f2d6:	683a      	ldr	r2, [r7, #0]
 800f2d8:	7c52      	ldrb	r2, [r2, #17]
 800f2da:	2a00      	cmp	r2, #0
 800f2dc:	d102      	bne.n	800f2e4 <ETH_SetMACConfig+0x5c>
 800f2de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800f2e2:	e000      	b.n	800f2e6 <ETH_SetMACConfig+0x5e>
 800f2e4:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800f2e6:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 800f2e8:	683b      	ldr	r3, [r7, #0]
 800f2ea:	7c9b      	ldrb	r3, [r3, #18]
 800f2ec:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800f2ee:	431a      	orrs	r2, r3
               macconf->Speed |
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 800f2f4:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 800f2fa:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 800f2fc:	683b      	ldr	r3, [r7, #0]
 800f2fe:	7f1b      	ldrb	r3, [r3, #28]
 800f300:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 800f302:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800f304:	683b      	ldr	r3, [r7, #0]
 800f306:	7f5b      	ldrb	r3, [r3, #29]
 800f308:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 800f30a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800f30c:	683a      	ldr	r2, [r7, #0]
 800f30e:	7f92      	ldrb	r2, [r2, #30]
 800f310:	2a00      	cmp	r2, #0
 800f312:	d102      	bne.n	800f31a <ETH_SetMACConfig+0x92>
 800f314:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800f318:	e000      	b.n	800f31c <ETH_SetMACConfig+0x94>
 800f31a:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 800f31c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	7fdb      	ldrb	r3, [r3, #31]
 800f322:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 800f324:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800f326:	683a      	ldr	r2, [r7, #0]
 800f328:	f892 2020 	ldrb.w	r2, [r2, #32]
 800f32c:	2a00      	cmp	r2, #0
 800f32e:	d102      	bne.n	800f336 <ETH_SetMACConfig+0xae>
 800f330:	f44f 7280 	mov.w	r2, #256	; 0x100
 800f334:	e000      	b.n	800f338 <ETH_SetMACConfig+0xb0>
 800f336:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 800f338:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 800f33a:	683b      	ldr	r3, [r7, #0]
 800f33c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 800f33e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 800f340:	683b      	ldr	r3, [r7, #0]
 800f342:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f346:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 800f348:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 800f34a:	683b      	ldr	r3, [r7, #0]
 800f34c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 800f34e:	4313      	orrs	r3, r2
 800f350:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	681b      	ldr	r3, [r3, #0]
 800f356:	681a      	ldr	r2, [r3, #0]
 800f358:	4b56      	ldr	r3, [pc, #344]	; (800f4b4 <ETH_SetMACConfig+0x22c>)
 800f35a:	4013      	ands	r3, r2
 800f35c:	687a      	ldr	r2, [r7, #4]
 800f35e:	6812      	ldr	r2, [r2, #0]
 800f360:	68f9      	ldr	r1, [r7, #12]
 800f362:	430b      	orrs	r3, r1
 800f364:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800f366:	683b      	ldr	r3, [r7, #0]
 800f368:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f36a:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800f36c:	683b      	ldr	r3, [r7, #0]
 800f36e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800f372:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800f374:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800f376:	683b      	ldr	r3, [r7, #0]
 800f378:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f37c:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 800f37e:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800f380:	683b      	ldr	r3, [r7, #0]
 800f382:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800f386:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800f388:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 800f38a:	683a      	ldr	r2, [r7, #0]
 800f38c:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 800f390:	2a00      	cmp	r2, #0
 800f392:	d102      	bne.n	800f39a <ETH_SetMACConfig+0x112>
 800f394:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800f398:	e000      	b.n	800f39c <ETH_SetMACConfig+0x114>
 800f39a:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 800f39c:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 800f39e:	683b      	ldr	r3, [r7, #0]
 800f3a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800f3a2:	4313      	orrs	r3, r2
 800f3a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	681b      	ldr	r3, [r3, #0]
 800f3aa:	685a      	ldr	r2, [r3, #4]
 800f3ac:	4b42      	ldr	r3, [pc, #264]	; (800f4b8 <ETH_SetMACConfig+0x230>)
 800f3ae:	4013      	ands	r3, r2
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	6812      	ldr	r2, [r2, #0]
 800f3b4:	68f9      	ldr	r1, [r7, #12]
 800f3b6:	430b      	orrs	r3, r1
 800f3b8:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800f3ba:	683b      	ldr	r3, [r7, #0]
 800f3bc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800f3c0:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800f3c2:	683b      	ldr	r3, [r7, #0]
 800f3c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800f3c6:	4313      	orrs	r3, r2
 800f3c8:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	681b      	ldr	r3, [r3, #0]
 800f3ce:	68da      	ldr	r2, [r3, #12]
 800f3d0:	4b3a      	ldr	r3, [pc, #232]	; (800f4bc <ETH_SetMACConfig+0x234>)
 800f3d2:	4013      	ands	r3, r2
 800f3d4:	687a      	ldr	r2, [r7, #4]
 800f3d6:	6812      	ldr	r2, [r2, #0]
 800f3d8:	68f9      	ldr	r1, [r7, #12]
 800f3da:	430b      	orrs	r3, r1
 800f3dc:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 800f3e4:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800f3e6:	683b      	ldr	r3, [r7, #0]
 800f3e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800f3ea:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800f3f2:	2a00      	cmp	r2, #0
 800f3f4:	d101      	bne.n	800f3fa <ETH_SetMACConfig+0x172>
 800f3f6:	2280      	movs	r2, #128	; 0x80
 800f3f8:	e000      	b.n	800f3fc <ETH_SetMACConfig+0x174>
 800f3fa:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 800f3fc:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800f402:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800f404:	4313      	orrs	r3, r2
 800f406:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800f408:	687b      	ldr	r3, [r7, #4]
 800f40a:	681b      	ldr	r3, [r3, #0]
 800f40c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800f40e:	f64f 730d 	movw	r3, #65293	; 0xff0d
 800f412:	4013      	ands	r3, r2
 800f414:	687a      	ldr	r2, [r7, #4]
 800f416:	6812      	ldr	r2, [r2, #0]
 800f418:	68f9      	ldr	r1, [r7, #12]
 800f41a:	430b      	orrs	r3, r1
 800f41c:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800f41e:	683b      	ldr	r3, [r7, #0]
 800f420:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800f424:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 800f42c:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 800f42e:	4313      	orrs	r3, r2
 800f430:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	681b      	ldr	r3, [r3, #0]
 800f436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800f43a:	f023 0103 	bic.w	r1, r3, #3
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	68fa      	ldr	r2, [r7, #12]
 800f444:	430a      	orrs	r2, r1
 800f446:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	681b      	ldr	r3, [r3, #0]
 800f44e:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800f452:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800f456:	683b      	ldr	r3, [r7, #0]
 800f458:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	681b      	ldr	r3, [r3, #0]
 800f45e:	430a      	orrs	r2, r1
 800f460:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800f464:	683b      	ldr	r3, [r7, #0]
 800f466:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800f468:	683a      	ldr	r2, [r7, #0]
 800f46a:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800f46e:	2a00      	cmp	r2, #0
 800f470:	d101      	bne.n	800f476 <ETH_SetMACConfig+0x1ee>
 800f472:	2240      	movs	r2, #64	; 0x40
 800f474:	e000      	b.n	800f478 <ETH_SetMACConfig+0x1f0>
 800f476:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 800f478:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 800f47a:	683b      	ldr	r3, [r7, #0]
 800f47c:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 800f480:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800f482:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 800f48a:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 800f48c:	4313      	orrs	r3, r2
 800f48e:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 800f490:	687b      	ldr	r3, [r7, #4]
 800f492:	681b      	ldr	r3, [r3, #0]
 800f494:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800f498:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	68fa      	ldr	r2, [r7, #12]
 800f4a2:	430a      	orrs	r2, r1
 800f4a4:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800f4a8:	bf00      	nop
 800f4aa:	3714      	adds	r7, #20
 800f4ac:	46bd      	mov	sp, r7
 800f4ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4b2:	4770      	bx	lr
 800f4b4:	00048083 	.word	0x00048083
 800f4b8:	c0f88000 	.word	0xc0f88000
 800f4bc:	fffffef0 	.word	0xfffffef0

0800f4c0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 800f4c0:	b480      	push	{r7}
 800f4c2:	b085      	sub	sp, #20
 800f4c4:	af00      	add	r7, sp, #0
 800f4c6:	6078      	str	r0, [r7, #4]
 800f4c8:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800f4ca:	687b      	ldr	r3, [r7, #4]
 800f4cc:	681b      	ldr	r3, [r3, #0]
 800f4ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f4d2:	681a      	ldr	r2, [r3, #0]
 800f4d4:	4b38      	ldr	r3, [pc, #224]	; (800f5b8 <ETH_SetDMAConfig+0xf8>)
 800f4d6:	4013      	ands	r3, r2
 800f4d8:	683a      	ldr	r2, [r7, #0]
 800f4da:	6811      	ldr	r1, [r2, #0]
 800f4dc:	687a      	ldr	r2, [r7, #4]
 800f4de:	6812      	ldr	r2, [r2, #0]
 800f4e0:	430b      	orrs	r3, r1
 800f4e2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f4e6:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800f4e8:	683b      	ldr	r3, [r7, #0]
 800f4ea:	791b      	ldrb	r3, [r3, #4]
 800f4ec:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800f4f2:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 800f4f4:	683b      	ldr	r3, [r7, #0]
 800f4f6:	7b1b      	ldrb	r3, [r3, #12]
 800f4f8:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800f4fa:	4313      	orrs	r3, r2
 800f4fc:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f506:	685a      	ldr	r2, [r3, #4]
 800f508:	4b2c      	ldr	r3, [pc, #176]	; (800f5bc <ETH_SetDMAConfig+0xfc>)
 800f50a:	4013      	ands	r3, r2
 800f50c:	687a      	ldr	r2, [r7, #4]
 800f50e:	6812      	ldr	r2, [r2, #0]
 800f510:	68f9      	ldr	r1, [r7, #12]
 800f512:	430b      	orrs	r3, r1
 800f514:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f518:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800f51a:	683b      	ldr	r3, [r7, #0]
 800f51c:	7b5b      	ldrb	r3, [r3, #13]
 800f51e:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 800f520:	683b      	ldr	r3, [r7, #0]
 800f522:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800f524:	4313      	orrs	r3, r2
 800f526:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	681b      	ldr	r3, [r3, #0]
 800f52c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f530:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800f534:	4b22      	ldr	r3, [pc, #136]	; (800f5c0 <ETH_SetDMAConfig+0x100>)
 800f536:	4013      	ands	r3, r2
 800f538:	687a      	ldr	r2, [r7, #4]
 800f53a:	6812      	ldr	r2, [r2, #0]
 800f53c:	68f9      	ldr	r1, [r7, #12]
 800f53e:	430b      	orrs	r3, r1
 800f540:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f544:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 800f548:	683b      	ldr	r3, [r7, #0]
 800f54a:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 800f54c:	683b      	ldr	r3, [r7, #0]
 800f54e:	7d1b      	ldrb	r3, [r3, #20]
 800f550:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800f552:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800f554:	683b      	ldr	r3, [r7, #0]
 800f556:	7f5b      	ldrb	r3, [r3, #29]
 800f558:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 800f55a:	4313      	orrs	r3, r2
 800f55c:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f566:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 800f56a:	4b16      	ldr	r3, [pc, #88]	; (800f5c4 <ETH_SetDMAConfig+0x104>)
 800f56c:	4013      	ands	r3, r2
 800f56e:	687a      	ldr	r2, [r7, #4]
 800f570:	6812      	ldr	r2, [r2, #0]
 800f572:	68f9      	ldr	r1, [r7, #12]
 800f574:	430b      	orrs	r3, r1
 800f576:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f57a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800f57e:	683b      	ldr	r3, [r7, #0]
 800f580:	7f1b      	ldrb	r3, [r3, #28]
 800f582:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800f584:	683b      	ldr	r3, [r7, #0]
 800f586:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 800f588:	4313      	orrs	r3, r2
 800f58a:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 800f58c:	687b      	ldr	r3, [r7, #4]
 800f58e:	681b      	ldr	r3, [r3, #0]
 800f590:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f594:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 800f598:	4b0b      	ldr	r3, [pc, #44]	; (800f5c8 <ETH_SetDMAConfig+0x108>)
 800f59a:	4013      	ands	r3, r2
 800f59c:	687a      	ldr	r2, [r7, #4]
 800f59e:	6812      	ldr	r2, [r2, #0]
 800f5a0:	68f9      	ldr	r1, [r7, #12]
 800f5a2:	430b      	orrs	r3, r1
 800f5a4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800f5a8:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 800f5ac:	bf00      	nop
 800f5ae:	3714      	adds	r7, #20
 800f5b0:	46bd      	mov	sp, r7
 800f5b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b6:	4770      	bx	lr
 800f5b8:	ffff87fd 	.word	0xffff87fd
 800f5bc:	ffff2ffe 	.word	0xffff2ffe
 800f5c0:	fffec000 	.word	0xfffec000
 800f5c4:	ffc0efef 	.word	0xffc0efef
 800f5c8:	7fc0ffff 	.word	0x7fc0ffff

0800f5cc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 800f5cc:	b580      	push	{r7, lr}
 800f5ce:	b0a4      	sub	sp, #144	; 0x90
 800f5d0:	af00      	add	r7, sp, #0
 800f5d2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 800f5d4:	2301      	movs	r3, #1
 800f5d6:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800f5da:	2300      	movs	r3, #0
 800f5dc:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 800f5de:	2300      	movs	r3, #0
 800f5e0:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800f5ea:	2301      	movs	r3, #1
 800f5ec:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 800f5f0:	2301      	movs	r3, #1
 800f5f2:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800f5f6:	2301      	movs	r3, #1
 800f5f8:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 800f5fc:	2300      	movs	r3, #0
 800f5fe:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 800f602:	2301      	movs	r3, #1
 800f604:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800f608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f60c:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 800f60e:	2300      	movs	r3, #0
 800f610:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 800f614:	2300      	movs	r3, #0
 800f616:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800f618:	2300      	movs	r3, #0
 800f61a:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 800f61e:	2300      	movs	r3, #0
 800f620:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 800f624:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800f628:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800f62a:	2300      	movs	r3, #0
 800f62c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 800f630:	2300      	movs	r3, #0
 800f632:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800f634:	2301      	movs	r3, #1
 800f636:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 800f63a:	2300      	movs	r3, #0
 800f63c:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 800f640:	2300      	movs	r3, #0
 800f642:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800f646:	2300      	movs	r3, #0
 800f648:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 800f64a:	2300      	movs	r3, #0
 800f64c:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 800f64e:	2300      	movs	r3, #0
 800f650:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800f652:	2300      	movs	r3, #0
 800f654:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800f658:	2300      	movs	r3, #0
 800f65a:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 800f65e:	2301      	movs	r3, #1
 800f660:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800f664:	2320      	movs	r3, #32
 800f666:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 800f66a:	2301      	movs	r3, #1
 800f66c:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 800f670:	2300      	movs	r3, #0
 800f672:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800f676:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 800f67a:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 800f67c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800f680:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800f682:	2300      	movs	r3, #0
 800f684:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 800f688:	2302      	movs	r3, #2
 800f68a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 800f68e:	2300      	movs	r3, #0
 800f690:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800f694:	2300      	movs	r3, #0
 800f696:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800f69a:	2300      	movs	r3, #0
 800f69c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800f6a6:	2300      	movs	r3, #0
 800f6a8:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800f6aa:	2301      	movs	r3, #1
 800f6ac:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800f6b0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800f6b4:	4619      	mov	r1, r3
 800f6b6:	6878      	ldr	r0, [r7, #4]
 800f6b8:	f7ff fde6 	bl	800f288 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800f6bc:	2301      	movs	r3, #1
 800f6be:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800f6c0:	2301      	movs	r3, #1
 800f6c2:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800f6c4:	2300      	movs	r3, #0
 800f6c6:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800f6c8:	2300      	movs	r3, #0
 800f6ca:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 800f6ce:	2300      	movs	r3, #0
 800f6d0:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800f6d6:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f6da:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 800f6dc:	2300      	movs	r3, #0
 800f6de:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800f6e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800f6e4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800f6e6:	2300      	movs	r3, #0
 800f6e8:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 800f6ec:	f44f 7306 	mov.w	r3, #536	; 0x218
 800f6f0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800f6f2:	f107 0308 	add.w	r3, r7, #8
 800f6f6:	4619      	mov	r1, r3
 800f6f8:	6878      	ldr	r0, [r7, #4]
 800f6fa:	f7ff fee1 	bl	800f4c0 <ETH_SetDMAConfig>
}
 800f6fe:	bf00      	nop
 800f700:	3790      	adds	r7, #144	; 0x90
 800f702:	46bd      	mov	sp, r7
 800f704:	bd80      	pop	{r7, pc}

0800f706 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800f706:	b480      	push	{r7}
 800f708:	b085      	sub	sp, #20
 800f70a:	af00      	add	r7, sp, #0
 800f70c:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800f70e:	2300      	movs	r3, #0
 800f710:	60fb      	str	r3, [r7, #12]
 800f712:	e01d      	b.n	800f750 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	68d9      	ldr	r1, [r3, #12]
 800f718:	68fa      	ldr	r2, [r7, #12]
 800f71a:	4613      	mov	r3, r2
 800f71c:	005b      	lsls	r3, r3, #1
 800f71e:	4413      	add	r3, r2
 800f720:	00db      	lsls	r3, r3, #3
 800f722:	440b      	add	r3, r1
 800f724:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800f726:	68bb      	ldr	r3, [r7, #8]
 800f728:	2200      	movs	r2, #0
 800f72a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800f72c:	68bb      	ldr	r3, [r7, #8]
 800f72e:	2200      	movs	r2, #0
 800f730:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800f732:	68bb      	ldr	r3, [r7, #8]
 800f734:	2200      	movs	r2, #0
 800f736:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	2200      	movs	r2, #0
 800f73c:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800f73e:	68b9      	ldr	r1, [r7, #8]
 800f740:	687b      	ldr	r3, [r7, #4]
 800f742:	68fa      	ldr	r2, [r7, #12]
 800f744:	3206      	adds	r2, #6
 800f746:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800f74a:	68fb      	ldr	r3, [r7, #12]
 800f74c:	3301      	adds	r3, #1
 800f74e:	60fb      	str	r3, [r7, #12]
 800f750:	68fb      	ldr	r3, [r7, #12]
 800f752:	2b03      	cmp	r3, #3
 800f754:	d9de      	bls.n	800f714 <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 800f756:	687b      	ldr	r3, [r7, #4]
 800f758:	2200      	movs	r2, #0
 800f75a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 800f75c:	687b      	ldr	r3, [r7, #4]
 800f75e:	681b      	ldr	r3, [r3, #0]
 800f760:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f764:	461a      	mov	r2, r3
 800f766:	2303      	movs	r3, #3
 800f768:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 800f76c:	687b      	ldr	r3, [r7, #4]
 800f76e:	68da      	ldr	r2, [r3, #12]
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681b      	ldr	r3, [r3, #0]
 800f774:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f778:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	68da      	ldr	r2, [r3, #12]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f788:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 800f78c:	bf00      	nop
 800f78e:	3714      	adds	r7, #20
 800f790:	46bd      	mov	sp, r7
 800f792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f796:	4770      	bx	lr

0800f798 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 800f798:	b480      	push	{r7}
 800f79a:	b085      	sub	sp, #20
 800f79c:	af00      	add	r7, sp, #0
 800f79e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800f7a0:	2300      	movs	r3, #0
 800f7a2:	60fb      	str	r3, [r7, #12]
 800f7a4:	e023      	b.n	800f7ee <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 800f7a6:	687b      	ldr	r3, [r7, #4]
 800f7a8:	6919      	ldr	r1, [r3, #16]
 800f7aa:	68fa      	ldr	r2, [r7, #12]
 800f7ac:	4613      	mov	r3, r2
 800f7ae:	005b      	lsls	r3, r3, #1
 800f7b0:	4413      	add	r3, r2
 800f7b2:	00db      	lsls	r3, r3, #3
 800f7b4:	440b      	add	r3, r1
 800f7b6:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800f7b8:	68bb      	ldr	r3, [r7, #8]
 800f7ba:	2200      	movs	r2, #0
 800f7bc:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 800f7be:	68bb      	ldr	r3, [r7, #8]
 800f7c0:	2200      	movs	r2, #0
 800f7c2:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800f7c4:	68bb      	ldr	r3, [r7, #8]
 800f7c6:	2200      	movs	r2, #0
 800f7c8:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800f7ca:	68bb      	ldr	r3, [r7, #8]
 800f7cc:	2200      	movs	r2, #0
 800f7ce:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 800f7d0:	68bb      	ldr	r3, [r7, #8]
 800f7d2:	2200      	movs	r2, #0
 800f7d4:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800f7d6:	68bb      	ldr	r3, [r7, #8]
 800f7d8:	2200      	movs	r2, #0
 800f7da:	615a      	str	r2, [r3, #20]


    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800f7dc:	68b9      	ldr	r1, [r7, #8]
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	68fa      	ldr	r2, [r7, #12]
 800f7e2:	3212      	adds	r2, #18
 800f7e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800f7e8:	68fb      	ldr	r3, [r7, #12]
 800f7ea:	3301      	adds	r3, #1
 800f7ec:	60fb      	str	r3, [r7, #12]
 800f7ee:	68fb      	ldr	r3, [r7, #12]
 800f7f0:	2b03      	cmp	r3, #3
 800f7f2:	d9d8      	bls.n	800f7a6 <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	2200      	movs	r2, #0
 800f7f8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	2200      	movs	r2, #0
 800f7fe:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	2200      	movs	r2, #0
 800f804:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	2200      	movs	r2, #0
 800f80a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	2200      	movs	r2, #0
 800f810:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f81a:	461a      	mov	r2, r3
 800f81c:	2303      	movs	r3, #3
 800f81e:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	691a      	ldr	r2, [r3, #16]
 800f826:	687b      	ldr	r3, [r7, #4]
 800f828:	681b      	ldr	r3, [r3, #0]
 800f82a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f82e:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 800f832:	687b      	ldr	r3, [r7, #4]
 800f834:	691b      	ldr	r3, [r3, #16]
 800f836:	f103 0248 	add.w	r2, r3, #72	; 0x48
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	681b      	ldr	r3, [r3, #0]
 800f83e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800f842:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 800f846:	bf00      	nop
 800f848:	3714      	adds	r7, #20
 800f84a:	46bd      	mov	sp, r7
 800f84c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f850:	4770      	bx	lr
	...

0800f854 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800f854:	b480      	push	{r7}
 800f856:	b089      	sub	sp, #36	; 0x24
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
 800f85c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800f85e:	2300      	movs	r3, #0
 800f860:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800f862:	4b86      	ldr	r3, [pc, #536]	; (800fa7c <HAL_GPIO_Init+0x228>)
 800f864:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800f866:	e18c      	b.n	800fb82 <HAL_GPIO_Init+0x32e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800f868:	683b      	ldr	r3, [r7, #0]
 800f86a:	681a      	ldr	r2, [r3, #0]
 800f86c:	2101      	movs	r1, #1
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	fa01 f303 	lsl.w	r3, r1, r3
 800f874:	4013      	ands	r3, r2
 800f876:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	2b00      	cmp	r3, #0
 800f87c:	f000 817e 	beq.w	800fb7c <HAL_GPIO_Init+0x328>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800f880:	683b      	ldr	r3, [r7, #0]
 800f882:	685b      	ldr	r3, [r3, #4]
 800f884:	f003 0303 	and.w	r3, r3, #3
 800f888:	2b01      	cmp	r3, #1
 800f88a:	d005      	beq.n	800f898 <HAL_GPIO_Init+0x44>
 800f88c:	683b      	ldr	r3, [r7, #0]
 800f88e:	685b      	ldr	r3, [r3, #4]
 800f890:	f003 0303 	and.w	r3, r3, #3
 800f894:	2b02      	cmp	r3, #2
 800f896:	d130      	bne.n	800f8fa <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800f898:	687b      	ldr	r3, [r7, #4]
 800f89a:	689b      	ldr	r3, [r3, #8]
 800f89c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800f89e:	69fb      	ldr	r3, [r7, #28]
 800f8a0:	005b      	lsls	r3, r3, #1
 800f8a2:	2203      	movs	r2, #3
 800f8a4:	fa02 f303 	lsl.w	r3, r2, r3
 800f8a8:	43db      	mvns	r3, r3
 800f8aa:	69ba      	ldr	r2, [r7, #24]
 800f8ac:	4013      	ands	r3, r2
 800f8ae:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800f8b0:	683b      	ldr	r3, [r7, #0]
 800f8b2:	68da      	ldr	r2, [r3, #12]
 800f8b4:	69fb      	ldr	r3, [r7, #28]
 800f8b6:	005b      	lsls	r3, r3, #1
 800f8b8:	fa02 f303 	lsl.w	r3, r2, r3
 800f8bc:	69ba      	ldr	r2, [r7, #24]
 800f8be:	4313      	orrs	r3, r2
 800f8c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	69ba      	ldr	r2, [r7, #24]
 800f8c6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800f8c8:	687b      	ldr	r3, [r7, #4]
 800f8ca:	685b      	ldr	r3, [r3, #4]
 800f8cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800f8ce:	2201      	movs	r2, #1
 800f8d0:	69fb      	ldr	r3, [r7, #28]
 800f8d2:	fa02 f303 	lsl.w	r3, r2, r3
 800f8d6:	43db      	mvns	r3, r3
 800f8d8:	69ba      	ldr	r2, [r7, #24]
 800f8da:	4013      	ands	r3, r2
 800f8dc:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800f8de:	683b      	ldr	r3, [r7, #0]
 800f8e0:	685b      	ldr	r3, [r3, #4]
 800f8e2:	091b      	lsrs	r3, r3, #4
 800f8e4:	f003 0201 	and.w	r2, r3, #1
 800f8e8:	69fb      	ldr	r3, [r7, #28]
 800f8ea:	fa02 f303 	lsl.w	r3, r2, r3
 800f8ee:	69ba      	ldr	r2, [r7, #24]
 800f8f0:	4313      	orrs	r3, r2
 800f8f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800f8f4:	687b      	ldr	r3, [r7, #4]
 800f8f6:	69ba      	ldr	r2, [r7, #24]
 800f8f8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800f8fa:	683b      	ldr	r3, [r7, #0]
 800f8fc:	685b      	ldr	r3, [r3, #4]
 800f8fe:	f003 0303 	and.w	r3, r3, #3
 800f902:	2b03      	cmp	r3, #3
 800f904:	d017      	beq.n	800f936 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	68db      	ldr	r3, [r3, #12]
 800f90a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	005b      	lsls	r3, r3, #1
 800f910:	2203      	movs	r2, #3
 800f912:	fa02 f303 	lsl.w	r3, r2, r3
 800f916:	43db      	mvns	r3, r3
 800f918:	69ba      	ldr	r2, [r7, #24]
 800f91a:	4013      	ands	r3, r2
 800f91c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800f91e:	683b      	ldr	r3, [r7, #0]
 800f920:	689a      	ldr	r2, [r3, #8]
 800f922:	69fb      	ldr	r3, [r7, #28]
 800f924:	005b      	lsls	r3, r3, #1
 800f926:	fa02 f303 	lsl.w	r3, r2, r3
 800f92a:	69ba      	ldr	r2, [r7, #24]
 800f92c:	4313      	orrs	r3, r2
 800f92e:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	69ba      	ldr	r2, [r7, #24]
 800f934:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	685b      	ldr	r3, [r3, #4]
 800f93a:	f003 0303 	and.w	r3, r3, #3
 800f93e:	2b02      	cmp	r3, #2
 800f940:	d123      	bne.n	800f98a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800f942:	69fb      	ldr	r3, [r7, #28]
 800f944:	08da      	lsrs	r2, r3, #3
 800f946:	687b      	ldr	r3, [r7, #4]
 800f948:	3208      	adds	r2, #8
 800f94a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f94e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800f950:	69fb      	ldr	r3, [r7, #28]
 800f952:	f003 0307 	and.w	r3, r3, #7
 800f956:	009b      	lsls	r3, r3, #2
 800f958:	220f      	movs	r2, #15
 800f95a:	fa02 f303 	lsl.w	r3, r2, r3
 800f95e:	43db      	mvns	r3, r3
 800f960:	69ba      	ldr	r2, [r7, #24]
 800f962:	4013      	ands	r3, r2
 800f964:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800f966:	683b      	ldr	r3, [r7, #0]
 800f968:	691a      	ldr	r2, [r3, #16]
 800f96a:	69fb      	ldr	r3, [r7, #28]
 800f96c:	f003 0307 	and.w	r3, r3, #7
 800f970:	009b      	lsls	r3, r3, #2
 800f972:	fa02 f303 	lsl.w	r3, r2, r3
 800f976:	69ba      	ldr	r2, [r7, #24]
 800f978:	4313      	orrs	r3, r2
 800f97a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800f97c:	69fb      	ldr	r3, [r7, #28]
 800f97e:	08da      	lsrs	r2, r3, #3
 800f980:	687b      	ldr	r3, [r7, #4]
 800f982:	3208      	adds	r2, #8
 800f984:	69b9      	ldr	r1, [r7, #24]
 800f986:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800f98a:	687b      	ldr	r3, [r7, #4]
 800f98c:	681b      	ldr	r3, [r3, #0]
 800f98e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800f990:	69fb      	ldr	r3, [r7, #28]
 800f992:	005b      	lsls	r3, r3, #1
 800f994:	2203      	movs	r2, #3
 800f996:	fa02 f303 	lsl.w	r3, r2, r3
 800f99a:	43db      	mvns	r3, r3
 800f99c:	69ba      	ldr	r2, [r7, #24]
 800f99e:	4013      	ands	r3, r2
 800f9a0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800f9a2:	683b      	ldr	r3, [r7, #0]
 800f9a4:	685b      	ldr	r3, [r3, #4]
 800f9a6:	f003 0203 	and.w	r2, r3, #3
 800f9aa:	69fb      	ldr	r3, [r7, #28]
 800f9ac:	005b      	lsls	r3, r3, #1
 800f9ae:	fa02 f303 	lsl.w	r3, r2, r3
 800f9b2:	69ba      	ldr	r2, [r7, #24]
 800f9b4:	4313      	orrs	r3, r2
 800f9b6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	69ba      	ldr	r2, [r7, #24]
 800f9bc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800f9be:	683b      	ldr	r3, [r7, #0]
 800f9c0:	685b      	ldr	r3, [r3, #4]
 800f9c2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800f9c6:	2b00      	cmp	r3, #0
 800f9c8:	f000 80d8 	beq.w	800fb7c <HAL_GPIO_Init+0x328>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800f9cc:	4b2c      	ldr	r3, [pc, #176]	; (800fa80 <HAL_GPIO_Init+0x22c>)
 800f9ce:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f9d2:	4a2b      	ldr	r2, [pc, #172]	; (800fa80 <HAL_GPIO_Init+0x22c>)
 800f9d4:	f043 0302 	orr.w	r3, r3, #2
 800f9d8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800f9dc:	4b28      	ldr	r3, [pc, #160]	; (800fa80 <HAL_GPIO_Init+0x22c>)
 800f9de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 800f9e2:	f003 0302 	and.w	r3, r3, #2
 800f9e6:	60fb      	str	r3, [r7, #12]
 800f9e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800f9ea:	4a26      	ldr	r2, [pc, #152]	; (800fa84 <HAL_GPIO_Init+0x230>)
 800f9ec:	69fb      	ldr	r3, [r7, #28]
 800f9ee:	089b      	lsrs	r3, r3, #2
 800f9f0:	3302      	adds	r3, #2
 800f9f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800f9f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800f9f8:	69fb      	ldr	r3, [r7, #28]
 800f9fa:	f003 0303 	and.w	r3, r3, #3
 800f9fe:	009b      	lsls	r3, r3, #2
 800fa00:	220f      	movs	r2, #15
 800fa02:	fa02 f303 	lsl.w	r3, r2, r3
 800fa06:	43db      	mvns	r3, r3
 800fa08:	69ba      	ldr	r2, [r7, #24]
 800fa0a:	4013      	ands	r3, r2
 800fa0c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800fa0e:	687b      	ldr	r3, [r7, #4]
 800fa10:	4a1d      	ldr	r2, [pc, #116]	; (800fa88 <HAL_GPIO_Init+0x234>)
 800fa12:	4293      	cmp	r3, r2
 800fa14:	d04a      	beq.n	800faac <HAL_GPIO_Init+0x258>
 800fa16:	687b      	ldr	r3, [r7, #4]
 800fa18:	4a1c      	ldr	r2, [pc, #112]	; (800fa8c <HAL_GPIO_Init+0x238>)
 800fa1a:	4293      	cmp	r3, r2
 800fa1c:	d02b      	beq.n	800fa76 <HAL_GPIO_Init+0x222>
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	4a1b      	ldr	r2, [pc, #108]	; (800fa90 <HAL_GPIO_Init+0x23c>)
 800fa22:	4293      	cmp	r3, r2
 800fa24:	d025      	beq.n	800fa72 <HAL_GPIO_Init+0x21e>
 800fa26:	687b      	ldr	r3, [r7, #4]
 800fa28:	4a1a      	ldr	r2, [pc, #104]	; (800fa94 <HAL_GPIO_Init+0x240>)
 800fa2a:	4293      	cmp	r3, r2
 800fa2c:	d01f      	beq.n	800fa6e <HAL_GPIO_Init+0x21a>
 800fa2e:	687b      	ldr	r3, [r7, #4]
 800fa30:	4a19      	ldr	r2, [pc, #100]	; (800fa98 <HAL_GPIO_Init+0x244>)
 800fa32:	4293      	cmp	r3, r2
 800fa34:	d019      	beq.n	800fa6a <HAL_GPIO_Init+0x216>
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	4a18      	ldr	r2, [pc, #96]	; (800fa9c <HAL_GPIO_Init+0x248>)
 800fa3a:	4293      	cmp	r3, r2
 800fa3c:	d013      	beq.n	800fa66 <HAL_GPIO_Init+0x212>
 800fa3e:	687b      	ldr	r3, [r7, #4]
 800fa40:	4a17      	ldr	r2, [pc, #92]	; (800faa0 <HAL_GPIO_Init+0x24c>)
 800fa42:	4293      	cmp	r3, r2
 800fa44:	d00d      	beq.n	800fa62 <HAL_GPIO_Init+0x20e>
 800fa46:	687b      	ldr	r3, [r7, #4]
 800fa48:	4a16      	ldr	r2, [pc, #88]	; (800faa4 <HAL_GPIO_Init+0x250>)
 800fa4a:	4293      	cmp	r3, r2
 800fa4c:	d007      	beq.n	800fa5e <HAL_GPIO_Init+0x20a>
 800fa4e:	687b      	ldr	r3, [r7, #4]
 800fa50:	4a15      	ldr	r2, [pc, #84]	; (800faa8 <HAL_GPIO_Init+0x254>)
 800fa52:	4293      	cmp	r3, r2
 800fa54:	d101      	bne.n	800fa5a <HAL_GPIO_Init+0x206>
 800fa56:	2309      	movs	r3, #9
 800fa58:	e029      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa5a:	230a      	movs	r3, #10
 800fa5c:	e027      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa5e:	2307      	movs	r3, #7
 800fa60:	e025      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa62:	2306      	movs	r3, #6
 800fa64:	e023      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa66:	2305      	movs	r3, #5
 800fa68:	e021      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa6a:	2304      	movs	r3, #4
 800fa6c:	e01f      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa6e:	2303      	movs	r3, #3
 800fa70:	e01d      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa72:	2302      	movs	r3, #2
 800fa74:	e01b      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa76:	2301      	movs	r3, #1
 800fa78:	e019      	b.n	800faae <HAL_GPIO_Init+0x25a>
 800fa7a:	bf00      	nop
 800fa7c:	58000080 	.word	0x58000080
 800fa80:	58024400 	.word	0x58024400
 800fa84:	58000400 	.word	0x58000400
 800fa88:	58020000 	.word	0x58020000
 800fa8c:	58020400 	.word	0x58020400
 800fa90:	58020800 	.word	0x58020800
 800fa94:	58020c00 	.word	0x58020c00
 800fa98:	58021000 	.word	0x58021000
 800fa9c:	58021400 	.word	0x58021400
 800faa0:	58021800 	.word	0x58021800
 800faa4:	58021c00 	.word	0x58021c00
 800faa8:	58022400 	.word	0x58022400
 800faac:	2300      	movs	r3, #0
 800faae:	69fa      	ldr	r2, [r7, #28]
 800fab0:	f002 0203 	and.w	r2, r2, #3
 800fab4:	0092      	lsls	r2, r2, #2
 800fab6:	4093      	lsls	r3, r2
 800fab8:	69ba      	ldr	r2, [r7, #24]
 800faba:	4313      	orrs	r3, r2
 800fabc:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800fabe:	4938      	ldr	r1, [pc, #224]	; (800fba0 <HAL_GPIO_Init+0x34c>)
 800fac0:	69fb      	ldr	r3, [r7, #28]
 800fac2:	089b      	lsrs	r3, r3, #2
 800fac4:	3302      	adds	r3, #2
 800fac6:	69ba      	ldr	r2, [r7, #24]
 800fac8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800facc:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fad0:	681b      	ldr	r3, [r3, #0]
 800fad2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800fad4:	693b      	ldr	r3, [r7, #16]
 800fad6:	43db      	mvns	r3, r3
 800fad8:	69ba      	ldr	r2, [r7, #24]
 800fada:	4013      	ands	r3, r2
 800fadc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800fade:	683b      	ldr	r3, [r7, #0]
 800fae0:	685b      	ldr	r3, [r3, #4]
 800fae2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d003      	beq.n	800faf2 <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 800faea:	69ba      	ldr	r2, [r7, #24]
 800faec:	693b      	ldr	r3, [r7, #16]
 800faee:	4313      	orrs	r3, r2
 800faf0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800faf2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800faf6:	69bb      	ldr	r3, [r7, #24]
 800faf8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800fafa:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 800fafe:	685b      	ldr	r3, [r3, #4]
 800fb00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800fb02:	693b      	ldr	r3, [r7, #16]
 800fb04:	43db      	mvns	r3, r3
 800fb06:	69ba      	ldr	r2, [r7, #24]
 800fb08:	4013      	ands	r3, r2
 800fb0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800fb0c:	683b      	ldr	r3, [r7, #0]
 800fb0e:	685b      	ldr	r3, [r3, #4]
 800fb10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fb14:	2b00      	cmp	r3, #0
 800fb16:	d003      	beq.n	800fb20 <HAL_GPIO_Init+0x2cc>
        {
          temp |= iocurrent;
 800fb18:	69ba      	ldr	r2, [r7, #24]
 800fb1a:	693b      	ldr	r3, [r7, #16]
 800fb1c:	4313      	orrs	r3, r2
 800fb1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800fb20:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 800fb24:	69bb      	ldr	r3, [r7, #24]
 800fb26:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800fb28:	697b      	ldr	r3, [r7, #20]
 800fb2a:	685b      	ldr	r3, [r3, #4]
 800fb2c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800fb2e:	693b      	ldr	r3, [r7, #16]
 800fb30:	43db      	mvns	r3, r3
 800fb32:	69ba      	ldr	r2, [r7, #24]
 800fb34:	4013      	ands	r3, r2
 800fb36:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800fb38:	683b      	ldr	r3, [r7, #0]
 800fb3a:	685b      	ldr	r3, [r3, #4]
 800fb3c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d003      	beq.n	800fb4c <HAL_GPIO_Init+0x2f8>
        {
          temp |= iocurrent;
 800fb44:	69ba      	ldr	r2, [r7, #24]
 800fb46:	693b      	ldr	r3, [r7, #16]
 800fb48:	4313      	orrs	r3, r2
 800fb4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800fb4c:	697b      	ldr	r3, [r7, #20]
 800fb4e:	69ba      	ldr	r2, [r7, #24]
 800fb50:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800fb52:	697b      	ldr	r3, [r7, #20]
 800fb54:	681b      	ldr	r3, [r3, #0]
 800fb56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800fb58:	693b      	ldr	r3, [r7, #16]
 800fb5a:	43db      	mvns	r3, r3
 800fb5c:	69ba      	ldr	r2, [r7, #24]
 800fb5e:	4013      	ands	r3, r2
 800fb60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800fb62:	683b      	ldr	r3, [r7, #0]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800fb6a:	2b00      	cmp	r3, #0
 800fb6c:	d003      	beq.n	800fb76 <HAL_GPIO_Init+0x322>
        {
          temp |= iocurrent;
 800fb6e:	69ba      	ldr	r2, [r7, #24]
 800fb70:	693b      	ldr	r3, [r7, #16]
 800fb72:	4313      	orrs	r3, r2
 800fb74:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800fb76:	697b      	ldr	r3, [r7, #20]
 800fb78:	69ba      	ldr	r2, [r7, #24]
 800fb7a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800fb7c:	69fb      	ldr	r3, [r7, #28]
 800fb7e:	3301      	adds	r3, #1
 800fb80:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800fb82:	683b      	ldr	r3, [r7, #0]
 800fb84:	681a      	ldr	r2, [r3, #0]
 800fb86:	69fb      	ldr	r3, [r7, #28]
 800fb88:	fa22 f303 	lsr.w	r3, r2, r3
 800fb8c:	2b00      	cmp	r3, #0
 800fb8e:	f47f ae6b 	bne.w	800f868 <HAL_GPIO_Init+0x14>
  }
}
 800fb92:	bf00      	nop
 800fb94:	bf00      	nop
 800fb96:	3724      	adds	r7, #36	; 0x24
 800fb98:	46bd      	mov	sp, r7
 800fb9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb9e:	4770      	bx	lr
 800fba0:	58000400 	.word	0x58000400

0800fba4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800fba4:	b480      	push	{r7}
 800fba6:	b083      	sub	sp, #12
 800fba8:	af00      	add	r7, sp, #0
 800fbaa:	6078      	str	r0, [r7, #4]
 800fbac:	460b      	mov	r3, r1
 800fbae:	807b      	strh	r3, [r7, #2]
 800fbb0:	4613      	mov	r3, r2
 800fbb2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800fbb4:	787b      	ldrb	r3, [r7, #1]
 800fbb6:	2b00      	cmp	r3, #0
 800fbb8:	d003      	beq.n	800fbc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800fbba:	887a      	ldrh	r2, [r7, #2]
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800fbc0:	e003      	b.n	800fbca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800fbc2:	887b      	ldrh	r3, [r7, #2]
 800fbc4:	041a      	lsls	r2, r3, #16
 800fbc6:	687b      	ldr	r3, [r7, #4]
 800fbc8:	619a      	str	r2, [r3, #24]
}
 800fbca:	bf00      	nop
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr

0800fbd6 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800fbd6:	b480      	push	{r7}
 800fbd8:	b085      	sub	sp, #20
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
 800fbde:	460b      	mov	r3, r1
 800fbe0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800fbe2:	687b      	ldr	r3, [r7, #4]
 800fbe4:	695b      	ldr	r3, [r3, #20]
 800fbe6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800fbe8:	887a      	ldrh	r2, [r7, #2]
 800fbea:	68fb      	ldr	r3, [r7, #12]
 800fbec:	4013      	ands	r3, r2
 800fbee:	041a      	lsls	r2, r3, #16
 800fbf0:	68fb      	ldr	r3, [r7, #12]
 800fbf2:	43d9      	mvns	r1, r3
 800fbf4:	887b      	ldrh	r3, [r7, #2]
 800fbf6:	400b      	ands	r3, r1
 800fbf8:	431a      	orrs	r2, r3
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	619a      	str	r2, [r3, #24]
}
 800fbfe:	bf00      	nop
 800fc00:	3714      	adds	r7, #20
 800fc02:	46bd      	mov	sp, r7
 800fc04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc08:	4770      	bx	lr
	...

0800fc0c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800fc0c:	b580      	push	{r7, lr}
 800fc0e:	b084      	sub	sp, #16
 800fc10:	af00      	add	r7, sp, #0
 800fc12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 800fc14:	4b19      	ldr	r3, [pc, #100]	; (800fc7c <HAL_PWREx_ConfigSupply+0x70>)
 800fc16:	68db      	ldr	r3, [r3, #12]
 800fc18:	f003 0304 	and.w	r3, r3, #4
 800fc1c:	2b04      	cmp	r3, #4
 800fc1e:	d00a      	beq.n	800fc36 <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800fc20:	4b16      	ldr	r3, [pc, #88]	; (800fc7c <HAL_PWREx_ConfigSupply+0x70>)
 800fc22:	68db      	ldr	r3, [r3, #12]
 800fc24:	f003 0307 	and.w	r3, r3, #7
 800fc28:	687a      	ldr	r2, [r7, #4]
 800fc2a:	429a      	cmp	r2, r3
 800fc2c:	d001      	beq.n	800fc32 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800fc2e:	2301      	movs	r3, #1
 800fc30:	e01f      	b.n	800fc72 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800fc32:	2300      	movs	r3, #0
 800fc34:	e01d      	b.n	800fc72 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800fc36:	4b11      	ldr	r3, [pc, #68]	; (800fc7c <HAL_PWREx_ConfigSupply+0x70>)
 800fc38:	68db      	ldr	r3, [r3, #12]
 800fc3a:	f023 0207 	bic.w	r2, r3, #7
 800fc3e:	490f      	ldr	r1, [pc, #60]	; (800fc7c <HAL_PWREx_ConfigSupply+0x70>)
 800fc40:	687b      	ldr	r3, [r7, #4]
 800fc42:	4313      	orrs	r3, r2
 800fc44:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800fc46:	f7ff f8b1 	bl	800edac <HAL_GetTick>
 800fc4a:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800fc4c:	e009      	b.n	800fc62 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800fc4e:	f7ff f8ad 	bl	800edac <HAL_GetTick>
 800fc52:	4602      	mov	r2, r0
 800fc54:	68fb      	ldr	r3, [r7, #12]
 800fc56:	1ad3      	subs	r3, r2, r3
 800fc58:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800fc5c:	d901      	bls.n	800fc62 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800fc5e:	2301      	movs	r3, #1
 800fc60:	e007      	b.n	800fc72 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800fc62:	4b06      	ldr	r3, [pc, #24]	; (800fc7c <HAL_PWREx_ConfigSupply+0x70>)
 800fc64:	685b      	ldr	r3, [r3, #4]
 800fc66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fc6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fc6e:	d1ee      	bne.n	800fc4e <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 800fc70:	2300      	movs	r3, #0
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	3710      	adds	r7, #16
 800fc76:	46bd      	mov	sp, r7
 800fc78:	bd80      	pop	{r7, pc}
 800fc7a:	bf00      	nop
 800fc7c:	58024800 	.word	0x58024800

0800fc80 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800fc80:	b580      	push	{r7, lr}
 800fc82:	b08c      	sub	sp, #48	; 0x30
 800fc84:	af00      	add	r7, sp, #0
 800fc86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d101      	bne.n	800fc92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800fc8e:	2301      	movs	r3, #1
 800fc90:	e3c8      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800fc92:	687b      	ldr	r3, [r7, #4]
 800fc94:	681b      	ldr	r3, [r3, #0]
 800fc96:	f003 0301 	and.w	r3, r3, #1
 800fc9a:	2b00      	cmp	r3, #0
 800fc9c:	f000 8087 	beq.w	800fdae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fca0:	4b88      	ldr	r3, [pc, #544]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fca2:	691b      	ldr	r3, [r3, #16]
 800fca4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fca8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800fcaa:	4b86      	ldr	r3, [pc, #536]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fcac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fcae:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800fcb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb2:	2b10      	cmp	r3, #16
 800fcb4:	d007      	beq.n	800fcc6 <HAL_RCC_OscConfig+0x46>
 800fcb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcb8:	2b18      	cmp	r3, #24
 800fcba:	d110      	bne.n	800fcde <HAL_RCC_OscConfig+0x5e>
 800fcbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcbe:	f003 0303 	and.w	r3, r3, #3
 800fcc2:	2b02      	cmp	r3, #2
 800fcc4:	d10b      	bne.n	800fcde <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fcc6:	4b7f      	ldr	r3, [pc, #508]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fcc8:	681b      	ldr	r3, [r3, #0]
 800fcca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d06c      	beq.n	800fdac <HAL_RCC_OscConfig+0x12c>
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	685b      	ldr	r3, [r3, #4]
 800fcd6:	2b00      	cmp	r3, #0
 800fcd8:	d168      	bne.n	800fdac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800fcda:	2301      	movs	r3, #1
 800fcdc:	e3a2      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	685b      	ldr	r3, [r3, #4]
 800fce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800fce6:	d106      	bne.n	800fcf6 <HAL_RCC_OscConfig+0x76>
 800fce8:	4b76      	ldr	r3, [pc, #472]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fcea:	681b      	ldr	r3, [r3, #0]
 800fcec:	4a75      	ldr	r2, [pc, #468]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fcee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fcf2:	6013      	str	r3, [r2, #0]
 800fcf4:	e02e      	b.n	800fd54 <HAL_RCC_OscConfig+0xd4>
 800fcf6:	687b      	ldr	r3, [r7, #4]
 800fcf8:	685b      	ldr	r3, [r3, #4]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	d10c      	bne.n	800fd18 <HAL_RCC_OscConfig+0x98>
 800fcfe:	4b71      	ldr	r3, [pc, #452]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd00:	681b      	ldr	r3, [r3, #0]
 800fd02:	4a70      	ldr	r2, [pc, #448]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd08:	6013      	str	r3, [r2, #0]
 800fd0a:	4b6e      	ldr	r3, [pc, #440]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	4a6d      	ldr	r2, [pc, #436]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd14:	6013      	str	r3, [r2, #0]
 800fd16:	e01d      	b.n	800fd54 <HAL_RCC_OscConfig+0xd4>
 800fd18:	687b      	ldr	r3, [r7, #4]
 800fd1a:	685b      	ldr	r3, [r3, #4]
 800fd1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800fd20:	d10c      	bne.n	800fd3c <HAL_RCC_OscConfig+0xbc>
 800fd22:	4b68      	ldr	r3, [pc, #416]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	4a67      	ldr	r2, [pc, #412]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800fd2c:	6013      	str	r3, [r2, #0]
 800fd2e:	4b65      	ldr	r3, [pc, #404]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd30:	681b      	ldr	r3, [r3, #0]
 800fd32:	4a64      	ldr	r2, [pc, #400]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800fd38:	6013      	str	r3, [r2, #0]
 800fd3a:	e00b      	b.n	800fd54 <HAL_RCC_OscConfig+0xd4>
 800fd3c:	4b61      	ldr	r3, [pc, #388]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd3e:	681b      	ldr	r3, [r3, #0]
 800fd40:	4a60      	ldr	r2, [pc, #384]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800fd46:	6013      	str	r3, [r2, #0]
 800fd48:	4b5e      	ldr	r3, [pc, #376]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd4a:	681b      	ldr	r3, [r3, #0]
 800fd4c:	4a5d      	ldr	r2, [pc, #372]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800fd52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800fd54:	687b      	ldr	r3, [r7, #4]
 800fd56:	685b      	ldr	r3, [r3, #4]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d013      	beq.n	800fd84 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd5c:	f7ff f826 	bl	800edac <HAL_GetTick>
 800fd60:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fd62:	e008      	b.n	800fd76 <HAL_RCC_OscConfig+0xf6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fd64:	f7ff f822 	bl	800edac <HAL_GetTick>
 800fd68:	4602      	mov	r2, r0
 800fd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6c:	1ad3      	subs	r3, r2, r3
 800fd6e:	2b64      	cmp	r3, #100	; 0x64
 800fd70:	d901      	bls.n	800fd76 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800fd72:	2303      	movs	r3, #3
 800fd74:	e356      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800fd76:	4b53      	ldr	r3, [pc, #332]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fd78:	681b      	ldr	r3, [r3, #0]
 800fd7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fd7e:	2b00      	cmp	r3, #0
 800fd80:	d0f0      	beq.n	800fd64 <HAL_RCC_OscConfig+0xe4>
 800fd82:	e014      	b.n	800fdae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd84:	f7ff f812 	bl	800edac <HAL_GetTick>
 800fd88:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fd8a:	e008      	b.n	800fd9e <HAL_RCC_OscConfig+0x11e>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800fd8c:	f7ff f80e 	bl	800edac <HAL_GetTick>
 800fd90:	4602      	mov	r2, r0
 800fd92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd94:	1ad3      	subs	r3, r2, r3
 800fd96:	2b64      	cmp	r3, #100	; 0x64
 800fd98:	d901      	bls.n	800fd9e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800fd9a:	2303      	movs	r3, #3
 800fd9c:	e342      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800fd9e:	4b49      	ldr	r3, [pc, #292]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fda0:	681b      	ldr	r3, [r3, #0]
 800fda2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800fda6:	2b00      	cmp	r3, #0
 800fda8:	d1f0      	bne.n	800fd8c <HAL_RCC_OscConfig+0x10c>
 800fdaa:	e000      	b.n	800fdae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800fdac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800fdae:	687b      	ldr	r3, [r7, #4]
 800fdb0:	681b      	ldr	r3, [r3, #0]
 800fdb2:	f003 0302 	and.w	r3, r3, #2
 800fdb6:	2b00      	cmp	r3, #0
 800fdb8:	f000 808c 	beq.w	800fed4 <HAL_RCC_OscConfig+0x254>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fdbc:	4b41      	ldr	r3, [pc, #260]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fdbe:	691b      	ldr	r3, [r3, #16]
 800fdc0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fdc4:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800fdc6:	4b3f      	ldr	r3, [pc, #252]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fdc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fdca:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800fdcc:	6a3b      	ldr	r3, [r7, #32]
 800fdce:	2b00      	cmp	r3, #0
 800fdd0:	d007      	beq.n	800fde2 <HAL_RCC_OscConfig+0x162>
 800fdd2:	6a3b      	ldr	r3, [r7, #32]
 800fdd4:	2b18      	cmp	r3, #24
 800fdd6:	d137      	bne.n	800fe48 <HAL_RCC_OscConfig+0x1c8>
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	f003 0303 	and.w	r3, r3, #3
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d132      	bne.n	800fe48 <HAL_RCC_OscConfig+0x1c8>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fde2:	4b38      	ldr	r3, [pc, #224]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fde4:	681b      	ldr	r3, [r3, #0]
 800fde6:	f003 0304 	and.w	r3, r3, #4
 800fdea:	2b00      	cmp	r3, #0
 800fdec:	d005      	beq.n	800fdfa <HAL_RCC_OscConfig+0x17a>
 800fdee:	687b      	ldr	r3, [r7, #4]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	2b00      	cmp	r3, #0
 800fdf4:	d101      	bne.n	800fdfa <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800fdf6:	2301      	movs	r3, #1
 800fdf8:	e314      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800fdfa:	4b32      	ldr	r3, [pc, #200]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fdfc:	681b      	ldr	r3, [r3, #0]
 800fdfe:	f023 0219 	bic.w	r2, r3, #25
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	68db      	ldr	r3, [r3, #12]
 800fe06:	492f      	ldr	r1, [pc, #188]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe08:	4313      	orrs	r3, r2
 800fe0a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe0c:	f7fe ffce 	bl	800edac <HAL_GetTick>
 800fe10:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fe12:	e008      	b.n	800fe26 <HAL_RCC_OscConfig+0x1a6>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fe14:	f7fe ffca 	bl	800edac <HAL_GetTick>
 800fe18:	4602      	mov	r2, r0
 800fe1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe1c:	1ad3      	subs	r3, r2, r3
 800fe1e:	2b02      	cmp	r3, #2
 800fe20:	d901      	bls.n	800fe26 <HAL_RCC_OscConfig+0x1a6>
          {
            return HAL_TIMEOUT;
 800fe22:	2303      	movs	r3, #3
 800fe24:	e2fe      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fe26:	4b27      	ldr	r3, [pc, #156]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe28:	681b      	ldr	r3, [r3, #0]
 800fe2a:	f003 0304 	and.w	r3, r3, #4
 800fe2e:	2b00      	cmp	r3, #0
 800fe30:	d0f0      	beq.n	800fe14 <HAL_RCC_OscConfig+0x194>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fe32:	4b24      	ldr	r3, [pc, #144]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe34:	685b      	ldr	r3, [r3, #4]
 800fe36:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	691b      	ldr	r3, [r3, #16]
 800fe3e:	061b      	lsls	r3, r3, #24
 800fe40:	4920      	ldr	r1, [pc, #128]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe42:	4313      	orrs	r3, r2
 800fe44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800fe46:	e045      	b.n	800fed4 <HAL_RCC_OscConfig+0x254>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800fe48:	687b      	ldr	r3, [r7, #4]
 800fe4a:	68db      	ldr	r3, [r3, #12]
 800fe4c:	2b00      	cmp	r3, #0
 800fe4e:	d026      	beq.n	800fe9e <HAL_RCC_OscConfig+0x21e>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800fe50:	4b1c      	ldr	r3, [pc, #112]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe52:	681b      	ldr	r3, [r3, #0]
 800fe54:	f023 0219 	bic.w	r2, r3, #25
 800fe58:	687b      	ldr	r3, [r7, #4]
 800fe5a:	68db      	ldr	r3, [r3, #12]
 800fe5c:	4919      	ldr	r1, [pc, #100]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe5e:	4313      	orrs	r3, r2
 800fe60:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fe62:	f7fe ffa3 	bl	800edac <HAL_GetTick>
 800fe66:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fe68:	e008      	b.n	800fe7c <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800fe6a:	f7fe ff9f 	bl	800edac <HAL_GetTick>
 800fe6e:	4602      	mov	r2, r0
 800fe70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	2b02      	cmp	r3, #2
 800fe76:	d901      	bls.n	800fe7c <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 800fe78:	2303      	movs	r3, #3
 800fe7a:	e2d3      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800fe7c:	4b11      	ldr	r3, [pc, #68]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe7e:	681b      	ldr	r3, [r3, #0]
 800fe80:	f003 0304 	and.w	r3, r3, #4
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d0f0      	beq.n	800fe6a <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800fe88:	4b0e      	ldr	r3, [pc, #56]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe8a:	685b      	ldr	r3, [r3, #4]
 800fe8c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800fe90:	687b      	ldr	r3, [r7, #4]
 800fe92:	691b      	ldr	r3, [r3, #16]
 800fe94:	061b      	lsls	r3, r3, #24
 800fe96:	490b      	ldr	r1, [pc, #44]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fe98:	4313      	orrs	r3, r2
 800fe9a:	604b      	str	r3, [r1, #4]
 800fe9c:	e01a      	b.n	800fed4 <HAL_RCC_OscConfig+0x254>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800fe9e:	4b09      	ldr	r3, [pc, #36]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fea0:	681b      	ldr	r3, [r3, #0]
 800fea2:	4a08      	ldr	r2, [pc, #32]	; (800fec4 <HAL_RCC_OscConfig+0x244>)
 800fea4:	f023 0301 	bic.w	r3, r3, #1
 800fea8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800feaa:	f7fe ff7f 	bl	800edac <HAL_GetTick>
 800feae:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800feb0:	e00a      	b.n	800fec8 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800feb2:	f7fe ff7b 	bl	800edac <HAL_GetTick>
 800feb6:	4602      	mov	r2, r0
 800feb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800feba:	1ad3      	subs	r3, r2, r3
 800febc:	2b02      	cmp	r3, #2
 800febe:	d903      	bls.n	800fec8 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 800fec0:	2303      	movs	r3, #3
 800fec2:	e2af      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
 800fec4:	58024400 	.word	0x58024400
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800fec8:	4b96      	ldr	r3, [pc, #600]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	f003 0304 	and.w	r3, r3, #4
 800fed0:	2b00      	cmp	r3, #0
 800fed2:	d1ee      	bne.n	800feb2 <HAL_RCC_OscConfig+0x232>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800fed4:	687b      	ldr	r3, [r7, #4]
 800fed6:	681b      	ldr	r3, [r3, #0]
 800fed8:	f003 0310 	and.w	r3, r3, #16
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d06a      	beq.n	800ffb6 <HAL_RCC_OscConfig+0x336>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800fee0:	4b90      	ldr	r3, [pc, #576]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800fee2:	691b      	ldr	r3, [r3, #16]
 800fee4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800fee8:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800feea:	4b8e      	ldr	r3, [pc, #568]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800feec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800feee:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800fef0:	69bb      	ldr	r3, [r7, #24]
 800fef2:	2b08      	cmp	r3, #8
 800fef4:	d007      	beq.n	800ff06 <HAL_RCC_OscConfig+0x286>
 800fef6:	69bb      	ldr	r3, [r7, #24]
 800fef8:	2b18      	cmp	r3, #24
 800fefa:	d11b      	bne.n	800ff34 <HAL_RCC_OscConfig+0x2b4>
 800fefc:	697b      	ldr	r3, [r7, #20]
 800fefe:	f003 0303 	and.w	r3, r3, #3
 800ff02:	2b01      	cmp	r3, #1
 800ff04:	d116      	bne.n	800ff34 <HAL_RCC_OscConfig+0x2b4>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ff06:	4b87      	ldr	r3, [pc, #540]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff0e:	2b00      	cmp	r3, #0
 800ff10:	d005      	beq.n	800ff1e <HAL_RCC_OscConfig+0x29e>
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	69db      	ldr	r3, [r3, #28]
 800ff16:	2b80      	cmp	r3, #128	; 0x80
 800ff18:	d001      	beq.n	800ff1e <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 800ff1a:	2301      	movs	r3, #1
 800ff1c:	e282      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ff1e:	4b81      	ldr	r3, [pc, #516]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff20:	68db      	ldr	r3, [r3, #12]
 800ff22:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ff26:	687b      	ldr	r3, [r7, #4]
 800ff28:	6a1b      	ldr	r3, [r3, #32]
 800ff2a:	061b      	lsls	r3, r3, #24
 800ff2c:	497d      	ldr	r1, [pc, #500]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff2e:	4313      	orrs	r3, r2
 800ff30:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800ff32:	e040      	b.n	800ffb6 <HAL_RCC_OscConfig+0x336>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	69db      	ldr	r3, [r3, #28]
 800ff38:	2b00      	cmp	r3, #0
 800ff3a:	d023      	beq.n	800ff84 <HAL_RCC_OscConfig+0x304>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800ff3c:	4b79      	ldr	r3, [pc, #484]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff3e:	681b      	ldr	r3, [r3, #0]
 800ff40:	4a78      	ldr	r2, [pc, #480]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff42:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ff46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff48:	f7fe ff30 	bl	800edac <HAL_GetTick>
 800ff4c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ff4e:	e008      	b.n	800ff62 <HAL_RCC_OscConfig+0x2e2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ff50:	f7fe ff2c 	bl	800edac <HAL_GetTick>
 800ff54:	4602      	mov	r2, r0
 800ff56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ff58:	1ad3      	subs	r3, r2, r3
 800ff5a:	2b02      	cmp	r3, #2
 800ff5c:	d901      	bls.n	800ff62 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800ff5e:	2303      	movs	r3, #3
 800ff60:	e260      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800ff62:	4b70      	ldr	r3, [pc, #448]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff64:	681b      	ldr	r3, [r3, #0]
 800ff66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ff6a:	2b00      	cmp	r3, #0
 800ff6c:	d0f0      	beq.n	800ff50 <HAL_RCC_OscConfig+0x2d0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800ff6e:	4b6d      	ldr	r3, [pc, #436]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff70:	68db      	ldr	r3, [r3, #12]
 800ff72:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	6a1b      	ldr	r3, [r3, #32]
 800ff7a:	061b      	lsls	r3, r3, #24
 800ff7c:	4969      	ldr	r1, [pc, #420]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff7e:	4313      	orrs	r3, r2
 800ff80:	60cb      	str	r3, [r1, #12]
 800ff82:	e018      	b.n	800ffb6 <HAL_RCC_OscConfig+0x336>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800ff84:	4b67      	ldr	r3, [pc, #412]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff86:	681b      	ldr	r3, [r3, #0]
 800ff88:	4a66      	ldr	r2, [pc, #408]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ff8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ff8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800ff90:	f7fe ff0c 	bl	800edac <HAL_GetTick>
 800ff94:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ff96:	e008      	b.n	800ffaa <HAL_RCC_OscConfig+0x32a>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800ff98:	f7fe ff08 	bl	800edac <HAL_GetTick>
 800ff9c:	4602      	mov	r2, r0
 800ff9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffa0:	1ad3      	subs	r3, r2, r3
 800ffa2:	2b02      	cmp	r3, #2
 800ffa4:	d901      	bls.n	800ffaa <HAL_RCC_OscConfig+0x32a>
          {
            return HAL_TIMEOUT;
 800ffa6:	2303      	movs	r3, #3
 800ffa8:	e23c      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800ffaa:	4b5e      	ldr	r3, [pc, #376]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ffac:	681b      	ldr	r3, [r3, #0]
 800ffae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ffb2:	2b00      	cmp	r3, #0
 800ffb4:	d1f0      	bne.n	800ff98 <HAL_RCC_OscConfig+0x318>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800ffb6:	687b      	ldr	r3, [r7, #4]
 800ffb8:	681b      	ldr	r3, [r3, #0]
 800ffba:	f003 0308 	and.w	r3, r3, #8
 800ffbe:	2b00      	cmp	r3, #0
 800ffc0:	d036      	beq.n	8010030 <HAL_RCC_OscConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	695b      	ldr	r3, [r3, #20]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d019      	beq.n	800fffe <HAL_RCC_OscConfig+0x37e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800ffca:	4b56      	ldr	r3, [pc, #344]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ffcc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ffce:	4a55      	ldr	r2, [pc, #340]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800ffd0:	f043 0301 	orr.w	r3, r3, #1
 800ffd4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ffd6:	f7fe fee9 	bl	800edac <HAL_GetTick>
 800ffda:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800ffdc:	e008      	b.n	800fff0 <HAL_RCC_OscConfig+0x370>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800ffde:	f7fe fee5 	bl	800edac <HAL_GetTick>
 800ffe2:	4602      	mov	r2, r0
 800ffe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffe6:	1ad3      	subs	r3, r2, r3
 800ffe8:	2b02      	cmp	r3, #2
 800ffea:	d901      	bls.n	800fff0 <HAL_RCC_OscConfig+0x370>
        {
          return HAL_TIMEOUT;
 800ffec:	2303      	movs	r3, #3
 800ffee:	e219      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fff0:	4b4c      	ldr	r3, [pc, #304]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 800fff2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800fff4:	f003 0302 	and.w	r3, r3, #2
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d0f0      	beq.n	800ffde <HAL_RCC_OscConfig+0x35e>
 800fffc:	e018      	b.n	8010030 <HAL_RCC_OscConfig+0x3b0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fffe:	4b49      	ldr	r3, [pc, #292]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 8010000:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010002:	4a48      	ldr	r2, [pc, #288]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 8010004:	f023 0301 	bic.w	r3, r3, #1
 8010008:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801000a:	f7fe fecf 	bl	800edac <HAL_GetTick>
 801000e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010010:	e008      	b.n	8010024 <HAL_RCC_OscConfig+0x3a4>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8010012:	f7fe fecb 	bl	800edac <HAL_GetTick>
 8010016:	4602      	mov	r2, r0
 8010018:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801001a:	1ad3      	subs	r3, r2, r3
 801001c:	2b02      	cmp	r3, #2
 801001e:	d901      	bls.n	8010024 <HAL_RCC_OscConfig+0x3a4>
        {
          return HAL_TIMEOUT;
 8010020:	2303      	movs	r3, #3
 8010022:	e1ff      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8010024:	4b3f      	ldr	r3, [pc, #252]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 8010026:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010028:	f003 0302 	and.w	r3, r3, #2
 801002c:	2b00      	cmp	r3, #0
 801002e:	d1f0      	bne.n	8010012 <HAL_RCC_OscConfig+0x392>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	681b      	ldr	r3, [r3, #0]
 8010034:	f003 0320 	and.w	r3, r3, #32
 8010038:	2b00      	cmp	r3, #0
 801003a:	d036      	beq.n	80100aa <HAL_RCC_OscConfig+0x42a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801003c:	687b      	ldr	r3, [r7, #4]
 801003e:	699b      	ldr	r3, [r3, #24]
 8010040:	2b00      	cmp	r3, #0
 8010042:	d019      	beq.n	8010078 <HAL_RCC_OscConfig+0x3f8>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8010044:	4b37      	ldr	r3, [pc, #220]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 8010046:	681b      	ldr	r3, [r3, #0]
 8010048:	4a36      	ldr	r2, [pc, #216]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 801004a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 801004e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010050:	f7fe feac 	bl	800edac <HAL_GetTick>
 8010054:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8010056:	e008      	b.n	801006a <HAL_RCC_OscConfig+0x3ea>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8010058:	f7fe fea8 	bl	800edac <HAL_GetTick>
 801005c:	4602      	mov	r2, r0
 801005e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010060:	1ad3      	subs	r3, r2, r3
 8010062:	2b02      	cmp	r3, #2
 8010064:	d901      	bls.n	801006a <HAL_RCC_OscConfig+0x3ea>
        {
          return HAL_TIMEOUT;
 8010066:	2303      	movs	r3, #3
 8010068:	e1dc      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801006a:	4b2e      	ldr	r3, [pc, #184]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 801006c:	681b      	ldr	r3, [r3, #0]
 801006e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8010072:	2b00      	cmp	r3, #0
 8010074:	d0f0      	beq.n	8010058 <HAL_RCC_OscConfig+0x3d8>
 8010076:	e018      	b.n	80100aa <HAL_RCC_OscConfig+0x42a>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8010078:	4b2a      	ldr	r3, [pc, #168]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 801007a:	681b      	ldr	r3, [r3, #0]
 801007c:	4a29      	ldr	r2, [pc, #164]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 801007e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8010082:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8010084:	f7fe fe92 	bl	800edac <HAL_GetTick>
 8010088:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801008a:	e008      	b.n	801009e <HAL_RCC_OscConfig+0x41e>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801008c:	f7fe fe8e 	bl	800edac <HAL_GetTick>
 8010090:	4602      	mov	r2, r0
 8010092:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010094:	1ad3      	subs	r3, r2, r3
 8010096:	2b02      	cmp	r3, #2
 8010098:	d901      	bls.n	801009e <HAL_RCC_OscConfig+0x41e>
        {
          return HAL_TIMEOUT;
 801009a:	2303      	movs	r3, #3
 801009c:	e1c2      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801009e:	4b21      	ldr	r3, [pc, #132]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80100a6:	2b00      	cmp	r3, #0
 80100a8:	d1f0      	bne.n	801008c <HAL_RCC_OscConfig+0x40c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	681b      	ldr	r3, [r3, #0]
 80100ae:	f003 0304 	and.w	r3, r3, #4
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	f000 8086 	beq.w	80101c4 <HAL_RCC_OscConfig+0x544>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80100b8:	4b1b      	ldr	r3, [pc, #108]	; (8010128 <HAL_RCC_OscConfig+0x4a8>)
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	4a1a      	ldr	r2, [pc, #104]	; (8010128 <HAL_RCC_OscConfig+0x4a8>)
 80100be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80100c2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80100c4:	f7fe fe72 	bl	800edac <HAL_GetTick>
 80100c8:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80100ca:	e008      	b.n	80100de <HAL_RCC_OscConfig+0x45e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80100cc:	f7fe fe6e 	bl	800edac <HAL_GetTick>
 80100d0:	4602      	mov	r2, r0
 80100d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	2b64      	cmp	r3, #100	; 0x64
 80100d8:	d901      	bls.n	80100de <HAL_RCC_OscConfig+0x45e>
      {
        return HAL_TIMEOUT;
 80100da:	2303      	movs	r3, #3
 80100dc:	e1a2      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80100de:	4b12      	ldr	r3, [pc, #72]	; (8010128 <HAL_RCC_OscConfig+0x4a8>)
 80100e0:	681b      	ldr	r3, [r3, #0]
 80100e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80100e6:	2b00      	cmp	r3, #0
 80100e8:	d0f0      	beq.n	80100cc <HAL_RCC_OscConfig+0x44c>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	689b      	ldr	r3, [r3, #8]
 80100ee:	2b01      	cmp	r3, #1
 80100f0:	d106      	bne.n	8010100 <HAL_RCC_OscConfig+0x480>
 80100f2:	4b0c      	ldr	r3, [pc, #48]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 80100f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80100f6:	4a0b      	ldr	r2, [pc, #44]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 80100f8:	f043 0301 	orr.w	r3, r3, #1
 80100fc:	6713      	str	r3, [r2, #112]	; 0x70
 80100fe:	e032      	b.n	8010166 <HAL_RCC_OscConfig+0x4e6>
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	689b      	ldr	r3, [r3, #8]
 8010104:	2b00      	cmp	r3, #0
 8010106:	d111      	bne.n	801012c <HAL_RCC_OscConfig+0x4ac>
 8010108:	4b06      	ldr	r3, [pc, #24]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 801010a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801010c:	4a05      	ldr	r2, [pc, #20]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 801010e:	f023 0301 	bic.w	r3, r3, #1
 8010112:	6713      	str	r3, [r2, #112]	; 0x70
 8010114:	4b03      	ldr	r3, [pc, #12]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 8010116:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010118:	4a02      	ldr	r2, [pc, #8]	; (8010124 <HAL_RCC_OscConfig+0x4a4>)
 801011a:	f023 0304 	bic.w	r3, r3, #4
 801011e:	6713      	str	r3, [r2, #112]	; 0x70
 8010120:	e021      	b.n	8010166 <HAL_RCC_OscConfig+0x4e6>
 8010122:	bf00      	nop
 8010124:	58024400 	.word	0x58024400
 8010128:	58024800 	.word	0x58024800
 801012c:	687b      	ldr	r3, [r7, #4]
 801012e:	689b      	ldr	r3, [r3, #8]
 8010130:	2b05      	cmp	r3, #5
 8010132:	d10c      	bne.n	801014e <HAL_RCC_OscConfig+0x4ce>
 8010134:	4b83      	ldr	r3, [pc, #524]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010136:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010138:	4a82      	ldr	r2, [pc, #520]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801013a:	f043 0304 	orr.w	r3, r3, #4
 801013e:	6713      	str	r3, [r2, #112]	; 0x70
 8010140:	4b80      	ldr	r3, [pc, #512]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010142:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010144:	4a7f      	ldr	r2, [pc, #508]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010146:	f043 0301 	orr.w	r3, r3, #1
 801014a:	6713      	str	r3, [r2, #112]	; 0x70
 801014c:	e00b      	b.n	8010166 <HAL_RCC_OscConfig+0x4e6>
 801014e:	4b7d      	ldr	r3, [pc, #500]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010150:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010152:	4a7c      	ldr	r2, [pc, #496]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010154:	f023 0301 	bic.w	r3, r3, #1
 8010158:	6713      	str	r3, [r2, #112]	; 0x70
 801015a:	4b7a      	ldr	r3, [pc, #488]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801015c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801015e:	4a79      	ldr	r2, [pc, #484]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010160:	f023 0304 	bic.w	r3, r3, #4
 8010164:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	689b      	ldr	r3, [r3, #8]
 801016a:	2b00      	cmp	r3, #0
 801016c:	d015      	beq.n	801019a <HAL_RCC_OscConfig+0x51a>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801016e:	f7fe fe1d 	bl	800edac <HAL_GetTick>
 8010172:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010174:	e00a      	b.n	801018c <HAL_RCC_OscConfig+0x50c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010176:	f7fe fe19 	bl	800edac <HAL_GetTick>
 801017a:	4602      	mov	r2, r0
 801017c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801017e:	1ad3      	subs	r3, r2, r3
 8010180:	f241 3288 	movw	r2, #5000	; 0x1388
 8010184:	4293      	cmp	r3, r2
 8010186:	d901      	bls.n	801018c <HAL_RCC_OscConfig+0x50c>
        {
          return HAL_TIMEOUT;
 8010188:	2303      	movs	r3, #3
 801018a:	e14b      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801018c:	4b6d      	ldr	r3, [pc, #436]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801018e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010190:	f003 0302 	and.w	r3, r3, #2
 8010194:	2b00      	cmp	r3, #0
 8010196:	d0ee      	beq.n	8010176 <HAL_RCC_OscConfig+0x4f6>
 8010198:	e014      	b.n	80101c4 <HAL_RCC_OscConfig+0x544>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801019a:	f7fe fe07 	bl	800edac <HAL_GetTick>
 801019e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80101a0:	e00a      	b.n	80101b8 <HAL_RCC_OscConfig+0x538>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80101a2:	f7fe fe03 	bl	800edac <HAL_GetTick>
 80101a6:	4602      	mov	r2, r0
 80101a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80101aa:	1ad3      	subs	r3, r2, r3
 80101ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80101b0:	4293      	cmp	r3, r2
 80101b2:	d901      	bls.n	80101b8 <HAL_RCC_OscConfig+0x538>
        {
          return HAL_TIMEOUT;
 80101b4:	2303      	movs	r3, #3
 80101b6:	e135      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80101b8:	4b62      	ldr	r3, [pc, #392]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80101ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80101bc:	f003 0302 	and.w	r3, r3, #2
 80101c0:	2b00      	cmp	r3, #0
 80101c2:	d1ee      	bne.n	80101a2 <HAL_RCC_OscConfig+0x522>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80101c4:	687b      	ldr	r3, [r7, #4]
 80101c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101c8:	2b00      	cmp	r3, #0
 80101ca:	f000 812a 	beq.w	8010422 <HAL_RCC_OscConfig+0x7a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80101ce:	4b5d      	ldr	r3, [pc, #372]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80101d0:	691b      	ldr	r3, [r3, #16]
 80101d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80101d6:	2b18      	cmp	r3, #24
 80101d8:	f000 80ba 	beq.w	8010350 <HAL_RCC_OscConfig+0x6d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80101dc:	687b      	ldr	r3, [r7, #4]
 80101de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80101e0:	2b02      	cmp	r3, #2
 80101e2:	f040 8095 	bne.w	8010310 <HAL_RCC_OscConfig+0x690>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80101e6:	4b57      	ldr	r3, [pc, #348]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80101e8:	681b      	ldr	r3, [r3, #0]
 80101ea:	4a56      	ldr	r2, [pc, #344]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80101ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80101f0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80101f2:	f7fe fddb 	bl	800edac <HAL_GetTick>
 80101f6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80101f8:	e008      	b.n	801020c <HAL_RCC_OscConfig+0x58c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80101fa:	f7fe fdd7 	bl	800edac <HAL_GetTick>
 80101fe:	4602      	mov	r2, r0
 8010200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010202:	1ad3      	subs	r3, r2, r3
 8010204:	2b02      	cmp	r3, #2
 8010206:	d901      	bls.n	801020c <HAL_RCC_OscConfig+0x58c>
          {
            return HAL_TIMEOUT;
 8010208:	2303      	movs	r3, #3
 801020a:	e10b      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801020c:	4b4d      	ldr	r3, [pc, #308]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801020e:	681b      	ldr	r3, [r3, #0]
 8010210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010214:	2b00      	cmp	r3, #0
 8010216:	d1f0      	bne.n	80101fa <HAL_RCC_OscConfig+0x57a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8010218:	4b4a      	ldr	r3, [pc, #296]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801021a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 801021c:	4b4a      	ldr	r3, [pc, #296]	; (8010348 <HAL_RCC_OscConfig+0x6c8>)
 801021e:	4013      	ands	r3, r2
 8010220:	687a      	ldr	r2, [r7, #4]
 8010222:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8010224:	687a      	ldr	r2, [r7, #4]
 8010226:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8010228:	0112      	lsls	r2, r2, #4
 801022a:	430a      	orrs	r2, r1
 801022c:	4945      	ldr	r1, [pc, #276]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801022e:	4313      	orrs	r3, r2
 8010230:	628b      	str	r3, [r1, #40]	; 0x28
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010236:	3b01      	subs	r3, #1
 8010238:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801023c:	687b      	ldr	r3, [r7, #4]
 801023e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010240:	3b01      	subs	r3, #1
 8010242:	025b      	lsls	r3, r3, #9
 8010244:	b29b      	uxth	r3, r3
 8010246:	431a      	orrs	r2, r3
 8010248:	687b      	ldr	r3, [r7, #4]
 801024a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801024c:	3b01      	subs	r3, #1
 801024e:	041b      	lsls	r3, r3, #16
 8010250:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8010254:	431a      	orrs	r2, r3
 8010256:	687b      	ldr	r3, [r7, #4]
 8010258:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801025a:	3b01      	subs	r3, #1
 801025c:	061b      	lsls	r3, r3, #24
 801025e:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8010262:	4938      	ldr	r1, [pc, #224]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010264:	4313      	orrs	r3, r2
 8010266:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8010268:	4b36      	ldr	r3, [pc, #216]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801026a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801026c:	4a35      	ldr	r2, [pc, #212]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801026e:	f023 0301 	bic.w	r3, r3, #1
 8010272:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010274:	4b33      	ldr	r3, [pc, #204]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010276:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010278:	4b34      	ldr	r3, [pc, #208]	; (801034c <HAL_RCC_OscConfig+0x6cc>)
 801027a:	4013      	ands	r3, r2
 801027c:	687a      	ldr	r2, [r7, #4]
 801027e:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8010280:	00d2      	lsls	r2, r2, #3
 8010282:	4930      	ldr	r1, [pc, #192]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010284:	4313      	orrs	r3, r2
 8010286:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8010288:	4b2e      	ldr	r3, [pc, #184]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801028a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801028c:	f023 020c 	bic.w	r2, r3, #12
 8010290:	687b      	ldr	r3, [r7, #4]
 8010292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010294:	492b      	ldr	r1, [pc, #172]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010296:	4313      	orrs	r3, r2
 8010298:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801029a:	4b2a      	ldr	r3, [pc, #168]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 801029c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801029e:	f023 0202 	bic.w	r2, r3, #2
 80102a2:	687b      	ldr	r3, [r7, #4]
 80102a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80102a6:	4927      	ldr	r1, [pc, #156]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102a8:	4313      	orrs	r3, r2
 80102aa:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80102ac:	4b25      	ldr	r3, [pc, #148]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102b0:	4a24      	ldr	r2, [pc, #144]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102b2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80102b6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80102b8:	4b22      	ldr	r3, [pc, #136]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102bc:	4a21      	ldr	r2, [pc, #132]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102be:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80102c2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80102c4:	4b1f      	ldr	r3, [pc, #124]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102c8:	4a1e      	ldr	r2, [pc, #120]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102ca:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80102ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80102d0:	4b1c      	ldr	r3, [pc, #112]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102d4:	4a1b      	ldr	r2, [pc, #108]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102d6:	f043 0301 	orr.w	r3, r3, #1
 80102da:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80102dc:	4b19      	ldr	r3, [pc, #100]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102de:	681b      	ldr	r3, [r3, #0]
 80102e0:	4a18      	ldr	r2, [pc, #96]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 80102e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80102e6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80102e8:	f7fe fd60 	bl	800edac <HAL_GetTick>
 80102ec:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80102ee:	e008      	b.n	8010302 <HAL_RCC_OscConfig+0x682>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80102f0:	f7fe fd5c 	bl	800edac <HAL_GetTick>
 80102f4:	4602      	mov	r2, r0
 80102f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80102f8:	1ad3      	subs	r3, r2, r3
 80102fa:	2b02      	cmp	r3, #2
 80102fc:	d901      	bls.n	8010302 <HAL_RCC_OscConfig+0x682>
          {
            return HAL_TIMEOUT;
 80102fe:	2303      	movs	r3, #3
 8010300:	e090      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8010302:	4b10      	ldr	r3, [pc, #64]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010304:	681b      	ldr	r3, [r3, #0]
 8010306:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801030a:	2b00      	cmp	r3, #0
 801030c:	d0f0      	beq.n	80102f0 <HAL_RCC_OscConfig+0x670>
 801030e:	e088      	b.n	8010422 <HAL_RCC_OscConfig+0x7a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010310:	4b0c      	ldr	r3, [pc, #48]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	4a0b      	ldr	r2, [pc, #44]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010316:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 801031a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801031c:	f7fe fd46 	bl	800edac <HAL_GetTick>
 8010320:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010322:	e008      	b.n	8010336 <HAL_RCC_OscConfig+0x6b6>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8010324:	f7fe fd42 	bl	800edac <HAL_GetTick>
 8010328:	4602      	mov	r2, r0
 801032a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801032c:	1ad3      	subs	r3, r2, r3
 801032e:	2b02      	cmp	r3, #2
 8010330:	d901      	bls.n	8010336 <HAL_RCC_OscConfig+0x6b6>
          {
            return HAL_TIMEOUT;
 8010332:	2303      	movs	r3, #3
 8010334:	e076      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8010336:	4b03      	ldr	r3, [pc, #12]	; (8010344 <HAL_RCC_OscConfig+0x6c4>)
 8010338:	681b      	ldr	r3, [r3, #0]
 801033a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 801033e:	2b00      	cmp	r3, #0
 8010340:	d1f0      	bne.n	8010324 <HAL_RCC_OscConfig+0x6a4>
 8010342:	e06e      	b.n	8010422 <HAL_RCC_OscConfig+0x7a2>
 8010344:	58024400 	.word	0x58024400
 8010348:	fffffc0c 	.word	0xfffffc0c
 801034c:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8010350:	4b36      	ldr	r3, [pc, #216]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 8010352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010354:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8010356:	4b35      	ldr	r3, [pc, #212]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 8010358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801035a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801035c:	687b      	ldr	r3, [r7, #4]
 801035e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010360:	2b01      	cmp	r3, #1
 8010362:	d031      	beq.n	80103c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010364:	693b      	ldr	r3, [r7, #16]
 8010366:	f003 0203 	and.w	r2, r3, #3
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801036e:	429a      	cmp	r2, r3
 8010370:	d12a      	bne.n	80103c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8010372:	693b      	ldr	r3, [r7, #16]
 8010374:	091b      	lsrs	r3, r3, #4
 8010376:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 801037a:	687b      	ldr	r3, [r7, #4]
 801037c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801037e:	429a      	cmp	r2, r3
 8010380:	d122      	bne.n	80103c8 <HAL_RCC_OscConfig+0x748>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8010382:	68fb      	ldr	r3, [r7, #12]
 8010384:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8010388:	687b      	ldr	r3, [r7, #4]
 801038a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801038c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801038e:	429a      	cmp	r2, r3
 8010390:	d11a      	bne.n	80103c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8010392:	68fb      	ldr	r3, [r7, #12]
 8010394:	0a5b      	lsrs	r3, r3, #9
 8010396:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801039a:	687b      	ldr	r3, [r7, #4]
 801039c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801039e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80103a0:	429a      	cmp	r2, r3
 80103a2:	d111      	bne.n	80103c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	0c1b      	lsrs	r3, r3, #16
 80103a8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103ac:	687b      	ldr	r3, [r7, #4]
 80103ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80103b0:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80103b2:	429a      	cmp	r2, r3
 80103b4:	d108      	bne.n	80103c8 <HAL_RCC_OscConfig+0x748>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80103b6:	68fb      	ldr	r3, [r7, #12]
 80103b8:	0e1b      	lsrs	r3, r3, #24
 80103ba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80103c2:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80103c4:	429a      	cmp	r2, r3
 80103c6:	d001      	beq.n	80103cc <HAL_RCC_OscConfig+0x74c>
      {
        return HAL_ERROR;
 80103c8:	2301      	movs	r3, #1
 80103ca:	e02b      	b.n	8010424 <HAL_RCC_OscConfig+0x7a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80103cc:	4b17      	ldr	r3, [pc, #92]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 80103ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80103d0:	08db      	lsrs	r3, r3, #3
 80103d2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80103d6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80103d8:	687b      	ldr	r3, [r7, #4]
 80103da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80103dc:	693a      	ldr	r2, [r7, #16]
 80103de:	429a      	cmp	r2, r3
 80103e0:	d01f      	beq.n	8010422 <HAL_RCC_OscConfig+0x7a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80103e2:	4b12      	ldr	r3, [pc, #72]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 80103e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103e6:	4a11      	ldr	r2, [pc, #68]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 80103e8:	f023 0301 	bic.w	r3, r3, #1
 80103ec:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80103ee:	f7fe fcdd 	bl	800edac <HAL_GetTick>
 80103f2:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 80103f4:	bf00      	nop
 80103f6:	f7fe fcd9 	bl	800edac <HAL_GetTick>
 80103fa:	4602      	mov	r2, r0
 80103fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80103fe:	4293      	cmp	r3, r2
 8010400:	d0f9      	beq.n	80103f6 <HAL_RCC_OscConfig+0x776>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8010402:	4b0a      	ldr	r3, [pc, #40]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 8010404:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8010406:	4b0a      	ldr	r3, [pc, #40]	; (8010430 <HAL_RCC_OscConfig+0x7b0>)
 8010408:	4013      	ands	r3, r2
 801040a:	687a      	ldr	r2, [r7, #4]
 801040c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 801040e:	00d2      	lsls	r2, r2, #3
 8010410:	4906      	ldr	r1, [pc, #24]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 8010412:	4313      	orrs	r3, r2
 8010414:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8010416:	4b05      	ldr	r3, [pc, #20]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 8010418:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801041a:	4a04      	ldr	r2, [pc, #16]	; (801042c <HAL_RCC_OscConfig+0x7ac>)
 801041c:	f043 0301 	orr.w	r3, r3, #1
 8010420:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8010422:	2300      	movs	r3, #0
}
 8010424:	4618      	mov	r0, r3
 8010426:	3730      	adds	r7, #48	; 0x30
 8010428:	46bd      	mov	sp, r7
 801042a:	bd80      	pop	{r7, pc}
 801042c:	58024400 	.word	0x58024400
 8010430:	ffff0007 	.word	0xffff0007

08010434 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010434:	b580      	push	{r7, lr}
 8010436:	b086      	sub	sp, #24
 8010438:	af00      	add	r7, sp, #0
 801043a:	6078      	str	r0, [r7, #4]
 801043c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801043e:	687b      	ldr	r3, [r7, #4]
 8010440:	2b00      	cmp	r3, #0
 8010442:	d101      	bne.n	8010448 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010444:	2301      	movs	r3, #1
 8010446:	e19c      	b.n	8010782 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8010448:	4b8a      	ldr	r3, [pc, #552]	; (8010674 <HAL_RCC_ClockConfig+0x240>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	f003 030f 	and.w	r3, r3, #15
 8010450:	683a      	ldr	r2, [r7, #0]
 8010452:	429a      	cmp	r2, r3
 8010454:	d910      	bls.n	8010478 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010456:	4b87      	ldr	r3, [pc, #540]	; (8010674 <HAL_RCC_ClockConfig+0x240>)
 8010458:	681b      	ldr	r3, [r3, #0]
 801045a:	f023 020f 	bic.w	r2, r3, #15
 801045e:	4985      	ldr	r1, [pc, #532]	; (8010674 <HAL_RCC_ClockConfig+0x240>)
 8010460:	683b      	ldr	r3, [r7, #0]
 8010462:	4313      	orrs	r3, r2
 8010464:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010466:	4b83      	ldr	r3, [pc, #524]	; (8010674 <HAL_RCC_ClockConfig+0x240>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f003 030f 	and.w	r3, r3, #15
 801046e:	683a      	ldr	r2, [r7, #0]
 8010470:	429a      	cmp	r2, r3
 8010472:	d001      	beq.n	8010478 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8010474:	2301      	movs	r3, #1
 8010476:	e184      	b.n	8010782 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	681b      	ldr	r3, [r3, #0]
 801047c:	f003 0304 	and.w	r3, r3, #4
 8010480:	2b00      	cmp	r3, #0
 8010482:	d010      	beq.n	80104a6 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010484:	687b      	ldr	r3, [r7, #4]
 8010486:	691a      	ldr	r2, [r3, #16]
 8010488:	4b7b      	ldr	r3, [pc, #492]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 801048a:	699b      	ldr	r3, [r3, #24]
 801048c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010490:	429a      	cmp	r2, r3
 8010492:	d908      	bls.n	80104a6 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010494:	4b78      	ldr	r3, [pc, #480]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010496:	699b      	ldr	r3, [r3, #24]
 8010498:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	691b      	ldr	r3, [r3, #16]
 80104a0:	4975      	ldr	r1, [pc, #468]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80104a2:	4313      	orrs	r3, r2
 80104a4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80104a6:	687b      	ldr	r3, [r7, #4]
 80104a8:	681b      	ldr	r3, [r3, #0]
 80104aa:	f003 0308 	and.w	r3, r3, #8
 80104ae:	2b00      	cmp	r3, #0
 80104b0:	d010      	beq.n	80104d4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80104b2:	687b      	ldr	r3, [r7, #4]
 80104b4:	695a      	ldr	r2, [r3, #20]
 80104b6:	4b70      	ldr	r3, [pc, #448]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80104b8:	69db      	ldr	r3, [r3, #28]
 80104ba:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80104be:	429a      	cmp	r2, r3
 80104c0:	d908      	bls.n	80104d4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80104c2:	4b6d      	ldr	r3, [pc, #436]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80104c4:	69db      	ldr	r3, [r3, #28]
 80104c6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	695b      	ldr	r3, [r3, #20]
 80104ce:	496a      	ldr	r1, [pc, #424]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80104d0:	4313      	orrs	r3, r2
 80104d2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80104d4:	687b      	ldr	r3, [r7, #4]
 80104d6:	681b      	ldr	r3, [r3, #0]
 80104d8:	f003 0310 	and.w	r3, r3, #16
 80104dc:	2b00      	cmp	r3, #0
 80104de:	d010      	beq.n	8010502 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80104e0:	687b      	ldr	r3, [r7, #4]
 80104e2:	699a      	ldr	r2, [r3, #24]
 80104e4:	4b64      	ldr	r3, [pc, #400]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80104e6:	69db      	ldr	r3, [r3, #28]
 80104e8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80104ec:	429a      	cmp	r2, r3
 80104ee:	d908      	bls.n	8010502 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80104f0:	4b61      	ldr	r3, [pc, #388]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80104f2:	69db      	ldr	r3, [r3, #28]
 80104f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80104f8:	687b      	ldr	r3, [r7, #4]
 80104fa:	699b      	ldr	r3, [r3, #24]
 80104fc:	495e      	ldr	r1, [pc, #376]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80104fe:	4313      	orrs	r3, r2
 8010500:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010502:	687b      	ldr	r3, [r7, #4]
 8010504:	681b      	ldr	r3, [r3, #0]
 8010506:	f003 0320 	and.w	r3, r3, #32
 801050a:	2b00      	cmp	r3, #0
 801050c:	d010      	beq.n	8010530 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	69da      	ldr	r2, [r3, #28]
 8010512:	4b59      	ldr	r3, [pc, #356]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010514:	6a1b      	ldr	r3, [r3, #32]
 8010516:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801051a:	429a      	cmp	r2, r3
 801051c:	d908      	bls.n	8010530 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801051e:	4b56      	ldr	r3, [pc, #344]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010520:	6a1b      	ldr	r3, [r3, #32]
 8010522:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	69db      	ldr	r3, [r3, #28]
 801052a:	4953      	ldr	r1, [pc, #332]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 801052c:	4313      	orrs	r3, r2
 801052e:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	681b      	ldr	r3, [r3, #0]
 8010534:	f003 0302 	and.w	r3, r3, #2
 8010538:	2b00      	cmp	r3, #0
 801053a:	d010      	beq.n	801055e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	68da      	ldr	r2, [r3, #12]
 8010540:	4b4d      	ldr	r3, [pc, #308]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010542:	699b      	ldr	r3, [r3, #24]
 8010544:	f003 030f 	and.w	r3, r3, #15
 8010548:	429a      	cmp	r2, r3
 801054a:	d908      	bls.n	801055e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801054c:	4b4a      	ldr	r3, [pc, #296]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 801054e:	699b      	ldr	r3, [r3, #24]
 8010550:	f023 020f 	bic.w	r2, r3, #15
 8010554:	687b      	ldr	r3, [r7, #4]
 8010556:	68db      	ldr	r3, [r3, #12]
 8010558:	4947      	ldr	r1, [pc, #284]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 801055a:	4313      	orrs	r3, r2
 801055c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801055e:	687b      	ldr	r3, [r7, #4]
 8010560:	681b      	ldr	r3, [r3, #0]
 8010562:	f003 0301 	and.w	r3, r3, #1
 8010566:	2b00      	cmp	r3, #0
 8010568:	d055      	beq.n	8010616 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801056a:	4b43      	ldr	r3, [pc, #268]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 801056c:	699b      	ldr	r3, [r3, #24]
 801056e:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8010572:	687b      	ldr	r3, [r7, #4]
 8010574:	689b      	ldr	r3, [r3, #8]
 8010576:	4940      	ldr	r1, [pc, #256]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010578:	4313      	orrs	r3, r2
 801057a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801057c:	687b      	ldr	r3, [r7, #4]
 801057e:	685b      	ldr	r3, [r3, #4]
 8010580:	2b02      	cmp	r3, #2
 8010582:	d107      	bne.n	8010594 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8010584:	4b3c      	ldr	r3, [pc, #240]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010586:	681b      	ldr	r3, [r3, #0]
 8010588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801058c:	2b00      	cmp	r3, #0
 801058e:	d121      	bne.n	80105d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8010590:	2301      	movs	r3, #1
 8010592:	e0f6      	b.n	8010782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	685b      	ldr	r3, [r3, #4]
 8010598:	2b03      	cmp	r3, #3
 801059a:	d107      	bne.n	80105ac <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801059c:	4b36      	ldr	r3, [pc, #216]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 801059e:	681b      	ldr	r3, [r3, #0]
 80105a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80105a4:	2b00      	cmp	r3, #0
 80105a6:	d115      	bne.n	80105d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80105a8:	2301      	movs	r3, #1
 80105aa:	e0ea      	b.n	8010782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	685b      	ldr	r3, [r3, #4]
 80105b0:	2b01      	cmp	r3, #1
 80105b2:	d107      	bne.n	80105c4 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80105b4:	4b30      	ldr	r3, [pc, #192]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80105b6:	681b      	ldr	r3, [r3, #0]
 80105b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80105bc:	2b00      	cmp	r3, #0
 80105be:	d109      	bne.n	80105d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80105c0:	2301      	movs	r3, #1
 80105c2:	e0de      	b.n	8010782 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80105c4:	4b2c      	ldr	r3, [pc, #176]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80105c6:	681b      	ldr	r3, [r3, #0]
 80105c8:	f003 0304 	and.w	r3, r3, #4
 80105cc:	2b00      	cmp	r3, #0
 80105ce:	d101      	bne.n	80105d4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 80105d0:	2301      	movs	r3, #1
 80105d2:	e0d6      	b.n	8010782 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80105d4:	4b28      	ldr	r3, [pc, #160]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80105d6:	691b      	ldr	r3, [r3, #16]
 80105d8:	f023 0207 	bic.w	r2, r3, #7
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	685b      	ldr	r3, [r3, #4]
 80105e0:	4925      	ldr	r1, [pc, #148]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 80105e2:	4313      	orrs	r3, r2
 80105e4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80105e6:	f7fe fbe1 	bl	800edac <HAL_GetTick>
 80105ea:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80105ec:	e00a      	b.n	8010604 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80105ee:	f7fe fbdd 	bl	800edac <HAL_GetTick>
 80105f2:	4602      	mov	r2, r0
 80105f4:	697b      	ldr	r3, [r7, #20]
 80105f6:	1ad3      	subs	r3, r2, r3
 80105f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80105fc:	4293      	cmp	r3, r2
 80105fe:	d901      	bls.n	8010604 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8010600:	2303      	movs	r3, #3
 8010602:	e0be      	b.n	8010782 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010604:	4b1c      	ldr	r3, [pc, #112]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010606:	691b      	ldr	r3, [r3, #16]
 8010608:	f003 0238 	and.w	r2, r3, #56	; 0x38
 801060c:	687b      	ldr	r3, [r7, #4]
 801060e:	685b      	ldr	r3, [r3, #4]
 8010610:	00db      	lsls	r3, r3, #3
 8010612:	429a      	cmp	r2, r3
 8010614:	d1eb      	bne.n	80105ee <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	681b      	ldr	r3, [r3, #0]
 801061a:	f003 0302 	and.w	r3, r3, #2
 801061e:	2b00      	cmp	r3, #0
 8010620:	d010      	beq.n	8010644 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8010622:	687b      	ldr	r3, [r7, #4]
 8010624:	68da      	ldr	r2, [r3, #12]
 8010626:	4b14      	ldr	r3, [pc, #80]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010628:	699b      	ldr	r3, [r3, #24]
 801062a:	f003 030f 	and.w	r3, r3, #15
 801062e:	429a      	cmp	r2, r3
 8010630:	d208      	bcs.n	8010644 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010632:	4b11      	ldr	r3, [pc, #68]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010634:	699b      	ldr	r3, [r3, #24]
 8010636:	f023 020f 	bic.w	r2, r3, #15
 801063a:	687b      	ldr	r3, [r7, #4]
 801063c:	68db      	ldr	r3, [r3, #12]
 801063e:	490e      	ldr	r1, [pc, #56]	; (8010678 <HAL_RCC_ClockConfig+0x244>)
 8010640:	4313      	orrs	r3, r2
 8010642:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010644:	4b0b      	ldr	r3, [pc, #44]	; (8010674 <HAL_RCC_ClockConfig+0x240>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f003 030f 	and.w	r3, r3, #15
 801064c:	683a      	ldr	r2, [r7, #0]
 801064e:	429a      	cmp	r2, r3
 8010650:	d214      	bcs.n	801067c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010652:	4b08      	ldr	r3, [pc, #32]	; (8010674 <HAL_RCC_ClockConfig+0x240>)
 8010654:	681b      	ldr	r3, [r3, #0]
 8010656:	f023 020f 	bic.w	r2, r3, #15
 801065a:	4906      	ldr	r1, [pc, #24]	; (8010674 <HAL_RCC_ClockConfig+0x240>)
 801065c:	683b      	ldr	r3, [r7, #0]
 801065e:	4313      	orrs	r3, r2
 8010660:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8010662:	4b04      	ldr	r3, [pc, #16]	; (8010674 <HAL_RCC_ClockConfig+0x240>)
 8010664:	681b      	ldr	r3, [r3, #0]
 8010666:	f003 030f 	and.w	r3, r3, #15
 801066a:	683a      	ldr	r2, [r7, #0]
 801066c:	429a      	cmp	r2, r3
 801066e:	d005      	beq.n	801067c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8010670:	2301      	movs	r3, #1
 8010672:	e086      	b.n	8010782 <HAL_RCC_ClockConfig+0x34e>
 8010674:	52002000 	.word	0x52002000
 8010678:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801067c:	687b      	ldr	r3, [r7, #4]
 801067e:	681b      	ldr	r3, [r3, #0]
 8010680:	f003 0304 	and.w	r3, r3, #4
 8010684:	2b00      	cmp	r3, #0
 8010686:	d010      	beq.n	80106aa <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8010688:	687b      	ldr	r3, [r7, #4]
 801068a:	691a      	ldr	r2, [r3, #16]
 801068c:	4b3f      	ldr	r3, [pc, #252]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 801068e:	699b      	ldr	r3, [r3, #24]
 8010690:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8010694:	429a      	cmp	r2, r3
 8010696:	d208      	bcs.n	80106aa <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8010698:	4b3c      	ldr	r3, [pc, #240]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 801069a:	699b      	ldr	r3, [r3, #24]
 801069c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	691b      	ldr	r3, [r3, #16]
 80106a4:	4939      	ldr	r1, [pc, #228]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 80106a6:	4313      	orrs	r3, r2
 80106a8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	681b      	ldr	r3, [r3, #0]
 80106ae:	f003 0308 	and.w	r3, r3, #8
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	d010      	beq.n	80106d8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80106b6:	687b      	ldr	r3, [r7, #4]
 80106b8:	695a      	ldr	r2, [r3, #20]
 80106ba:	4b34      	ldr	r3, [pc, #208]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 80106bc:	69db      	ldr	r3, [r3, #28]
 80106be:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80106c2:	429a      	cmp	r2, r3
 80106c4:	d208      	bcs.n	80106d8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 80106c6:	4b31      	ldr	r3, [pc, #196]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 80106c8:	69db      	ldr	r3, [r3, #28]
 80106ca:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	695b      	ldr	r3, [r3, #20]
 80106d2:	492e      	ldr	r1, [pc, #184]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 80106d4:	4313      	orrs	r3, r2
 80106d6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	681b      	ldr	r3, [r3, #0]
 80106dc:	f003 0310 	and.w	r3, r3, #16
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d010      	beq.n	8010706 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	699a      	ldr	r2, [r3, #24]
 80106e8:	4b28      	ldr	r3, [pc, #160]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 80106ea:	69db      	ldr	r3, [r3, #28]
 80106ec:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80106f0:	429a      	cmp	r2, r3
 80106f2:	d208      	bcs.n	8010706 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 80106f4:	4b25      	ldr	r3, [pc, #148]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 80106f6:	69db      	ldr	r3, [r3, #28]
 80106f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80106fc:	687b      	ldr	r3, [r7, #4]
 80106fe:	699b      	ldr	r3, [r3, #24]
 8010700:	4922      	ldr	r1, [pc, #136]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 8010702:	4313      	orrs	r3, r2
 8010704:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	681b      	ldr	r3, [r3, #0]
 801070a:	f003 0320 	and.w	r3, r3, #32
 801070e:	2b00      	cmp	r3, #0
 8010710:	d010      	beq.n	8010734 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8010712:	687b      	ldr	r3, [r7, #4]
 8010714:	69da      	ldr	r2, [r3, #28]
 8010716:	4b1d      	ldr	r3, [pc, #116]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 8010718:	6a1b      	ldr	r3, [r3, #32]
 801071a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 801071e:	429a      	cmp	r2, r3
 8010720:	d208      	bcs.n	8010734 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8010722:	4b1a      	ldr	r3, [pc, #104]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 8010724:	6a1b      	ldr	r3, [r3, #32]
 8010726:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 801072a:	687b      	ldr	r3, [r7, #4]
 801072c:	69db      	ldr	r3, [r3, #28]
 801072e:	4917      	ldr	r1, [pc, #92]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 8010730:	4313      	orrs	r3, r2
 8010732:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010734:	f000 f834 	bl	80107a0 <HAL_RCC_GetSysClockFreq>
 8010738:	4602      	mov	r2, r0
 801073a:	4b14      	ldr	r3, [pc, #80]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 801073c:	699b      	ldr	r3, [r3, #24]
 801073e:	0a1b      	lsrs	r3, r3, #8
 8010740:	f003 030f 	and.w	r3, r3, #15
 8010744:	4912      	ldr	r1, [pc, #72]	; (8010790 <HAL_RCC_ClockConfig+0x35c>)
 8010746:	5ccb      	ldrb	r3, [r1, r3]
 8010748:	f003 031f 	and.w	r3, r3, #31
 801074c:	fa22 f303 	lsr.w	r3, r2, r3
 8010750:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010752:	4b0e      	ldr	r3, [pc, #56]	; (801078c <HAL_RCC_ClockConfig+0x358>)
 8010754:	699b      	ldr	r3, [r3, #24]
 8010756:	f003 030f 	and.w	r3, r3, #15
 801075a:	4a0d      	ldr	r2, [pc, #52]	; (8010790 <HAL_RCC_ClockConfig+0x35c>)
 801075c:	5cd3      	ldrb	r3, [r2, r3]
 801075e:	f003 031f 	and.w	r3, r3, #31
 8010762:	693a      	ldr	r2, [r7, #16]
 8010764:	fa22 f303 	lsr.w	r3, r2, r3
 8010768:	4a0a      	ldr	r2, [pc, #40]	; (8010794 <HAL_RCC_ClockConfig+0x360>)
 801076a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801076c:	4a0a      	ldr	r2, [pc, #40]	; (8010798 <HAL_RCC_ClockConfig+0x364>)
 801076e:	693b      	ldr	r3, [r7, #16]
 8010770:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8010772:	4b0a      	ldr	r3, [pc, #40]	; (801079c <HAL_RCC_ClockConfig+0x368>)
 8010774:	681b      	ldr	r3, [r3, #0]
 8010776:	4618      	mov	r0, r3
 8010778:	f7fe face 	bl	800ed18 <HAL_InitTick>
 801077c:	4603      	mov	r3, r0
 801077e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8010780:	7bfb      	ldrb	r3, [r7, #15]
}
 8010782:	4618      	mov	r0, r3
 8010784:	3718      	adds	r7, #24
 8010786:	46bd      	mov	sp, r7
 8010788:	bd80      	pop	{r7, pc}
 801078a:	bf00      	nop
 801078c:	58024400 	.word	0x58024400
 8010790:	08018150 	.word	0x08018150
 8010794:	240002ac 	.word	0x240002ac
 8010798:	240002a8 	.word	0x240002a8
 801079c:	240002b0 	.word	0x240002b0

080107a0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80107a0:	b480      	push	{r7}
 80107a2:	b089      	sub	sp, #36	; 0x24
 80107a4:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80107a6:	4bb3      	ldr	r3, [pc, #716]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80107a8:	691b      	ldr	r3, [r3, #16]
 80107aa:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80107ae:	2b18      	cmp	r3, #24
 80107b0:	f200 8155 	bhi.w	8010a5e <HAL_RCC_GetSysClockFreq+0x2be>
 80107b4:	a201      	add	r2, pc, #4	; (adr r2, 80107bc <HAL_RCC_GetSysClockFreq+0x1c>)
 80107b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80107ba:	bf00      	nop
 80107bc:	08010821 	.word	0x08010821
 80107c0:	08010a5f 	.word	0x08010a5f
 80107c4:	08010a5f 	.word	0x08010a5f
 80107c8:	08010a5f 	.word	0x08010a5f
 80107cc:	08010a5f 	.word	0x08010a5f
 80107d0:	08010a5f 	.word	0x08010a5f
 80107d4:	08010a5f 	.word	0x08010a5f
 80107d8:	08010a5f 	.word	0x08010a5f
 80107dc:	08010847 	.word	0x08010847
 80107e0:	08010a5f 	.word	0x08010a5f
 80107e4:	08010a5f 	.word	0x08010a5f
 80107e8:	08010a5f 	.word	0x08010a5f
 80107ec:	08010a5f 	.word	0x08010a5f
 80107f0:	08010a5f 	.word	0x08010a5f
 80107f4:	08010a5f 	.word	0x08010a5f
 80107f8:	08010a5f 	.word	0x08010a5f
 80107fc:	0801084d 	.word	0x0801084d
 8010800:	08010a5f 	.word	0x08010a5f
 8010804:	08010a5f 	.word	0x08010a5f
 8010808:	08010a5f 	.word	0x08010a5f
 801080c:	08010a5f 	.word	0x08010a5f
 8010810:	08010a5f 	.word	0x08010a5f
 8010814:	08010a5f 	.word	0x08010a5f
 8010818:	08010a5f 	.word	0x08010a5f
 801081c:	08010853 	.word	0x08010853
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8010820:	4b94      	ldr	r3, [pc, #592]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	f003 0320 	and.w	r3, r3, #32
 8010828:	2b00      	cmp	r3, #0
 801082a:	d009      	beq.n	8010840 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801082c:	4b91      	ldr	r3, [pc, #580]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801082e:	681b      	ldr	r3, [r3, #0]
 8010830:	08db      	lsrs	r3, r3, #3
 8010832:	f003 0303 	and.w	r3, r3, #3
 8010836:	4a90      	ldr	r2, [pc, #576]	; (8010a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010838:	fa22 f303 	lsr.w	r3, r2, r3
 801083c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801083e:	e111      	b.n	8010a64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8010840:	4b8d      	ldr	r3, [pc, #564]	; (8010a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010842:	61bb      	str	r3, [r7, #24]
      break;
 8010844:	e10e      	b.n	8010a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8010846:	4b8d      	ldr	r3, [pc, #564]	; (8010a7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010848:	61bb      	str	r3, [r7, #24]
      break;
 801084a:	e10b      	b.n	8010a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801084c:	4b8c      	ldr	r3, [pc, #560]	; (8010a80 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801084e:	61bb      	str	r3, [r7, #24]
      break;
 8010850:	e108      	b.n	8010a64 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8010852:	4b88      	ldr	r3, [pc, #544]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010854:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010856:	f003 0303 	and.w	r3, r3, #3
 801085a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801085c:	4b85      	ldr	r3, [pc, #532]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801085e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010860:	091b      	lsrs	r3, r3, #4
 8010862:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010866:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8010868:	4b82      	ldr	r3, [pc, #520]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801086a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801086c:	f003 0301 	and.w	r3, r3, #1
 8010870:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8010872:	4b80      	ldr	r3, [pc, #512]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010874:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010876:	08db      	lsrs	r3, r3, #3
 8010878:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801087c:	68fa      	ldr	r2, [r7, #12]
 801087e:	fb02 f303 	mul.w	r3, r2, r3
 8010882:	ee07 3a90 	vmov	s15, r3
 8010886:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801088a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	2b00      	cmp	r3, #0
 8010892:	f000 80e1 	beq.w	8010a58 <HAL_RCC_GetSysClockFreq+0x2b8>
 8010896:	697b      	ldr	r3, [r7, #20]
 8010898:	2b02      	cmp	r3, #2
 801089a:	f000 8083 	beq.w	80109a4 <HAL_RCC_GetSysClockFreq+0x204>
 801089e:	697b      	ldr	r3, [r7, #20]
 80108a0:	2b02      	cmp	r3, #2
 80108a2:	f200 80a1 	bhi.w	80109e8 <HAL_RCC_GetSysClockFreq+0x248>
 80108a6:	697b      	ldr	r3, [r7, #20]
 80108a8:	2b00      	cmp	r3, #0
 80108aa:	d003      	beq.n	80108b4 <HAL_RCC_GetSysClockFreq+0x114>
 80108ac:	697b      	ldr	r3, [r7, #20]
 80108ae:	2b01      	cmp	r3, #1
 80108b0:	d056      	beq.n	8010960 <HAL_RCC_GetSysClockFreq+0x1c0>
 80108b2:	e099      	b.n	80109e8 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80108b4:	4b6f      	ldr	r3, [pc, #444]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80108b6:	681b      	ldr	r3, [r3, #0]
 80108b8:	f003 0320 	and.w	r3, r3, #32
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d02d      	beq.n	801091c <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80108c0:	4b6c      	ldr	r3, [pc, #432]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80108c2:	681b      	ldr	r3, [r3, #0]
 80108c4:	08db      	lsrs	r3, r3, #3
 80108c6:	f003 0303 	and.w	r3, r3, #3
 80108ca:	4a6b      	ldr	r2, [pc, #428]	; (8010a78 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80108cc:	fa22 f303 	lsr.w	r3, r2, r3
 80108d0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80108d2:	687b      	ldr	r3, [r7, #4]
 80108d4:	ee07 3a90 	vmov	s15, r3
 80108d8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108dc:	693b      	ldr	r3, [r7, #16]
 80108de:	ee07 3a90 	vmov	s15, r3
 80108e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80108e6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80108ea:	4b62      	ldr	r3, [pc, #392]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80108ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80108ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80108f2:	ee07 3a90 	vmov	s15, r3
 80108f6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80108fa:	ed97 6a02 	vldr	s12, [r7, #8]
 80108fe:	eddf 5a61 	vldr	s11, [pc, #388]	; 8010a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010902:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010906:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801090a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801090e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010912:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010916:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801091a:	e087      	b.n	8010a2c <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801091c:	693b      	ldr	r3, [r7, #16]
 801091e:	ee07 3a90 	vmov	s15, r3
 8010922:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010926:	eddf 6a58 	vldr	s13, [pc, #352]	; 8010a88 <HAL_RCC_GetSysClockFreq+0x2e8>
 801092a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801092e:	4b51      	ldr	r3, [pc, #324]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010936:	ee07 3a90 	vmov	s15, r3
 801093a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801093e:	ed97 6a02 	vldr	s12, [r7, #8]
 8010942:	eddf 5a50 	vldr	s11, [pc, #320]	; 8010a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010946:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801094a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801094e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010952:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010956:	ee67 7a27 	vmul.f32	s15, s14, s15
 801095a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801095e:	e065      	b.n	8010a2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010960:	693b      	ldr	r3, [r7, #16]
 8010962:	ee07 3a90 	vmov	s15, r3
 8010966:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801096a:	eddf 6a48 	vldr	s13, [pc, #288]	; 8010a8c <HAL_RCC_GetSysClockFreq+0x2ec>
 801096e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010972:	4b40      	ldr	r3, [pc, #256]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801097a:	ee07 3a90 	vmov	s15, r3
 801097e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010982:	ed97 6a02 	vldr	s12, [r7, #8]
 8010986:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8010a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 801098a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801098e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801099a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801099e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80109a2:	e043      	b.n	8010a2c <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80109a4:	693b      	ldr	r3, [r7, #16]
 80109a6:	ee07 3a90 	vmov	s15, r3
 80109aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109ae:	eddf 6a38 	vldr	s13, [pc, #224]	; 8010a90 <HAL_RCC_GetSysClockFreq+0x2f0>
 80109b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109b6:	4b2f      	ldr	r3, [pc, #188]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80109b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80109be:	ee07 3a90 	vmov	s15, r3
 80109c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80109c6:	ed97 6a02 	vldr	s12, [r7, #8]
 80109ca:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8010a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 80109ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80109d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80109d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80109da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80109de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80109e2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80109e6:	e021      	b.n	8010a2c <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80109e8:	693b      	ldr	r3, [r7, #16]
 80109ea:	ee07 3a90 	vmov	s15, r3
 80109ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80109f2:	eddf 6a26 	vldr	s13, [pc, #152]	; 8010a8c <HAL_RCC_GetSysClockFreq+0x2ec>
 80109f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80109fa:	4b1e      	ldr	r3, [pc, #120]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80109fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80109fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010a02:	ee07 3a90 	vmov	s15, r3
 8010a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010a0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8010a0e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8010a84 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8010a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010a26:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010a2a:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8010a2c:	4b11      	ldr	r3, [pc, #68]	; (8010a74 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010a30:	0a5b      	lsrs	r3, r3, #9
 8010a32:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8010a36:	3301      	adds	r3, #1
 8010a38:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8010a3a:	683b      	ldr	r3, [r7, #0]
 8010a3c:	ee07 3a90 	vmov	s15, r3
 8010a40:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010a44:	edd7 6a07 	vldr	s13, [r7, #28]
 8010a48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010a4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8010a50:	ee17 3a90 	vmov	r3, s15
 8010a54:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8010a56:	e005      	b.n	8010a64 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8010a58:	2300      	movs	r3, #0
 8010a5a:	61bb      	str	r3, [r7, #24]
      break;
 8010a5c:	e002      	b.n	8010a64 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8010a5e:	4b07      	ldr	r3, [pc, #28]	; (8010a7c <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010a60:	61bb      	str	r3, [r7, #24]
      break;
 8010a62:	bf00      	nop
  }

  return sysclockfreq;
 8010a64:	69bb      	ldr	r3, [r7, #24]
}
 8010a66:	4618      	mov	r0, r3
 8010a68:	3724      	adds	r7, #36	; 0x24
 8010a6a:	46bd      	mov	sp, r7
 8010a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a70:	4770      	bx	lr
 8010a72:	bf00      	nop
 8010a74:	58024400 	.word	0x58024400
 8010a78:	03d09000 	.word	0x03d09000
 8010a7c:	003d0900 	.word	0x003d0900
 8010a80:	007a1200 	.word	0x007a1200
 8010a84:	46000000 	.word	0x46000000
 8010a88:	4c742400 	.word	0x4c742400
 8010a8c:	4a742400 	.word	0x4a742400
 8010a90:	4af42400 	.word	0x4af42400

08010a94 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010a94:	b580      	push	{r7, lr}
 8010a96:	b082      	sub	sp, #8
 8010a98:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8010a9a:	f7ff fe81 	bl	80107a0 <HAL_RCC_GetSysClockFreq>
 8010a9e:	4602      	mov	r2, r0
 8010aa0:	4b10      	ldr	r3, [pc, #64]	; (8010ae4 <HAL_RCC_GetHCLKFreq+0x50>)
 8010aa2:	699b      	ldr	r3, [r3, #24]
 8010aa4:	0a1b      	lsrs	r3, r3, #8
 8010aa6:	f003 030f 	and.w	r3, r3, #15
 8010aaa:	490f      	ldr	r1, [pc, #60]	; (8010ae8 <HAL_RCC_GetHCLKFreq+0x54>)
 8010aac:	5ccb      	ldrb	r3, [r1, r3]
 8010aae:	f003 031f 	and.w	r3, r3, #31
 8010ab2:	fa22 f303 	lsr.w	r3, r2, r3
 8010ab6:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8010ab8:	4b0a      	ldr	r3, [pc, #40]	; (8010ae4 <HAL_RCC_GetHCLKFreq+0x50>)
 8010aba:	699b      	ldr	r3, [r3, #24]
 8010abc:	f003 030f 	and.w	r3, r3, #15
 8010ac0:	4a09      	ldr	r2, [pc, #36]	; (8010ae8 <HAL_RCC_GetHCLKFreq+0x54>)
 8010ac2:	5cd3      	ldrb	r3, [r2, r3]
 8010ac4:	f003 031f 	and.w	r3, r3, #31
 8010ac8:	687a      	ldr	r2, [r7, #4]
 8010aca:	fa22 f303 	lsr.w	r3, r2, r3
 8010ace:	4a07      	ldr	r2, [pc, #28]	; (8010aec <HAL_RCC_GetHCLKFreq+0x58>)
 8010ad0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8010ad2:	4a07      	ldr	r2, [pc, #28]	; (8010af0 <HAL_RCC_GetHCLKFreq+0x5c>)
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8010ad8:	4b04      	ldr	r3, [pc, #16]	; (8010aec <HAL_RCC_GetHCLKFreq+0x58>)
 8010ada:	681b      	ldr	r3, [r3, #0]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3708      	adds	r7, #8
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	58024400 	.word	0x58024400
 8010ae8:	08018150 	.word	0x08018150
 8010aec:	240002ac 	.word	0x240002ac
 8010af0:	240002a8 	.word	0x240002a8

08010af4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010af4:	b580      	push	{r7, lr}
 8010af6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8010af8:	f7ff ffcc 	bl	8010a94 <HAL_RCC_GetHCLKFreq>
 8010afc:	4602      	mov	r2, r0
 8010afe:	4b06      	ldr	r3, [pc, #24]	; (8010b18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010b00:	69db      	ldr	r3, [r3, #28]
 8010b02:	091b      	lsrs	r3, r3, #4
 8010b04:	f003 0307 	and.w	r3, r3, #7
 8010b08:	4904      	ldr	r1, [pc, #16]	; (8010b1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8010b0a:	5ccb      	ldrb	r3, [r1, r3]
 8010b0c:	f003 031f 	and.w	r3, r3, #31
 8010b10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010b14:	4618      	mov	r0, r3
 8010b16:	bd80      	pop	{r7, pc}
 8010b18:	58024400 	.word	0x58024400
 8010b1c:	08018150 	.word	0x08018150

08010b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010b20:	b580      	push	{r7, lr}
 8010b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010b24:	f7ff ffb6 	bl	8010a94 <HAL_RCC_GetHCLKFreq>
 8010b28:	4602      	mov	r2, r0
 8010b2a:	4b06      	ldr	r3, [pc, #24]	; (8010b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010b2c:	69db      	ldr	r3, [r3, #28]
 8010b2e:	0a1b      	lsrs	r3, r3, #8
 8010b30:	f003 0307 	and.w	r3, r3, #7
 8010b34:	4904      	ldr	r1, [pc, #16]	; (8010b48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010b36:	5ccb      	ldrb	r3, [r1, r3]
 8010b38:	f003 031f 	and.w	r3, r3, #31
 8010b3c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8010b40:	4618      	mov	r0, r3
 8010b42:	bd80      	pop	{r7, pc}
 8010b44:	58024400 	.word	0x58024400
 8010b48:	08018150 	.word	0x08018150

08010b4c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8010b4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010b50:	b0c6      	sub	sp, #280	; 0x118
 8010b52:	af00      	add	r7, sp, #0
 8010b54:	f8c7 0104 	str.w	r0, [r7, #260]	; 0x104
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010b58:	2300      	movs	r3, #0
 8010b5a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8010b5e:	2300      	movs	r3, #0
 8010b60:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010b64:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b6c:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8010b70:	2500      	movs	r5, #0
 8010b72:	ea54 0305 	orrs.w	r3, r4, r5
 8010b76:	d049      	beq.n	8010c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8010b78:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010b7c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010b7e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010b82:	d02f      	beq.n	8010be4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8010b84:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8010b88:	d828      	bhi.n	8010bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8010b8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010b8e:	d01a      	beq.n	8010bc6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010b94:	d822      	bhi.n	8010bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d003      	beq.n	8010ba2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8010b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8010b9e:	d007      	beq.n	8010bb0 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010ba0:	e01c      	b.n	8010bdc <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010ba2:	4bab      	ldr	r3, [pc, #684]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ba6:	4aaa      	ldr	r2, [pc, #680]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010bac:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010bae:	e01a      	b.n	8010be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010bb0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bb4:	3308      	adds	r3, #8
 8010bb6:	2102      	movs	r1, #2
 8010bb8:	4618      	mov	r0, r3
 8010bba:	f001 fc25 	bl	8012408 <RCCEx_PLL2_Config>
 8010bbe:	4603      	mov	r3, r0
 8010bc0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010bc4:	e00f      	b.n	8010be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010bc6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bca:	3328      	adds	r3, #40	; 0x28
 8010bcc:	2102      	movs	r1, #2
 8010bce:	4618      	mov	r0, r3
 8010bd0:	f001 fccc 	bl	801256c <RCCEx_PLL3_Config>
 8010bd4:	4603      	mov	r3, r0
 8010bd6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010bda:	e004      	b.n	8010be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010bdc:	2301      	movs	r3, #1
 8010bde:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010be2:	e000      	b.n	8010be6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8010be4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010be6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d10a      	bne.n	8010c04 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8010bee:	4b98      	ldr	r3, [pc, #608]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010bf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010bf2:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8010bf6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010bfa:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8010bfc:	4a94      	ldr	r2, [pc, #592]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010bfe:	430b      	orrs	r3, r1
 8010c00:	6513      	str	r3, [r2, #80]	; 0x50
 8010c02:	e003      	b.n	8010c0c <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010c04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010c08:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8010c0c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010c14:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8010c18:	f04f 0900 	mov.w	r9, #0
 8010c1c:	ea58 0309 	orrs.w	r3, r8, r9
 8010c20:	d047      	beq.n	8010cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8010c22:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010c28:	2b04      	cmp	r3, #4
 8010c2a:	d82a      	bhi.n	8010c82 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8010c2c:	a201      	add	r2, pc, #4	; (adr r2, 8010c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8010c2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010c32:	bf00      	nop
 8010c34:	08010c49 	.word	0x08010c49
 8010c38:	08010c57 	.word	0x08010c57
 8010c3c:	08010c6d 	.word	0x08010c6d
 8010c40:	08010c8b 	.word	0x08010c8b
 8010c44:	08010c8b 	.word	0x08010c8b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010c48:	4b81      	ldr	r3, [pc, #516]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010c4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010c4c:	4a80      	ldr	r2, [pc, #512]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010c4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010c52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010c54:	e01a      	b.n	8010c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010c56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c5a:	3308      	adds	r3, #8
 8010c5c:	2100      	movs	r1, #0
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f001 fbd2 	bl	8012408 <RCCEx_PLL2_Config>
 8010c64:	4603      	mov	r3, r0
 8010c66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010c6a:	e00f      	b.n	8010c8c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010c6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010c70:	3328      	adds	r3, #40	; 0x28
 8010c72:	2100      	movs	r1, #0
 8010c74:	4618      	mov	r0, r3
 8010c76:	f001 fc79 	bl	801256c <RCCEx_PLL3_Config>
 8010c7a:	4603      	mov	r3, r0
 8010c7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010c80:	e004      	b.n	8010c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010c82:	2301      	movs	r3, #1
 8010c84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010c88:	e000      	b.n	8010c8c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8010c8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c8c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d10a      	bne.n	8010caa <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010c94:	4b6e      	ldr	r3, [pc, #440]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c98:	f023 0107 	bic.w	r1, r3, #7
 8010c9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ca0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ca2:	4a6b      	ldr	r2, [pc, #428]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010ca4:	430b      	orrs	r3, r1
 8010ca6:	6513      	str	r3, [r2, #80]	; 0x50
 8010ca8:	e003      	b.n	8010cb2 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010caa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010cae:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010cb2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cba:	f402 6a80 	and.w	sl, r2, #1024	; 0x400
 8010cbe:	f04f 0b00 	mov.w	fp, #0
 8010cc2:	ea5a 030b 	orrs.w	r3, sl, fp
 8010cc6:	d05b      	beq.n	8010d80 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8010cc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ccc:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010cd0:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8010cd4:	d03b      	beq.n	8010d4e <HAL_RCCEx_PeriphCLKConfig+0x202>
 8010cd6:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
 8010cda:	d834      	bhi.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8010cdc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010ce0:	d037      	beq.n	8010d52 <HAL_RCCEx_PeriphCLKConfig+0x206>
 8010ce2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8010ce6:	d82e      	bhi.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8010ce8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010cec:	d033      	beq.n	8010d56 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8010cee:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8010cf2:	d828      	bhi.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8010cf4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010cf8:	d01a      	beq.n	8010d30 <HAL_RCCEx_PeriphCLKConfig+0x1e4>
 8010cfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010cfe:	d822      	bhi.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d003      	beq.n	8010d0c <HAL_RCCEx_PeriphCLKConfig+0x1c0>
 8010d04:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8010d08:	d007      	beq.n	8010d1a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
 8010d0a:	e01c      	b.n	8010d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d0c:	4b50      	ldr	r3, [pc, #320]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d10:	4a4f      	ldr	r2, [pc, #316]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010d12:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010d16:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010d18:	e01e      	b.n	8010d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010d1a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d1e:	3308      	adds	r3, #8
 8010d20:	2100      	movs	r1, #0
 8010d22:	4618      	mov	r0, r3
 8010d24:	f001 fb70 	bl	8012408 <RCCEx_PLL2_Config>
 8010d28:	4603      	mov	r3, r0
 8010d2a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8010d2e:	e013      	b.n	8010d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010d30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d34:	3328      	adds	r3, #40	; 0x28
 8010d36:	2100      	movs	r1, #0
 8010d38:	4618      	mov	r0, r3
 8010d3a:	f001 fc17 	bl	801256c <RCCEx_PLL3_Config>
 8010d3e:	4603      	mov	r3, r0
 8010d40:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010d44:	e008      	b.n	8010d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010d46:	2301      	movs	r3, #1
 8010d48:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010d4c:	e004      	b.n	8010d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8010d4e:	bf00      	nop
 8010d50:	e002      	b.n	8010d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8010d52:	bf00      	nop
 8010d54:	e000      	b.n	8010d58 <HAL_RCCEx_PeriphCLKConfig+0x20c>
        break;
 8010d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010d58:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010d5c:	2b00      	cmp	r3, #0
 8010d5e:	d10b      	bne.n	8010d78 <HAL_RCCEx_PeriphCLKConfig+0x22c>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8010d60:	4b3b      	ldr	r3, [pc, #236]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010d62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010d64:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8010d68:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d6c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8010d70:	4a37      	ldr	r2, [pc, #220]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010d72:	430b      	orrs	r3, r1
 8010d74:	6593      	str	r3, [r2, #88]	; 0x58
 8010d76:	e003      	b.n	8010d80 <HAL_RCCEx_PeriphCLKConfig+0x234>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d78:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010d7c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8010d80:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d88:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 8010d8c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8010d90:	2300      	movs	r3, #0
 8010d92:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8010d96:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 8010d9a:	460b      	mov	r3, r1
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	d05d      	beq.n	8010e5c <HAL_RCCEx_PeriphCLKConfig+0x310>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8010da0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010da4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010da8:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8010dac:	d03b      	beq.n	8010e26 <HAL_RCCEx_PeriphCLKConfig+0x2da>
 8010dae:	f1b3 6fa0 	cmp.w	r3, #83886080	; 0x5000000
 8010db2:	d834      	bhi.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8010db4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010db8:	d037      	beq.n	8010e2a <HAL_RCCEx_PeriphCLKConfig+0x2de>
 8010dba:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8010dbe:	d82e      	bhi.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8010dc0:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010dc4:	d033      	beq.n	8010e2e <HAL_RCCEx_PeriphCLKConfig+0x2e2>
 8010dc6:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8010dca:	d828      	bhi.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8010dcc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010dd0:	d01a      	beq.n	8010e08 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
 8010dd2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8010dd6:	d822      	bhi.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
 8010dd8:	2b00      	cmp	r3, #0
 8010dda:	d003      	beq.n	8010de4 <HAL_RCCEx_PeriphCLKConfig+0x298>
 8010ddc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8010de0:	d007      	beq.n	8010df2 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8010de2:	e01c      	b.n	8010e1e <HAL_RCCEx_PeriphCLKConfig+0x2d2>
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010de4:	4b1a      	ldr	r3, [pc, #104]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de8:	4a19      	ldr	r2, [pc, #100]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010dea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010dee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010df0:	e01e      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010df2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010df6:	3308      	adds	r3, #8
 8010df8:	2100      	movs	r1, #0
 8010dfa:	4618      	mov	r0, r3
 8010dfc:	f001 fb04 	bl	8012408 <RCCEx_PLL2_Config>
 8010e00:	4603      	mov	r3, r0
 8010e02:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8010e06:	e013      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e0c:	3328      	adds	r3, #40	; 0x28
 8010e0e:	2100      	movs	r1, #0
 8010e10:	4618      	mov	r0, r3
 8010e12:	f001 fbab 	bl	801256c <RCCEx_PLL3_Config>
 8010e16:	4603      	mov	r3, r0
 8010e18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010e1c:	e008      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010e1e:	2301      	movs	r3, #1
 8010e20:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010e24:	e004      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8010e26:	bf00      	nop
 8010e28:	e002      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8010e2a:	bf00      	nop
 8010e2c:	e000      	b.n	8010e30 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
        break;
 8010e2e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010e30:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010e34:	2b00      	cmp	r3, #0
 8010e36:	d10d      	bne.n	8010e54 <HAL_RCCEx_PeriphCLKConfig+0x308>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010e38:	4b05      	ldr	r3, [pc, #20]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010e3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010e3c:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 8010e40:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e44:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8010e48:	4a01      	ldr	r2, [pc, #4]	; (8010e50 <HAL_RCCEx_PeriphCLKConfig+0x304>)
 8010e4a:	430b      	orrs	r3, r1
 8010e4c:	6593      	str	r3, [r2, #88]	; 0x58
 8010e4e:	e005      	b.n	8010e5c <HAL_RCCEx_PeriphCLKConfig+0x310>
 8010e50:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e54:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010e58:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif  /*QUADSPI*/

#if defined(OCTOSPI1) || defined(OCTOSPI2)
  /*---------------------------- OCTOSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8010e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e64:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8010e68:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8010e6c:	2300      	movs	r3, #0
 8010e6e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8010e72:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8010e76:	460b      	mov	r3, r1
 8010e78:	4313      	orrs	r3, r2
 8010e7a:	d03a      	beq.n	8010ef2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  {
    switch (PeriphClkInit->OspiClockSelection)
 8010e7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010e80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010e82:	2b30      	cmp	r3, #48	; 0x30
 8010e84:	d01f      	beq.n	8010ec6 <HAL_RCCEx_PeriphCLKConfig+0x37a>
 8010e86:	2b30      	cmp	r3, #48	; 0x30
 8010e88:	d819      	bhi.n	8010ebe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8010e8a:	2b20      	cmp	r3, #32
 8010e8c:	d00c      	beq.n	8010ea8 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8010e8e:	2b20      	cmp	r3, #32
 8010e90:	d815      	bhi.n	8010ebe <HAL_RCCEx_PeriphCLKConfig+0x372>
 8010e92:	2b00      	cmp	r3, #0
 8010e94:	d019      	beq.n	8010eca <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8010e96:	2b10      	cmp	r3, #16
 8010e98:	d111      	bne.n	8010ebe <HAL_RCCEx_PeriphCLKConfig+0x372>
    {
      case RCC_OSPICLKSOURCE_PLL:      /* PLL is used as clock source for OSPI*/
        /* Enable OSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010e9a:	4baa      	ldr	r3, [pc, #680]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010e9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e9e:	4aa9      	ldr	r2, [pc, #676]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010ea0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010ea4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8010ea6:	e011      	b.n	8010ecc <HAL_RCCEx_PeriphCLKConfig+0x380>

      case RCC_OSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for OSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010ea8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010eac:	3308      	adds	r3, #8
 8010eae:	2102      	movs	r1, #2
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	f001 faa9 	bl	8012408 <RCCEx_PLL2_Config>
 8010eb6:	4603      	mov	r3, r0
 8010eb8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* OSPI clock source configuration done later after clock selection check */
        break;
 8010ebc:	e006      	b.n	8010ecc <HAL_RCCEx_PeriphCLKConfig+0x380>
      case RCC_OSPICLKSOURCE_HCLK:
        /* HCLK clock selected as OSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010ebe:	2301      	movs	r3, #1
 8010ec0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010ec4:	e002      	b.n	8010ecc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8010ec6:	bf00      	nop
 8010ec8:	e000      	b.n	8010ecc <HAL_RCCEx_PeriphCLKConfig+0x380>
        break;
 8010eca:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010ecc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010ed0:	2b00      	cmp	r3, #0
 8010ed2:	d10a      	bne.n	8010eea <HAL_RCCEx_PeriphCLKConfig+0x39e>
    {
      /* Set the source of OSPI clock*/
      __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8010ed4:	4b9b      	ldr	r3, [pc, #620]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010ed6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ed8:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8010edc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010ee2:	4a98      	ldr	r2, [pc, #608]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010ee4:	430b      	orrs	r3, r1
 8010ee6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8010ee8:	e003      	b.n	8010ef2 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010eea:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010eee:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010ef2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010efa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8010efe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8010f02:	2300      	movs	r3, #0
 8010f04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8010f08:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8010f0c:	460b      	mov	r3, r1
 8010f0e:	4313      	orrs	r3, r2
 8010f10:	d051      	beq.n	8010fb6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8010f12:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010f18:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f1c:	d035      	beq.n	8010f8a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8010f1e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8010f22:	d82e      	bhi.n	8010f82 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8010f24:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010f28:	d031      	beq.n	8010f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
 8010f2a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8010f2e:	d828      	bhi.n	8010f82 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8010f30:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010f34:	d01a      	beq.n	8010f6c <HAL_RCCEx_PeriphCLKConfig+0x420>
 8010f36:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8010f3a:	d822      	bhi.n	8010f82 <HAL_RCCEx_PeriphCLKConfig+0x436>
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d003      	beq.n	8010f48 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
 8010f40:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8010f44:	d007      	beq.n	8010f56 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 8010f46:	e01c      	b.n	8010f82 <HAL_RCCEx_PeriphCLKConfig+0x436>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010f48:	4b7e      	ldr	r3, [pc, #504]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f4c:	4a7d      	ldr	r2, [pc, #500]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010f4e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8010f52:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010f54:	e01c      	b.n	8010f90 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010f56:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f5a:	3308      	adds	r3, #8
 8010f5c:	2100      	movs	r1, #0
 8010f5e:	4618      	mov	r0, r3
 8010f60:	f001 fa52 	bl	8012408 <RCCEx_PLL2_Config>
 8010f64:	4603      	mov	r3, r0
 8010f66:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010f6a:	e011      	b.n	8010f90 <HAL_RCCEx_PeriphCLKConfig+0x444>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010f6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010f70:	3328      	adds	r3, #40	; 0x28
 8010f72:	2100      	movs	r1, #0
 8010f74:	4618      	mov	r0, r3
 8010f76:	f001 faf9 	bl	801256c <RCCEx_PLL3_Config>
 8010f7a:	4603      	mov	r3, r0
 8010f7c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010f80:	e006      	b.n	8010f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010f82:	2301      	movs	r3, #1
 8010f84:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8010f88:	e002      	b.n	8010f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8010f8a:	bf00      	nop
 8010f8c:	e000      	b.n	8010f90 <HAL_RCCEx_PeriphCLKConfig+0x444>
        break;
 8010f8e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010f90:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010f94:	2b00      	cmp	r3, #0
 8010f96:	d10a      	bne.n	8010fae <HAL_RCCEx_PeriphCLKConfig+0x462>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010f98:	4b6a      	ldr	r3, [pc, #424]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010f9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010f9c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8010fa0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fa4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8010fa6:	4a67      	ldr	r2, [pc, #412]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8010fa8:	430b      	orrs	r3, r1
 8010faa:	6513      	str	r3, [r2, #80]	; 0x50
 8010fac:	e003      	b.n	8010fb6 <HAL_RCCEx_PeriphCLKConfig+0x46a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010fae:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8010fb2:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010fb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fbe:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8010fc2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8010fc6:	2300      	movs	r3, #0
 8010fc8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8010fcc:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8010fd0:	460b      	mov	r3, r1
 8010fd2:	4313      	orrs	r3, r2
 8010fd4:	d053      	beq.n	801107e <HAL_RCCEx_PeriphCLKConfig+0x532>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8010fd6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8010fda:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8010fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010fe0:	d033      	beq.n	801104a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
 8010fe2:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8010fe6:	d82c      	bhi.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8010fe8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010fec:	d02f      	beq.n	801104e <HAL_RCCEx_PeriphCLKConfig+0x502>
 8010fee:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8010ff2:	d826      	bhi.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8010ff4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010ff8:	d02b      	beq.n	8011052 <HAL_RCCEx_PeriphCLKConfig+0x506>
 8010ffa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8010ffe:	d820      	bhi.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 8011000:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8011004:	d012      	beq.n	801102c <HAL_RCCEx_PeriphCLKConfig+0x4e0>
 8011006:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 801100a:	d81a      	bhi.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
 801100c:	2b00      	cmp	r3, #0
 801100e:	d022      	beq.n	8011056 <HAL_RCCEx_PeriphCLKConfig+0x50a>
 8011010:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011014:	d115      	bne.n	8011042 <HAL_RCCEx_PeriphCLKConfig+0x4f6>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011016:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801101a:	3308      	adds	r3, #8
 801101c:	2101      	movs	r1, #1
 801101e:	4618      	mov	r0, r3
 8011020:	f001 f9f2 	bl	8012408 <RCCEx_PLL2_Config>
 8011024:	4603      	mov	r3, r0
 8011026:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801102a:	e015      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801102c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011030:	3328      	adds	r3, #40	; 0x28
 8011032:	2101      	movs	r1, #1
 8011034:	4618      	mov	r0, r3
 8011036:	f001 fa99 	bl	801256c <RCCEx_PLL3_Config>
 801103a:	4603      	mov	r3, r0
 801103c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8011040:	e00a      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011042:	2301      	movs	r3, #1
 8011044:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011048:	e006      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801104a:	bf00      	nop
 801104c:	e004      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 801104e:	bf00      	nop
 8011050:	e002      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011052:	bf00      	nop
 8011054:	e000      	b.n	8011058 <HAL_RCCEx_PeriphCLKConfig+0x50c>
        break;
 8011056:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011058:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801105c:	2b00      	cmp	r3, #0
 801105e:	d10a      	bne.n	8011076 <HAL_RCCEx_PeriphCLKConfig+0x52a>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8011060:	4b38      	ldr	r3, [pc, #224]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011064:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8011068:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801106c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 801106e:	4a35      	ldr	r2, [pc, #212]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 8011070:	430b      	orrs	r3, r1
 8011072:	6513      	str	r3, [r2, #80]	; 0x50
 8011074:	e003      	b.n	801107e <HAL_RCCEx_PeriphCLKConfig+0x532>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011076:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801107a:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801107e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011082:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011086:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 801108a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 801108e:	2300      	movs	r3, #0
 8011090:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8011094:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8011098:	460b      	mov	r3, r1
 801109a:	4313      	orrs	r3, r2
 801109c:	d058      	beq.n	8011150 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801109e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80110a6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80110aa:	d033      	beq.n	8011114 <HAL_RCCEx_PeriphCLKConfig+0x5c8>
 80110ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80110b0:	d82c      	bhi.n	801110c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80110b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110b6:	d02f      	beq.n	8011118 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
 80110b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80110bc:	d826      	bhi.n	801110c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80110be:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80110c2:	d02b      	beq.n	801111c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
 80110c4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80110c8:	d820      	bhi.n	801110c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80110ca:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80110ce:	d012      	beq.n	80110f6 <HAL_RCCEx_PeriphCLKConfig+0x5aa>
 80110d0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80110d4:	d81a      	bhi.n	801110c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
 80110d6:	2b00      	cmp	r3, #0
 80110d8:	d022      	beq.n	8011120 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80110da:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80110de:	d115      	bne.n	801110c <HAL_RCCEx_PeriphCLKConfig+0x5c0>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80110e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110e4:	3308      	adds	r3, #8
 80110e6:	2101      	movs	r1, #1
 80110e8:	4618      	mov	r0, r3
 80110ea:	f001 f98d 	bl	8012408 <RCCEx_PLL2_Config>
 80110ee:	4603      	mov	r3, r0
 80110f0:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80110f4:	e015      	b.n	8011122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80110f6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80110fa:	3328      	adds	r3, #40	; 0x28
 80110fc:	2101      	movs	r1, #1
 80110fe:	4618      	mov	r0, r3
 8011100:	f001 fa34 	bl	801256c <RCCEx_PLL3_Config>
 8011104:	4603      	mov	r3, r0
 8011106:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801110a:	e00a      	b.n	8011122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801110c:	2301      	movs	r3, #1
 801110e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011112:	e006      	b.n	8011122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011114:	bf00      	nop
 8011116:	e004      	b.n	8011122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011118:	bf00      	nop
 801111a:	e002      	b.n	8011122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 801111c:	bf00      	nop
 801111e:	e000      	b.n	8011122 <HAL_RCCEx_PeriphCLKConfig+0x5d6>
        break;
 8011120:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011122:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011126:	2b00      	cmp	r3, #0
 8011128:	d10e      	bne.n	8011148 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801112a:	4b06      	ldr	r3, [pc, #24]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801112e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8011132:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011136:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 801113a:	4a02      	ldr	r2, [pc, #8]	; (8011144 <HAL_RCCEx_PeriphCLKConfig+0x5f8>)
 801113c:	430b      	orrs	r3, r1
 801113e:	6593      	str	r3, [r2, #88]	; 0x58
 8011140:	e006      	b.n	8011150 <HAL_RCCEx_PeriphCLKConfig+0x604>
 8011142:	bf00      	nop
 8011144:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011148:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801114c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8011150:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011158:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 801115c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8011160:	2300      	movs	r3, #0
 8011162:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8011166:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 801116a:	460b      	mov	r3, r1
 801116c:	4313      	orrs	r3, r2
 801116e:	d037      	beq.n	80111e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8011170:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011176:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 801117a:	d00e      	beq.n	801119a <HAL_RCCEx_PeriphCLKConfig+0x64e>
 801117c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8011180:	d816      	bhi.n	80111b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
 8011182:	2b00      	cmp	r3, #0
 8011184:	d018      	beq.n	80111b8 <HAL_RCCEx_PeriphCLKConfig+0x66c>
 8011186:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 801118a:	d111      	bne.n	80111b0 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801118c:	4bc4      	ldr	r3, [pc, #784]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801118e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011190:	4ac3      	ldr	r2, [pc, #780]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011192:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011196:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8011198:	e00f      	b.n	80111ba <HAL_RCCEx_PeriphCLKConfig+0x66e>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801119a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801119e:	3308      	adds	r3, #8
 80111a0:	2101      	movs	r1, #1
 80111a2:	4618      	mov	r0, r3
 80111a4:	f001 f930 	bl	8012408 <RCCEx_PLL2_Config>
 80111a8:	4603      	mov	r3, r0
 80111aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80111ae:	e004      	b.n	80111ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80111b0:	2301      	movs	r3, #1
 80111b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80111b6:	e000      	b.n	80111ba <HAL_RCCEx_PeriphCLKConfig+0x66e>
        break;
 80111b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80111ba:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80111be:	2b00      	cmp	r3, #0
 80111c0:	d10a      	bne.n	80111d8 <HAL_RCCEx_PeriphCLKConfig+0x68c>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80111c2:	4bb7      	ldr	r3, [pc, #732]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80111c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80111c6:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80111ca:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111ce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80111d0:	4ab3      	ldr	r2, [pc, #716]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80111d2:	430b      	orrs	r3, r1
 80111d4:	6513      	str	r3, [r2, #80]	; 0x50
 80111d6:	e003      	b.n	80111e0 <HAL_RCCEx_PeriphCLKConfig+0x694>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80111d8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80111dc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 80111e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80111e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111e8:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 80111ec:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80111f0:	2300      	movs	r3, #0
 80111f2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80111f6:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80111fa:	460b      	mov	r3, r1
 80111fc:	4313      	orrs	r3, r2
 80111fe:	d039      	beq.n	8011274 <HAL_RCCEx_PeriphCLKConfig+0x728>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8011200:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011204:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011206:	2b03      	cmp	r3, #3
 8011208:	d81c      	bhi.n	8011244 <HAL_RCCEx_PeriphCLKConfig+0x6f8>
 801120a:	a201      	add	r2, pc, #4	; (adr r2, 8011210 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 801120c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011210:	0801124d 	.word	0x0801124d
 8011214:	08011221 	.word	0x08011221
 8011218:	0801122f 	.word	0x0801122f
 801121c:	0801124d 	.word	0x0801124d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011220:	4b9f      	ldr	r3, [pc, #636]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011224:	4a9e      	ldr	r2, [pc, #632]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011226:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 801122a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801122c:	e00f      	b.n	801124e <HAL_RCCEx_PeriphCLKConfig+0x702>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801122e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011232:	3308      	adds	r3, #8
 8011234:	2102      	movs	r1, #2
 8011236:	4618      	mov	r0, r3
 8011238:	f001 f8e6 	bl	8012408 <RCCEx_PLL2_Config>
 801123c:	4603      	mov	r3, r0
 801123e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* FMC clock source configuration done later after clock selection check */
        break;
 8011242:	e004      	b.n	801124e <HAL_RCCEx_PeriphCLKConfig+0x702>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8011244:	2301      	movs	r3, #1
 8011246:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801124a:	e000      	b.n	801124e <HAL_RCCEx_PeriphCLKConfig+0x702>
        break;
 801124c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801124e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011252:	2b00      	cmp	r3, #0
 8011254:	d10a      	bne.n	801126c <HAL_RCCEx_PeriphCLKConfig+0x720>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8011256:	4b92      	ldr	r3, [pc, #584]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011258:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 801125a:	f023 0103 	bic.w	r1, r3, #3
 801125e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011262:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011264:	4a8e      	ldr	r2, [pc, #568]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011266:	430b      	orrs	r3, r1
 8011268:	64d3      	str	r3, [r2, #76]	; 0x4c
 801126a:	e003      	b.n	8011274 <HAL_RCCEx_PeriphCLKConfig+0x728>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801126c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011270:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8011274:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011278:	e9d3 2300 	ldrd	r2, r3, [r3]
 801127c:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8011280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8011284:	2300      	movs	r3, #0
 8011286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 801128a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 801128e:	460b      	mov	r3, r1
 8011290:	4313      	orrs	r3, r2
 8011292:	f000 8099 	beq.w	80113c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8011296:	4b83      	ldr	r3, [pc, #524]	; (80114a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	4a82      	ldr	r2, [pc, #520]	; (80114a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801129c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80112a0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80112a2:	f7fd fd83 	bl	800edac <HAL_GetTick>
 80112a6:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80112aa:	e00b      	b.n	80112c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80112ac:	f7fd fd7e 	bl	800edac <HAL_GetTick>
 80112b0:	4602      	mov	r2, r0
 80112b2:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80112b6:	1ad3      	subs	r3, r2, r3
 80112b8:	2b64      	cmp	r3, #100	; 0x64
 80112ba:	d903      	bls.n	80112c4 <HAL_RCCEx_PeriphCLKConfig+0x778>
      {
        ret = HAL_TIMEOUT;
 80112bc:	2303      	movs	r3, #3
 80112be:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80112c2:	e005      	b.n	80112d0 <HAL_RCCEx_PeriphCLKConfig+0x784>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80112c4:	4b77      	ldr	r3, [pc, #476]	; (80114a4 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 80112c6:	681b      	ldr	r3, [r3, #0]
 80112c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d0ed      	beq.n	80112ac <HAL_RCCEx_PeriphCLKConfig+0x760>
      }
    }

    if (ret == HAL_OK)
 80112d0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d173      	bne.n	80113c0 <HAL_RCCEx_PeriphCLKConfig+0x874>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 80112d8:	4b71      	ldr	r3, [pc, #452]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80112da:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80112dc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80112e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80112e4:	4053      	eors	r3, r2
 80112e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80112ea:	2b00      	cmp	r3, #0
 80112ec:	d015      	beq.n	801131a <HAL_RCCEx_PeriphCLKConfig+0x7ce>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80112ee:	4b6c      	ldr	r3, [pc, #432]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80112f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80112f6:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80112fa:	4b69      	ldr	r3, [pc, #420]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80112fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80112fe:	4a68      	ldr	r2, [pc, #416]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011300:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8011304:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8011306:	4b66      	ldr	r3, [pc, #408]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801130a:	4a65      	ldr	r2, [pc, #404]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801130c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8011310:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8011312:	4a63      	ldr	r2, [pc, #396]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011314:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8011318:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801131a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801131e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011322:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011326:	d118      	bne.n	801135a <HAL_RCCEx_PeriphCLKConfig+0x80e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8011328:	f7fd fd40 	bl	800edac <HAL_GetTick>
 801132c:	f8c7 0110 	str.w	r0, [r7, #272]	; 0x110

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011330:	e00d      	b.n	801134e <HAL_RCCEx_PeriphCLKConfig+0x802>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8011332:	f7fd fd3b 	bl	800edac <HAL_GetTick>
 8011336:	4602      	mov	r2, r0
 8011338:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 801133c:	1ad2      	subs	r2, r2, r3
 801133e:	f241 3388 	movw	r3, #5000	; 0x1388
 8011342:	429a      	cmp	r2, r3
 8011344:	d903      	bls.n	801134e <HAL_RCCEx_PeriphCLKConfig+0x802>
          {
            ret = HAL_TIMEOUT;
 8011346:	2303      	movs	r3, #3
 8011348:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
            break;
 801134c:	e005      	b.n	801135a <HAL_RCCEx_PeriphCLKConfig+0x80e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801134e:	4b54      	ldr	r3, [pc, #336]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011352:	f003 0302 	and.w	r3, r3, #2
 8011356:	2b00      	cmp	r3, #0
 8011358:	d0eb      	beq.n	8011332 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
          }
        }
      }

      if (ret == HAL_OK)
 801135a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801135e:	2b00      	cmp	r3, #0
 8011360:	d129      	bne.n	80113b6 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8011362:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011366:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 801136a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 801136e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011372:	d10e      	bne.n	8011392 <HAL_RCCEx_PeriphCLKConfig+0x846>
 8011374:	4b4a      	ldr	r3, [pc, #296]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011376:	691b      	ldr	r3, [r3, #16]
 8011378:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 801137c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8011384:	091a      	lsrs	r2, r3, #4
 8011386:	4b48      	ldr	r3, [pc, #288]	; (80114a8 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8011388:	4013      	ands	r3, r2
 801138a:	4a45      	ldr	r2, [pc, #276]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 801138c:	430b      	orrs	r3, r1
 801138e:	6113      	str	r3, [r2, #16]
 8011390:	e005      	b.n	801139e <HAL_RCCEx_PeriphCLKConfig+0x852>
 8011392:	4b43      	ldr	r3, [pc, #268]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011394:	691b      	ldr	r3, [r3, #16]
 8011396:	4a42      	ldr	r2, [pc, #264]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 8011398:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801139c:	6113      	str	r3, [r2, #16]
 801139e:	4b40      	ldr	r3, [pc, #256]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80113a0:	6f19      	ldr	r1, [r3, #112]	; 0x70
 80113a2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113a6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80113aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80113ae:	4a3c      	ldr	r2, [pc, #240]	; (80114a0 <HAL_RCCEx_PeriphCLKConfig+0x954>)
 80113b0:	430b      	orrs	r3, r1
 80113b2:	6713      	str	r3, [r2, #112]	; 0x70
 80113b4:	e008      	b.n	80113c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80113b6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80113ba:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
 80113be:	e003      	b.n	80113c8 <HAL_RCCEx_PeriphCLKConfig+0x87c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113c0:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80113c4:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 80113c8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d0:	f002 0301 	and.w	r3, r2, #1
 80113d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80113d8:	2300      	movs	r3, #0
 80113da:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80113de:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 80113e2:	460b      	mov	r3, r1
 80113e4:	4313      	orrs	r3, r2
 80113e6:	f000 808f 	beq.w	8011508 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 80113ea:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80113ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80113f0:	2b28      	cmp	r3, #40	; 0x28
 80113f2:	d871      	bhi.n	80114d8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
 80113f4:	a201      	add	r2, pc, #4	; (adr r2, 80113fc <HAL_RCCEx_PeriphCLKConfig+0x8b0>)
 80113f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80113fa:	bf00      	nop
 80113fc:	080114e1 	.word	0x080114e1
 8011400:	080114d9 	.word	0x080114d9
 8011404:	080114d9 	.word	0x080114d9
 8011408:	080114d9 	.word	0x080114d9
 801140c:	080114d9 	.word	0x080114d9
 8011410:	080114d9 	.word	0x080114d9
 8011414:	080114d9 	.word	0x080114d9
 8011418:	080114d9 	.word	0x080114d9
 801141c:	080114ad 	.word	0x080114ad
 8011420:	080114d9 	.word	0x080114d9
 8011424:	080114d9 	.word	0x080114d9
 8011428:	080114d9 	.word	0x080114d9
 801142c:	080114d9 	.word	0x080114d9
 8011430:	080114d9 	.word	0x080114d9
 8011434:	080114d9 	.word	0x080114d9
 8011438:	080114d9 	.word	0x080114d9
 801143c:	080114c3 	.word	0x080114c3
 8011440:	080114d9 	.word	0x080114d9
 8011444:	080114d9 	.word	0x080114d9
 8011448:	080114d9 	.word	0x080114d9
 801144c:	080114d9 	.word	0x080114d9
 8011450:	080114d9 	.word	0x080114d9
 8011454:	080114d9 	.word	0x080114d9
 8011458:	080114d9 	.word	0x080114d9
 801145c:	080114e1 	.word	0x080114e1
 8011460:	080114d9 	.word	0x080114d9
 8011464:	080114d9 	.word	0x080114d9
 8011468:	080114d9 	.word	0x080114d9
 801146c:	080114d9 	.word	0x080114d9
 8011470:	080114d9 	.word	0x080114d9
 8011474:	080114d9 	.word	0x080114d9
 8011478:	080114d9 	.word	0x080114d9
 801147c:	080114e1 	.word	0x080114e1
 8011480:	080114d9 	.word	0x080114d9
 8011484:	080114d9 	.word	0x080114d9
 8011488:	080114d9 	.word	0x080114d9
 801148c:	080114d9 	.word	0x080114d9
 8011490:	080114d9 	.word	0x080114d9
 8011494:	080114d9 	.word	0x080114d9
 8011498:	080114d9 	.word	0x080114d9
 801149c:	080114e1 	.word	0x080114e1
 80114a0:	58024400 	.word	0x58024400
 80114a4:	58024800 	.word	0x58024800
 80114a8:	00ffffcf 	.word	0x00ffffcf
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80114ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114b0:	3308      	adds	r3, #8
 80114b2:	2101      	movs	r1, #1
 80114b4:	4618      	mov	r0, r3
 80114b6:	f000 ffa7 	bl	8012408 <RCCEx_PLL2_Config>
 80114ba:	4603      	mov	r3, r0
 80114bc:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80114c0:	e00f      	b.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0x996>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80114c2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114c6:	3328      	adds	r3, #40	; 0x28
 80114c8:	2101      	movs	r1, #1
 80114ca:	4618      	mov	r0, r3
 80114cc:	f001 f84e 	bl	801256c <RCCEx_PLL3_Config>
 80114d0:	4603      	mov	r3, r0
 80114d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80114d6:	e004      	b.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80114d8:	2301      	movs	r3, #1
 80114da:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80114de:	e000      	b.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0x996>
        break;
 80114e0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80114e2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80114e6:	2b00      	cmp	r3, #0
 80114e8:	d10a      	bne.n	8011500 <HAL_RCCEx_PeriphCLKConfig+0x9b4>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80114ea:	4bbf      	ldr	r3, [pc, #764]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80114ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80114ee:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 80114f2:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80114f6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80114f8:	4abb      	ldr	r2, [pc, #748]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80114fa:	430b      	orrs	r3, r1
 80114fc:	6553      	str	r3, [r2, #84]	; 0x54
 80114fe:	e003      	b.n	8011508 <HAL_RCCEx_PeriphCLKConfig+0x9bc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011500:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011504:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8011508:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801150c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011510:	f002 0302 	and.w	r3, r2, #2
 8011514:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8011518:	2300      	movs	r3, #0
 801151a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 801151e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8011522:	460b      	mov	r3, r1
 8011524:	4313      	orrs	r3, r2
 8011526:	d041      	beq.n	80115ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8011528:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801152c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801152e:	2b05      	cmp	r3, #5
 8011530:	d824      	bhi.n	801157c <HAL_RCCEx_PeriphCLKConfig+0xa30>
 8011532:	a201      	add	r2, pc, #4	; (adr r2, 8011538 <HAL_RCCEx_PeriphCLKConfig+0x9ec>)
 8011534:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011538:	08011585 	.word	0x08011585
 801153c:	08011551 	.word	0x08011551
 8011540:	08011567 	.word	0x08011567
 8011544:	08011585 	.word	0x08011585
 8011548:	08011585 	.word	0x08011585
 801154c:	08011585 	.word	0x08011585
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011550:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011554:	3308      	adds	r3, #8
 8011556:	2101      	movs	r1, #1
 8011558:	4618      	mov	r0, r3
 801155a:	f000 ff55 	bl	8012408 <RCCEx_PLL2_Config>
 801155e:	4603      	mov	r3, r0
 8011560:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011564:	e00f      	b.n	8011586 <HAL_RCCEx_PeriphCLKConfig+0xa3a>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011566:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801156a:	3328      	adds	r3, #40	; 0x28
 801156c:	2101      	movs	r1, #1
 801156e:	4618      	mov	r0, r3
 8011570:	f000 fffc 	bl	801256c <RCCEx_PLL3_Config>
 8011574:	4603      	mov	r3, r0
 8011576:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801157a:	e004      	b.n	8011586 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801157c:	2301      	movs	r3, #1
 801157e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011582:	e000      	b.n	8011586 <HAL_RCCEx_PeriphCLKConfig+0xa3a>
        break;
 8011584:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011586:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801158a:	2b00      	cmp	r3, #0
 801158c:	d10a      	bne.n	80115a4 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801158e:	4b96      	ldr	r3, [pc, #600]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011590:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011592:	f023 0107 	bic.w	r1, r3, #7
 8011596:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801159a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801159c:	4a92      	ldr	r2, [pc, #584]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 801159e:	430b      	orrs	r3, r1
 80115a0:	6553      	str	r3, [r2, #84]	; 0x54
 80115a2:	e003      	b.n	80115ac <HAL_RCCEx_PeriphCLKConfig+0xa60>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115a4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80115a8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80115ac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80115b4:	f002 0304 	and.w	r3, r2, #4
 80115b8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80115bc:	2300      	movs	r3, #0
 80115be:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80115c2:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80115c6:	460b      	mov	r3, r1
 80115c8:	4313      	orrs	r3, r2
 80115ca:	d044      	beq.n	8011656 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80115cc:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80115d4:	2b05      	cmp	r3, #5
 80115d6:	d825      	bhi.n	8011624 <HAL_RCCEx_PeriphCLKConfig+0xad8>
 80115d8:	a201      	add	r2, pc, #4	; (adr r2, 80115e0 <HAL_RCCEx_PeriphCLKConfig+0xa94>)
 80115da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80115de:	bf00      	nop
 80115e0:	0801162d 	.word	0x0801162d
 80115e4:	080115f9 	.word	0x080115f9
 80115e8:	0801160f 	.word	0x0801160f
 80115ec:	0801162d 	.word	0x0801162d
 80115f0:	0801162d 	.word	0x0801162d
 80115f4:	0801162d 	.word	0x0801162d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80115f8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80115fc:	3308      	adds	r3, #8
 80115fe:	2101      	movs	r1, #1
 8011600:	4618      	mov	r0, r3
 8011602:	f000 ff01 	bl	8012408 <RCCEx_PLL2_Config>
 8011606:	4603      	mov	r3, r0
 8011608:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801160c:	e00f      	b.n	801162e <HAL_RCCEx_PeriphCLKConfig+0xae2>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801160e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011612:	3328      	adds	r3, #40	; 0x28
 8011614:	2101      	movs	r1, #1
 8011616:	4618      	mov	r0, r3
 8011618:	f000 ffa8 	bl	801256c <RCCEx_PLL3_Config>
 801161c:	4603      	mov	r3, r0
 801161e:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8011622:	e004      	b.n	801162e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011624:	2301      	movs	r3, #1
 8011626:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 801162a:	e000      	b.n	801162e <HAL_RCCEx_PeriphCLKConfig+0xae2>
        break;
 801162c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801162e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011632:	2b00      	cmp	r3, #0
 8011634:	d10b      	bne.n	801164e <HAL_RCCEx_PeriphCLKConfig+0xb02>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011636:	4b6c      	ldr	r3, [pc, #432]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011638:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801163a:	f023 0107 	bic.w	r1, r3, #7
 801163e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011642:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8011646:	4a68      	ldr	r2, [pc, #416]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011648:	430b      	orrs	r3, r1
 801164a:	6593      	str	r3, [r2, #88]	; 0x58
 801164c:	e003      	b.n	8011656 <HAL_RCCEx_PeriphCLKConfig+0xb0a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801164e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011652:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011656:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801165a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801165e:	f002 0320 	and.w	r3, r2, #32
 8011662:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8011666:	2300      	movs	r3, #0
 8011668:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 801166c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8011670:	460b      	mov	r3, r1
 8011672:	4313      	orrs	r3, r2
 8011674:	d055      	beq.n	8011722 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8011676:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801167a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 801167e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011682:	d033      	beq.n	80116ec <HAL_RCCEx_PeriphCLKConfig+0xba0>
 8011684:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8011688:	d82c      	bhi.n	80116e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 801168a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801168e:	d02f      	beq.n	80116f0 <HAL_RCCEx_PeriphCLKConfig+0xba4>
 8011690:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8011694:	d826      	bhi.n	80116e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 8011696:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 801169a:	d02b      	beq.n	80116f4 <HAL_RCCEx_PeriphCLKConfig+0xba8>
 801169c:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80116a0:	d820      	bhi.n	80116e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80116a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80116a6:	d012      	beq.n	80116ce <HAL_RCCEx_PeriphCLKConfig+0xb82>
 80116a8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80116ac:	d81a      	bhi.n	80116e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d022      	beq.n	80116f8 <HAL_RCCEx_PeriphCLKConfig+0xbac>
 80116b2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80116b6:	d115      	bne.n	80116e4 <HAL_RCCEx_PeriphCLKConfig+0xb98>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80116b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116bc:	3308      	adds	r3, #8
 80116be:	2100      	movs	r1, #0
 80116c0:	4618      	mov	r0, r3
 80116c2:	f000 fea1 	bl	8012408 <RCCEx_PLL2_Config>
 80116c6:	4603      	mov	r3, r0
 80116c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80116cc:	e015      	b.n	80116fa <HAL_RCCEx_PeriphCLKConfig+0xbae>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80116ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80116d2:	3328      	adds	r3, #40	; 0x28
 80116d4:	2102      	movs	r1, #2
 80116d6:	4618      	mov	r0, r3
 80116d8:	f000 ff48 	bl	801256c <RCCEx_PLL3_Config>
 80116dc:	4603      	mov	r3, r0
 80116de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80116e2:	e00a      	b.n	80116fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80116e4:	2301      	movs	r3, #1
 80116e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80116ea:	e006      	b.n	80116fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80116ec:	bf00      	nop
 80116ee:	e004      	b.n	80116fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80116f0:	bf00      	nop
 80116f2:	e002      	b.n	80116fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80116f4:	bf00      	nop
 80116f6:	e000      	b.n	80116fa <HAL_RCCEx_PeriphCLKConfig+0xbae>
        break;
 80116f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80116fa:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80116fe:	2b00      	cmp	r3, #0
 8011700:	d10b      	bne.n	801171a <HAL_RCCEx_PeriphCLKConfig+0xbce>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8011702:	4b39      	ldr	r3, [pc, #228]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011706:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 801170a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801170e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8011712:	4a35      	ldr	r2, [pc, #212]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 8011714:	430b      	orrs	r3, r1
 8011716:	6553      	str	r3, [r2, #84]	; 0x54
 8011718:	e003      	b.n	8011722 <HAL_RCCEx_PeriphCLKConfig+0xbd6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801171a:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801171e:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011722:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011726:	e9d3 2300 	ldrd	r2, r3, [r3]
 801172a:	f002 0340 	and.w	r3, r2, #64	; 0x40
 801172e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011732:	2300      	movs	r3, #0
 8011734:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011738:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 801173c:	460b      	mov	r3, r1
 801173e:	4313      	orrs	r3, r2
 8011740:	d058      	beq.n	80117f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8011742:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011746:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 801174a:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 801174e:	d033      	beq.n	80117b8 <HAL_RCCEx_PeriphCLKConfig+0xc6c>
 8011750:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8011754:	d82c      	bhi.n	80117b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011756:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 801175a:	d02f      	beq.n	80117bc <HAL_RCCEx_PeriphCLKConfig+0xc70>
 801175c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8011760:	d826      	bhi.n	80117b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 8011762:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8011766:	d02b      	beq.n	80117c0 <HAL_RCCEx_PeriphCLKConfig+0xc74>
 8011768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 801176c:	d820      	bhi.n	80117b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801176e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011772:	d012      	beq.n	801179a <HAL_RCCEx_PeriphCLKConfig+0xc4e>
 8011774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011778:	d81a      	bhi.n	80117b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
 801177a:	2b00      	cmp	r3, #0
 801177c:	d022      	beq.n	80117c4 <HAL_RCCEx_PeriphCLKConfig+0xc78>
 801177e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011782:	d115      	bne.n	80117b0 <HAL_RCCEx_PeriphCLKConfig+0xc64>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011784:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011788:	3308      	adds	r3, #8
 801178a:	2100      	movs	r1, #0
 801178c:	4618      	mov	r0, r3
 801178e:	f000 fe3b 	bl	8012408 <RCCEx_PLL2_Config>
 8011792:	4603      	mov	r3, r0
 8011794:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011798:	e015      	b.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801179a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801179e:	3328      	adds	r3, #40	; 0x28
 80117a0:	2102      	movs	r1, #2
 80117a2:	4618      	mov	r0, r3
 80117a4:	f000 fee2 	bl	801256c <RCCEx_PLL3_Config>
 80117a8:	4603      	mov	r3, r0
 80117aa:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 80117ae:	e00a      	b.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80117b0:	2301      	movs	r3, #1
 80117b2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80117b6:	e006      	b.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80117b8:	bf00      	nop
 80117ba:	e004      	b.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80117bc:	bf00      	nop
 80117be:	e002      	b.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80117c0:	bf00      	nop
 80117c2:	e000      	b.n	80117c6 <HAL_RCCEx_PeriphCLKConfig+0xc7a>
        break;
 80117c4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80117c6:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80117ca:	2b00      	cmp	r3, #0
 80117cc:	d10e      	bne.n	80117ec <HAL_RCCEx_PeriphCLKConfig+0xca0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80117ce:	4b06      	ldr	r3, [pc, #24]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80117d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80117d2:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 80117d6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80117de:	4a02      	ldr	r2, [pc, #8]	; (80117e8 <HAL_RCCEx_PeriphCLKConfig+0xc9c>)
 80117e0:	430b      	orrs	r3, r1
 80117e2:	6593      	str	r3, [r2, #88]	; 0x58
 80117e4:	e006      	b.n	80117f4 <HAL_RCCEx_PeriphCLKConfig+0xca8>
 80117e6:	bf00      	nop
 80117e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117ec:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80117f0:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80117f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80117f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117fc:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8011800:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011804:	2300      	movs	r3, #0
 8011806:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 801180a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 801180e:	460b      	mov	r3, r1
 8011810:	4313      	orrs	r3, r2
 8011812:	d055      	beq.n	80118c0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8011814:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011818:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801181c:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011820:	d033      	beq.n	801188a <HAL_RCCEx_PeriphCLKConfig+0xd3e>
 8011822:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8011826:	d82c      	bhi.n	8011882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801182c:	d02f      	beq.n	801188e <HAL_RCCEx_PeriphCLKConfig+0xd42>
 801182e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011832:	d826      	bhi.n	8011882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011834:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8011838:	d02b      	beq.n	8011892 <HAL_RCCEx_PeriphCLKConfig+0xd46>
 801183a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 801183e:	d820      	bhi.n	8011882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 8011840:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8011844:	d012      	beq.n	801186c <HAL_RCCEx_PeriphCLKConfig+0xd20>
 8011846:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 801184a:	d81a      	bhi.n	8011882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
 801184c:	2b00      	cmp	r3, #0
 801184e:	d022      	beq.n	8011896 <HAL_RCCEx_PeriphCLKConfig+0xd4a>
 8011850:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011854:	d115      	bne.n	8011882 <HAL_RCCEx_PeriphCLKConfig+0xd36>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011856:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801185a:	3308      	adds	r3, #8
 801185c:	2100      	movs	r1, #0
 801185e:	4618      	mov	r0, r3
 8011860:	f000 fdd2 	bl	8012408 <RCCEx_PLL2_Config>
 8011864:	4603      	mov	r3, r0
 8011866:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801186a:	e015      	b.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801186c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011870:	3328      	adds	r3, #40	; 0x28
 8011872:	2102      	movs	r1, #2
 8011874:	4618      	mov	r0, r3
 8011876:	f000 fe79 	bl	801256c <RCCEx_PLL3_Config>
 801187a:	4603      	mov	r3, r0
 801187c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8011880:	e00a      	b.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011882:	2301      	movs	r3, #1
 8011884:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011888:	e006      	b.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801188a:	bf00      	nop
 801188c:	e004      	b.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 801188e:	bf00      	nop
 8011890:	e002      	b.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8011892:	bf00      	nop
 8011894:	e000      	b.n	8011898 <HAL_RCCEx_PeriphCLKConfig+0xd4c>
        break;
 8011896:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011898:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 801189c:	2b00      	cmp	r3, #0
 801189e:	d10b      	bne.n	80118b8 <HAL_RCCEx_PeriphCLKConfig+0xd6c>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80118a0:	4ba0      	ldr	r3, [pc, #640]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80118a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80118a4:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 80118a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118ac:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80118b0:	4a9c      	ldr	r2, [pc, #624]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80118b2:	430b      	orrs	r3, r1
 80118b4:	6593      	str	r3, [r2, #88]	; 0x58
 80118b6:	e003      	b.n	80118c0 <HAL_RCCEx_PeriphCLKConfig+0xd74>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80118b8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80118bc:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ I2C1/2/3/5* Configuration ------------------------*/
#if defined(I2C5)
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1235) == RCC_PERIPHCLK_I2C1235)
 80118c0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118c8:	f002 0308 	and.w	r3, r2, #8
 80118cc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80118d0:	2300      	movs	r3, #0
 80118d2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80118d6:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 80118da:	460b      	mov	r3, r1
 80118dc:	4313      	orrs	r3, r2
 80118de:	d01e      	beq.n	801191e <HAL_RCCEx_PeriphCLKConfig+0xdd2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1235CLKSOURCE(PeriphClkInit->I2c1235ClockSelection));

    if ((PeriphClkInit->I2c1235ClockSelection) == RCC_I2C1235CLKSOURCE_PLL3)
 80118e0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80118e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80118ec:	d10c      	bne.n	8011908 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80118ee:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80118f2:	3328      	adds	r3, #40	; 0x28
 80118f4:	2102      	movs	r1, #2
 80118f6:	4618      	mov	r0, r3
 80118f8:	f000 fe38 	bl	801256c <RCCEx_PLL3_Config>
 80118fc:	4603      	mov	r3, r0
 80118fe:	2b00      	cmp	r3, #0
 8011900:	d002      	beq.n	8011908 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
      {
        status = HAL_ERROR;
 8011902:	2301      	movs	r3, #1
 8011904:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);
 8011908:	4b86      	ldr	r3, [pc, #536]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801190a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801190c:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8011910:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011914:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8011918:	4a82      	ldr	r2, [pc, #520]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 801191a:	430b      	orrs	r3, r1
 801191c:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801191e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011922:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011926:	f002 0310 	and.w	r3, r2, #16
 801192a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801192e:	2300      	movs	r3, #0
 8011930:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011934:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 8011938:	460b      	mov	r3, r1
 801193a:	4313      	orrs	r3, r2
 801193c:	d01e      	beq.n	801197c <HAL_RCCEx_PeriphCLKConfig+0xe30>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801193e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011942:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011946:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801194a:	d10c      	bne.n	8011966 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801194c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011950:	3328      	adds	r3, #40	; 0x28
 8011952:	2102      	movs	r1, #2
 8011954:	4618      	mov	r0, r3
 8011956:	f000 fe09 	bl	801256c <RCCEx_PLL3_Config>
 801195a:	4603      	mov	r3, r0
 801195c:	2b00      	cmp	r3, #0
 801195e:	d002      	beq.n	8011966 <HAL_RCCEx_PeriphCLKConfig+0xe1a>
      {
        status = HAL_ERROR;
 8011960:	2301      	movs	r3, #1
 8011962:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011966:	4b6f      	ldr	r3, [pc, #444]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011968:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801196a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 801196e:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011972:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8011976:	4a6b      	ldr	r2, [pc, #428]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011978:	430b      	orrs	r3, r1
 801197a:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801197c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011984:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 8011988:	67bb      	str	r3, [r7, #120]	; 0x78
 801198a:	2300      	movs	r3, #0
 801198c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801198e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8011992:	460b      	mov	r3, r1
 8011994:	4313      	orrs	r3, r2
 8011996:	d03e      	beq.n	8011a16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8011998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 801199c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 80119a0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80119a4:	d022      	beq.n	80119ec <HAL_RCCEx_PeriphCLKConfig+0xea0>
 80119a6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80119aa:	d81b      	bhi.n	80119e4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
 80119ac:	2b00      	cmp	r3, #0
 80119ae:	d003      	beq.n	80119b8 <HAL_RCCEx_PeriphCLKConfig+0xe6c>
 80119b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80119b4:	d00b      	beq.n	80119ce <HAL_RCCEx_PeriphCLKConfig+0xe82>
 80119b6:	e015      	b.n	80119e4 <HAL_RCCEx_PeriphCLKConfig+0xe98>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80119b8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119bc:	3308      	adds	r3, #8
 80119be:	2100      	movs	r1, #0
 80119c0:	4618      	mov	r0, r3
 80119c2:	f000 fd21 	bl	8012408 <RCCEx_PLL2_Config>
 80119c6:	4603      	mov	r3, r0
 80119c8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80119cc:	e00f      	b.n	80119ee <HAL_RCCEx_PeriphCLKConfig+0xea2>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80119ce:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80119d2:	3328      	adds	r3, #40	; 0x28
 80119d4:	2102      	movs	r1, #2
 80119d6:	4618      	mov	r0, r3
 80119d8:	f000 fdc8 	bl	801256c <RCCEx_PLL3_Config>
 80119dc:	4603      	mov	r3, r0
 80119de:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* ADC clock source configuration done later after clock selection check */
        break;
 80119e2:	e004      	b.n	80119ee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80119e4:	2301      	movs	r3, #1
 80119e6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 80119ea:	e000      	b.n	80119ee <HAL_RCCEx_PeriphCLKConfig+0xea2>
        break;
 80119ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 80119ee:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80119f2:	2b00      	cmp	r3, #0
 80119f4:	d10b      	bne.n	8011a0e <HAL_RCCEx_PeriphCLKConfig+0xec2>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80119f6:	4b4b      	ldr	r3, [pc, #300]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 80119f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80119fa:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 80119fe:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8011a06:	4a47      	ldr	r2, [pc, #284]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011a08:	430b      	orrs	r3, r1
 8011a0a:	6593      	str	r3, [r2, #88]	; 0x58
 8011a0c:	e003      	b.n	8011a16 <HAL_RCCEx_PeriphCLKConfig+0xeca>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a0e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011a12:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8011a16:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a1e:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8011a22:	673b      	str	r3, [r7, #112]	; 0x70
 8011a24:	2300      	movs	r3, #0
 8011a26:	677b      	str	r3, [r7, #116]	; 0x74
 8011a28:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8011a2c:	460b      	mov	r3, r1
 8011a2e:	4313      	orrs	r3, r2
 8011a30:	d03b      	beq.n	8011aaa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8011a32:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a36:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a3a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011a3e:	d01f      	beq.n	8011a80 <HAL_RCCEx_PeriphCLKConfig+0xf34>
 8011a40:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8011a44:	d818      	bhi.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
 8011a46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011a4a:	d003      	beq.n	8011a54 <HAL_RCCEx_PeriphCLKConfig+0xf08>
 8011a4c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8011a50:	d007      	beq.n	8011a62 <HAL_RCCEx_PeriphCLKConfig+0xf16>
 8011a52:	e011      	b.n	8011a78 <HAL_RCCEx_PeriphCLKConfig+0xf2c>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011a54:	4b33      	ldr	r3, [pc, #204]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011a56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011a58:	4a32      	ldr	r2, [pc, #200]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011a5a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011a5e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8011a60:	e00f      	b.n	8011a82 <HAL_RCCEx_PeriphCLKConfig+0xf36>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011a62:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a66:	3328      	adds	r3, #40	; 0x28
 8011a68:	2101      	movs	r1, #1
 8011a6a:	4618      	mov	r0, r3
 8011a6c:	f000 fd7e 	bl	801256c <RCCEx_PLL3_Config>
 8011a70:	4603      	mov	r3, r0
 8011a72:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* USB clock source configuration done later after clock selection check */
        break;
 8011a76:	e004      	b.n	8011a82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011a78:	2301      	movs	r3, #1
 8011a7a:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011a7e:	e000      	b.n	8011a82 <HAL_RCCEx_PeriphCLKConfig+0xf36>
        break;
 8011a80:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011a82:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d10b      	bne.n	8011aa2 <HAL_RCCEx_PeriphCLKConfig+0xf56>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8011a8a:	4b26      	ldr	r3, [pc, #152]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011a8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011a8e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8011a92:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011a96:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8011a9a:	4a22      	ldr	r2, [pc, #136]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011a9c:	430b      	orrs	r3, r1
 8011a9e:	6553      	str	r3, [r2, #84]	; 0x54
 8011aa0:	e003      	b.n	8011aaa <HAL_RCCEx_PeriphCLKConfig+0xf5e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011aa2:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011aa6:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8011aaa:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ab2:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 8011ab6:	66bb      	str	r3, [r7, #104]	; 0x68
 8011ab8:	2300      	movs	r3, #0
 8011aba:	66fb      	str	r3, [r7, #108]	; 0x6c
 8011abc:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8011ac0:	460b      	mov	r3, r1
 8011ac2:	4313      	orrs	r3, r2
 8011ac4:	d034      	beq.n	8011b30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8011ac6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011acc:	2b00      	cmp	r3, #0
 8011ace:	d003      	beq.n	8011ad8 <HAL_RCCEx_PeriphCLKConfig+0xf8c>
 8011ad0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8011ad4:	d007      	beq.n	8011ae6 <HAL_RCCEx_PeriphCLKConfig+0xf9a>
 8011ad6:	e011      	b.n	8011afc <HAL_RCCEx_PeriphCLKConfig+0xfb0>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011ad8:	4b12      	ldr	r3, [pc, #72]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011ada:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011adc:	4a11      	ldr	r2, [pc, #68]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011ade:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011ae2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8011ae4:	e00e      	b.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011ae6:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011aea:	3308      	adds	r3, #8
 8011aec:	2102      	movs	r1, #2
 8011aee:	4618      	mov	r0, r3
 8011af0:	f000 fc8a 	bl	8012408 <RCCEx_PLL2_Config>
 8011af4:	4603      	mov	r3, r0
 8011af6:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8011afa:	e003      	b.n	8011b04 <HAL_RCCEx_PeriphCLKConfig+0xfb8>

      default:
        ret = HAL_ERROR;
 8011afc:	2301      	movs	r3, #1
 8011afe:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011b02:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011b04:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011b08:	2b00      	cmp	r3, #0
 8011b0a:	d10d      	bne.n	8011b28 <HAL_RCCEx_PeriphCLKConfig+0xfdc>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8011b0c:	4b05      	ldr	r3, [pc, #20]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011b0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011b10:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8011b14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011b1a:	4a02      	ldr	r2, [pc, #8]	; (8011b24 <HAL_RCCEx_PeriphCLKConfig+0xfd8>)
 8011b1c:	430b      	orrs	r3, r1
 8011b1e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8011b20:	e006      	b.n	8011b30 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
 8011b22:	bf00      	nop
 8011b24:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011b28:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011b2c:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8011b30:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b38:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8011b3c:	663b      	str	r3, [r7, #96]	; 0x60
 8011b3e:	2300      	movs	r3, #0
 8011b40:	667b      	str	r3, [r7, #100]	; 0x64
 8011b42:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8011b46:	460b      	mov	r3, r1
 8011b48:	4313      	orrs	r3, r2
 8011b4a:	d00c      	beq.n	8011b66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011b4c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b50:	3328      	adds	r3, #40	; 0x28
 8011b52:	2102      	movs	r1, #2
 8011b54:	4618      	mov	r0, r3
 8011b56:	f000 fd09 	bl	801256c <RCCEx_PLL3_Config>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	2b00      	cmp	r3, #0
 8011b5e:	d002      	beq.n	8011b66 <HAL_RCCEx_PeriphCLKConfig+0x101a>
    {
      status = HAL_ERROR;
 8011b60:	2301      	movs	r3, #1
 8011b62:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011b66:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b6e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 8011b72:	65bb      	str	r3, [r7, #88]	; 0x58
 8011b74:	2300      	movs	r3, #0
 8011b76:	65fb      	str	r3, [r7, #92]	; 0x5c
 8011b78:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8011b7c:	460b      	mov	r3, r1
 8011b7e:	4313      	orrs	r3, r2
 8011b80:	d036      	beq.n	8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
  {

    switch (PeriphClkInit->RngClockSelection)
 8011b82:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011b86:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011b88:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b8c:	d018      	beq.n	8011bc0 <HAL_RCCEx_PeriphCLKConfig+0x1074>
 8011b8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8011b92:	d811      	bhi.n	8011bb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8011b94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b98:	d014      	beq.n	8011bc4 <HAL_RCCEx_PeriphCLKConfig+0x1078>
 8011b9a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8011b9e:	d80b      	bhi.n	8011bb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
 8011ba0:	2b00      	cmp	r3, #0
 8011ba2:	d011      	beq.n	8011bc8 <HAL_RCCEx_PeriphCLKConfig+0x107c>
 8011ba4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011ba8:	d106      	bne.n	8011bb8 <HAL_RCCEx_PeriphCLKConfig+0x106c>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011baa:	4bb7      	ldr	r3, [pc, #732]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011bac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011bae:	4ab6      	ldr	r2, [pc, #728]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011bb0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8011bb4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8011bb6:	e008      	b.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011bb8:	2301      	movs	r3, #1
 8011bba:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
        break;
 8011bbe:	e004      	b.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8011bc0:	bf00      	nop
 8011bc2:	e002      	b.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8011bc4:	bf00      	nop
 8011bc6:	e000      	b.n	8011bca <HAL_RCCEx_PeriphCLKConfig+0x107e>
        break;
 8011bc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011bca:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011bce:	2b00      	cmp	r3, #0
 8011bd0:	d10a      	bne.n	8011be8 <HAL_RCCEx_PeriphCLKConfig+0x109c>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8011bd2:	4bad      	ldr	r3, [pc, #692]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011bd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011bd6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8011bda:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bde:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8011be0:	4aa9      	ldr	r2, [pc, #676]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011be2:	430b      	orrs	r3, r1
 8011be4:	6553      	str	r3, [r2, #84]	; 0x54
 8011be6:	e003      	b.n	8011bf0 <HAL_RCCEx_PeriphCLKConfig+0x10a4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011be8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011bec:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8011bf0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8011bfc:	653b      	str	r3, [r7, #80]	; 0x50
 8011bfe:	2300      	movs	r3, #0
 8011c00:	657b      	str	r3, [r7, #84]	; 0x54
 8011c02:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8011c06:	460b      	mov	r3, r1
 8011c08:	4313      	orrs	r3, r2
 8011c0a:	d009      	beq.n	8011c20 <HAL_RCCEx_PeriphCLKConfig+0x10d4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8011c0c:	4b9e      	ldr	r3, [pc, #632]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011c0e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c10:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011c14:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011c1a:	4a9b      	ldr	r2, [pc, #620]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011c1c:	430b      	orrs	r3, r1
 8011c1e:	6513      	str	r3, [r2, #80]	; 0x50
    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011c20:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c28:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8011c2c:	64bb      	str	r3, [r7, #72]	; 0x48
 8011c2e:	2300      	movs	r3, #0
 8011c30:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011c32:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8011c36:	460b      	mov	r3, r1
 8011c38:	4313      	orrs	r3, r2
 8011c3a:	d009      	beq.n	8011c50 <HAL_RCCEx_PeriphCLKConfig+0x1104>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011c3c:	4b92      	ldr	r3, [pc, #584]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011c3e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8011c40:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8011c44:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8011c4a:	4a8f      	ldr	r2, [pc, #572]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011c4c:	430b      	orrs	r3, r1
 8011c4e:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011c50:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c58:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 8011c5c:	643b      	str	r3, [r7, #64]	; 0x40
 8011c5e:	2300      	movs	r3, #0
 8011c60:	647b      	str	r3, [r7, #68]	; 0x44
 8011c62:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8011c66:	460b      	mov	r3, r1
 8011c68:	4313      	orrs	r3, r2
 8011c6a:	d00e      	beq.n	8011c8a <HAL_RCCEx_PeriphCLKConfig+0x113e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011c6c:	4b86      	ldr	r3, [pc, #536]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011c6e:	691b      	ldr	r3, [r3, #16]
 8011c70:	4a85      	ldr	r2, [pc, #532]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011c72:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8011c76:	6113      	str	r3, [r2, #16]
 8011c78:	4b83      	ldr	r3, [pc, #524]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011c7a:	6919      	ldr	r1, [r3, #16]
 8011c7c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c80:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8011c84:	4a80      	ldr	r2, [pc, #512]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011c86:	430b      	orrs	r3, r1
 8011c88:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8011c8a:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c92:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8011c96:	63bb      	str	r3, [r7, #56]	; 0x38
 8011c98:	2300      	movs	r3, #0
 8011c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8011c9c:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8011ca0:	460b      	mov	r3, r1
 8011ca2:	4313      	orrs	r3, r2
 8011ca4:	d009      	beq.n	8011cba <HAL_RCCEx_PeriphCLKConfig+0x116e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8011ca6:	4b78      	ldr	r3, [pc, #480]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011ca8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8011caa:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8011cae:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cb4:	4a74      	ldr	r2, [pc, #464]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011cb6:	430b      	orrs	r3, r1
 8011cb8:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8011cba:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cc2:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8011cc6:	633b      	str	r3, [r7, #48]	; 0x30
 8011cc8:	2300      	movs	r3, #0
 8011cca:	637b      	str	r3, [r7, #52]	; 0x34
 8011ccc:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8011cd0:	460b      	mov	r3, r1
 8011cd2:	4313      	orrs	r3, r2
 8011cd4:	d00a      	beq.n	8011cec <HAL_RCCEx_PeriphCLKConfig+0x11a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8011cd6:	4b6c      	ldr	r3, [pc, #432]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011cd8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cda:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8011cde:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011ce2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8011ce6:	4a68      	ldr	r2, [pc, #416]	; (8011e88 <HAL_RCCEx_PeriphCLKConfig+0x133c>)
 8011ce8:	430b      	orrs	r3, r1
 8011cea:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8011cec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011cf4:	2100      	movs	r1, #0
 8011cf6:	62b9      	str	r1, [r7, #40]	; 0x28
 8011cf8:	f003 0301 	and.w	r3, r3, #1
 8011cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8011cfe:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8011d02:	460b      	mov	r3, r1
 8011d04:	4313      	orrs	r3, r2
 8011d06:	d011      	beq.n	8011d2c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011d08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d0c:	3308      	adds	r3, #8
 8011d0e:	2100      	movs	r1, #0
 8011d10:	4618      	mov	r0, r3
 8011d12:	f000 fb79 	bl	8012408 <RCCEx_PLL2_Config>
 8011d16:	4603      	mov	r3, r0
 8011d18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8011d1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011d20:	2b00      	cmp	r3, #0
 8011d22:	d003      	beq.n	8011d2c <HAL_RCCEx_PeriphCLKConfig+0x11e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011d28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8011d2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d34:	2100      	movs	r1, #0
 8011d36:	6239      	str	r1, [r7, #32]
 8011d38:	f003 0302 	and.w	r3, r3, #2
 8011d3c:	627b      	str	r3, [r7, #36]	; 0x24
 8011d3e:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011d42:	460b      	mov	r3, r1
 8011d44:	4313      	orrs	r3, r2
 8011d46:	d011      	beq.n	8011d6c <HAL_RCCEx_PeriphCLKConfig+0x1220>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011d48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d4c:	3308      	adds	r3, #8
 8011d4e:	2101      	movs	r1, #1
 8011d50:	4618      	mov	r0, r3
 8011d52:	f000 fb59 	bl	8012408 <RCCEx_PLL2_Config>
 8011d56:	4603      	mov	r3, r0
 8011d58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8011d5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011d60:	2b00      	cmp	r3, #0
 8011d62:	d003      	beq.n	8011d6c <HAL_RCCEx_PeriphCLKConfig+0x1220>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011d64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011d68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8011d6c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011d74:	2100      	movs	r1, #0
 8011d76:	61b9      	str	r1, [r7, #24]
 8011d78:	f003 0304 	and.w	r3, r3, #4
 8011d7c:	61fb      	str	r3, [r7, #28]
 8011d7e:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011d82:	460b      	mov	r3, r1
 8011d84:	4313      	orrs	r3, r2
 8011d86:	d011      	beq.n	8011dac <HAL_RCCEx_PeriphCLKConfig+0x1260>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8011d88:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011d8c:	3308      	adds	r3, #8
 8011d8e:	2102      	movs	r1, #2
 8011d90:	4618      	mov	r0, r3
 8011d92:	f000 fb39 	bl	8012408 <RCCEx_PLL2_Config>
 8011d96:	4603      	mov	r3, r0
 8011d98:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8011d9c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d003      	beq.n	8011dac <HAL_RCCEx_PeriphCLKConfig+0x1260>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011da4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011da8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8011dac:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011db4:	2100      	movs	r1, #0
 8011db6:	6139      	str	r1, [r7, #16]
 8011db8:	f003 0308 	and.w	r3, r3, #8
 8011dbc:	617b      	str	r3, [r7, #20]
 8011dbe:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011dc2:	460b      	mov	r3, r1
 8011dc4:	4313      	orrs	r3, r2
 8011dc6:	d011      	beq.n	8011dec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8011dc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011dcc:	3328      	adds	r3, #40	; 0x28
 8011dce:	2100      	movs	r1, #0
 8011dd0:	4618      	mov	r0, r3
 8011dd2:	f000 fbcb 	bl	801256c <RCCEx_PLL3_Config>
 8011dd6:	4603      	mov	r3, r0
 8011dd8:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
  
    if (ret == HAL_OK)
 8011ddc:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d003      	beq.n	8011dec <HAL_RCCEx_PeriphCLKConfig+0x12a0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011de4:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011de8:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8011dec:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011df4:	2100      	movs	r1, #0
 8011df6:	60b9      	str	r1, [r7, #8]
 8011df8:	f003 0310 	and.w	r3, r3, #16
 8011dfc:	60fb      	str	r3, [r7, #12]
 8011dfe:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011e02:	460b      	mov	r3, r1
 8011e04:	4313      	orrs	r3, r2
 8011e06:	d011      	beq.n	8011e2c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011e08:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e0c:	3328      	adds	r3, #40	; 0x28
 8011e0e:	2101      	movs	r1, #1
 8011e10:	4618      	mov	r0, r3
 8011e12:	f000 fbab 	bl	801256c <RCCEx_PLL3_Config>
 8011e16:	4603      	mov	r3, r0
 8011e18:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8011e1c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011e20:	2b00      	cmp	r3, #0
 8011e22:	d003      	beq.n	8011e2c <HAL_RCCEx_PeriphCLKConfig+0x12e0>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e24:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011e28:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8011e2c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011e34:	2100      	movs	r1, #0
 8011e36:	6039      	str	r1, [r7, #0]
 8011e38:	f003 0320 	and.w	r3, r3, #32
 8011e3c:	607b      	str	r3, [r7, #4]
 8011e3e:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011e42:	460b      	mov	r3, r1
 8011e44:	4313      	orrs	r3, r2
 8011e46:	d011      	beq.n	8011e6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011e48:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8011e4c:	3328      	adds	r3, #40	; 0x28
 8011e4e:	2102      	movs	r1, #2
 8011e50:	4618      	mov	r0, r3
 8011e52:	f000 fb8b 	bl	801256c <RCCEx_PLL3_Config>
 8011e56:	4603      	mov	r3, r0
 8011e58:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
    
    if (ret == HAL_OK)
 8011e5c:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011e60:	2b00      	cmp	r3, #0
 8011e62:	d003      	beq.n	8011e6c <HAL_RCCEx_PeriphCLKConfig+0x1320>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011e64:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8011e68:	f887 3116 	strb.w	r3, [r7, #278]	; 0x116
    } 
  }

  if (status == HAL_OK)
 8011e6c:	f897 3116 	ldrb.w	r3, [r7, #278]	; 0x116
 8011e70:	2b00      	cmp	r3, #0
 8011e72:	d101      	bne.n	8011e78 <HAL_RCCEx_PeriphCLKConfig+0x132c>
  {
    return HAL_OK;
 8011e74:	2300      	movs	r3, #0
 8011e76:	e000      	b.n	8011e7a <HAL_RCCEx_PeriphCLKConfig+0x132e>
  }
  return HAL_ERROR;
 8011e78:	2301      	movs	r3, #1
}
 8011e7a:	4618      	mov	r0, r3
 8011e7c:	f507 778c 	add.w	r7, r7, #280	; 0x118
 8011e80:	46bd      	mov	sp, r7
 8011e82:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011e86:	bf00      	nop
 8011e88:	58024400 	.word	0x58024400

08011e8c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8011e8c:	b580      	push	{r7, lr}
 8011e8e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8011e90:	f7fe fe00 	bl	8010a94 <HAL_RCC_GetHCLKFreq>
 8011e94:	4602      	mov	r2, r0
 8011e96:	4b06      	ldr	r3, [pc, #24]	; (8011eb0 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8011e98:	6a1b      	ldr	r3, [r3, #32]
 8011e9a:	091b      	lsrs	r3, r3, #4
 8011e9c:	f003 0307 	and.w	r3, r3, #7
 8011ea0:	4904      	ldr	r1, [pc, #16]	; (8011eb4 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8011ea2:	5ccb      	ldrb	r3, [r1, r3]
 8011ea4:	f003 031f 	and.w	r3, r3, #31
 8011ea8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8011eac:	4618      	mov	r0, r3
 8011eae:	bd80      	pop	{r7, pc}
 8011eb0:	58024400 	.word	0x58024400
 8011eb4:	08018150 	.word	0x08018150

08011eb8 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8011eb8:	b480      	push	{r7}
 8011eba:	b089      	sub	sp, #36	; 0x24
 8011ebc:	af00      	add	r7, sp, #0
 8011ebe:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8011ec0:	4ba1      	ldr	r3, [pc, #644]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011ec2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ec4:	f003 0303 	and.w	r3, r3, #3
 8011ec8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8011eca:	4b9f      	ldr	r3, [pc, #636]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011ece:	0b1b      	lsrs	r3, r3, #12
 8011ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8011ed4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8011ed6:	4b9c      	ldr	r3, [pc, #624]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011eda:	091b      	lsrs	r3, r3, #4
 8011edc:	f003 0301 	and.w	r3, r3, #1
 8011ee0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8011ee2:	4b99      	ldr	r3, [pc, #612]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011ee4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8011ee6:	08db      	lsrs	r3, r3, #3
 8011ee8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8011eec:	693a      	ldr	r2, [r7, #16]
 8011eee:	fb02 f303 	mul.w	r3, r2, r3
 8011ef2:	ee07 3a90 	vmov	s15, r3
 8011ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011efa:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8011efe:	697b      	ldr	r3, [r7, #20]
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	f000 8111 	beq.w	8012128 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8011f06:	69bb      	ldr	r3, [r7, #24]
 8011f08:	2b02      	cmp	r3, #2
 8011f0a:	f000 8083 	beq.w	8012014 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8011f0e:	69bb      	ldr	r3, [r7, #24]
 8011f10:	2b02      	cmp	r3, #2
 8011f12:	f200 80a1 	bhi.w	8012058 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8011f16:	69bb      	ldr	r3, [r7, #24]
 8011f18:	2b00      	cmp	r3, #0
 8011f1a:	d003      	beq.n	8011f24 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8011f1c:	69bb      	ldr	r3, [r7, #24]
 8011f1e:	2b01      	cmp	r3, #1
 8011f20:	d056      	beq.n	8011fd0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8011f22:	e099      	b.n	8012058 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8011f24:	4b88      	ldr	r3, [pc, #544]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f26:	681b      	ldr	r3, [r3, #0]
 8011f28:	f003 0320 	and.w	r3, r3, #32
 8011f2c:	2b00      	cmp	r3, #0
 8011f2e:	d02d      	beq.n	8011f8c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011f30:	4b85      	ldr	r3, [pc, #532]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f32:	681b      	ldr	r3, [r3, #0]
 8011f34:	08db      	lsrs	r3, r3, #3
 8011f36:	f003 0303 	and.w	r3, r3, #3
 8011f3a:	4a84      	ldr	r2, [pc, #528]	; (801214c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8011f3c:	fa22 f303 	lsr.w	r3, r2, r3
 8011f40:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011f42:	68bb      	ldr	r3, [r7, #8]
 8011f44:	ee07 3a90 	vmov	s15, r3
 8011f48:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f4c:	697b      	ldr	r3, [r7, #20]
 8011f4e:	ee07 3a90 	vmov	s15, r3
 8011f52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f56:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f5a:	4b7b      	ldr	r3, [pc, #492]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011f5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011f5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011f62:	ee07 3a90 	vmov	s15, r3
 8011f66:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011f6a:	ed97 6a03 	vldr	s12, [r7, #12]
 8011f6e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8012150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011f72:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011f76:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011f7a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011f7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011f82:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011f86:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8011f8a:	e087      	b.n	801209c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011f8c:	697b      	ldr	r3, [r7, #20]
 8011f8e:	ee07 3a90 	vmov	s15, r3
 8011f92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011f96:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8012154 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8011f9a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011f9e:	4b6a      	ldr	r3, [pc, #424]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011fa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fa2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fa6:	ee07 3a90 	vmov	s15, r3
 8011faa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011fae:	ed97 6a03 	vldr	s12, [r7, #12]
 8011fb2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8012150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011fb6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011fba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8011fbe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011fc2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011fc6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011fca:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8011fce:	e065      	b.n	801209c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8011fd0:	697b      	ldr	r3, [r7, #20]
 8011fd2:	ee07 3a90 	vmov	s15, r3
 8011fd6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8011fda:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8011fde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8011fe2:	4b59      	ldr	r3, [pc, #356]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8011fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011fe6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011fea:	ee07 3a90 	vmov	s15, r3
 8011fee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8011ff2:	ed97 6a03 	vldr	s12, [r7, #12]
 8011ff6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8012150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8011ffa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8011ffe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012002:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012006:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801200a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801200e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012012:	e043      	b.n	801209c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012014:	697b      	ldr	r3, [r7, #20]
 8012016:	ee07 3a90 	vmov	s15, r3
 801201a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801201e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 801215c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8012022:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012026:	4b48      	ldr	r3, [pc, #288]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801202a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801202e:	ee07 3a90 	vmov	s15, r3
 8012032:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012036:	ed97 6a03 	vldr	s12, [r7, #12]
 801203a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8012150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801203e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012042:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012046:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801204a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801204e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012052:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012056:	e021      	b.n	801209c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012058:	697b      	ldr	r3, [r7, #20]
 801205a:	ee07 3a90 	vmov	s15, r3
 801205e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012062:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012158 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012066:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801206a:	4b37      	ldr	r3, [pc, #220]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801206c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801206e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012072:	ee07 3a90 	vmov	s15, r3
 8012076:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801207a:	ed97 6a03 	vldr	s12, [r7, #12]
 801207e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8012150 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012082:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012086:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801208a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801208e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012092:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012096:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801209a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801209c:	4b2a      	ldr	r3, [pc, #168]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801209e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120a0:	0a5b      	lsrs	r3, r3, #9
 80120a2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120a6:	ee07 3a90 	vmov	s15, r3
 80120aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120ae:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80120b2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80120b6:	edd7 6a07 	vldr	s13, [r7, #28]
 80120ba:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80120be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80120c2:	ee17 2a90 	vmov	r2, s15
 80120c6:	687b      	ldr	r3, [r7, #4]
 80120c8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 80120ca:	4b1f      	ldr	r3, [pc, #124]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120ce:	0c1b      	lsrs	r3, r3, #16
 80120d0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80120d4:	ee07 3a90 	vmov	s15, r3
 80120d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80120dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80120e0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80120e4:	edd7 6a07 	vldr	s13, [r7, #28]
 80120e8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80120ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80120f0:	ee17 2a90 	vmov	r2, s15
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 80120f8:	4b13      	ldr	r3, [pc, #76]	; (8012148 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80120fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120fc:	0e1b      	lsrs	r3, r3, #24
 80120fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8012102:	ee07 3a90 	vmov	s15, r3
 8012106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801210a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801210e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012112:	edd7 6a07 	vldr	s13, [r7, #28]
 8012116:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801211a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801211e:	ee17 2a90 	vmov	r2, s15
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8012126:	e008      	b.n	801213a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8012128:	687b      	ldr	r3, [r7, #4]
 801212a:	2200      	movs	r2, #0
 801212c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801212e:	687b      	ldr	r3, [r7, #4]
 8012130:	2200      	movs	r2, #0
 8012132:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2200      	movs	r2, #0
 8012138:	609a      	str	r2, [r3, #8]
}
 801213a:	bf00      	nop
 801213c:	3724      	adds	r7, #36	; 0x24
 801213e:	46bd      	mov	sp, r7
 8012140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012144:	4770      	bx	lr
 8012146:	bf00      	nop
 8012148:	58024400 	.word	0x58024400
 801214c:	03d09000 	.word	0x03d09000
 8012150:	46000000 	.word	0x46000000
 8012154:	4c742400 	.word	0x4c742400
 8012158:	4a742400 	.word	0x4a742400
 801215c:	4af42400 	.word	0x4af42400

08012160 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8012160:	b480      	push	{r7}
 8012162:	b089      	sub	sp, #36	; 0x24
 8012164:	af00      	add	r7, sp, #0
 8012166:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012168:	4ba1      	ldr	r3, [pc, #644]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801216a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801216c:	f003 0303 	and.w	r3, r3, #3
 8012170:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8012172:	4b9f      	ldr	r3, [pc, #636]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012176:	0d1b      	lsrs	r3, r3, #20
 8012178:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801217c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801217e:	4b9c      	ldr	r3, [pc, #624]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012180:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012182:	0a1b      	lsrs	r3, r3, #8
 8012184:	f003 0301 	and.w	r3, r3, #1
 8012188:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801218a:	4b99      	ldr	r3, [pc, #612]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801218c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801218e:	08db      	lsrs	r3, r3, #3
 8012190:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012194:	693a      	ldr	r2, [r7, #16]
 8012196:	fb02 f303 	mul.w	r3, r2, r3
 801219a:	ee07 3a90 	vmov	s15, r3
 801219e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121a2:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 80121a6:	697b      	ldr	r3, [r7, #20]
 80121a8:	2b00      	cmp	r3, #0
 80121aa:	f000 8111 	beq.w	80123d0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 80121ae:	69bb      	ldr	r3, [r7, #24]
 80121b0:	2b02      	cmp	r3, #2
 80121b2:	f000 8083 	beq.w	80122bc <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 80121b6:	69bb      	ldr	r3, [r7, #24]
 80121b8:	2b02      	cmp	r3, #2
 80121ba:	f200 80a1 	bhi.w	8012300 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 80121be:	69bb      	ldr	r3, [r7, #24]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d003      	beq.n	80121cc <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 80121c4:	69bb      	ldr	r3, [r7, #24]
 80121c6:	2b01      	cmp	r3, #1
 80121c8:	d056      	beq.n	8012278 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 80121ca:	e099      	b.n	8012300 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80121cc:	4b88      	ldr	r3, [pc, #544]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80121ce:	681b      	ldr	r3, [r3, #0]
 80121d0:	f003 0320 	and.w	r3, r3, #32
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d02d      	beq.n	8012234 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80121d8:	4b85      	ldr	r3, [pc, #532]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80121da:	681b      	ldr	r3, [r3, #0]
 80121dc:	08db      	lsrs	r3, r3, #3
 80121de:	f003 0303 	and.w	r3, r3, #3
 80121e2:	4a84      	ldr	r2, [pc, #528]	; (80123f4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80121e4:	fa22 f303 	lsr.w	r3, r2, r3
 80121e8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80121ea:	68bb      	ldr	r3, [r7, #8]
 80121ec:	ee07 3a90 	vmov	s15, r3
 80121f0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80121f4:	697b      	ldr	r3, [r7, #20]
 80121f6:	ee07 3a90 	vmov	s15, r3
 80121fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80121fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012202:	4b7b      	ldr	r3, [pc, #492]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012206:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801220a:	ee07 3a90 	vmov	s15, r3
 801220e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012212:	ed97 6a03 	vldr	s12, [r7, #12]
 8012216:	eddf 5a78 	vldr	s11, [pc, #480]	; 80123f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801221a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801221e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012222:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012226:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801222a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801222e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012232:	e087      	b.n	8012344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012234:	697b      	ldr	r3, [r7, #20]
 8012236:	ee07 3a90 	vmov	s15, r3
 801223a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801223e:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80123fc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012242:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012246:	4b6a      	ldr	r3, [pc, #424]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012248:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801224a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801224e:	ee07 3a90 	vmov	s15, r3
 8012252:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012256:	ed97 6a03 	vldr	s12, [r7, #12]
 801225a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80123f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801225e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012262:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012266:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 801226a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801226e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012272:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012276:	e065      	b.n	8012344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012278:	697b      	ldr	r3, [r7, #20]
 801227a:	ee07 3a90 	vmov	s15, r3
 801227e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012282:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8012400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012286:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801228a:	4b59      	ldr	r3, [pc, #356]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801228e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012292:	ee07 3a90 	vmov	s15, r3
 8012296:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801229a:	ed97 6a03 	vldr	s12, [r7, #12]
 801229e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80123f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80122a2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122a6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122aa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122ae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122b6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80122ba:	e043      	b.n	8012344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80122bc:	697b      	ldr	r3, [r7, #20]
 80122be:	ee07 3a90 	vmov	s15, r3
 80122c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80122c6:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8012404 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 80122ca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80122ce:	4b48      	ldr	r3, [pc, #288]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80122d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80122d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80122d6:	ee07 3a90 	vmov	s15, r3
 80122da:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80122de:	ed97 6a03 	vldr	s12, [r7, #12]
 80122e2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80123f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80122e6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80122ea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80122ee:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80122f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80122f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80122fa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80122fe:	e021      	b.n	8012344 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012300:	697b      	ldr	r3, [r7, #20]
 8012302:	ee07 3a90 	vmov	s15, r3
 8012306:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801230a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8012400 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801230e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012312:	4b37      	ldr	r3, [pc, #220]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012316:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801231a:	ee07 3a90 	vmov	s15, r3
 801231e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012322:	ed97 6a03 	vldr	s12, [r7, #12]
 8012326:	eddf 5a34 	vldr	s11, [pc, #208]	; 80123f8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801232a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801232e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012332:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8012336:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801233a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801233e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012342:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8012344:	4b2a      	ldr	r3, [pc, #168]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012348:	0a5b      	lsrs	r3, r3, #9
 801234a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801234e:	ee07 3a90 	vmov	s15, r3
 8012352:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012356:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801235a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801235e:	edd7 6a07 	vldr	s13, [r7, #28]
 8012362:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012366:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801236a:	ee17 2a90 	vmov	r2, s15
 801236e:	687b      	ldr	r3, [r7, #4]
 8012370:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8012372:	4b1f      	ldr	r3, [pc, #124]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8012376:	0c1b      	lsrs	r3, r3, #16
 8012378:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801237c:	ee07 3a90 	vmov	s15, r3
 8012380:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012384:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8012388:	ee37 7a87 	vadd.f32	s14, s15, s14
 801238c:	edd7 6a07 	vldr	s13, [r7, #28]
 8012390:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012394:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012398:	ee17 2a90 	vmov	r2, s15
 801239c:	687b      	ldr	r3, [r7, #4]
 801239e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 80123a0:	4b13      	ldr	r3, [pc, #76]	; (80123f0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80123a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80123a4:	0e1b      	lsrs	r3, r3, #24
 80123a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80123aa:	ee07 3a90 	vmov	s15, r3
 80123ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80123b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80123b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 80123ba:	edd7 6a07 	vldr	s13, [r7, #28]
 80123be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80123c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80123c6:	ee17 2a90 	vmov	r2, s15
 80123ca:	687b      	ldr	r3, [r7, #4]
 80123cc:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 80123ce:	e008      	b.n	80123e2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2200      	movs	r2, #0
 80123d4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	2200      	movs	r2, #0
 80123da:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 80123dc:	687b      	ldr	r3, [r7, #4]
 80123de:	2200      	movs	r2, #0
 80123e0:	609a      	str	r2, [r3, #8]
}
 80123e2:	bf00      	nop
 80123e4:	3724      	adds	r7, #36	; 0x24
 80123e6:	46bd      	mov	sp, r7
 80123e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123ec:	4770      	bx	lr
 80123ee:	bf00      	nop
 80123f0:	58024400 	.word	0x58024400
 80123f4:	03d09000 	.word	0x03d09000
 80123f8:	46000000 	.word	0x46000000
 80123fc:	4c742400 	.word	0x4c742400
 8012400:	4a742400 	.word	0x4a742400
 8012404:	4af42400 	.word	0x4af42400

08012408 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8012408:	b580      	push	{r7, lr}
 801240a:	b084      	sub	sp, #16
 801240c:	af00      	add	r7, sp, #0
 801240e:	6078      	str	r0, [r7, #4]
 8012410:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012412:	2300      	movs	r3, #0
 8012414:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8012416:	4b53      	ldr	r3, [pc, #332]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 8012418:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801241a:	f003 0303 	and.w	r3, r3, #3
 801241e:	2b03      	cmp	r3, #3
 8012420:	d101      	bne.n	8012426 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8012422:	2301      	movs	r3, #1
 8012424:	e099      	b.n	801255a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8012426:	4b4f      	ldr	r3, [pc, #316]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 8012428:	681b      	ldr	r3, [r3, #0]
 801242a:	4a4e      	ldr	r2, [pc, #312]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 801242c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8012430:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012432:	f7fc fcbb 	bl	800edac <HAL_GetTick>
 8012436:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8012438:	e008      	b.n	801244c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801243a:	f7fc fcb7 	bl	800edac <HAL_GetTick>
 801243e:	4602      	mov	r2, r0
 8012440:	68bb      	ldr	r3, [r7, #8]
 8012442:	1ad3      	subs	r3, r2, r3
 8012444:	2b02      	cmp	r3, #2
 8012446:	d901      	bls.n	801244c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8012448:	2303      	movs	r3, #3
 801244a:	e086      	b.n	801255a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801244c:	4b45      	ldr	r3, [pc, #276]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012454:	2b00      	cmp	r3, #0
 8012456:	d1f0      	bne.n	801243a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8012458:	4b42      	ldr	r3, [pc, #264]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 801245a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801245c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8012460:	687b      	ldr	r3, [r7, #4]
 8012462:	681b      	ldr	r3, [r3, #0]
 8012464:	031b      	lsls	r3, r3, #12
 8012466:	493f      	ldr	r1, [pc, #252]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 8012468:	4313      	orrs	r3, r2
 801246a:	628b      	str	r3, [r1, #40]	; 0x28
 801246c:	687b      	ldr	r3, [r7, #4]
 801246e:	685b      	ldr	r3, [r3, #4]
 8012470:	3b01      	subs	r3, #1
 8012472:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8012476:	687b      	ldr	r3, [r7, #4]
 8012478:	689b      	ldr	r3, [r3, #8]
 801247a:	3b01      	subs	r3, #1
 801247c:	025b      	lsls	r3, r3, #9
 801247e:	b29b      	uxth	r3, r3
 8012480:	431a      	orrs	r2, r3
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	68db      	ldr	r3, [r3, #12]
 8012486:	3b01      	subs	r3, #1
 8012488:	041b      	lsls	r3, r3, #16
 801248a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 801248e:	431a      	orrs	r2, r3
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	691b      	ldr	r3, [r3, #16]
 8012494:	3b01      	subs	r3, #1
 8012496:	061b      	lsls	r3, r3, #24
 8012498:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 801249c:	4931      	ldr	r1, [pc, #196]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 801249e:	4313      	orrs	r3, r2
 80124a0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80124a2:	4b30      	ldr	r3, [pc, #192]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124a6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80124aa:	687b      	ldr	r3, [r7, #4]
 80124ac:	695b      	ldr	r3, [r3, #20]
 80124ae:	492d      	ldr	r1, [pc, #180]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124b0:	4313      	orrs	r3, r2
 80124b2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80124b4:	4b2b      	ldr	r3, [pc, #172]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124b8:	f023 0220 	bic.w	r2, r3, #32
 80124bc:	687b      	ldr	r3, [r7, #4]
 80124be:	699b      	ldr	r3, [r3, #24]
 80124c0:	4928      	ldr	r1, [pc, #160]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124c2:	4313      	orrs	r3, r2
 80124c4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80124c6:	4b27      	ldr	r3, [pc, #156]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ca:	4a26      	ldr	r2, [pc, #152]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124cc:	f023 0310 	bic.w	r3, r3, #16
 80124d0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80124d2:	4b24      	ldr	r3, [pc, #144]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80124d6:	4b24      	ldr	r3, [pc, #144]	; (8012568 <RCCEx_PLL2_Config+0x160>)
 80124d8:	4013      	ands	r3, r2
 80124da:	687a      	ldr	r2, [r7, #4]
 80124dc:	69d2      	ldr	r2, [r2, #28]
 80124de:	00d2      	lsls	r2, r2, #3
 80124e0:	4920      	ldr	r1, [pc, #128]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124e2:	4313      	orrs	r3, r2
 80124e4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80124e6:	4b1f      	ldr	r3, [pc, #124]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124ea:	4a1e      	ldr	r2, [pc, #120]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124ec:	f043 0310 	orr.w	r3, r3, #16
 80124f0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80124f2:	683b      	ldr	r3, [r7, #0]
 80124f4:	2b00      	cmp	r3, #0
 80124f6:	d106      	bne.n	8012506 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80124f8:	4b1a      	ldr	r3, [pc, #104]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80124fc:	4a19      	ldr	r2, [pc, #100]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 80124fe:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8012502:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012504:	e00f      	b.n	8012526 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8012506:	683b      	ldr	r3, [r7, #0]
 8012508:	2b01      	cmp	r3, #1
 801250a:	d106      	bne.n	801251a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801250c:	4b15      	ldr	r3, [pc, #84]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 801250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012510:	4a14      	ldr	r2, [pc, #80]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 8012512:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012516:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012518:	e005      	b.n	8012526 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801251a:	4b12      	ldr	r3, [pc, #72]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 801251c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801251e:	4a11      	ldr	r2, [pc, #68]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 8012520:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8012524:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8012526:	4b0f      	ldr	r3, [pc, #60]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 8012528:	681b      	ldr	r3, [r3, #0]
 801252a:	4a0e      	ldr	r2, [pc, #56]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 801252c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8012530:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012532:	f7fc fc3b 	bl	800edac <HAL_GetTick>
 8012536:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8012538:	e008      	b.n	801254c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801253a:	f7fc fc37 	bl	800edac <HAL_GetTick>
 801253e:	4602      	mov	r2, r0
 8012540:	68bb      	ldr	r3, [r7, #8]
 8012542:	1ad3      	subs	r3, r2, r3
 8012544:	2b02      	cmp	r3, #2
 8012546:	d901      	bls.n	801254c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8012548:	2303      	movs	r3, #3
 801254a:	e006      	b.n	801255a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801254c:	4b05      	ldr	r3, [pc, #20]	; (8012564 <RCCEx_PLL2_Config+0x15c>)
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8012554:	2b00      	cmp	r3, #0
 8012556:	d0f0      	beq.n	801253a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8012558:	7bfb      	ldrb	r3, [r7, #15]
}
 801255a:	4618      	mov	r0, r3
 801255c:	3710      	adds	r7, #16
 801255e:	46bd      	mov	sp, r7
 8012560:	bd80      	pop	{r7, pc}
 8012562:	bf00      	nop
 8012564:	58024400 	.word	0x58024400
 8012568:	ffff0007 	.word	0xffff0007

0801256c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801256c:	b580      	push	{r7, lr}
 801256e:	b084      	sub	sp, #16
 8012570:	af00      	add	r7, sp, #0
 8012572:	6078      	str	r0, [r7, #4]
 8012574:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012576:	2300      	movs	r3, #0
 8012578:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801257a:	4b53      	ldr	r3, [pc, #332]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 801257c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801257e:	f003 0303 	and.w	r3, r3, #3
 8012582:	2b03      	cmp	r3, #3
 8012584:	d101      	bne.n	801258a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8012586:	2301      	movs	r3, #1
 8012588:	e099      	b.n	80126be <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801258a:	4b4f      	ldr	r3, [pc, #316]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 801258c:	681b      	ldr	r3, [r3, #0]
 801258e:	4a4e      	ldr	r2, [pc, #312]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012590:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8012594:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012596:	f7fc fc09 	bl	800edac <HAL_GetTick>
 801259a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801259c:	e008      	b.n	80125b0 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801259e:	f7fc fc05 	bl	800edac <HAL_GetTick>
 80125a2:	4602      	mov	r2, r0
 80125a4:	68bb      	ldr	r3, [r7, #8]
 80125a6:	1ad3      	subs	r3, r2, r3
 80125a8:	2b02      	cmp	r3, #2
 80125aa:	d901      	bls.n	80125b0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80125ac:	2303      	movs	r3, #3
 80125ae:	e086      	b.n	80126be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80125b0:	4b45      	ldr	r3, [pc, #276]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80125b8:	2b00      	cmp	r3, #0
 80125ba:	d1f0      	bne.n	801259e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80125bc:	4b42      	ldr	r3, [pc, #264]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 80125be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80125c0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 80125c4:	687b      	ldr	r3, [r7, #4]
 80125c6:	681b      	ldr	r3, [r3, #0]
 80125c8:	051b      	lsls	r3, r3, #20
 80125ca:	493f      	ldr	r1, [pc, #252]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 80125cc:	4313      	orrs	r3, r2
 80125ce:	628b      	str	r3, [r1, #40]	; 0x28
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	685b      	ldr	r3, [r3, #4]
 80125d4:	3b01      	subs	r3, #1
 80125d6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80125da:	687b      	ldr	r3, [r7, #4]
 80125dc:	689b      	ldr	r3, [r3, #8]
 80125de:	3b01      	subs	r3, #1
 80125e0:	025b      	lsls	r3, r3, #9
 80125e2:	b29b      	uxth	r3, r3
 80125e4:	431a      	orrs	r2, r3
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	68db      	ldr	r3, [r3, #12]
 80125ea:	3b01      	subs	r3, #1
 80125ec:	041b      	lsls	r3, r3, #16
 80125ee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80125f2:	431a      	orrs	r2, r3
 80125f4:	687b      	ldr	r3, [r7, #4]
 80125f6:	691b      	ldr	r3, [r3, #16]
 80125f8:	3b01      	subs	r3, #1
 80125fa:	061b      	lsls	r3, r3, #24
 80125fc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8012600:	4931      	ldr	r1, [pc, #196]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012602:	4313      	orrs	r3, r2
 8012604:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8012606:	4b30      	ldr	r3, [pc, #192]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012608:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801260a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 801260e:	687b      	ldr	r3, [r7, #4]
 8012610:	695b      	ldr	r3, [r3, #20]
 8012612:	492d      	ldr	r1, [pc, #180]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012614:	4313      	orrs	r3, r2
 8012616:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8012618:	4b2b      	ldr	r3, [pc, #172]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 801261a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801261c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8012620:	687b      	ldr	r3, [r7, #4]
 8012622:	699b      	ldr	r3, [r3, #24]
 8012624:	4928      	ldr	r1, [pc, #160]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012626:	4313      	orrs	r3, r2
 8012628:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801262a:	4b27      	ldr	r3, [pc, #156]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 801262c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801262e:	4a26      	ldr	r2, [pc, #152]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8012634:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8012636:	4b24      	ldr	r3, [pc, #144]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 801263a:	4b24      	ldr	r3, [pc, #144]	; (80126cc <RCCEx_PLL3_Config+0x160>)
 801263c:	4013      	ands	r3, r2
 801263e:	687a      	ldr	r2, [r7, #4]
 8012640:	69d2      	ldr	r2, [r2, #28]
 8012642:	00d2      	lsls	r2, r2, #3
 8012644:	4920      	ldr	r1, [pc, #128]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012646:	4313      	orrs	r3, r2
 8012648:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801264a:	4b1f      	ldr	r3, [pc, #124]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 801264c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801264e:	4a1e      	ldr	r2, [pc, #120]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012650:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8012654:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8012656:	683b      	ldr	r3, [r7, #0]
 8012658:	2b00      	cmp	r3, #0
 801265a:	d106      	bne.n	801266a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801265c:	4b1a      	ldr	r3, [pc, #104]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 801265e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012660:	4a19      	ldr	r2, [pc, #100]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012662:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8012666:	62d3      	str	r3, [r2, #44]	; 0x2c
 8012668:	e00f      	b.n	801268a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801266a:	683b      	ldr	r3, [r7, #0]
 801266c:	2b01      	cmp	r3, #1
 801266e:	d106      	bne.n	801267e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8012670:	4b15      	ldr	r3, [pc, #84]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012672:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012674:	4a14      	ldr	r2, [pc, #80]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012676:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 801267a:	62d3      	str	r3, [r2, #44]	; 0x2c
 801267c:	e005      	b.n	801268a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801267e:	4b12      	ldr	r3, [pc, #72]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012682:	4a11      	ldr	r2, [pc, #68]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012684:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8012688:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801268a:	4b0f      	ldr	r3, [pc, #60]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 801268c:	681b      	ldr	r3, [r3, #0]
 801268e:	4a0e      	ldr	r2, [pc, #56]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 8012690:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8012694:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8012696:	f7fc fb89 	bl	800edac <HAL_GetTick>
 801269a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801269c:	e008      	b.n	80126b0 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801269e:	f7fc fb85 	bl	800edac <HAL_GetTick>
 80126a2:	4602      	mov	r2, r0
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	1ad3      	subs	r3, r2, r3
 80126a8:	2b02      	cmp	r3, #2
 80126aa:	d901      	bls.n	80126b0 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80126ac:	2303      	movs	r3, #3
 80126ae:	e006      	b.n	80126be <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80126b0:	4b05      	ldr	r3, [pc, #20]	; (80126c8 <RCCEx_PLL3_Config+0x15c>)
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d0f0      	beq.n	801269e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80126bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80126be:	4618      	mov	r0, r3
 80126c0:	3710      	adds	r7, #16
 80126c2:	46bd      	mov	sp, r7
 80126c4:	bd80      	pop	{r7, pc}
 80126c6:	bf00      	nop
 80126c8:	58024400 	.word	0x58024400
 80126cc:	ffff0007 	.word	0xffff0007

080126d0 <HAL_RNG_Init>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RNG_Init(RNG_HandleTypeDef *hrng)
{
 80126d0:	b580      	push	{r7, lr}
 80126d2:	b084      	sub	sp, #16
 80126d4:	af00      	add	r7, sp, #0
 80126d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  /* Check the RNG handle allocation */
  if (hrng == NULL)
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d101      	bne.n	80126e2 <HAL_RNG_Init+0x12>
  {
    return HAL_ERROR;
 80126de:	2301      	movs	r3, #1
 80126e0:	e092      	b.n	8012808 <HAL_RNG_Init+0x138>

    /* Init the low level hardware */
    hrng->MspInitCallback(hrng);
  }
#else
  if (hrng->State == HAL_RNG_STATE_RESET)
 80126e2:	687b      	ldr	r3, [r7, #4]
 80126e4:	7a5b      	ldrb	r3, [r3, #9]
 80126e6:	b2db      	uxtb	r3, r3
 80126e8:	2b00      	cmp	r3, #0
 80126ea:	d105      	bne.n	80126f8 <HAL_RNG_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrng->Lock = HAL_UNLOCKED;
 80126ec:	687b      	ldr	r3, [r7, #4]
 80126ee:	2200      	movs	r2, #0
 80126f0:	721a      	strb	r2, [r3, #8]

    /* Init the low level hardware */
    HAL_RNG_MspInit(hrng);
 80126f2:	6878      	ldr	r0, [r7, #4]
 80126f4:	f7fc f8a2 	bl	800e83c <HAL_RNG_MspInit>
  }
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */

  /* Change RNG peripheral state */
  hrng->State = HAL_RNG_STATE_BUSY;
 80126f8:	687b      	ldr	r3, [r7, #4]
 80126fa:	2202      	movs	r2, #2
 80126fc:	725a      	strb	r2, [r3, #9]

#if defined(RNG_CR_CONDRST)
  /* Disable RNG */
  __HAL_RNG_DISABLE(hrng);
 80126fe:	687b      	ldr	r3, [r7, #4]
 8012700:	681b      	ldr	r3, [r3, #0]
 8012702:	681a      	ldr	r2, [r3, #0]
 8012704:	687b      	ldr	r3, [r7, #4]
 8012706:	681b      	ldr	r3, [r3, #0]
 8012708:	f022 0204 	bic.w	r2, r2, #4
 801270c:	601a      	str	r2, [r3, #0]

  /* Clock Error Detection Configuration when CONDRT bit is set to 1 */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED | RNG_CR_CONDRST, hrng->Init.ClockErrorDetection | RNG_CR_CONDRST);
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	681b      	ldr	r3, [r3, #0]
 8012712:	681a      	ldr	r2, [r3, #0]
 8012714:	4b3e      	ldr	r3, [pc, #248]	; (8012810 <HAL_RNG_Init+0x140>)
 8012716:	4013      	ands	r3, r2
 8012718:	687a      	ldr	r2, [r7, #4]
 801271a:	6852      	ldr	r2, [r2, #4]
 801271c:	431a      	orrs	r2, r3
 801271e:	687b      	ldr	r3, [r7, #4]
 8012720:	681b      	ldr	r3, [r3, #0]
 8012722:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8012726:	601a      	str	r2, [r3, #0]

#if defined(RNG_VER_3_2) || defined(RNG_VER_3_1) || defined(RNG_VER_3_0)
  /*!< magic number must be written immediately before to RNG_HTCRG */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG_1);
 8012728:	687b      	ldr	r3, [r7, #4]
 801272a:	681b      	ldr	r3, [r3, #0]
 801272c:	4a39      	ldr	r2, [pc, #228]	; (8012814 <HAL_RNG_Init+0x144>)
 801272e:	611a      	str	r2, [r3, #16]
  /* for best latency and to be compliant with NIST */
  WRITE_REG(hrng->Instance->HTCR, RNG_HTCFG);
 8012730:	687b      	ldr	r3, [r7, #4]
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	f247 2274 	movw	r2, #29300	; 0x7274
 8012738:	611a      	str	r2, [r3, #16]
#endif /* RNG_VER_3_2 || RNG_VER_3_1 || RNG_VER_3_0 */

  /* Writing bit CONDRST=0 */
  CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	681a      	ldr	r2, [r3, #0]
 8012740:	687b      	ldr	r3, [r7, #4]
 8012742:	681b      	ldr	r3, [r3, #0]
 8012744:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8012748:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 801274a:	f7fc fb2f 	bl	800edac <HAL_GetTick>
 801274e:	60f8      	str	r0, [r7, #12]

  /* Wait for conditioning reset process to be completed */
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012750:	e016      	b.n	8012780 <HAL_RNG_Init+0xb0>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8012752:	f7fc fb2b 	bl	800edac <HAL_GetTick>
 8012756:	4602      	mov	r2, r0
 8012758:	68fb      	ldr	r3, [r7, #12]
 801275a:	1ad3      	subs	r3, r2, r3
 801275c:	2b02      	cmp	r3, #2
 801275e:	d90f      	bls.n	8012780 <HAL_RNG_Init+0xb0>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	681b      	ldr	r3, [r3, #0]
 8012764:	681b      	ldr	r3, [r3, #0]
 8012766:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801276a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801276e:	d107      	bne.n	8012780 <HAL_RNG_Init+0xb0>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8012770:	687b      	ldr	r3, [r7, #4]
 8012772:	2201      	movs	r2, #1
 8012774:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 8012776:	687b      	ldr	r3, [r7, #4]
 8012778:	2202      	movs	r2, #2
 801277a:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 801277c:	2301      	movs	r3, #1
 801277e:	e043      	b.n	8012808 <HAL_RNG_Init+0x138>
  while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST))
 8012780:	687b      	ldr	r3, [r7, #4]
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	681b      	ldr	r3, [r3, #0]
 8012786:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 801278a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 801278e:	d0e0      	beq.n	8012752 <HAL_RNG_Init+0x82>
  /* Clock Error Detection Configuration */
  MODIFY_REG(hrng->Instance->CR, RNG_CR_CED, hrng->Init.ClockErrorDetection);
#endif /* RNG_CR_CONDRST */

  /* Enable the RNG Peripheral */
  __HAL_RNG_ENABLE(hrng);
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	681a      	ldr	r2, [r3, #0]
 8012796:	687b      	ldr	r3, [r7, #4]
 8012798:	681b      	ldr	r3, [r3, #0]
 801279a:	f042 0204 	orr.w	r2, r2, #4
 801279e:	601a      	str	r2, [r3, #0]

  /* verify that no seed error */
  if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80127a0:	687b      	ldr	r3, [r7, #4]
 80127a2:	681b      	ldr	r3, [r3, #0]
 80127a4:	685b      	ldr	r3, [r3, #4]
 80127a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80127aa:	2b40      	cmp	r3, #64	; 0x40
 80127ac:	d104      	bne.n	80127b8 <HAL_RNG_Init+0xe8>
  {
    hrng->State = HAL_RNG_STATE_ERROR;
 80127ae:	687b      	ldr	r3, [r7, #4]
 80127b0:	2204      	movs	r2, #4
 80127b2:	725a      	strb	r2, [r3, #9]
    return HAL_ERROR;
 80127b4:	2301      	movs	r3, #1
 80127b6:	e027      	b.n	8012808 <HAL_RNG_Init+0x138>
  }
  /* Get tick */
  tickstart = HAL_GetTick();
 80127b8:	f7fc faf8 	bl	800edac <HAL_GetTick>
 80127bc:	60f8      	str	r0, [r7, #12]
  /* Check if data register contains valid random data */
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80127be:	e015      	b.n	80127ec <HAL_RNG_Init+0x11c>
  {
    if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 80127c0:	f7fc faf4 	bl	800edac <HAL_GetTick>
 80127c4:	4602      	mov	r2, r0
 80127c6:	68fb      	ldr	r3, [r7, #12]
 80127c8:	1ad3      	subs	r3, r2, r3
 80127ca:	2b02      	cmp	r3, #2
 80127cc:	d90e      	bls.n	80127ec <HAL_RNG_Init+0x11c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	681b      	ldr	r3, [r3, #0]
 80127d2:	685b      	ldr	r3, [r3, #4]
 80127d4:	f003 0304 	and.w	r3, r3, #4
 80127d8:	2b04      	cmp	r3, #4
 80127da:	d107      	bne.n	80127ec <HAL_RNG_Init+0x11c>
      {
        hrng->State = HAL_RNG_STATE_ERROR;
 80127dc:	687b      	ldr	r3, [r7, #4]
 80127de:	2204      	movs	r2, #4
 80127e0:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 80127e2:	687b      	ldr	r3, [r7, #4]
 80127e4:	2202      	movs	r2, #2
 80127e6:	60da      	str	r2, [r3, #12]
        return HAL_ERROR;
 80127e8:	2301      	movs	r3, #1
 80127ea:	e00d      	b.n	8012808 <HAL_RNG_Init+0x138>
  while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) != RESET)
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	681b      	ldr	r3, [r3, #0]
 80127f0:	685b      	ldr	r3, [r3, #4]
 80127f2:	f003 0304 	and.w	r3, r3, #4
 80127f6:	2b04      	cmp	r3, #4
 80127f8:	d0e2      	beq.n	80127c0 <HAL_RNG_Init+0xf0>
      }
    }
  }

  /* Initialize the RNG state */
  hrng->State = HAL_RNG_STATE_READY;
 80127fa:	687b      	ldr	r3, [r7, #4]
 80127fc:	2201      	movs	r2, #1
 80127fe:	725a      	strb	r2, [r3, #9]

  /* Initialise the error code */
  hrng->ErrorCode = HAL_RNG_ERROR_NONE;
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	2200      	movs	r2, #0
 8012804:	60da      	str	r2, [r3, #12]

  /* Return function status */
  return HAL_OK;
 8012806:	2300      	movs	r3, #0
}
 8012808:	4618      	mov	r0, r3
 801280a:	3710      	adds	r7, #16
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	bfffffdf 	.word	0xbfffffdf
 8012814:	17590abc 	.word	0x17590abc

08012818 <HAL_RNG_GenerateRandomNumber>:
  * @param  random32bit pointer to generated random number variable if successful.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_RNG_GenerateRandomNumber(RNG_HandleTypeDef *hrng, uint32_t *random32bit)
{
 8012818:	b580      	push	{r7, lr}
 801281a:	b084      	sub	sp, #16
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8012822:	2300      	movs	r3, #0
 8012824:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hrng);
 8012826:	687b      	ldr	r3, [r7, #4]
 8012828:	7a1b      	ldrb	r3, [r3, #8]
 801282a:	2b01      	cmp	r3, #1
 801282c:	d101      	bne.n	8012832 <HAL_RNG_GenerateRandomNumber+0x1a>
 801282e:	2302      	movs	r3, #2
 8012830:	e06d      	b.n	801290e <HAL_RNG_GenerateRandomNumber+0xf6>
 8012832:	687b      	ldr	r3, [r7, #4]
 8012834:	2201      	movs	r2, #1
 8012836:	721a      	strb	r2, [r3, #8]

  /* Check RNG peripheral state */
  if (hrng->State == HAL_RNG_STATE_READY)
 8012838:	687b      	ldr	r3, [r7, #4]
 801283a:	7a5b      	ldrb	r3, [r3, #9]
 801283c:	b2db      	uxtb	r3, r3
 801283e:	2b01      	cmp	r3, #1
 8012840:	d15c      	bne.n	80128fc <HAL_RNG_GenerateRandomNumber+0xe4>
  {
    /* Change RNG peripheral state */
    hrng->State = HAL_RNG_STATE_BUSY;
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	2202      	movs	r2, #2
 8012846:	725a      	strb	r2, [r3, #9]
#if defined(RNG_CR_CONDRST)
    /* Check if there is a seed error */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	685b      	ldr	r3, [r3, #4]
 801284e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012852:	2b40      	cmp	r3, #64	; 0x40
 8012854:	d10c      	bne.n	8012870 <HAL_RNG_GenerateRandomNumber+0x58>
    {
      /* Update the error code */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 8012856:	687b      	ldr	r3, [r7, #4]
 8012858:	2208      	movs	r2, #8
 801285a:	60da      	str	r2, [r3, #12]
      /* Reset from seed error */
      status = RNG_RecoverSeedError(hrng);
 801285c:	6878      	ldr	r0, [r7, #4]
 801285e:	f000 f864 	bl	801292a <RNG_RecoverSeedError>
 8012862:	4603      	mov	r3, r0
 8012864:	73fb      	strb	r3, [r7, #15]
      if (status == HAL_ERROR)
 8012866:	7bfb      	ldrb	r3, [r7, #15]
 8012868:	2b01      	cmp	r3, #1
 801286a:	d101      	bne.n	8012870 <HAL_RNG_GenerateRandomNumber+0x58>
      {
        return status;
 801286c:	7bfb      	ldrb	r3, [r7, #15]
 801286e:	e04e      	b.n	801290e <HAL_RNG_GenerateRandomNumber+0xf6>
      }
    }
#endif /* RNG_CR_CONDRST */

    /* Get tick */
    tickstart = HAL_GetTick();
 8012870:	f7fc fa9c 	bl	800edac <HAL_GetTick>
 8012874:	60b8      	str	r0, [r7, #8]

    /* Check if data register contains valid random data */
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8012876:	e018      	b.n	80128aa <HAL_RNG_GenerateRandomNumber+0x92>
    {
      if ((HAL_GetTick() - tickstart) > RNG_TIMEOUT_VALUE)
 8012878:	f7fc fa98 	bl	800edac <HAL_GetTick>
 801287c:	4602      	mov	r2, r0
 801287e:	68bb      	ldr	r3, [r7, #8]
 8012880:	1ad3      	subs	r3, r2, r3
 8012882:	2b02      	cmp	r3, #2
 8012884:	d911      	bls.n	80128aa <HAL_RNG_GenerateRandomNumber+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 8012886:	687b      	ldr	r3, [r7, #4]
 8012888:	681b      	ldr	r3, [r3, #0]
 801288a:	685b      	ldr	r3, [r3, #4]
 801288c:	f003 0301 	and.w	r3, r3, #1
 8012890:	2b01      	cmp	r3, #1
 8012892:	d00a      	beq.n	80128aa <HAL_RNG_GenerateRandomNumber+0x92>
        {
          hrng->State = HAL_RNG_STATE_READY;
 8012894:	687b      	ldr	r3, [r7, #4]
 8012896:	2201      	movs	r2, #1
 8012898:	725a      	strb	r2, [r3, #9]
          hrng->ErrorCode = HAL_RNG_ERROR_TIMEOUT;
 801289a:	687b      	ldr	r3, [r7, #4]
 801289c:	2202      	movs	r2, #2
 801289e:	60da      	str	r2, [r3, #12]
          /* Process Unlocked */
          __HAL_UNLOCK(hrng);
 80128a0:	687b      	ldr	r3, [r7, #4]
 80128a2:	2200      	movs	r2, #0
 80128a4:	721a      	strb	r2, [r3, #8]
          return HAL_ERROR;
 80128a6:	2301      	movs	r3, #1
 80128a8:	e031      	b.n	801290e <HAL_RNG_GenerateRandomNumber+0xf6>
    while (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_DRDY) == RESET)
 80128aa:	687b      	ldr	r3, [r7, #4]
 80128ac:	681b      	ldr	r3, [r3, #0]
 80128ae:	685b      	ldr	r3, [r3, #4]
 80128b0:	f003 0301 	and.w	r3, r3, #1
 80128b4:	2b01      	cmp	r3, #1
 80128b6:	d1df      	bne.n	8012878 <HAL_RNG_GenerateRandomNumber+0x60>
        }
      }
    }

    /* Get a 32bit Random number */
    hrng->RandomNumber = hrng->Instance->DR;
 80128b8:	687b      	ldr	r3, [r7, #4]
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	689a      	ldr	r2, [r3, #8]
 80128be:	687b      	ldr	r3, [r7, #4]
 80128c0:	611a      	str	r2, [r3, #16]
#if defined(RNG_CR_CONDRST)
    /* In case of seed error, the value available in the RNG_DR register must not
       be used as it may not have enough entropy */
    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	685b      	ldr	r3, [r3, #4]
 80128c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80128cc:	2b40      	cmp	r3, #64	; 0x40
 80128ce:	d10d      	bne.n	80128ec <HAL_RNG_GenerateRandomNumber+0xd4>
    {
      /* Update the error code and status */
      hrng->ErrorCode = HAL_RNG_ERROR_SEED;
 80128d0:	687b      	ldr	r3, [r7, #4]
 80128d2:	2208      	movs	r2, #8
 80128d4:	60da      	str	r2, [r3, #12]
      status = HAL_ERROR;
 80128d6:	2301      	movs	r3, #1
 80128d8:	73fb      	strb	r3, [r7, #15]
      /* Clear bit DRDY */
      CLEAR_BIT(hrng->Instance->SR, RNG_FLAG_DRDY);
 80128da:	687b      	ldr	r3, [r7, #4]
 80128dc:	681b      	ldr	r3, [r3, #0]
 80128de:	685a      	ldr	r2, [r3, #4]
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	f022 0201 	bic.w	r2, r2, #1
 80128e8:	605a      	str	r2, [r3, #4]
 80128ea:	e003      	b.n	80128f4 <HAL_RNG_GenerateRandomNumber+0xdc>
    }
    else /* No seed error */
    {
      *random32bit = hrng->RandomNumber;
 80128ec:	687b      	ldr	r3, [r7, #4]
 80128ee:	691a      	ldr	r2, [r3, #16]
 80128f0:	683b      	ldr	r3, [r7, #0]
 80128f2:	601a      	str	r2, [r3, #0]
    }
#else
    *random32bit = hrng->RandomNumber;

#endif /* RNG_CR_CONDRST */
    hrng->State = HAL_RNG_STATE_READY;
 80128f4:	687b      	ldr	r3, [r7, #4]
 80128f6:	2201      	movs	r2, #1
 80128f8:	725a      	strb	r2, [r3, #9]
 80128fa:	e004      	b.n	8012906 <HAL_RNG_GenerateRandomNumber+0xee>
  }
  else
  {
    hrng->ErrorCode = HAL_RNG_ERROR_BUSY;
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	2204      	movs	r2, #4
 8012900:	60da      	str	r2, [r3, #12]
    status = HAL_ERROR;
 8012902:	2301      	movs	r3, #1
 8012904:	73fb      	strb	r3, [r7, #15]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrng);
 8012906:	687b      	ldr	r3, [r7, #4]
 8012908:	2200      	movs	r2, #0
 801290a:	721a      	strb	r2, [r3, #8]

  return status;
 801290c:	7bfb      	ldrb	r3, [r7, #15]
}
 801290e:	4618      	mov	r0, r3
 8012910:	3710      	adds	r7, #16
 8012912:	46bd      	mov	sp, r7
 8012914:	bd80      	pop	{r7, pc}

08012916 <HAL_RNG_ErrorCallback>:
  * @param  hrng pointer to a RNG_HandleTypeDef structure that contains
  *                the configuration information for RNG.
  * @retval None
  */
__weak void HAL_RNG_ErrorCallback(RNG_HandleTypeDef *hrng)
{
 8012916:	b480      	push	{r7}
 8012918:	b083      	sub	sp, #12
 801291a:	af00      	add	r7, sp, #0
 801291c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hrng);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_RNG_ErrorCallback must be implemented in the user file.
   */
}
 801291e:	bf00      	nop
 8012920:	370c      	adds	r7, #12
 8012922:	46bd      	mov	sp, r7
 8012924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012928:	4770      	bx	lr

0801292a <RNG_RecoverSeedError>:
  * @brief  RNG sequence to recover from a seed error
  * @param  hrng pointer to a RNG_HandleTypeDef structure.
  * @retval HAL status
  */
HAL_StatusTypeDef RNG_RecoverSeedError(RNG_HandleTypeDef *hrng)
{
 801292a:	b580      	push	{r7, lr}
 801292c:	b084      	sub	sp, #16
 801292e:	af00      	add	r7, sp, #0
 8012930:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8012932:	2300      	movs	r3, #0
 8012934:	60fb      	str	r3, [r7, #12]

  /*Check if seed error current status (SECS)is set */
  if (__HAL_RNG_GET_FLAG(hrng, RNG_FLAG_SECS) == RESET)
 8012936:	687b      	ldr	r3, [r7, #4]
 8012938:	681b      	ldr	r3, [r3, #0]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	f003 0304 	and.w	r3, r3, #4
 8012940:	2b04      	cmp	r3, #4
 8012942:	d008      	beq.n	8012956 <RNG_RecoverSeedError+0x2c>
  {
    /* RNG performed the reset automatically (auto-reset) */
    /* Clear bit SEIS */
    CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	685a      	ldr	r2, [r3, #4]
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	681b      	ldr	r3, [r3, #0]
 801294e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8012952:	605a      	str	r2, [r3, #4]
 8012954:	e05f      	b.n	8012a16 <RNG_RecoverSeedError+0xec>
  }
  else  /* Sequence to fully recover from a seed error*/
  {
    /* Writing bit CONDRST=1*/
    SET_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8012956:	687b      	ldr	r3, [r7, #4]
 8012958:	681b      	ldr	r3, [r3, #0]
 801295a:	681a      	ldr	r2, [r3, #0]
 801295c:	687b      	ldr	r3, [r7, #4]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8012964:	601a      	str	r2, [r3, #0]
    /* Writing bit CONDRST=0*/
    CLEAR_BIT(hrng->Instance->CR, RNG_CR_CONDRST);
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	681a      	ldr	r2, [r3, #0]
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 8012974:	601a      	str	r2, [r3, #0]

    /* Wait for conditioning reset process to be completed */
    count = RNG_TIMEOUT_VALUE;
 8012976:	2302      	movs	r3, #2
 8012978:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 801297a:	68fb      	ldr	r3, [r7, #12]
 801297c:	3b01      	subs	r3, #1
 801297e:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 8012980:	68fb      	ldr	r3, [r7, #12]
 8012982:	2b00      	cmp	r3, #0
 8012984:	d110      	bne.n	80129a8 <RNG_RecoverSeedError+0x7e>
      {
        hrng->State = HAL_RNG_STATE_READY;
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	2201      	movs	r2, #1
 801298a:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	68db      	ldr	r3, [r3, #12]
 8012990:	f043 0202 	orr.w	r2, r3, #2
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 8012998:	687b      	ldr	r3, [r7, #4]
 801299a:	2200      	movs	r2, #0
 801299c:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 801299e:	6878      	ldr	r0, [r7, #4]
 80129a0:	f7ff ffb9 	bl	8012916 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 80129a4:	2301      	movs	r3, #1
 80129a6:	e03d      	b.n	8012a24 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->CR, RNG_CR_CONDRST));
 80129a8:	687b      	ldr	r3, [r7, #4]
 80129aa:	681b      	ldr	r3, [r3, #0]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80129b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80129b6:	d0e0      	beq.n	801297a <RNG_RecoverSeedError+0x50>

    if (__HAL_RNG_GET_IT(hrng, RNG_IT_SEI) != RESET)
 80129b8:	687b      	ldr	r3, [r7, #4]
 80129ba:	681b      	ldr	r3, [r3, #0]
 80129bc:	685b      	ldr	r3, [r3, #4]
 80129be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80129c2:	2b40      	cmp	r3, #64	; 0x40
 80129c4:	d107      	bne.n	80129d6 <RNG_RecoverSeedError+0xac>
    {
      /* Clear bit SEIS */
      CLEAR_BIT(hrng->Instance->SR, RNG_IT_SEI);
 80129c6:	687b      	ldr	r3, [r7, #4]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	685a      	ldr	r2, [r3, #4]
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	681b      	ldr	r3, [r3, #0]
 80129d0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80129d4:	605a      	str	r2, [r3, #4]
    }

    /* Wait for SECS to be cleared */
    count = RNG_TIMEOUT_VALUE;
 80129d6:	2302      	movs	r3, #2
 80129d8:	60fb      	str	r3, [r7, #12]
    do
    {
      count-- ;
 80129da:	68fb      	ldr	r3, [r7, #12]
 80129dc:	3b01      	subs	r3, #1
 80129de:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80129e0:	68fb      	ldr	r3, [r7, #12]
 80129e2:	2b00      	cmp	r3, #0
 80129e4:	d110      	bne.n	8012a08 <RNG_RecoverSeedError+0xde>
      {
        hrng->State = HAL_RNG_STATE_READY;
 80129e6:	687b      	ldr	r3, [r7, #4]
 80129e8:	2201      	movs	r2, #1
 80129ea:	725a      	strb	r2, [r3, #9]
        hrng->ErrorCode |= HAL_RNG_ERROR_TIMEOUT;
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	68db      	ldr	r3, [r3, #12]
 80129f0:	f043 0202 	orr.w	r2, r3, #2
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	60da      	str	r2, [r3, #12]
        /* Process Unlocked */
        __HAL_UNLOCK(hrng);
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	2200      	movs	r2, #0
 80129fc:	721a      	strb	r2, [r3, #8]
#if (USE_HAL_RNG_REGISTER_CALLBACKS == 1)
        /* Call registered Error callback */
        hrng->ErrorCallback(hrng);
#else
        /* Call legacy weak Error callback */
        HAL_RNG_ErrorCallback(hrng);
 80129fe:	6878      	ldr	r0, [r7, #4]
 8012a00:	f7ff ff89 	bl	8012916 <HAL_RNG_ErrorCallback>
#endif /* USE_HAL_RNG_REGISTER_CALLBACKS */
        return HAL_ERROR;
 8012a04:	2301      	movs	r3, #1
 8012a06:	e00d      	b.n	8012a24 <RNG_RecoverSeedError+0xfa>
      }
    } while (HAL_IS_BIT_SET(hrng->Instance->SR, RNG_FLAG_SECS));
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	685b      	ldr	r3, [r3, #4]
 8012a0e:	f003 0304 	and.w	r3, r3, #4
 8012a12:	2b04      	cmp	r3, #4
 8012a14:	d0e1      	beq.n	80129da <RNG_RecoverSeedError+0xb0>
  }
  /* Update the error code */
  hrng->ErrorCode &= ~ HAL_RNG_ERROR_SEED;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	68db      	ldr	r3, [r3, #12]
 8012a1a:	f023 0208 	bic.w	r2, r3, #8
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	60da      	str	r2, [r3, #12]
  return HAL_OK;
 8012a22:	2300      	movs	r3, #0
}
 8012a24:	4618      	mov	r0, r3
 8012a26:	3710      	adds	r7, #16
 8012a28:	46bd      	mov	sp, r7
 8012a2a:	bd80      	pop	{r7, pc}

08012a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8012a2c:	b580      	push	{r7, lr}
 8012a2e:	b082      	sub	sp, #8
 8012a30:	af00      	add	r7, sp, #0
 8012a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012a34:	687b      	ldr	r3, [r7, #4]
 8012a36:	2b00      	cmp	r3, #0
 8012a38:	d101      	bne.n	8012a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8012a3a:	2301      	movs	r3, #1
 8012a3c:	e042      	b.n	8012ac4 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8012a3e:	687b      	ldr	r3, [r7, #4]
 8012a40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012a44:	2b00      	cmp	r3, #0
 8012a46:	d106      	bne.n	8012a56 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012a48:	687b      	ldr	r3, [r7, #4]
 8012a4a:	2200      	movs	r2, #0
 8012a4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012a50:	6878      	ldr	r0, [r7, #4]
 8012a52:	f7fb ff2d 	bl	800e8b0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012a56:	687b      	ldr	r3, [r7, #4]
 8012a58:	2224      	movs	r2, #36	; 0x24
 8012a5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	681a      	ldr	r2, [r3, #0]
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	681b      	ldr	r3, [r3, #0]
 8012a68:	f022 0201 	bic.w	r2, r2, #1
 8012a6c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8012a6e:	6878      	ldr	r0, [r7, #4]
 8012a70:	f000 f8ba 	bl	8012be8 <UART_SetConfig>
 8012a74:	4603      	mov	r3, r0
 8012a76:	2b01      	cmp	r3, #1
 8012a78:	d101      	bne.n	8012a7e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8012a7a:	2301      	movs	r3, #1
 8012a7c:	e022      	b.n	8012ac4 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8012a82:	2b00      	cmp	r3, #0
 8012a84:	d002      	beq.n	8012a8c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8012a86:	6878      	ldr	r0, [r7, #4]
 8012a88:	f000 ff1a 	bl	80138c0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012a8c:	687b      	ldr	r3, [r7, #4]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	685a      	ldr	r2, [r3, #4]
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012a9a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	689a      	ldr	r2, [r3, #8]
 8012aa2:	687b      	ldr	r3, [r7, #4]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012aaa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8012aac:	687b      	ldr	r3, [r7, #4]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	681a      	ldr	r2, [r3, #0]
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f042 0201 	orr.w	r2, r2, #1
 8012aba:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8012abc:	6878      	ldr	r0, [r7, #4]
 8012abe:	f000 ffa1 	bl	8013a04 <UART_CheckIdleState>
 8012ac2:	4603      	mov	r3, r0
}
 8012ac4:	4618      	mov	r0, r3
 8012ac6:	3708      	adds	r7, #8
 8012ac8:	46bd      	mov	sp, r7
 8012aca:	bd80      	pop	{r7, pc}

08012acc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012acc:	b580      	push	{r7, lr}
 8012ace:	b08a      	sub	sp, #40	; 0x28
 8012ad0:	af02      	add	r7, sp, #8
 8012ad2:	60f8      	str	r0, [r7, #12]
 8012ad4:	60b9      	str	r1, [r7, #8]
 8012ad6:	603b      	str	r3, [r7, #0]
 8012ad8:	4613      	mov	r3, r2
 8012ada:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8012ae2:	2b20      	cmp	r3, #32
 8012ae4:	d17b      	bne.n	8012bde <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8012ae6:	68bb      	ldr	r3, [r7, #8]
 8012ae8:	2b00      	cmp	r3, #0
 8012aea:	d002      	beq.n	8012af2 <HAL_UART_Transmit+0x26>
 8012aec:	88fb      	ldrh	r3, [r7, #6]
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d101      	bne.n	8012af6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8012af2:	2301      	movs	r3, #1
 8012af4:	e074      	b.n	8012be0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	2200      	movs	r2, #0
 8012afa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012afe:	68fb      	ldr	r3, [r7, #12]
 8012b00:	2221      	movs	r2, #33	; 0x21
 8012b02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012b06:	f7fc f951 	bl	800edac <HAL_GetTick>
 8012b0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8012b0c:	68fb      	ldr	r3, [r7, #12]
 8012b0e:	88fa      	ldrh	r2, [r7, #6]
 8012b10:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8012b14:	68fb      	ldr	r3, [r7, #12]
 8012b16:	88fa      	ldrh	r2, [r7, #6]
 8012b18:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b1c:	68fb      	ldr	r3, [r7, #12]
 8012b1e:	689b      	ldr	r3, [r3, #8]
 8012b20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b24:	d108      	bne.n	8012b38 <HAL_UART_Transmit+0x6c>
 8012b26:	68fb      	ldr	r3, [r7, #12]
 8012b28:	691b      	ldr	r3, [r3, #16]
 8012b2a:	2b00      	cmp	r3, #0
 8012b2c:	d104      	bne.n	8012b38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8012b2e:	2300      	movs	r3, #0
 8012b30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012b32:	68bb      	ldr	r3, [r7, #8]
 8012b34:	61bb      	str	r3, [r7, #24]
 8012b36:	e003      	b.n	8012b40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8012b38:	68bb      	ldr	r3, [r7, #8]
 8012b3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012b3c:	2300      	movs	r3, #0
 8012b3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8012b40:	e030      	b.n	8012ba4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012b42:	683b      	ldr	r3, [r7, #0]
 8012b44:	9300      	str	r3, [sp, #0]
 8012b46:	697b      	ldr	r3, [r7, #20]
 8012b48:	2200      	movs	r2, #0
 8012b4a:	2180      	movs	r1, #128	; 0x80
 8012b4c:	68f8      	ldr	r0, [r7, #12]
 8012b4e:	f001 f803 	bl	8013b58 <UART_WaitOnFlagUntilTimeout>
 8012b52:	4603      	mov	r3, r0
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d005      	beq.n	8012b64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8012b58:	68fb      	ldr	r3, [r7, #12]
 8012b5a:	2220      	movs	r2, #32
 8012b5c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8012b60:	2303      	movs	r3, #3
 8012b62:	e03d      	b.n	8012be0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8012b64:	69fb      	ldr	r3, [r7, #28]
 8012b66:	2b00      	cmp	r3, #0
 8012b68:	d10b      	bne.n	8012b82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012b6a:	69bb      	ldr	r3, [r7, #24]
 8012b6c:	881b      	ldrh	r3, [r3, #0]
 8012b6e:	461a      	mov	r2, r3
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	681b      	ldr	r3, [r3, #0]
 8012b74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012b78:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8012b7a:	69bb      	ldr	r3, [r7, #24]
 8012b7c:	3302      	adds	r3, #2
 8012b7e:	61bb      	str	r3, [r7, #24]
 8012b80:	e007      	b.n	8012b92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8012b82:	69fb      	ldr	r3, [r7, #28]
 8012b84:	781a      	ldrb	r2, [r3, #0]
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8012b8c:	69fb      	ldr	r3, [r7, #28]
 8012b8e:	3301      	adds	r3, #1
 8012b90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012b92:	68fb      	ldr	r3, [r7, #12]
 8012b94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012b98:	b29b      	uxth	r3, r3
 8012b9a:	3b01      	subs	r3, #1
 8012b9c:	b29a      	uxth	r2, r3
 8012b9e:	68fb      	ldr	r3, [r7, #12]
 8012ba0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8012ba4:	68fb      	ldr	r3, [r7, #12]
 8012ba6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8012baa:	b29b      	uxth	r3, r3
 8012bac:	2b00      	cmp	r3, #0
 8012bae:	d1c8      	bne.n	8012b42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	9300      	str	r3, [sp, #0]
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	2140      	movs	r1, #64	; 0x40
 8012bba:	68f8      	ldr	r0, [r7, #12]
 8012bbc:	f000 ffcc 	bl	8013b58 <UART_WaitOnFlagUntilTimeout>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d005      	beq.n	8012bd2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8012bc6:	68fb      	ldr	r3, [r7, #12]
 8012bc8:	2220      	movs	r2, #32
 8012bca:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8012bce:	2303      	movs	r3, #3
 8012bd0:	e006      	b.n	8012be0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2220      	movs	r2, #32
 8012bd6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8012bda:	2300      	movs	r3, #0
 8012bdc:	e000      	b.n	8012be0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8012bde:	2302      	movs	r3, #2
  }
}
 8012be0:	4618      	mov	r0, r3
 8012be2:	3720      	adds	r7, #32
 8012be4:	46bd      	mov	sp, r7
 8012be6:	bd80      	pop	{r7, pc}

08012be8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012be8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012bec:	b092      	sub	sp, #72	; 0x48
 8012bee:	af00      	add	r7, sp, #0
 8012bf0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8012bf2:	2300      	movs	r3, #0
 8012bf4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8012bf8:	697b      	ldr	r3, [r7, #20]
 8012bfa:	689a      	ldr	r2, [r3, #8]
 8012bfc:	697b      	ldr	r3, [r7, #20]
 8012bfe:	691b      	ldr	r3, [r3, #16]
 8012c00:	431a      	orrs	r2, r3
 8012c02:	697b      	ldr	r3, [r7, #20]
 8012c04:	695b      	ldr	r3, [r3, #20]
 8012c06:	431a      	orrs	r2, r3
 8012c08:	697b      	ldr	r3, [r7, #20]
 8012c0a:	69db      	ldr	r3, [r3, #28]
 8012c0c:	4313      	orrs	r3, r2
 8012c0e:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	681b      	ldr	r3, [r3, #0]
 8012c14:	681a      	ldr	r2, [r3, #0]
 8012c16:	4bbe      	ldr	r3, [pc, #760]	; (8012f10 <UART_SetConfig+0x328>)
 8012c18:	4013      	ands	r3, r2
 8012c1a:	697a      	ldr	r2, [r7, #20]
 8012c1c:	6812      	ldr	r2, [r2, #0]
 8012c1e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012c20:	430b      	orrs	r3, r1
 8012c22:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012c24:	697b      	ldr	r3, [r7, #20]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	685b      	ldr	r3, [r3, #4]
 8012c2a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8012c2e:	697b      	ldr	r3, [r7, #20]
 8012c30:	68da      	ldr	r2, [r3, #12]
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	681b      	ldr	r3, [r3, #0]
 8012c36:	430a      	orrs	r2, r1
 8012c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8012c3a:	697b      	ldr	r3, [r7, #20]
 8012c3c:	699b      	ldr	r3, [r3, #24]
 8012c3e:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8012c40:	697b      	ldr	r3, [r7, #20]
 8012c42:	681b      	ldr	r3, [r3, #0]
 8012c44:	4ab3      	ldr	r2, [pc, #716]	; (8012f14 <UART_SetConfig+0x32c>)
 8012c46:	4293      	cmp	r3, r2
 8012c48:	d004      	beq.n	8012c54 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8012c4a:	697b      	ldr	r3, [r7, #20]
 8012c4c:	6a1b      	ldr	r3, [r3, #32]
 8012c4e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012c50:	4313      	orrs	r3, r2
 8012c52:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	689a      	ldr	r2, [r3, #8]
 8012c5a:	4baf      	ldr	r3, [pc, #700]	; (8012f18 <UART_SetConfig+0x330>)
 8012c5c:	4013      	ands	r3, r2
 8012c5e:	697a      	ldr	r2, [r7, #20]
 8012c60:	6812      	ldr	r2, [r2, #0]
 8012c62:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012c64:	430b      	orrs	r3, r1
 8012c66:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	681b      	ldr	r3, [r3, #0]
 8012c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8012c6e:	f023 010f 	bic.w	r1, r3, #15
 8012c72:	697b      	ldr	r3, [r7, #20]
 8012c74:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012c76:	697b      	ldr	r3, [r7, #20]
 8012c78:	681b      	ldr	r3, [r3, #0]
 8012c7a:	430a      	orrs	r2, r1
 8012c7c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8012c7e:	697b      	ldr	r3, [r7, #20]
 8012c80:	681b      	ldr	r3, [r3, #0]
 8012c82:	4aa6      	ldr	r2, [pc, #664]	; (8012f1c <UART_SetConfig+0x334>)
 8012c84:	4293      	cmp	r3, r2
 8012c86:	d177      	bne.n	8012d78 <UART_SetConfig+0x190>
 8012c88:	4ba5      	ldr	r3, [pc, #660]	; (8012f20 <UART_SetConfig+0x338>)
 8012c8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012c8c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012c90:	2b28      	cmp	r3, #40	; 0x28
 8012c92:	d86d      	bhi.n	8012d70 <UART_SetConfig+0x188>
 8012c94:	a201      	add	r2, pc, #4	; (adr r2, 8012c9c <UART_SetConfig+0xb4>)
 8012c96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012c9a:	bf00      	nop
 8012c9c:	08012d41 	.word	0x08012d41
 8012ca0:	08012d71 	.word	0x08012d71
 8012ca4:	08012d71 	.word	0x08012d71
 8012ca8:	08012d71 	.word	0x08012d71
 8012cac:	08012d71 	.word	0x08012d71
 8012cb0:	08012d71 	.word	0x08012d71
 8012cb4:	08012d71 	.word	0x08012d71
 8012cb8:	08012d71 	.word	0x08012d71
 8012cbc:	08012d49 	.word	0x08012d49
 8012cc0:	08012d71 	.word	0x08012d71
 8012cc4:	08012d71 	.word	0x08012d71
 8012cc8:	08012d71 	.word	0x08012d71
 8012ccc:	08012d71 	.word	0x08012d71
 8012cd0:	08012d71 	.word	0x08012d71
 8012cd4:	08012d71 	.word	0x08012d71
 8012cd8:	08012d71 	.word	0x08012d71
 8012cdc:	08012d51 	.word	0x08012d51
 8012ce0:	08012d71 	.word	0x08012d71
 8012ce4:	08012d71 	.word	0x08012d71
 8012ce8:	08012d71 	.word	0x08012d71
 8012cec:	08012d71 	.word	0x08012d71
 8012cf0:	08012d71 	.word	0x08012d71
 8012cf4:	08012d71 	.word	0x08012d71
 8012cf8:	08012d71 	.word	0x08012d71
 8012cfc:	08012d59 	.word	0x08012d59
 8012d00:	08012d71 	.word	0x08012d71
 8012d04:	08012d71 	.word	0x08012d71
 8012d08:	08012d71 	.word	0x08012d71
 8012d0c:	08012d71 	.word	0x08012d71
 8012d10:	08012d71 	.word	0x08012d71
 8012d14:	08012d71 	.word	0x08012d71
 8012d18:	08012d71 	.word	0x08012d71
 8012d1c:	08012d61 	.word	0x08012d61
 8012d20:	08012d71 	.word	0x08012d71
 8012d24:	08012d71 	.word	0x08012d71
 8012d28:	08012d71 	.word	0x08012d71
 8012d2c:	08012d71 	.word	0x08012d71
 8012d30:	08012d71 	.word	0x08012d71
 8012d34:	08012d71 	.word	0x08012d71
 8012d38:	08012d71 	.word	0x08012d71
 8012d3c:	08012d69 	.word	0x08012d69
 8012d40:	2301      	movs	r3, #1
 8012d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d46:	e326      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012d48:	2304      	movs	r3, #4
 8012d4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d4e:	e322      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012d50:	2308      	movs	r3, #8
 8012d52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d56:	e31e      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012d58:	2310      	movs	r3, #16
 8012d5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d5e:	e31a      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012d60:	2320      	movs	r3, #32
 8012d62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d66:	e316      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012d68:	2340      	movs	r3, #64	; 0x40
 8012d6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d6e:	e312      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012d70:	2380      	movs	r3, #128	; 0x80
 8012d72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012d76:	e30e      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	681b      	ldr	r3, [r3, #0]
 8012d7c:	4a69      	ldr	r2, [pc, #420]	; (8012f24 <UART_SetConfig+0x33c>)
 8012d7e:	4293      	cmp	r3, r2
 8012d80:	d130      	bne.n	8012de4 <UART_SetConfig+0x1fc>
 8012d82:	4b67      	ldr	r3, [pc, #412]	; (8012f20 <UART_SetConfig+0x338>)
 8012d84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012d86:	f003 0307 	and.w	r3, r3, #7
 8012d8a:	2b05      	cmp	r3, #5
 8012d8c:	d826      	bhi.n	8012ddc <UART_SetConfig+0x1f4>
 8012d8e:	a201      	add	r2, pc, #4	; (adr r2, 8012d94 <UART_SetConfig+0x1ac>)
 8012d90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012d94:	08012dad 	.word	0x08012dad
 8012d98:	08012db5 	.word	0x08012db5
 8012d9c:	08012dbd 	.word	0x08012dbd
 8012da0:	08012dc5 	.word	0x08012dc5
 8012da4:	08012dcd 	.word	0x08012dcd
 8012da8:	08012dd5 	.word	0x08012dd5
 8012dac:	2300      	movs	r3, #0
 8012dae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012db2:	e2f0      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012db4:	2304      	movs	r3, #4
 8012db6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dba:	e2ec      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012dbc:	2308      	movs	r3, #8
 8012dbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dc2:	e2e8      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012dc4:	2310      	movs	r3, #16
 8012dc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dca:	e2e4      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012dcc:	2320      	movs	r3, #32
 8012dce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dd2:	e2e0      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012dd4:	2340      	movs	r3, #64	; 0x40
 8012dd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012dda:	e2dc      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012ddc:	2380      	movs	r3, #128	; 0x80
 8012dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012de2:	e2d8      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012de4:	697b      	ldr	r3, [r7, #20]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	4a4f      	ldr	r2, [pc, #316]	; (8012f28 <UART_SetConfig+0x340>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d130      	bne.n	8012e50 <UART_SetConfig+0x268>
 8012dee:	4b4c      	ldr	r3, [pc, #304]	; (8012f20 <UART_SetConfig+0x338>)
 8012df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012df2:	f003 0307 	and.w	r3, r3, #7
 8012df6:	2b05      	cmp	r3, #5
 8012df8:	d826      	bhi.n	8012e48 <UART_SetConfig+0x260>
 8012dfa:	a201      	add	r2, pc, #4	; (adr r2, 8012e00 <UART_SetConfig+0x218>)
 8012dfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e00:	08012e19 	.word	0x08012e19
 8012e04:	08012e21 	.word	0x08012e21
 8012e08:	08012e29 	.word	0x08012e29
 8012e0c:	08012e31 	.word	0x08012e31
 8012e10:	08012e39 	.word	0x08012e39
 8012e14:	08012e41 	.word	0x08012e41
 8012e18:	2300      	movs	r3, #0
 8012e1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e1e:	e2ba      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e20:	2304      	movs	r3, #4
 8012e22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e26:	e2b6      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e28:	2308      	movs	r3, #8
 8012e2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e2e:	e2b2      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e30:	2310      	movs	r3, #16
 8012e32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e36:	e2ae      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e38:	2320      	movs	r3, #32
 8012e3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e3e:	e2aa      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e40:	2340      	movs	r3, #64	; 0x40
 8012e42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e46:	e2a6      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e48:	2380      	movs	r3, #128	; 0x80
 8012e4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e4e:	e2a2      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e50:	697b      	ldr	r3, [r7, #20]
 8012e52:	681b      	ldr	r3, [r3, #0]
 8012e54:	4a35      	ldr	r2, [pc, #212]	; (8012f2c <UART_SetConfig+0x344>)
 8012e56:	4293      	cmp	r3, r2
 8012e58:	d130      	bne.n	8012ebc <UART_SetConfig+0x2d4>
 8012e5a:	4b31      	ldr	r3, [pc, #196]	; (8012f20 <UART_SetConfig+0x338>)
 8012e5c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012e5e:	f003 0307 	and.w	r3, r3, #7
 8012e62:	2b05      	cmp	r3, #5
 8012e64:	d826      	bhi.n	8012eb4 <UART_SetConfig+0x2cc>
 8012e66:	a201      	add	r2, pc, #4	; (adr r2, 8012e6c <UART_SetConfig+0x284>)
 8012e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012e6c:	08012e85 	.word	0x08012e85
 8012e70:	08012e8d 	.word	0x08012e8d
 8012e74:	08012e95 	.word	0x08012e95
 8012e78:	08012e9d 	.word	0x08012e9d
 8012e7c:	08012ea5 	.word	0x08012ea5
 8012e80:	08012ead 	.word	0x08012ead
 8012e84:	2300      	movs	r3, #0
 8012e86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e8a:	e284      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e8c:	2304      	movs	r3, #4
 8012e8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e92:	e280      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e94:	2308      	movs	r3, #8
 8012e96:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012e9a:	e27c      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012e9c:	2310      	movs	r3, #16
 8012e9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ea2:	e278      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012ea4:	2320      	movs	r3, #32
 8012ea6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eaa:	e274      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012eac:	2340      	movs	r3, #64	; 0x40
 8012eae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eb2:	e270      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012eb4:	2380      	movs	r3, #128	; 0x80
 8012eb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012eba:	e26c      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012ebc:	697b      	ldr	r3, [r7, #20]
 8012ebe:	681b      	ldr	r3, [r3, #0]
 8012ec0:	4a1b      	ldr	r2, [pc, #108]	; (8012f30 <UART_SetConfig+0x348>)
 8012ec2:	4293      	cmp	r3, r2
 8012ec4:	d142      	bne.n	8012f4c <UART_SetConfig+0x364>
 8012ec6:	4b16      	ldr	r3, [pc, #88]	; (8012f20 <UART_SetConfig+0x338>)
 8012ec8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012eca:	f003 0307 	and.w	r3, r3, #7
 8012ece:	2b05      	cmp	r3, #5
 8012ed0:	d838      	bhi.n	8012f44 <UART_SetConfig+0x35c>
 8012ed2:	a201      	add	r2, pc, #4	; (adr r2, 8012ed8 <UART_SetConfig+0x2f0>)
 8012ed4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012ed8:	08012ef1 	.word	0x08012ef1
 8012edc:	08012ef9 	.word	0x08012ef9
 8012ee0:	08012f01 	.word	0x08012f01
 8012ee4:	08012f09 	.word	0x08012f09
 8012ee8:	08012f35 	.word	0x08012f35
 8012eec:	08012f3d 	.word	0x08012f3d
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012ef6:	e24e      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012ef8:	2304      	movs	r3, #4
 8012efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012efe:	e24a      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012f00:	2308      	movs	r3, #8
 8012f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f06:	e246      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012f08:	2310      	movs	r3, #16
 8012f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f0e:	e242      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012f10:	cfff69f3 	.word	0xcfff69f3
 8012f14:	58000c00 	.word	0x58000c00
 8012f18:	11fff4ff 	.word	0x11fff4ff
 8012f1c:	40011000 	.word	0x40011000
 8012f20:	58024400 	.word	0x58024400
 8012f24:	40004400 	.word	0x40004400
 8012f28:	40004800 	.word	0x40004800
 8012f2c:	40004c00 	.word	0x40004c00
 8012f30:	40005000 	.word	0x40005000
 8012f34:	2320      	movs	r3, #32
 8012f36:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f3a:	e22c      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012f3c:	2340      	movs	r3, #64	; 0x40
 8012f3e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f42:	e228      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012f44:	2380      	movs	r3, #128	; 0x80
 8012f46:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8012f4a:	e224      	b.n	8013396 <UART_SetConfig+0x7ae>
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	681b      	ldr	r3, [r3, #0]
 8012f50:	4ab1      	ldr	r2, [pc, #708]	; (8013218 <UART_SetConfig+0x630>)
 8012f52:	4293      	cmp	r3, r2
 8012f54:	d176      	bne.n	8013044 <UART_SetConfig+0x45c>
 8012f56:	4bb1      	ldr	r3, [pc, #708]	; (801321c <UART_SetConfig+0x634>)
 8012f58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012f5a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8012f5e:	2b28      	cmp	r3, #40	; 0x28
 8012f60:	d86c      	bhi.n	801303c <UART_SetConfig+0x454>
 8012f62:	a201      	add	r2, pc, #4	; (adr r2, 8012f68 <UART_SetConfig+0x380>)
 8012f64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012f68:	0801300d 	.word	0x0801300d
 8012f6c:	0801303d 	.word	0x0801303d
 8012f70:	0801303d 	.word	0x0801303d
 8012f74:	0801303d 	.word	0x0801303d
 8012f78:	0801303d 	.word	0x0801303d
 8012f7c:	0801303d 	.word	0x0801303d
 8012f80:	0801303d 	.word	0x0801303d
 8012f84:	0801303d 	.word	0x0801303d
 8012f88:	08013015 	.word	0x08013015
 8012f8c:	0801303d 	.word	0x0801303d
 8012f90:	0801303d 	.word	0x0801303d
 8012f94:	0801303d 	.word	0x0801303d
 8012f98:	0801303d 	.word	0x0801303d
 8012f9c:	0801303d 	.word	0x0801303d
 8012fa0:	0801303d 	.word	0x0801303d
 8012fa4:	0801303d 	.word	0x0801303d
 8012fa8:	0801301d 	.word	0x0801301d
 8012fac:	0801303d 	.word	0x0801303d
 8012fb0:	0801303d 	.word	0x0801303d
 8012fb4:	0801303d 	.word	0x0801303d
 8012fb8:	0801303d 	.word	0x0801303d
 8012fbc:	0801303d 	.word	0x0801303d
 8012fc0:	0801303d 	.word	0x0801303d
 8012fc4:	0801303d 	.word	0x0801303d
 8012fc8:	08013025 	.word	0x08013025
 8012fcc:	0801303d 	.word	0x0801303d
 8012fd0:	0801303d 	.word	0x0801303d
 8012fd4:	0801303d 	.word	0x0801303d
 8012fd8:	0801303d 	.word	0x0801303d
 8012fdc:	0801303d 	.word	0x0801303d
 8012fe0:	0801303d 	.word	0x0801303d
 8012fe4:	0801303d 	.word	0x0801303d
 8012fe8:	0801302d 	.word	0x0801302d
 8012fec:	0801303d 	.word	0x0801303d
 8012ff0:	0801303d 	.word	0x0801303d
 8012ff4:	0801303d 	.word	0x0801303d
 8012ff8:	0801303d 	.word	0x0801303d
 8012ffc:	0801303d 	.word	0x0801303d
 8013000:	0801303d 	.word	0x0801303d
 8013004:	0801303d 	.word	0x0801303d
 8013008:	08013035 	.word	0x08013035
 801300c:	2301      	movs	r3, #1
 801300e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013012:	e1c0      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013014:	2304      	movs	r3, #4
 8013016:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801301a:	e1bc      	b.n	8013396 <UART_SetConfig+0x7ae>
 801301c:	2308      	movs	r3, #8
 801301e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013022:	e1b8      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013024:	2310      	movs	r3, #16
 8013026:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801302a:	e1b4      	b.n	8013396 <UART_SetConfig+0x7ae>
 801302c:	2320      	movs	r3, #32
 801302e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013032:	e1b0      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013034:	2340      	movs	r3, #64	; 0x40
 8013036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801303a:	e1ac      	b.n	8013396 <UART_SetConfig+0x7ae>
 801303c:	2380      	movs	r3, #128	; 0x80
 801303e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013042:	e1a8      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013044:	697b      	ldr	r3, [r7, #20]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	4a75      	ldr	r2, [pc, #468]	; (8013220 <UART_SetConfig+0x638>)
 801304a:	4293      	cmp	r3, r2
 801304c:	d130      	bne.n	80130b0 <UART_SetConfig+0x4c8>
 801304e:	4b73      	ldr	r3, [pc, #460]	; (801321c <UART_SetConfig+0x634>)
 8013050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8013052:	f003 0307 	and.w	r3, r3, #7
 8013056:	2b05      	cmp	r3, #5
 8013058:	d826      	bhi.n	80130a8 <UART_SetConfig+0x4c0>
 801305a:	a201      	add	r2, pc, #4	; (adr r2, 8013060 <UART_SetConfig+0x478>)
 801305c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013060:	08013079 	.word	0x08013079
 8013064:	08013081 	.word	0x08013081
 8013068:	08013089 	.word	0x08013089
 801306c:	08013091 	.word	0x08013091
 8013070:	08013099 	.word	0x08013099
 8013074:	080130a1 	.word	0x080130a1
 8013078:	2300      	movs	r3, #0
 801307a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801307e:	e18a      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013080:	2304      	movs	r3, #4
 8013082:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013086:	e186      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013088:	2308      	movs	r3, #8
 801308a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801308e:	e182      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013090:	2310      	movs	r3, #16
 8013092:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013096:	e17e      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013098:	2320      	movs	r3, #32
 801309a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801309e:	e17a      	b.n	8013396 <UART_SetConfig+0x7ae>
 80130a0:	2340      	movs	r3, #64	; 0x40
 80130a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130a6:	e176      	b.n	8013396 <UART_SetConfig+0x7ae>
 80130a8:	2380      	movs	r3, #128	; 0x80
 80130aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ae:	e172      	b.n	8013396 <UART_SetConfig+0x7ae>
 80130b0:	697b      	ldr	r3, [r7, #20]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	4a5b      	ldr	r2, [pc, #364]	; (8013224 <UART_SetConfig+0x63c>)
 80130b6:	4293      	cmp	r3, r2
 80130b8:	d130      	bne.n	801311c <UART_SetConfig+0x534>
 80130ba:	4b58      	ldr	r3, [pc, #352]	; (801321c <UART_SetConfig+0x634>)
 80130bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80130be:	f003 0307 	and.w	r3, r3, #7
 80130c2:	2b05      	cmp	r3, #5
 80130c4:	d826      	bhi.n	8013114 <UART_SetConfig+0x52c>
 80130c6:	a201      	add	r2, pc, #4	; (adr r2, 80130cc <UART_SetConfig+0x4e4>)
 80130c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80130cc:	080130e5 	.word	0x080130e5
 80130d0:	080130ed 	.word	0x080130ed
 80130d4:	080130f5 	.word	0x080130f5
 80130d8:	080130fd 	.word	0x080130fd
 80130dc:	08013105 	.word	0x08013105
 80130e0:	0801310d 	.word	0x0801310d
 80130e4:	2300      	movs	r3, #0
 80130e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130ea:	e154      	b.n	8013396 <UART_SetConfig+0x7ae>
 80130ec:	2304      	movs	r3, #4
 80130ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130f2:	e150      	b.n	8013396 <UART_SetConfig+0x7ae>
 80130f4:	2308      	movs	r3, #8
 80130f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80130fa:	e14c      	b.n	8013396 <UART_SetConfig+0x7ae>
 80130fc:	2310      	movs	r3, #16
 80130fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013102:	e148      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013104:	2320      	movs	r3, #32
 8013106:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801310a:	e144      	b.n	8013396 <UART_SetConfig+0x7ae>
 801310c:	2340      	movs	r3, #64	; 0x40
 801310e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013112:	e140      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013114:	2380      	movs	r3, #128	; 0x80
 8013116:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801311a:	e13c      	b.n	8013396 <UART_SetConfig+0x7ae>
 801311c:	697b      	ldr	r3, [r7, #20]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	4a41      	ldr	r2, [pc, #260]	; (8013228 <UART_SetConfig+0x640>)
 8013122:	4293      	cmp	r3, r2
 8013124:	f040 8082 	bne.w	801322c <UART_SetConfig+0x644>
 8013128:	4b3c      	ldr	r3, [pc, #240]	; (801321c <UART_SetConfig+0x634>)
 801312a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801312c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8013130:	2b28      	cmp	r3, #40	; 0x28
 8013132:	d86d      	bhi.n	8013210 <UART_SetConfig+0x628>
 8013134:	a201      	add	r2, pc, #4	; (adr r2, 801313c <UART_SetConfig+0x554>)
 8013136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801313a:	bf00      	nop
 801313c:	080131e1 	.word	0x080131e1
 8013140:	08013211 	.word	0x08013211
 8013144:	08013211 	.word	0x08013211
 8013148:	08013211 	.word	0x08013211
 801314c:	08013211 	.word	0x08013211
 8013150:	08013211 	.word	0x08013211
 8013154:	08013211 	.word	0x08013211
 8013158:	08013211 	.word	0x08013211
 801315c:	080131e9 	.word	0x080131e9
 8013160:	08013211 	.word	0x08013211
 8013164:	08013211 	.word	0x08013211
 8013168:	08013211 	.word	0x08013211
 801316c:	08013211 	.word	0x08013211
 8013170:	08013211 	.word	0x08013211
 8013174:	08013211 	.word	0x08013211
 8013178:	08013211 	.word	0x08013211
 801317c:	080131f1 	.word	0x080131f1
 8013180:	08013211 	.word	0x08013211
 8013184:	08013211 	.word	0x08013211
 8013188:	08013211 	.word	0x08013211
 801318c:	08013211 	.word	0x08013211
 8013190:	08013211 	.word	0x08013211
 8013194:	08013211 	.word	0x08013211
 8013198:	08013211 	.word	0x08013211
 801319c:	080131f9 	.word	0x080131f9
 80131a0:	08013211 	.word	0x08013211
 80131a4:	08013211 	.word	0x08013211
 80131a8:	08013211 	.word	0x08013211
 80131ac:	08013211 	.word	0x08013211
 80131b0:	08013211 	.word	0x08013211
 80131b4:	08013211 	.word	0x08013211
 80131b8:	08013211 	.word	0x08013211
 80131bc:	08013201 	.word	0x08013201
 80131c0:	08013211 	.word	0x08013211
 80131c4:	08013211 	.word	0x08013211
 80131c8:	08013211 	.word	0x08013211
 80131cc:	08013211 	.word	0x08013211
 80131d0:	08013211 	.word	0x08013211
 80131d4:	08013211 	.word	0x08013211
 80131d8:	08013211 	.word	0x08013211
 80131dc:	08013209 	.word	0x08013209
 80131e0:	2301      	movs	r3, #1
 80131e2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131e6:	e0d6      	b.n	8013396 <UART_SetConfig+0x7ae>
 80131e8:	2304      	movs	r3, #4
 80131ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131ee:	e0d2      	b.n	8013396 <UART_SetConfig+0x7ae>
 80131f0:	2308      	movs	r3, #8
 80131f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131f6:	e0ce      	b.n	8013396 <UART_SetConfig+0x7ae>
 80131f8:	2310      	movs	r3, #16
 80131fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80131fe:	e0ca      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013200:	2320      	movs	r3, #32
 8013202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013206:	e0c6      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013208:	2340      	movs	r3, #64	; 0x40
 801320a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801320e:	e0c2      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013210:	2380      	movs	r3, #128	; 0x80
 8013212:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013216:	e0be      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013218:	40011400 	.word	0x40011400
 801321c:	58024400 	.word	0x58024400
 8013220:	40007800 	.word	0x40007800
 8013224:	40007c00 	.word	0x40007c00
 8013228:	40011800 	.word	0x40011800
 801322c:	697b      	ldr	r3, [r7, #20]
 801322e:	681b      	ldr	r3, [r3, #0]
 8013230:	4aad      	ldr	r2, [pc, #692]	; (80134e8 <UART_SetConfig+0x900>)
 8013232:	4293      	cmp	r3, r2
 8013234:	d176      	bne.n	8013324 <UART_SetConfig+0x73c>
 8013236:	4bad      	ldr	r3, [pc, #692]	; (80134ec <UART_SetConfig+0x904>)
 8013238:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801323a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801323e:	2b28      	cmp	r3, #40	; 0x28
 8013240:	d86c      	bhi.n	801331c <UART_SetConfig+0x734>
 8013242:	a201      	add	r2, pc, #4	; (adr r2, 8013248 <UART_SetConfig+0x660>)
 8013244:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013248:	080132ed 	.word	0x080132ed
 801324c:	0801331d 	.word	0x0801331d
 8013250:	0801331d 	.word	0x0801331d
 8013254:	0801331d 	.word	0x0801331d
 8013258:	0801331d 	.word	0x0801331d
 801325c:	0801331d 	.word	0x0801331d
 8013260:	0801331d 	.word	0x0801331d
 8013264:	0801331d 	.word	0x0801331d
 8013268:	080132f5 	.word	0x080132f5
 801326c:	0801331d 	.word	0x0801331d
 8013270:	0801331d 	.word	0x0801331d
 8013274:	0801331d 	.word	0x0801331d
 8013278:	0801331d 	.word	0x0801331d
 801327c:	0801331d 	.word	0x0801331d
 8013280:	0801331d 	.word	0x0801331d
 8013284:	0801331d 	.word	0x0801331d
 8013288:	080132fd 	.word	0x080132fd
 801328c:	0801331d 	.word	0x0801331d
 8013290:	0801331d 	.word	0x0801331d
 8013294:	0801331d 	.word	0x0801331d
 8013298:	0801331d 	.word	0x0801331d
 801329c:	0801331d 	.word	0x0801331d
 80132a0:	0801331d 	.word	0x0801331d
 80132a4:	0801331d 	.word	0x0801331d
 80132a8:	08013305 	.word	0x08013305
 80132ac:	0801331d 	.word	0x0801331d
 80132b0:	0801331d 	.word	0x0801331d
 80132b4:	0801331d 	.word	0x0801331d
 80132b8:	0801331d 	.word	0x0801331d
 80132bc:	0801331d 	.word	0x0801331d
 80132c0:	0801331d 	.word	0x0801331d
 80132c4:	0801331d 	.word	0x0801331d
 80132c8:	0801330d 	.word	0x0801330d
 80132cc:	0801331d 	.word	0x0801331d
 80132d0:	0801331d 	.word	0x0801331d
 80132d4:	0801331d 	.word	0x0801331d
 80132d8:	0801331d 	.word	0x0801331d
 80132dc:	0801331d 	.word	0x0801331d
 80132e0:	0801331d 	.word	0x0801331d
 80132e4:	0801331d 	.word	0x0801331d
 80132e8:	08013315 	.word	0x08013315
 80132ec:	2301      	movs	r3, #1
 80132ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132f2:	e050      	b.n	8013396 <UART_SetConfig+0x7ae>
 80132f4:	2304      	movs	r3, #4
 80132f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80132fa:	e04c      	b.n	8013396 <UART_SetConfig+0x7ae>
 80132fc:	2308      	movs	r3, #8
 80132fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013302:	e048      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013304:	2310      	movs	r3, #16
 8013306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801330a:	e044      	b.n	8013396 <UART_SetConfig+0x7ae>
 801330c:	2320      	movs	r3, #32
 801330e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013312:	e040      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013314:	2340      	movs	r3, #64	; 0x40
 8013316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801331a:	e03c      	b.n	8013396 <UART_SetConfig+0x7ae>
 801331c:	2380      	movs	r3, #128	; 0x80
 801331e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013322:	e038      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013324:	697b      	ldr	r3, [r7, #20]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	4a71      	ldr	r2, [pc, #452]	; (80134f0 <UART_SetConfig+0x908>)
 801332a:	4293      	cmp	r3, r2
 801332c:	d130      	bne.n	8013390 <UART_SetConfig+0x7a8>
 801332e:	4b6f      	ldr	r3, [pc, #444]	; (80134ec <UART_SetConfig+0x904>)
 8013330:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8013332:	f003 0307 	and.w	r3, r3, #7
 8013336:	2b05      	cmp	r3, #5
 8013338:	d826      	bhi.n	8013388 <UART_SetConfig+0x7a0>
 801333a:	a201      	add	r2, pc, #4	; (adr r2, 8013340 <UART_SetConfig+0x758>)
 801333c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013340:	08013359 	.word	0x08013359
 8013344:	08013361 	.word	0x08013361
 8013348:	08013369 	.word	0x08013369
 801334c:	08013371 	.word	0x08013371
 8013350:	08013379 	.word	0x08013379
 8013354:	08013381 	.word	0x08013381
 8013358:	2302      	movs	r3, #2
 801335a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801335e:	e01a      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013360:	2304      	movs	r3, #4
 8013362:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013366:	e016      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013368:	2308      	movs	r3, #8
 801336a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801336e:	e012      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013370:	2310      	movs	r3, #16
 8013372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013376:	e00e      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013378:	2320      	movs	r3, #32
 801337a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801337e:	e00a      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013380:	2340      	movs	r3, #64	; 0x40
 8013382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8013386:	e006      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013388:	2380      	movs	r3, #128	; 0x80
 801338a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 801338e:	e002      	b.n	8013396 <UART_SetConfig+0x7ae>
 8013390:	2380      	movs	r3, #128	; 0x80
 8013392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8013396:	697b      	ldr	r3, [r7, #20]
 8013398:	681b      	ldr	r3, [r3, #0]
 801339a:	4a55      	ldr	r2, [pc, #340]	; (80134f0 <UART_SetConfig+0x908>)
 801339c:	4293      	cmp	r3, r2
 801339e:	f040 80f8 	bne.w	8013592 <UART_SetConfig+0x9aa>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80133a2:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80133a6:	2b20      	cmp	r3, #32
 80133a8:	dc46      	bgt.n	8013438 <UART_SetConfig+0x850>
 80133aa:	2b02      	cmp	r3, #2
 80133ac:	db75      	blt.n	801349a <UART_SetConfig+0x8b2>
 80133ae:	3b02      	subs	r3, #2
 80133b0:	2b1e      	cmp	r3, #30
 80133b2:	d872      	bhi.n	801349a <UART_SetConfig+0x8b2>
 80133b4:	a201      	add	r2, pc, #4	; (adr r2, 80133bc <UART_SetConfig+0x7d4>)
 80133b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80133ba:	bf00      	nop
 80133bc:	0801343f 	.word	0x0801343f
 80133c0:	0801349b 	.word	0x0801349b
 80133c4:	08013447 	.word	0x08013447
 80133c8:	0801349b 	.word	0x0801349b
 80133cc:	0801349b 	.word	0x0801349b
 80133d0:	0801349b 	.word	0x0801349b
 80133d4:	08013457 	.word	0x08013457
 80133d8:	0801349b 	.word	0x0801349b
 80133dc:	0801349b 	.word	0x0801349b
 80133e0:	0801349b 	.word	0x0801349b
 80133e4:	0801349b 	.word	0x0801349b
 80133e8:	0801349b 	.word	0x0801349b
 80133ec:	0801349b 	.word	0x0801349b
 80133f0:	0801349b 	.word	0x0801349b
 80133f4:	08013467 	.word	0x08013467
 80133f8:	0801349b 	.word	0x0801349b
 80133fc:	0801349b 	.word	0x0801349b
 8013400:	0801349b 	.word	0x0801349b
 8013404:	0801349b 	.word	0x0801349b
 8013408:	0801349b 	.word	0x0801349b
 801340c:	0801349b 	.word	0x0801349b
 8013410:	0801349b 	.word	0x0801349b
 8013414:	0801349b 	.word	0x0801349b
 8013418:	0801349b 	.word	0x0801349b
 801341c:	0801349b 	.word	0x0801349b
 8013420:	0801349b 	.word	0x0801349b
 8013424:	0801349b 	.word	0x0801349b
 8013428:	0801349b 	.word	0x0801349b
 801342c:	0801349b 	.word	0x0801349b
 8013430:	0801349b 	.word	0x0801349b
 8013434:	0801348d 	.word	0x0801348d
 8013438:	2b40      	cmp	r3, #64	; 0x40
 801343a:	d02a      	beq.n	8013492 <UART_SetConfig+0x8aa>
 801343c:	e02d      	b.n	801349a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801343e:	f7fe fd25 	bl	8011e8c <HAL_RCCEx_GetD3PCLK1Freq>
 8013442:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013444:	e02f      	b.n	80134a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8013446:	f107 0324 	add.w	r3, r7, #36	; 0x24
 801344a:	4618      	mov	r0, r3
 801344c:	f7fe fd34 	bl	8011eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013452:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013454:	e027      	b.n	80134a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8013456:	f107 0318 	add.w	r3, r7, #24
 801345a:	4618      	mov	r0, r3
 801345c:	f7fe fe80 	bl	8012160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013460:	69fb      	ldr	r3, [r7, #28]
 8013462:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013464:	e01f      	b.n	80134a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8013466:	4b21      	ldr	r3, [pc, #132]	; (80134ec <UART_SetConfig+0x904>)
 8013468:	681b      	ldr	r3, [r3, #0]
 801346a:	f003 0320 	and.w	r3, r3, #32
 801346e:	2b00      	cmp	r3, #0
 8013470:	d009      	beq.n	8013486 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8013472:	4b1e      	ldr	r3, [pc, #120]	; (80134ec <UART_SetConfig+0x904>)
 8013474:	681b      	ldr	r3, [r3, #0]
 8013476:	08db      	lsrs	r3, r3, #3
 8013478:	f003 0303 	and.w	r3, r3, #3
 801347c:	4a1d      	ldr	r2, [pc, #116]	; (80134f4 <UART_SetConfig+0x90c>)
 801347e:	fa22 f303 	lsr.w	r3, r2, r3
 8013482:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8013484:	e00f      	b.n	80134a6 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8013486:	4b1b      	ldr	r3, [pc, #108]	; (80134f4 <UART_SetConfig+0x90c>)
 8013488:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801348a:	e00c      	b.n	80134a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801348c:	4b1a      	ldr	r3, [pc, #104]	; (80134f8 <UART_SetConfig+0x910>)
 801348e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013490:	e009      	b.n	80134a6 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8013492:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013496:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013498:	e005      	b.n	80134a6 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801349a:	2300      	movs	r3, #0
 801349c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 801349e:	2301      	movs	r3, #1
 80134a0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80134a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80134a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134a8:	2b00      	cmp	r3, #0
 80134aa:	f000 81ee 	beq.w	801388a <UART_SetConfig+0xca2>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80134ae:	697b      	ldr	r3, [r7, #20]
 80134b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80134b2:	4a12      	ldr	r2, [pc, #72]	; (80134fc <UART_SetConfig+0x914>)
 80134b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80134b8:	461a      	mov	r2, r3
 80134ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80134bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80134c0:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80134c2:	697b      	ldr	r3, [r7, #20]
 80134c4:	685a      	ldr	r2, [r3, #4]
 80134c6:	4613      	mov	r3, r2
 80134c8:	005b      	lsls	r3, r3, #1
 80134ca:	4413      	add	r3, r2
 80134cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134ce:	429a      	cmp	r2, r3
 80134d0:	d305      	bcc.n	80134de <UART_SetConfig+0x8f6>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80134d2:	697b      	ldr	r3, [r7, #20]
 80134d4:	685b      	ldr	r3, [r3, #4]
 80134d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80134d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80134da:	429a      	cmp	r2, r3
 80134dc:	d910      	bls.n	8013500 <UART_SetConfig+0x918>
      {
        ret = HAL_ERROR;
 80134de:	2301      	movs	r3, #1
 80134e0:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80134e4:	e1d1      	b.n	801388a <UART_SetConfig+0xca2>
 80134e6:	bf00      	nop
 80134e8:	40011c00 	.word	0x40011c00
 80134ec:	58024400 	.word	0x58024400
 80134f0:	58000c00 	.word	0x58000c00
 80134f4:	03d09000 	.word	0x03d09000
 80134f8:	003d0900 	.word	0x003d0900
 80134fc:	08018160 	.word	0x08018160
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013500:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013502:	2200      	movs	r2, #0
 8013504:	60bb      	str	r3, [r7, #8]
 8013506:	60fa      	str	r2, [r7, #12]
 8013508:	697b      	ldr	r3, [r7, #20]
 801350a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801350c:	4ac0      	ldr	r2, [pc, #768]	; (8013810 <UART_SetConfig+0xc28>)
 801350e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013512:	b29b      	uxth	r3, r3
 8013514:	2200      	movs	r2, #0
 8013516:	603b      	str	r3, [r7, #0]
 8013518:	607a      	str	r2, [r7, #4]
 801351a:	e9d7 2300 	ldrd	r2, r3, [r7]
 801351e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013522:	f7ed f969 	bl	80007f8 <__aeabi_uldivmod>
 8013526:	4602      	mov	r2, r0
 8013528:	460b      	mov	r3, r1
 801352a:	4610      	mov	r0, r2
 801352c:	4619      	mov	r1, r3
 801352e:	f04f 0200 	mov.w	r2, #0
 8013532:	f04f 0300 	mov.w	r3, #0
 8013536:	020b      	lsls	r3, r1, #8
 8013538:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801353c:	0202      	lsls	r2, r0, #8
 801353e:	6979      	ldr	r1, [r7, #20]
 8013540:	6849      	ldr	r1, [r1, #4]
 8013542:	0849      	lsrs	r1, r1, #1
 8013544:	2000      	movs	r0, #0
 8013546:	460c      	mov	r4, r1
 8013548:	4605      	mov	r5, r0
 801354a:	eb12 0804 	adds.w	r8, r2, r4
 801354e:	eb43 0905 	adc.w	r9, r3, r5
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	685b      	ldr	r3, [r3, #4]
 8013556:	2200      	movs	r2, #0
 8013558:	469a      	mov	sl, r3
 801355a:	4693      	mov	fp, r2
 801355c:	4652      	mov	r2, sl
 801355e:	465b      	mov	r3, fp
 8013560:	4640      	mov	r0, r8
 8013562:	4649      	mov	r1, r9
 8013564:	f7ed f948 	bl	80007f8 <__aeabi_uldivmod>
 8013568:	4602      	mov	r2, r0
 801356a:	460b      	mov	r3, r1
 801356c:	4613      	mov	r3, r2
 801356e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8013570:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013572:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8013576:	d308      	bcc.n	801358a <UART_SetConfig+0x9a2>
 8013578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801357a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 801357e:	d204      	bcs.n	801358a <UART_SetConfig+0x9a2>
        {
          huart->Instance->BRR = usartdiv;
 8013580:	697b      	ldr	r3, [r7, #20]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8013586:	60da      	str	r2, [r3, #12]
 8013588:	e17f      	b.n	801388a <UART_SetConfig+0xca2>
        }
        else
        {
          ret = HAL_ERROR;
 801358a:	2301      	movs	r3, #1
 801358c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013590:	e17b      	b.n	801388a <UART_SetConfig+0xca2>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8013592:	697b      	ldr	r3, [r7, #20]
 8013594:	69db      	ldr	r3, [r3, #28]
 8013596:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801359a:	f040 80bd 	bne.w	8013718 <UART_SetConfig+0xb30>
  {
    switch (clocksource)
 801359e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80135a2:	2b20      	cmp	r3, #32
 80135a4:	dc48      	bgt.n	8013638 <UART_SetConfig+0xa50>
 80135a6:	2b00      	cmp	r3, #0
 80135a8:	db7b      	blt.n	80136a2 <UART_SetConfig+0xaba>
 80135aa:	2b20      	cmp	r3, #32
 80135ac:	d879      	bhi.n	80136a2 <UART_SetConfig+0xaba>
 80135ae:	a201      	add	r2, pc, #4	; (adr r2, 80135b4 <UART_SetConfig+0x9cc>)
 80135b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80135b4:	0801363f 	.word	0x0801363f
 80135b8:	08013647 	.word	0x08013647
 80135bc:	080136a3 	.word	0x080136a3
 80135c0:	080136a3 	.word	0x080136a3
 80135c4:	0801364f 	.word	0x0801364f
 80135c8:	080136a3 	.word	0x080136a3
 80135cc:	080136a3 	.word	0x080136a3
 80135d0:	080136a3 	.word	0x080136a3
 80135d4:	0801365f 	.word	0x0801365f
 80135d8:	080136a3 	.word	0x080136a3
 80135dc:	080136a3 	.word	0x080136a3
 80135e0:	080136a3 	.word	0x080136a3
 80135e4:	080136a3 	.word	0x080136a3
 80135e8:	080136a3 	.word	0x080136a3
 80135ec:	080136a3 	.word	0x080136a3
 80135f0:	080136a3 	.word	0x080136a3
 80135f4:	0801366f 	.word	0x0801366f
 80135f8:	080136a3 	.word	0x080136a3
 80135fc:	080136a3 	.word	0x080136a3
 8013600:	080136a3 	.word	0x080136a3
 8013604:	080136a3 	.word	0x080136a3
 8013608:	080136a3 	.word	0x080136a3
 801360c:	080136a3 	.word	0x080136a3
 8013610:	080136a3 	.word	0x080136a3
 8013614:	080136a3 	.word	0x080136a3
 8013618:	080136a3 	.word	0x080136a3
 801361c:	080136a3 	.word	0x080136a3
 8013620:	080136a3 	.word	0x080136a3
 8013624:	080136a3 	.word	0x080136a3
 8013628:	080136a3 	.word	0x080136a3
 801362c:	080136a3 	.word	0x080136a3
 8013630:	080136a3 	.word	0x080136a3
 8013634:	08013695 	.word	0x08013695
 8013638:	2b40      	cmp	r3, #64	; 0x40
 801363a:	d02e      	beq.n	801369a <UART_SetConfig+0xab2>
 801363c:	e031      	b.n	80136a2 <UART_SetConfig+0xaba>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801363e:	f7fd fa59 	bl	8010af4 <HAL_RCC_GetPCLK1Freq>
 8013642:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8013644:	e033      	b.n	80136ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8013646:	f7fd fa6b 	bl	8010b20 <HAL_RCC_GetPCLK2Freq>
 801364a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 801364c:	e02f      	b.n	80136ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801364e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8013652:	4618      	mov	r0, r3
 8013654:	f7fe fc30 	bl	8011eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8013658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801365a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801365c:	e027      	b.n	80136ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801365e:	f107 0318 	add.w	r3, r7, #24
 8013662:	4618      	mov	r0, r3
 8013664:	f7fe fd7c 	bl	8012160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8013668:	69fb      	ldr	r3, [r7, #28]
 801366a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801366c:	e01f      	b.n	80136ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801366e:	4b69      	ldr	r3, [pc, #420]	; (8013814 <UART_SetConfig+0xc2c>)
 8013670:	681b      	ldr	r3, [r3, #0]
 8013672:	f003 0320 	and.w	r3, r3, #32
 8013676:	2b00      	cmp	r3, #0
 8013678:	d009      	beq.n	801368e <UART_SetConfig+0xaa6>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801367a:	4b66      	ldr	r3, [pc, #408]	; (8013814 <UART_SetConfig+0xc2c>)
 801367c:	681b      	ldr	r3, [r3, #0]
 801367e:	08db      	lsrs	r3, r3, #3
 8013680:	f003 0303 	and.w	r3, r3, #3
 8013684:	4a64      	ldr	r2, [pc, #400]	; (8013818 <UART_SetConfig+0xc30>)
 8013686:	fa22 f303 	lsr.w	r3, r2, r3
 801368a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801368c:	e00f      	b.n	80136ae <UART_SetConfig+0xac6>
          pclk = (uint32_t) HSI_VALUE;
 801368e:	4b62      	ldr	r3, [pc, #392]	; (8013818 <UART_SetConfig+0xc30>)
 8013690:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013692:	e00c      	b.n	80136ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013694:	4b61      	ldr	r3, [pc, #388]	; (801381c <UART_SetConfig+0xc34>)
 8013696:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013698:	e009      	b.n	80136ae <UART_SetConfig+0xac6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801369a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 801369e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80136a0:	e005      	b.n	80136ae <UART_SetConfig+0xac6>
      default:
        pclk = 0U;
 80136a2:	2300      	movs	r3, #0
 80136a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80136a6:	2301      	movs	r3, #1
 80136a8:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80136ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80136ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136b0:	2b00      	cmp	r3, #0
 80136b2:	f000 80ea 	beq.w	801388a <UART_SetConfig+0xca2>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80136b6:	697b      	ldr	r3, [r7, #20]
 80136b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80136ba:	4a55      	ldr	r2, [pc, #340]	; (8013810 <UART_SetConfig+0xc28>)
 80136bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80136c0:	461a      	mov	r2, r3
 80136c2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80136c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80136c8:	005a      	lsls	r2, r3, #1
 80136ca:	697b      	ldr	r3, [r7, #20]
 80136cc:	685b      	ldr	r3, [r3, #4]
 80136ce:	085b      	lsrs	r3, r3, #1
 80136d0:	441a      	add	r2, r3
 80136d2:	697b      	ldr	r3, [r7, #20]
 80136d4:	685b      	ldr	r3, [r3, #4]
 80136d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80136da:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80136dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136de:	2b0f      	cmp	r3, #15
 80136e0:	d916      	bls.n	8013710 <UART_SetConfig+0xb28>
 80136e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80136e8:	d212      	bcs.n	8013710 <UART_SetConfig+0xb28>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80136ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136ec:	b29b      	uxth	r3, r3
 80136ee:	f023 030f 	bic.w	r3, r3, #15
 80136f2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80136f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80136f6:	085b      	lsrs	r3, r3, #1
 80136f8:	b29b      	uxth	r3, r3
 80136fa:	f003 0307 	and.w	r3, r3, #7
 80136fe:	b29a      	uxth	r2, r3
 8013700:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8013702:	4313      	orrs	r3, r2
 8013704:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 8013706:	697b      	ldr	r3, [r7, #20]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 801370c:	60da      	str	r2, [r3, #12]
 801370e:	e0bc      	b.n	801388a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013710:	2301      	movs	r3, #1
 8013712:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8013716:	e0b8      	b.n	801388a <UART_SetConfig+0xca2>
      }
    }
  }
  else
  {
    switch (clocksource)
 8013718:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 801371c:	2b20      	cmp	r3, #32
 801371e:	dc4b      	bgt.n	80137b8 <UART_SetConfig+0xbd0>
 8013720:	2b00      	cmp	r3, #0
 8013722:	f2c0 8087 	blt.w	8013834 <UART_SetConfig+0xc4c>
 8013726:	2b20      	cmp	r3, #32
 8013728:	f200 8084 	bhi.w	8013834 <UART_SetConfig+0xc4c>
 801372c:	a201      	add	r2, pc, #4	; (adr r2, 8013734 <UART_SetConfig+0xb4c>)
 801372e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8013732:	bf00      	nop
 8013734:	080137bf 	.word	0x080137bf
 8013738:	080137c7 	.word	0x080137c7
 801373c:	08013835 	.word	0x08013835
 8013740:	08013835 	.word	0x08013835
 8013744:	080137cf 	.word	0x080137cf
 8013748:	08013835 	.word	0x08013835
 801374c:	08013835 	.word	0x08013835
 8013750:	08013835 	.word	0x08013835
 8013754:	080137df 	.word	0x080137df
 8013758:	08013835 	.word	0x08013835
 801375c:	08013835 	.word	0x08013835
 8013760:	08013835 	.word	0x08013835
 8013764:	08013835 	.word	0x08013835
 8013768:	08013835 	.word	0x08013835
 801376c:	08013835 	.word	0x08013835
 8013770:	08013835 	.word	0x08013835
 8013774:	080137ef 	.word	0x080137ef
 8013778:	08013835 	.word	0x08013835
 801377c:	08013835 	.word	0x08013835
 8013780:	08013835 	.word	0x08013835
 8013784:	08013835 	.word	0x08013835
 8013788:	08013835 	.word	0x08013835
 801378c:	08013835 	.word	0x08013835
 8013790:	08013835 	.word	0x08013835
 8013794:	08013835 	.word	0x08013835
 8013798:	08013835 	.word	0x08013835
 801379c:	08013835 	.word	0x08013835
 80137a0:	08013835 	.word	0x08013835
 80137a4:	08013835 	.word	0x08013835
 80137a8:	08013835 	.word	0x08013835
 80137ac:	08013835 	.word	0x08013835
 80137b0:	08013835 	.word	0x08013835
 80137b4:	08013827 	.word	0x08013827
 80137b8:	2b40      	cmp	r3, #64	; 0x40
 80137ba:	d037      	beq.n	801382c <UART_SetConfig+0xc44>
 80137bc:	e03a      	b.n	8013834 <UART_SetConfig+0xc4c>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80137be:	f7fd f999 	bl	8010af4 <HAL_RCC_GetPCLK1Freq>
 80137c2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80137c4:	e03c      	b.n	8013840 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80137c6:	f7fd f9ab 	bl	8010b20 <HAL_RCC_GetPCLK2Freq>
 80137ca:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80137cc:	e038      	b.n	8013840 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80137ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80137d2:	4618      	mov	r0, r3
 80137d4:	f7fe fb70 	bl	8011eb8 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80137d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80137da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137dc:	e030      	b.n	8013840 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80137de:	f107 0318 	add.w	r3, r7, #24
 80137e2:	4618      	mov	r0, r3
 80137e4:	f7fe fcbc 	bl	8012160 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80137e8:	69fb      	ldr	r3, [r7, #28]
 80137ea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80137ec:	e028      	b.n	8013840 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80137ee:	4b09      	ldr	r3, [pc, #36]	; (8013814 <UART_SetConfig+0xc2c>)
 80137f0:	681b      	ldr	r3, [r3, #0]
 80137f2:	f003 0320 	and.w	r3, r3, #32
 80137f6:	2b00      	cmp	r3, #0
 80137f8:	d012      	beq.n	8013820 <UART_SetConfig+0xc38>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80137fa:	4b06      	ldr	r3, [pc, #24]	; (8013814 <UART_SetConfig+0xc2c>)
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	08db      	lsrs	r3, r3, #3
 8013800:	f003 0303 	and.w	r3, r3, #3
 8013804:	4a04      	ldr	r2, [pc, #16]	; (8013818 <UART_SetConfig+0xc30>)
 8013806:	fa22 f303 	lsr.w	r3, r2, r3
 801380a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801380c:	e018      	b.n	8013840 <UART_SetConfig+0xc58>
 801380e:	bf00      	nop
 8013810:	08018160 	.word	0x08018160
 8013814:	58024400 	.word	0x58024400
 8013818:	03d09000 	.word	0x03d09000
 801381c:	003d0900 	.word	0x003d0900
          pclk = (uint32_t) HSI_VALUE;
 8013820:	4b24      	ldr	r3, [pc, #144]	; (80138b4 <UART_SetConfig+0xccc>)
 8013822:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013824:	e00c      	b.n	8013840 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8013826:	4b24      	ldr	r3, [pc, #144]	; (80138b8 <UART_SetConfig+0xcd0>)
 8013828:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 801382a:	e009      	b.n	8013840 <UART_SetConfig+0xc58>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801382c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8013830:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8013832:	e005      	b.n	8013840 <UART_SetConfig+0xc58>
      default:
        pclk = 0U;
 8013834:	2300      	movs	r3, #0
 8013836:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8013838:	2301      	movs	r3, #1
 801383a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 801383e:	bf00      	nop
    }

    if (pclk != 0U)
 8013840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013842:	2b00      	cmp	r3, #0
 8013844:	d021      	beq.n	801388a <UART_SetConfig+0xca2>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8013846:	697b      	ldr	r3, [r7, #20]
 8013848:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801384a:	4a1c      	ldr	r2, [pc, #112]	; (80138bc <UART_SetConfig+0xcd4>)
 801384c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8013850:	461a      	mov	r2, r3
 8013852:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013854:	fbb3 f2f2 	udiv	r2, r3, r2
 8013858:	697b      	ldr	r3, [r7, #20]
 801385a:	685b      	ldr	r3, [r3, #4]
 801385c:	085b      	lsrs	r3, r3, #1
 801385e:	441a      	add	r2, r3
 8013860:	697b      	ldr	r3, [r7, #20]
 8013862:	685b      	ldr	r3, [r3, #4]
 8013864:	fbb2 f3f3 	udiv	r3, r2, r3
 8013868:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801386a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801386c:	2b0f      	cmp	r3, #15
 801386e:	d909      	bls.n	8013884 <UART_SetConfig+0xc9c>
 8013870:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013872:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013876:	d205      	bcs.n	8013884 <UART_SetConfig+0xc9c>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8013878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801387a:	b29a      	uxth	r2, r3
 801387c:	697b      	ldr	r3, [r7, #20]
 801387e:	681b      	ldr	r3, [r3, #0]
 8013880:	60da      	str	r2, [r3, #12]
 8013882:	e002      	b.n	801388a <UART_SetConfig+0xca2>
      }
      else
      {
        ret = HAL_ERROR;
 8013884:	2301      	movs	r3, #1
 8013886:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801388a:	697b      	ldr	r3, [r7, #20]
 801388c:	2201      	movs	r2, #1
 801388e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8013892:	697b      	ldr	r3, [r7, #20]
 8013894:	2201      	movs	r2, #1
 8013896:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801389a:	697b      	ldr	r3, [r7, #20]
 801389c:	2200      	movs	r2, #0
 801389e:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80138a0:	697b      	ldr	r3, [r7, #20]
 80138a2:	2200      	movs	r2, #0
 80138a4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80138a6:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 80138aa:	4618      	mov	r0, r3
 80138ac:	3748      	adds	r7, #72	; 0x48
 80138ae:	46bd      	mov	sp, r7
 80138b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80138b4:	03d09000 	.word	0x03d09000
 80138b8:	003d0900 	.word	0x003d0900
 80138bc:	08018160 	.word	0x08018160

080138c0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80138c0:	b480      	push	{r7}
 80138c2:	b083      	sub	sp, #12
 80138c4:	af00      	add	r7, sp, #0
 80138c6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138cc:	f003 0301 	and.w	r3, r3, #1
 80138d0:	2b00      	cmp	r3, #0
 80138d2:	d00a      	beq.n	80138ea <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80138d4:	687b      	ldr	r3, [r7, #4]
 80138d6:	681b      	ldr	r3, [r3, #0]
 80138d8:	685b      	ldr	r3, [r3, #4]
 80138da:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80138de:	687b      	ldr	r3, [r7, #4]
 80138e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80138e2:	687b      	ldr	r3, [r7, #4]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	430a      	orrs	r2, r1
 80138e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80138ee:	f003 0302 	and.w	r3, r3, #2
 80138f2:	2b00      	cmp	r3, #0
 80138f4:	d00a      	beq.n	801390c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80138f6:	687b      	ldr	r3, [r7, #4]
 80138f8:	681b      	ldr	r3, [r3, #0]
 80138fa:	685b      	ldr	r3, [r3, #4]
 80138fc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8013900:	687b      	ldr	r3, [r7, #4]
 8013902:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8013904:	687b      	ldr	r3, [r7, #4]
 8013906:	681b      	ldr	r3, [r3, #0]
 8013908:	430a      	orrs	r2, r1
 801390a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801390c:	687b      	ldr	r3, [r7, #4]
 801390e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013910:	f003 0304 	and.w	r3, r3, #4
 8013914:	2b00      	cmp	r3, #0
 8013916:	d00a      	beq.n	801392e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8013918:	687b      	ldr	r3, [r7, #4]
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	685b      	ldr	r3, [r3, #4]
 801391e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8013922:	687b      	ldr	r3, [r7, #4]
 8013924:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	430a      	orrs	r2, r1
 801392c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801392e:	687b      	ldr	r3, [r7, #4]
 8013930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013932:	f003 0308 	and.w	r3, r3, #8
 8013936:	2b00      	cmp	r3, #0
 8013938:	d00a      	beq.n	8013950 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	681b      	ldr	r3, [r3, #0]
 801393e:	685b      	ldr	r3, [r3, #4]
 8013940:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8013944:	687b      	ldr	r3, [r7, #4]
 8013946:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8013948:	687b      	ldr	r3, [r7, #4]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	430a      	orrs	r2, r1
 801394e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013954:	f003 0310 	and.w	r3, r3, #16
 8013958:	2b00      	cmp	r3, #0
 801395a:	d00a      	beq.n	8013972 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801395c:	687b      	ldr	r3, [r7, #4]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	689b      	ldr	r3, [r3, #8]
 8013962:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8013966:	687b      	ldr	r3, [r7, #4]
 8013968:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	681b      	ldr	r3, [r3, #0]
 801396e:	430a      	orrs	r2, r1
 8013970:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013976:	f003 0320 	and.w	r3, r3, #32
 801397a:	2b00      	cmp	r3, #0
 801397c:	d00a      	beq.n	8013994 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801397e:	687b      	ldr	r3, [r7, #4]
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	689b      	ldr	r3, [r3, #8]
 8013984:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8013988:	687b      	ldr	r3, [r7, #4]
 801398a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	430a      	orrs	r2, r1
 8013992:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8013994:	687b      	ldr	r3, [r7, #4]
 8013996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8013998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801399c:	2b00      	cmp	r3, #0
 801399e:	d01a      	beq.n	80139d6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80139a0:	687b      	ldr	r3, [r7, #4]
 80139a2:	681b      	ldr	r3, [r3, #0]
 80139a4:	685b      	ldr	r3, [r3, #4]
 80139a6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80139aa:	687b      	ldr	r3, [r7, #4]
 80139ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	681b      	ldr	r3, [r3, #0]
 80139b2:	430a      	orrs	r2, r1
 80139b4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80139b6:	687b      	ldr	r3, [r7, #4]
 80139b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80139ba:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80139be:	d10a      	bne.n	80139d6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80139c0:	687b      	ldr	r3, [r7, #4]
 80139c2:	681b      	ldr	r3, [r3, #0]
 80139c4:	685b      	ldr	r3, [r3, #4]
 80139c6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	681b      	ldr	r3, [r3, #0]
 80139d2:	430a      	orrs	r2, r1
 80139d4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80139da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80139de:	2b00      	cmp	r3, #0
 80139e0:	d00a      	beq.n	80139f8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	681b      	ldr	r3, [r3, #0]
 80139e6:	685b      	ldr	r3, [r3, #4]
 80139e8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80139f0:	687b      	ldr	r3, [r7, #4]
 80139f2:	681b      	ldr	r3, [r3, #0]
 80139f4:	430a      	orrs	r2, r1
 80139f6:	605a      	str	r2, [r3, #4]
  }
}
 80139f8:	bf00      	nop
 80139fa:	370c      	adds	r7, #12
 80139fc:	46bd      	mov	sp, r7
 80139fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a02:	4770      	bx	lr

08013a04 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8013a04:	b580      	push	{r7, lr}
 8013a06:	b098      	sub	sp, #96	; 0x60
 8013a08:	af02      	add	r7, sp, #8
 8013a0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013a0c:	687b      	ldr	r3, [r7, #4]
 8013a0e:	2200      	movs	r2, #0
 8013a10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8013a14:	f7fb f9ca 	bl	800edac <HAL_GetTick>
 8013a18:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	681b      	ldr	r3, [r3, #0]
 8013a20:	f003 0308 	and.w	r3, r3, #8
 8013a24:	2b08      	cmp	r3, #8
 8013a26:	d12f      	bne.n	8013a88 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013a28:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013a2c:	9300      	str	r3, [sp, #0]
 8013a2e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a30:	2200      	movs	r2, #0
 8013a32:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8013a36:	6878      	ldr	r0, [r7, #4]
 8013a38:	f000 f88e 	bl	8013b58 <UART_WaitOnFlagUntilTimeout>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	2b00      	cmp	r3, #0
 8013a40:	d022      	beq.n	8013a88 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8013a42:	687b      	ldr	r3, [r7, #4]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013a4a:	e853 3f00 	ldrex	r3, [r3]
 8013a4e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8013a50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013a52:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8013a56:	653b      	str	r3, [r7, #80]	; 0x50
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	461a      	mov	r2, r3
 8013a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8013a60:	647b      	str	r3, [r7, #68]	; 0x44
 8013a62:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013a64:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8013a66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8013a68:	e841 2300 	strex	r3, r2, [r1]
 8013a6c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8013a6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d1e6      	bne.n	8013a42 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	2220      	movs	r2, #32
 8013a78:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8013a7c:	687b      	ldr	r3, [r7, #4]
 8013a7e:	2200      	movs	r2, #0
 8013a80:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013a84:	2303      	movs	r3, #3
 8013a86:	e063      	b.n	8013b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8013a88:	687b      	ldr	r3, [r7, #4]
 8013a8a:	681b      	ldr	r3, [r3, #0]
 8013a8c:	681b      	ldr	r3, [r3, #0]
 8013a8e:	f003 0304 	and.w	r3, r3, #4
 8013a92:	2b04      	cmp	r3, #4
 8013a94:	d149      	bne.n	8013b2a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8013a96:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8013a9a:	9300      	str	r3, [sp, #0]
 8013a9c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8013a9e:	2200      	movs	r2, #0
 8013aa0:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8013aa4:	6878      	ldr	r0, [r7, #4]
 8013aa6:	f000 f857 	bl	8013b58 <UART_WaitOnFlagUntilTimeout>
 8013aaa:	4603      	mov	r3, r0
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d03c      	beq.n	8013b2a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ab8:	e853 3f00 	ldrex	r3, [r3]
 8013abc:	623b      	str	r3, [r7, #32]
   return(result);
 8013abe:	6a3b      	ldr	r3, [r7, #32]
 8013ac0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013ac4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013ac6:	687b      	ldr	r3, [r7, #4]
 8013ac8:	681b      	ldr	r3, [r3, #0]
 8013aca:	461a      	mov	r2, r3
 8013acc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ace:	633b      	str	r3, [r7, #48]	; 0x30
 8013ad0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013ad2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8013ad4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8013ad6:	e841 2300 	strex	r3, r2, [r1]
 8013ada:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8013adc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013ade:	2b00      	cmp	r3, #0
 8013ae0:	d1e6      	bne.n	8013ab0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013ae2:	687b      	ldr	r3, [r7, #4]
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	3308      	adds	r3, #8
 8013ae8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013aea:	693b      	ldr	r3, [r7, #16]
 8013aec:	e853 3f00 	ldrex	r3, [r3]
 8013af0:	60fb      	str	r3, [r7, #12]
   return(result);
 8013af2:	68fb      	ldr	r3, [r7, #12]
 8013af4:	f023 0301 	bic.w	r3, r3, #1
 8013af8:	64bb      	str	r3, [r7, #72]	; 0x48
 8013afa:	687b      	ldr	r3, [r7, #4]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	3308      	adds	r3, #8
 8013b00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013b02:	61fa      	str	r2, [r7, #28]
 8013b04:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013b06:	69b9      	ldr	r1, [r7, #24]
 8013b08:	69fa      	ldr	r2, [r7, #28]
 8013b0a:	e841 2300 	strex	r3, r2, [r1]
 8013b0e:	617b      	str	r3, [r7, #20]
   return(result);
 8013b10:	697b      	ldr	r3, [r7, #20]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d1e5      	bne.n	8013ae2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	2220      	movs	r2, #32
 8013b1a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2200      	movs	r2, #0
 8013b22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8013b26:	2303      	movs	r3, #3
 8013b28:	e012      	b.n	8013b50 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8013b2a:	687b      	ldr	r3, [r7, #4]
 8013b2c:	2220      	movs	r2, #32
 8013b2e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8013b32:	687b      	ldr	r3, [r7, #4]
 8013b34:	2220      	movs	r2, #32
 8013b36:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	2200      	movs	r2, #0
 8013b3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8013b40:	687b      	ldr	r3, [r7, #4]
 8013b42:	2200      	movs	r2, #0
 8013b44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	2200      	movs	r2, #0
 8013b4a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013b4e:	2300      	movs	r3, #0
}
 8013b50:	4618      	mov	r0, r3
 8013b52:	3758      	adds	r7, #88	; 0x58
 8013b54:	46bd      	mov	sp, r7
 8013b56:	bd80      	pop	{r7, pc}

08013b58 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8013b58:	b580      	push	{r7, lr}
 8013b5a:	b084      	sub	sp, #16
 8013b5c:	af00      	add	r7, sp, #0
 8013b5e:	60f8      	str	r0, [r7, #12]
 8013b60:	60b9      	str	r1, [r7, #8]
 8013b62:	603b      	str	r3, [r7, #0]
 8013b64:	4613      	mov	r3, r2
 8013b66:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013b68:	e049      	b.n	8013bfe <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8013b6a:	69bb      	ldr	r3, [r7, #24]
 8013b6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013b70:	d045      	beq.n	8013bfe <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8013b72:	f7fb f91b 	bl	800edac <HAL_GetTick>
 8013b76:	4602      	mov	r2, r0
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	69ba      	ldr	r2, [r7, #24]
 8013b7e:	429a      	cmp	r2, r3
 8013b80:	d302      	bcc.n	8013b88 <UART_WaitOnFlagUntilTimeout+0x30>
 8013b82:	69bb      	ldr	r3, [r7, #24]
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d101      	bne.n	8013b8c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8013b88:	2303      	movs	r3, #3
 8013b8a:	e048      	b.n	8013c1e <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8013b8c:	68fb      	ldr	r3, [r7, #12]
 8013b8e:	681b      	ldr	r3, [r3, #0]
 8013b90:	681b      	ldr	r3, [r3, #0]
 8013b92:	f003 0304 	and.w	r3, r3, #4
 8013b96:	2b00      	cmp	r3, #0
 8013b98:	d031      	beq.n	8013bfe <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	681b      	ldr	r3, [r3, #0]
 8013b9e:	69db      	ldr	r3, [r3, #28]
 8013ba0:	f003 0308 	and.w	r3, r3, #8
 8013ba4:	2b08      	cmp	r3, #8
 8013ba6:	d110      	bne.n	8013bca <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	2208      	movs	r2, #8
 8013bae:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8013bb0:	68f8      	ldr	r0, [r7, #12]
 8013bb2:	f000 f839 	bl	8013c28 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8013bb6:	68fb      	ldr	r3, [r7, #12]
 8013bb8:	2208      	movs	r2, #8
 8013bba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8013bbe:	68fb      	ldr	r3, [r7, #12]
 8013bc0:	2200      	movs	r2, #0
 8013bc2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8013bc6:	2301      	movs	r3, #1
 8013bc8:	e029      	b.n	8013c1e <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8013bca:	68fb      	ldr	r3, [r7, #12]
 8013bcc:	681b      	ldr	r3, [r3, #0]
 8013bce:	69db      	ldr	r3, [r3, #28]
 8013bd0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8013bd4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8013bd8:	d111      	bne.n	8013bfe <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8013be2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8013be4:	68f8      	ldr	r0, [r7, #12]
 8013be6:	f000 f81f 	bl	8013c28 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8013bea:	68fb      	ldr	r3, [r7, #12]
 8013bec:	2220      	movs	r2, #32
 8013bee:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8013bf2:	68fb      	ldr	r3, [r7, #12]
 8013bf4:	2200      	movs	r2, #0
 8013bf6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8013bfa:	2303      	movs	r3, #3
 8013bfc:	e00f      	b.n	8013c1e <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	681b      	ldr	r3, [r3, #0]
 8013c02:	69da      	ldr	r2, [r3, #28]
 8013c04:	68bb      	ldr	r3, [r7, #8]
 8013c06:	4013      	ands	r3, r2
 8013c08:	68ba      	ldr	r2, [r7, #8]
 8013c0a:	429a      	cmp	r2, r3
 8013c0c:	bf0c      	ite	eq
 8013c0e:	2301      	moveq	r3, #1
 8013c10:	2300      	movne	r3, #0
 8013c12:	b2db      	uxtb	r3, r3
 8013c14:	461a      	mov	r2, r3
 8013c16:	79fb      	ldrb	r3, [r7, #7]
 8013c18:	429a      	cmp	r2, r3
 8013c1a:	d0a6      	beq.n	8013b6a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8013c1c:	2300      	movs	r3, #0
}
 8013c1e:	4618      	mov	r0, r3
 8013c20:	3710      	adds	r7, #16
 8013c22:	46bd      	mov	sp, r7
 8013c24:	bd80      	pop	{r7, pc}
	...

08013c28 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8013c28:	b480      	push	{r7}
 8013c2a:	b095      	sub	sp, #84	; 0x54
 8013c2c:	af00      	add	r7, sp, #0
 8013c2e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8013c30:	687b      	ldr	r3, [r7, #4]
 8013c32:	681b      	ldr	r3, [r3, #0]
 8013c34:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8013c38:	e853 3f00 	ldrex	r3, [r3]
 8013c3c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8013c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013c40:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8013c44:	64fb      	str	r3, [r7, #76]	; 0x4c
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	681b      	ldr	r3, [r3, #0]
 8013c4a:	461a      	mov	r2, r3
 8013c4c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013c4e:	643b      	str	r3, [r7, #64]	; 0x40
 8013c50:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8013c54:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8013c56:	e841 2300 	strex	r3, r2, [r1]
 8013c5a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8013c5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013c5e:	2b00      	cmp	r3, #0
 8013c60:	d1e6      	bne.n	8013c30 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8013c62:	687b      	ldr	r3, [r7, #4]
 8013c64:	681b      	ldr	r3, [r3, #0]
 8013c66:	3308      	adds	r3, #8
 8013c68:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013c6a:	6a3b      	ldr	r3, [r7, #32]
 8013c6c:	e853 3f00 	ldrex	r3, [r3]
 8013c70:	61fb      	str	r3, [r7, #28]
   return(result);
 8013c72:	69fa      	ldr	r2, [r7, #28]
 8013c74:	4b1e      	ldr	r3, [pc, #120]	; (8013cf0 <UART_EndRxTransfer+0xc8>)
 8013c76:	4013      	ands	r3, r2
 8013c78:	64bb      	str	r3, [r7, #72]	; 0x48
 8013c7a:	687b      	ldr	r3, [r7, #4]
 8013c7c:	681b      	ldr	r3, [r3, #0]
 8013c7e:	3308      	adds	r3, #8
 8013c80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8013c82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8013c84:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013c86:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8013c88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8013c8a:	e841 2300 	strex	r3, r2, [r1]
 8013c8e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8013c90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013c92:	2b00      	cmp	r3, #0
 8013c94:	d1e5      	bne.n	8013c62 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013c9a:	2b01      	cmp	r3, #1
 8013c9c:	d118      	bne.n	8013cd0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013c9e:	687b      	ldr	r3, [r7, #4]
 8013ca0:	681b      	ldr	r3, [r3, #0]
 8013ca2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8013ca4:	68fb      	ldr	r3, [r7, #12]
 8013ca6:	e853 3f00 	ldrex	r3, [r3]
 8013caa:	60bb      	str	r3, [r7, #8]
   return(result);
 8013cac:	68bb      	ldr	r3, [r7, #8]
 8013cae:	f023 0310 	bic.w	r3, r3, #16
 8013cb2:	647b      	str	r3, [r7, #68]	; 0x44
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	681b      	ldr	r3, [r3, #0]
 8013cb8:	461a      	mov	r2, r3
 8013cba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8013cbc:	61bb      	str	r3, [r7, #24]
 8013cbe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8013cc0:	6979      	ldr	r1, [r7, #20]
 8013cc2:	69ba      	ldr	r2, [r7, #24]
 8013cc4:	e841 2300 	strex	r3, r2, [r1]
 8013cc8:	613b      	str	r3, [r7, #16]
   return(result);
 8013cca:	693b      	ldr	r3, [r7, #16]
 8013ccc:	2b00      	cmp	r3, #0
 8013cce:	d1e6      	bne.n	8013c9e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8013cd0:	687b      	ldr	r3, [r7, #4]
 8013cd2:	2220      	movs	r2, #32
 8013cd4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013cd8:	687b      	ldr	r3, [r7, #4]
 8013cda:	2200      	movs	r2, #0
 8013cdc:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	2200      	movs	r2, #0
 8013ce2:	675a      	str	r2, [r3, #116]	; 0x74
}
 8013ce4:	bf00      	nop
 8013ce6:	3754      	adds	r7, #84	; 0x54
 8013ce8:	46bd      	mov	sp, r7
 8013cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cee:	4770      	bx	lr
 8013cf0:	effffffe 	.word	0xeffffffe

08013cf4 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8013cf4:	b480      	push	{r7}
 8013cf6:	b085      	sub	sp, #20
 8013cf8:	af00      	add	r7, sp, #0
 8013cfa:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013cfc:	687b      	ldr	r3, [r7, #4]
 8013cfe:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013d02:	2b01      	cmp	r3, #1
 8013d04:	d101      	bne.n	8013d0a <HAL_UARTEx_DisableFifoMode+0x16>
 8013d06:	2302      	movs	r3, #2
 8013d08:	e027      	b.n	8013d5a <HAL_UARTEx_DisableFifoMode+0x66>
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	2201      	movs	r2, #1
 8013d0e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013d12:	687b      	ldr	r3, [r7, #4]
 8013d14:	2224      	movs	r2, #36	; 0x24
 8013d16:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013d1a:	687b      	ldr	r3, [r7, #4]
 8013d1c:	681b      	ldr	r3, [r3, #0]
 8013d1e:	681b      	ldr	r3, [r3, #0]
 8013d20:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	681a      	ldr	r2, [r3, #0]
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	f022 0201 	bic.w	r2, r2, #1
 8013d30:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8013d38:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8013d3a:	687b      	ldr	r3, [r7, #4]
 8013d3c:	2200      	movs	r2, #0
 8013d3e:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	68fa      	ldr	r2, [r7, #12]
 8013d46:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013d48:	687b      	ldr	r3, [r7, #4]
 8013d4a:	2220      	movs	r2, #32
 8013d4c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013d50:	687b      	ldr	r3, [r7, #4]
 8013d52:	2200      	movs	r2, #0
 8013d54:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013d58:	2300      	movs	r3, #0
}
 8013d5a:	4618      	mov	r0, r3
 8013d5c:	3714      	adds	r7, #20
 8013d5e:	46bd      	mov	sp, r7
 8013d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013d64:	4770      	bx	lr

08013d66 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013d66:	b580      	push	{r7, lr}
 8013d68:	b084      	sub	sp, #16
 8013d6a:	af00      	add	r7, sp, #0
 8013d6c:	6078      	str	r0, [r7, #4]
 8013d6e:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013d76:	2b01      	cmp	r3, #1
 8013d78:	d101      	bne.n	8013d7e <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8013d7a:	2302      	movs	r3, #2
 8013d7c:	e02d      	b.n	8013dda <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8013d7e:	687b      	ldr	r3, [r7, #4]
 8013d80:	2201      	movs	r2, #1
 8013d82:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013d86:	687b      	ldr	r3, [r7, #4]
 8013d88:	2224      	movs	r2, #36	; 0x24
 8013d8a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013d8e:	687b      	ldr	r3, [r7, #4]
 8013d90:	681b      	ldr	r3, [r3, #0]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	681a      	ldr	r2, [r3, #0]
 8013d9c:	687b      	ldr	r3, [r7, #4]
 8013d9e:	681b      	ldr	r3, [r3, #0]
 8013da0:	f022 0201 	bic.w	r2, r2, #1
 8013da4:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	689b      	ldr	r3, [r3, #8]
 8013dac:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	683a      	ldr	r2, [r7, #0]
 8013db6:	430a      	orrs	r2, r1
 8013db8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013dba:	6878      	ldr	r0, [r7, #4]
 8013dbc:	f000 f850 	bl	8013e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013dc0:	687b      	ldr	r3, [r7, #4]
 8013dc2:	681b      	ldr	r3, [r3, #0]
 8013dc4:	68fa      	ldr	r2, [r7, #12]
 8013dc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	2220      	movs	r2, #32
 8013dcc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013dd0:	687b      	ldr	r3, [r7, #4]
 8013dd2:	2200      	movs	r2, #0
 8013dd4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013dd8:	2300      	movs	r3, #0
}
 8013dda:	4618      	mov	r0, r3
 8013ddc:	3710      	adds	r7, #16
 8013dde:	46bd      	mov	sp, r7
 8013de0:	bd80      	pop	{r7, pc}

08013de2 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8013de2:	b580      	push	{r7, lr}
 8013de4:	b084      	sub	sp, #16
 8013de6:	af00      	add	r7, sp, #0
 8013de8:	6078      	str	r0, [r7, #4]
 8013dea:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8013df2:	2b01      	cmp	r3, #1
 8013df4:	d101      	bne.n	8013dfa <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8013df6:	2302      	movs	r3, #2
 8013df8:	e02d      	b.n	8013e56 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8013dfa:	687b      	ldr	r3, [r7, #4]
 8013dfc:	2201      	movs	r2, #1
 8013dfe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8013e02:	687b      	ldr	r3, [r7, #4]
 8013e04:	2224      	movs	r2, #36	; 0x24
 8013e06:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8013e12:	687b      	ldr	r3, [r7, #4]
 8013e14:	681b      	ldr	r3, [r3, #0]
 8013e16:	681a      	ldr	r2, [r3, #0]
 8013e18:	687b      	ldr	r3, [r7, #4]
 8013e1a:	681b      	ldr	r3, [r3, #0]
 8013e1c:	f022 0201 	bic.w	r2, r2, #1
 8013e20:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	689b      	ldr	r3, [r3, #8]
 8013e28:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	681b      	ldr	r3, [r3, #0]
 8013e30:	683a      	ldr	r2, [r7, #0]
 8013e32:	430a      	orrs	r2, r1
 8013e34:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8013e36:	6878      	ldr	r0, [r7, #4]
 8013e38:	f000 f812 	bl	8013e60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	68fa      	ldr	r2, [r7, #12]
 8013e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2220      	movs	r2, #32
 8013e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	2200      	movs	r2, #0
 8013e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8013e54:	2300      	movs	r3, #0
}
 8013e56:	4618      	mov	r0, r3
 8013e58:	3710      	adds	r7, #16
 8013e5a:	46bd      	mov	sp, r7
 8013e5c:	bd80      	pop	{r7, pc}
	...

08013e60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8013e60:	b480      	push	{r7}
 8013e62:	b085      	sub	sp, #20
 8013e64:	af00      	add	r7, sp, #0
 8013e66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8013e68:	687b      	ldr	r3, [r7, #4]
 8013e6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8013e6c:	2b00      	cmp	r3, #0
 8013e6e:	d108      	bne.n	8013e82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	2201      	movs	r2, #1
 8013e74:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	2201      	movs	r2, #1
 8013e7c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8013e80:	e031      	b.n	8013ee6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8013e82:	2310      	movs	r3, #16
 8013e84:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8013e86:	2310      	movs	r3, #16
 8013e88:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8013e8a:	687b      	ldr	r3, [r7, #4]
 8013e8c:	681b      	ldr	r3, [r3, #0]
 8013e8e:	689b      	ldr	r3, [r3, #8]
 8013e90:	0e5b      	lsrs	r3, r3, #25
 8013e92:	b2db      	uxtb	r3, r3
 8013e94:	f003 0307 	and.w	r3, r3, #7
 8013e98:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	681b      	ldr	r3, [r3, #0]
 8013e9e:	689b      	ldr	r3, [r3, #8]
 8013ea0:	0f5b      	lsrs	r3, r3, #29
 8013ea2:	b2db      	uxtb	r3, r3
 8013ea4:	f003 0307 	and.w	r3, r3, #7
 8013ea8:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013eaa:	7bbb      	ldrb	r3, [r7, #14]
 8013eac:	7b3a      	ldrb	r2, [r7, #12]
 8013eae:	4911      	ldr	r1, [pc, #68]	; (8013ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8013eb0:	5c8a      	ldrb	r2, [r1, r2]
 8013eb2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8013eb6:	7b3a      	ldrb	r2, [r7, #12]
 8013eb8:	490f      	ldr	r1, [pc, #60]	; (8013ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8013eba:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8013ebc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ec0:	b29a      	uxth	r2, r3
 8013ec2:	687b      	ldr	r3, [r7, #4]
 8013ec4:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013ec8:	7bfb      	ldrb	r3, [r7, #15]
 8013eca:	7b7a      	ldrb	r2, [r7, #13]
 8013ecc:	4909      	ldr	r1, [pc, #36]	; (8013ef4 <UARTEx_SetNbDataToProcess+0x94>)
 8013ece:	5c8a      	ldrb	r2, [r1, r2]
 8013ed0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8013ed4:	7b7a      	ldrb	r2, [r7, #13]
 8013ed6:	4908      	ldr	r1, [pc, #32]	; (8013ef8 <UARTEx_SetNbDataToProcess+0x98>)
 8013ed8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8013eda:	fb93 f3f2 	sdiv	r3, r3, r2
 8013ede:	b29a      	uxth	r2, r3
 8013ee0:	687b      	ldr	r3, [r7, #4]
 8013ee2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8013ee6:	bf00      	nop
 8013ee8:	3714      	adds	r7, #20
 8013eea:	46bd      	mov	sp, r7
 8013eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ef0:	4770      	bx	lr
 8013ef2:	bf00      	nop
 8013ef4:	08018178 	.word	0x08018178
 8013ef8:	08018180 	.word	0x08018180

08013efc <__assert_func>:
 8013efc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013efe:	4614      	mov	r4, r2
 8013f00:	461a      	mov	r2, r3
 8013f02:	4b09      	ldr	r3, [pc, #36]	; (8013f28 <__assert_func+0x2c>)
 8013f04:	681b      	ldr	r3, [r3, #0]
 8013f06:	4605      	mov	r5, r0
 8013f08:	68d8      	ldr	r0, [r3, #12]
 8013f0a:	b14c      	cbz	r4, 8013f20 <__assert_func+0x24>
 8013f0c:	4b07      	ldr	r3, [pc, #28]	; (8013f2c <__assert_func+0x30>)
 8013f0e:	9100      	str	r1, [sp, #0]
 8013f10:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8013f14:	4906      	ldr	r1, [pc, #24]	; (8013f30 <__assert_func+0x34>)
 8013f16:	462b      	mov	r3, r5
 8013f18:	f000 fa76 	bl	8014408 <fiprintf>
 8013f1c:	f000 fd00 	bl	8014920 <abort>
 8013f20:	4b04      	ldr	r3, [pc, #16]	; (8013f34 <__assert_func+0x38>)
 8013f22:	461c      	mov	r4, r3
 8013f24:	e7f3      	b.n	8013f0e <__assert_func+0x12>
 8013f26:	bf00      	nop
 8013f28:	24000310 	.word	0x24000310
 8013f2c:	08018188 	.word	0x08018188
 8013f30:	08018195 	.word	0x08018195
 8013f34:	080181c3 	.word	0x080181c3

08013f38 <atoi>:
 8013f38:	220a      	movs	r2, #10
 8013f3a:	2100      	movs	r1, #0
 8013f3c:	f000 b9c8 	b.w	80142d0 <strtol>

08013f40 <calloc>:
 8013f40:	4b02      	ldr	r3, [pc, #8]	; (8013f4c <calloc+0xc>)
 8013f42:	460a      	mov	r2, r1
 8013f44:	4601      	mov	r1, r0
 8013f46:	6818      	ldr	r0, [r3, #0]
 8013f48:	f000 b802 	b.w	8013f50 <_calloc_r>
 8013f4c:	24000310 	.word	0x24000310

08013f50 <_calloc_r>:
 8013f50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8013f52:	fba1 2402 	umull	r2, r4, r1, r2
 8013f56:	b94c      	cbnz	r4, 8013f6c <_calloc_r+0x1c>
 8013f58:	4611      	mov	r1, r2
 8013f5a:	9201      	str	r2, [sp, #4]
 8013f5c:	f000 f83e 	bl	8013fdc <_malloc_r>
 8013f60:	9a01      	ldr	r2, [sp, #4]
 8013f62:	4605      	mov	r5, r0
 8013f64:	b930      	cbnz	r0, 8013f74 <_calloc_r+0x24>
 8013f66:	4628      	mov	r0, r5
 8013f68:	b003      	add	sp, #12
 8013f6a:	bd30      	pop	{r4, r5, pc}
 8013f6c:	220c      	movs	r2, #12
 8013f6e:	6002      	str	r2, [r0, #0]
 8013f70:	2500      	movs	r5, #0
 8013f72:	e7f8      	b.n	8013f66 <_calloc_r+0x16>
 8013f74:	4621      	mov	r1, r4
 8013f76:	f000 fbdd 	bl	8014734 <memset>
 8013f7a:	e7f4      	b.n	8013f66 <_calloc_r+0x16>

08013f7c <malloc>:
 8013f7c:	4b02      	ldr	r3, [pc, #8]	; (8013f88 <malloc+0xc>)
 8013f7e:	4601      	mov	r1, r0
 8013f80:	6818      	ldr	r0, [r3, #0]
 8013f82:	f000 b82b 	b.w	8013fdc <_malloc_r>
 8013f86:	bf00      	nop
 8013f88:	24000310 	.word	0x24000310

08013f8c <free>:
 8013f8c:	4b02      	ldr	r3, [pc, #8]	; (8013f98 <free+0xc>)
 8013f8e:	4601      	mov	r1, r0
 8013f90:	6818      	ldr	r0, [r3, #0]
 8013f92:	f000 bccd 	b.w	8014930 <_free_r>
 8013f96:	bf00      	nop
 8013f98:	24000310 	.word	0x24000310

08013f9c <sbrk_aligned>:
 8013f9c:	b570      	push	{r4, r5, r6, lr}
 8013f9e:	4e0e      	ldr	r6, [pc, #56]	; (8013fd8 <sbrk_aligned+0x3c>)
 8013fa0:	460c      	mov	r4, r1
 8013fa2:	6831      	ldr	r1, [r6, #0]
 8013fa4:	4605      	mov	r5, r0
 8013fa6:	b911      	cbnz	r1, 8013fae <sbrk_aligned+0x12>
 8013fa8:	f000 fc56 	bl	8014858 <_sbrk_r>
 8013fac:	6030      	str	r0, [r6, #0]
 8013fae:	4621      	mov	r1, r4
 8013fb0:	4628      	mov	r0, r5
 8013fb2:	f000 fc51 	bl	8014858 <_sbrk_r>
 8013fb6:	1c43      	adds	r3, r0, #1
 8013fb8:	d00a      	beq.n	8013fd0 <sbrk_aligned+0x34>
 8013fba:	1cc4      	adds	r4, r0, #3
 8013fbc:	f024 0403 	bic.w	r4, r4, #3
 8013fc0:	42a0      	cmp	r0, r4
 8013fc2:	d007      	beq.n	8013fd4 <sbrk_aligned+0x38>
 8013fc4:	1a21      	subs	r1, r4, r0
 8013fc6:	4628      	mov	r0, r5
 8013fc8:	f000 fc46 	bl	8014858 <_sbrk_r>
 8013fcc:	3001      	adds	r0, #1
 8013fce:	d101      	bne.n	8013fd4 <sbrk_aligned+0x38>
 8013fd0:	f04f 34ff 	mov.w	r4, #4294967295
 8013fd4:	4620      	mov	r0, r4
 8013fd6:	bd70      	pop	{r4, r5, r6, pc}
 8013fd8:	24003654 	.word	0x24003654

08013fdc <_malloc_r>:
 8013fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013fe0:	1ccd      	adds	r5, r1, #3
 8013fe2:	f025 0503 	bic.w	r5, r5, #3
 8013fe6:	3508      	adds	r5, #8
 8013fe8:	2d0c      	cmp	r5, #12
 8013fea:	bf38      	it	cc
 8013fec:	250c      	movcc	r5, #12
 8013fee:	2d00      	cmp	r5, #0
 8013ff0:	4607      	mov	r7, r0
 8013ff2:	db01      	blt.n	8013ff8 <_malloc_r+0x1c>
 8013ff4:	42a9      	cmp	r1, r5
 8013ff6:	d905      	bls.n	8014004 <_malloc_r+0x28>
 8013ff8:	230c      	movs	r3, #12
 8013ffa:	603b      	str	r3, [r7, #0]
 8013ffc:	2600      	movs	r6, #0
 8013ffe:	4630      	mov	r0, r6
 8014000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8014004:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80140d8 <_malloc_r+0xfc>
 8014008:	f000 f868 	bl	80140dc <__malloc_lock>
 801400c:	f8d8 3000 	ldr.w	r3, [r8]
 8014010:	461c      	mov	r4, r3
 8014012:	bb5c      	cbnz	r4, 801406c <_malloc_r+0x90>
 8014014:	4629      	mov	r1, r5
 8014016:	4638      	mov	r0, r7
 8014018:	f7ff ffc0 	bl	8013f9c <sbrk_aligned>
 801401c:	1c43      	adds	r3, r0, #1
 801401e:	4604      	mov	r4, r0
 8014020:	d155      	bne.n	80140ce <_malloc_r+0xf2>
 8014022:	f8d8 4000 	ldr.w	r4, [r8]
 8014026:	4626      	mov	r6, r4
 8014028:	2e00      	cmp	r6, #0
 801402a:	d145      	bne.n	80140b8 <_malloc_r+0xdc>
 801402c:	2c00      	cmp	r4, #0
 801402e:	d048      	beq.n	80140c2 <_malloc_r+0xe6>
 8014030:	6823      	ldr	r3, [r4, #0]
 8014032:	4631      	mov	r1, r6
 8014034:	4638      	mov	r0, r7
 8014036:	eb04 0903 	add.w	r9, r4, r3
 801403a:	f000 fc0d 	bl	8014858 <_sbrk_r>
 801403e:	4581      	cmp	r9, r0
 8014040:	d13f      	bne.n	80140c2 <_malloc_r+0xe6>
 8014042:	6821      	ldr	r1, [r4, #0]
 8014044:	1a6d      	subs	r5, r5, r1
 8014046:	4629      	mov	r1, r5
 8014048:	4638      	mov	r0, r7
 801404a:	f7ff ffa7 	bl	8013f9c <sbrk_aligned>
 801404e:	3001      	adds	r0, #1
 8014050:	d037      	beq.n	80140c2 <_malloc_r+0xe6>
 8014052:	6823      	ldr	r3, [r4, #0]
 8014054:	442b      	add	r3, r5
 8014056:	6023      	str	r3, [r4, #0]
 8014058:	f8d8 3000 	ldr.w	r3, [r8]
 801405c:	2b00      	cmp	r3, #0
 801405e:	d038      	beq.n	80140d2 <_malloc_r+0xf6>
 8014060:	685a      	ldr	r2, [r3, #4]
 8014062:	42a2      	cmp	r2, r4
 8014064:	d12b      	bne.n	80140be <_malloc_r+0xe2>
 8014066:	2200      	movs	r2, #0
 8014068:	605a      	str	r2, [r3, #4]
 801406a:	e00f      	b.n	801408c <_malloc_r+0xb0>
 801406c:	6822      	ldr	r2, [r4, #0]
 801406e:	1b52      	subs	r2, r2, r5
 8014070:	d41f      	bmi.n	80140b2 <_malloc_r+0xd6>
 8014072:	2a0b      	cmp	r2, #11
 8014074:	d917      	bls.n	80140a6 <_malloc_r+0xca>
 8014076:	1961      	adds	r1, r4, r5
 8014078:	42a3      	cmp	r3, r4
 801407a:	6025      	str	r5, [r4, #0]
 801407c:	bf18      	it	ne
 801407e:	6059      	strne	r1, [r3, #4]
 8014080:	6863      	ldr	r3, [r4, #4]
 8014082:	bf08      	it	eq
 8014084:	f8c8 1000 	streq.w	r1, [r8]
 8014088:	5162      	str	r2, [r4, r5]
 801408a:	604b      	str	r3, [r1, #4]
 801408c:	4638      	mov	r0, r7
 801408e:	f104 060b 	add.w	r6, r4, #11
 8014092:	f000 f829 	bl	80140e8 <__malloc_unlock>
 8014096:	f026 0607 	bic.w	r6, r6, #7
 801409a:	1d23      	adds	r3, r4, #4
 801409c:	1af2      	subs	r2, r6, r3
 801409e:	d0ae      	beq.n	8013ffe <_malloc_r+0x22>
 80140a0:	1b9b      	subs	r3, r3, r6
 80140a2:	50a3      	str	r3, [r4, r2]
 80140a4:	e7ab      	b.n	8013ffe <_malloc_r+0x22>
 80140a6:	42a3      	cmp	r3, r4
 80140a8:	6862      	ldr	r2, [r4, #4]
 80140aa:	d1dd      	bne.n	8014068 <_malloc_r+0x8c>
 80140ac:	f8c8 2000 	str.w	r2, [r8]
 80140b0:	e7ec      	b.n	801408c <_malloc_r+0xb0>
 80140b2:	4623      	mov	r3, r4
 80140b4:	6864      	ldr	r4, [r4, #4]
 80140b6:	e7ac      	b.n	8014012 <_malloc_r+0x36>
 80140b8:	4634      	mov	r4, r6
 80140ba:	6876      	ldr	r6, [r6, #4]
 80140bc:	e7b4      	b.n	8014028 <_malloc_r+0x4c>
 80140be:	4613      	mov	r3, r2
 80140c0:	e7cc      	b.n	801405c <_malloc_r+0x80>
 80140c2:	230c      	movs	r3, #12
 80140c4:	603b      	str	r3, [r7, #0]
 80140c6:	4638      	mov	r0, r7
 80140c8:	f000 f80e 	bl	80140e8 <__malloc_unlock>
 80140cc:	e797      	b.n	8013ffe <_malloc_r+0x22>
 80140ce:	6025      	str	r5, [r4, #0]
 80140d0:	e7dc      	b.n	801408c <_malloc_r+0xb0>
 80140d2:	605b      	str	r3, [r3, #4]
 80140d4:	deff      	udf	#255	; 0xff
 80140d6:	bf00      	nop
 80140d8:	24003650 	.word	0x24003650

080140dc <__malloc_lock>:
 80140dc:	4801      	ldr	r0, [pc, #4]	; (80140e4 <__malloc_lock+0x8>)
 80140de:	f000 bc07 	b.w	80148f0 <__retarget_lock_acquire_recursive>
 80140e2:	bf00      	nop
 80140e4:	24003798 	.word	0x24003798

080140e8 <__malloc_unlock>:
 80140e8:	4801      	ldr	r0, [pc, #4]	; (80140f0 <__malloc_unlock+0x8>)
 80140ea:	f000 bc02 	b.w	80148f2 <__retarget_lock_release_recursive>
 80140ee:	bf00      	nop
 80140f0:	24003798 	.word	0x24003798

080140f4 <srand>:
 80140f4:	b538      	push	{r3, r4, r5, lr}
 80140f6:	4b10      	ldr	r3, [pc, #64]	; (8014138 <srand+0x44>)
 80140f8:	681d      	ldr	r5, [r3, #0]
 80140fa:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 80140fc:	4604      	mov	r4, r0
 80140fe:	b9b3      	cbnz	r3, 801412e <srand+0x3a>
 8014100:	2018      	movs	r0, #24
 8014102:	f7ff ff3b 	bl	8013f7c <malloc>
 8014106:	4602      	mov	r2, r0
 8014108:	6328      	str	r0, [r5, #48]	; 0x30
 801410a:	b920      	cbnz	r0, 8014116 <srand+0x22>
 801410c:	4b0b      	ldr	r3, [pc, #44]	; (801413c <srand+0x48>)
 801410e:	480c      	ldr	r0, [pc, #48]	; (8014140 <srand+0x4c>)
 8014110:	2146      	movs	r1, #70	; 0x46
 8014112:	f7ff fef3 	bl	8013efc <__assert_func>
 8014116:	490b      	ldr	r1, [pc, #44]	; (8014144 <srand+0x50>)
 8014118:	4b0b      	ldr	r3, [pc, #44]	; (8014148 <srand+0x54>)
 801411a:	e9c0 1300 	strd	r1, r3, [r0]
 801411e:	4b0b      	ldr	r3, [pc, #44]	; (801414c <srand+0x58>)
 8014120:	6083      	str	r3, [r0, #8]
 8014122:	230b      	movs	r3, #11
 8014124:	8183      	strh	r3, [r0, #12]
 8014126:	2100      	movs	r1, #0
 8014128:	2001      	movs	r0, #1
 801412a:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801412e:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8014130:	2200      	movs	r2, #0
 8014132:	611c      	str	r4, [r3, #16]
 8014134:	615a      	str	r2, [r3, #20]
 8014136:	bd38      	pop	{r3, r4, r5, pc}
 8014138:	24000310 	.word	0x24000310
 801413c:	080181c4 	.word	0x080181c4
 8014140:	080181db 	.word	0x080181db
 8014144:	abcd330e 	.word	0xabcd330e
 8014148:	e66d1234 	.word	0xe66d1234
 801414c:	0005deec 	.word	0x0005deec

08014150 <rand>:
 8014150:	4b16      	ldr	r3, [pc, #88]	; (80141ac <rand+0x5c>)
 8014152:	b510      	push	{r4, lr}
 8014154:	681c      	ldr	r4, [r3, #0]
 8014156:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8014158:	b9b3      	cbnz	r3, 8014188 <rand+0x38>
 801415a:	2018      	movs	r0, #24
 801415c:	f7ff ff0e 	bl	8013f7c <malloc>
 8014160:	4602      	mov	r2, r0
 8014162:	6320      	str	r0, [r4, #48]	; 0x30
 8014164:	b920      	cbnz	r0, 8014170 <rand+0x20>
 8014166:	4b12      	ldr	r3, [pc, #72]	; (80141b0 <rand+0x60>)
 8014168:	4812      	ldr	r0, [pc, #72]	; (80141b4 <rand+0x64>)
 801416a:	2152      	movs	r1, #82	; 0x52
 801416c:	f7ff fec6 	bl	8013efc <__assert_func>
 8014170:	4911      	ldr	r1, [pc, #68]	; (80141b8 <rand+0x68>)
 8014172:	4b12      	ldr	r3, [pc, #72]	; (80141bc <rand+0x6c>)
 8014174:	e9c0 1300 	strd	r1, r3, [r0]
 8014178:	4b11      	ldr	r3, [pc, #68]	; (80141c0 <rand+0x70>)
 801417a:	6083      	str	r3, [r0, #8]
 801417c:	230b      	movs	r3, #11
 801417e:	8183      	strh	r3, [r0, #12]
 8014180:	2100      	movs	r1, #0
 8014182:	2001      	movs	r0, #1
 8014184:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8014188:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801418a:	480e      	ldr	r0, [pc, #56]	; (80141c4 <rand+0x74>)
 801418c:	690b      	ldr	r3, [r1, #16]
 801418e:	694c      	ldr	r4, [r1, #20]
 8014190:	4a0d      	ldr	r2, [pc, #52]	; (80141c8 <rand+0x78>)
 8014192:	4358      	muls	r0, r3
 8014194:	fb02 0004 	mla	r0, r2, r4, r0
 8014198:	fba3 3202 	umull	r3, r2, r3, r2
 801419c:	3301      	adds	r3, #1
 801419e:	eb40 0002 	adc.w	r0, r0, r2
 80141a2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80141a6:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80141aa:	bd10      	pop	{r4, pc}
 80141ac:	24000310 	.word	0x24000310
 80141b0:	080181c4 	.word	0x080181c4
 80141b4:	080181db 	.word	0x080181db
 80141b8:	abcd330e 	.word	0xabcd330e
 80141bc:	e66d1234 	.word	0xe66d1234
 80141c0:	0005deec 	.word	0x0005deec
 80141c4:	5851f42d 	.word	0x5851f42d
 80141c8:	4c957f2d 	.word	0x4c957f2d

080141cc <_strtol_l.constprop.0>:
 80141cc:	2b01      	cmp	r3, #1
 80141ce:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141d2:	d001      	beq.n	80141d8 <_strtol_l.constprop.0+0xc>
 80141d4:	2b24      	cmp	r3, #36	; 0x24
 80141d6:	d906      	bls.n	80141e6 <_strtol_l.constprop.0+0x1a>
 80141d8:	f000 fb60 	bl	801489c <__errno>
 80141dc:	2316      	movs	r3, #22
 80141de:	6003      	str	r3, [r0, #0]
 80141e0:	2000      	movs	r0, #0
 80141e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80141e6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80142cc <_strtol_l.constprop.0+0x100>
 80141ea:	460d      	mov	r5, r1
 80141ec:	462e      	mov	r6, r5
 80141ee:	f815 4b01 	ldrb.w	r4, [r5], #1
 80141f2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 80141f6:	f017 0708 	ands.w	r7, r7, #8
 80141fa:	d1f7      	bne.n	80141ec <_strtol_l.constprop.0+0x20>
 80141fc:	2c2d      	cmp	r4, #45	; 0x2d
 80141fe:	d132      	bne.n	8014266 <_strtol_l.constprop.0+0x9a>
 8014200:	782c      	ldrb	r4, [r5, #0]
 8014202:	2701      	movs	r7, #1
 8014204:	1cb5      	adds	r5, r6, #2
 8014206:	2b00      	cmp	r3, #0
 8014208:	d05b      	beq.n	80142c2 <_strtol_l.constprop.0+0xf6>
 801420a:	2b10      	cmp	r3, #16
 801420c:	d109      	bne.n	8014222 <_strtol_l.constprop.0+0x56>
 801420e:	2c30      	cmp	r4, #48	; 0x30
 8014210:	d107      	bne.n	8014222 <_strtol_l.constprop.0+0x56>
 8014212:	782c      	ldrb	r4, [r5, #0]
 8014214:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8014218:	2c58      	cmp	r4, #88	; 0x58
 801421a:	d14d      	bne.n	80142b8 <_strtol_l.constprop.0+0xec>
 801421c:	786c      	ldrb	r4, [r5, #1]
 801421e:	2310      	movs	r3, #16
 8014220:	3502      	adds	r5, #2
 8014222:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8014226:	f108 38ff 	add.w	r8, r8, #4294967295
 801422a:	f04f 0e00 	mov.w	lr, #0
 801422e:	fbb8 f9f3 	udiv	r9, r8, r3
 8014232:	4676      	mov	r6, lr
 8014234:	fb03 8a19 	mls	sl, r3, r9, r8
 8014238:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 801423c:	f1bc 0f09 	cmp.w	ip, #9
 8014240:	d816      	bhi.n	8014270 <_strtol_l.constprop.0+0xa4>
 8014242:	4664      	mov	r4, ip
 8014244:	42a3      	cmp	r3, r4
 8014246:	dd24      	ble.n	8014292 <_strtol_l.constprop.0+0xc6>
 8014248:	f1be 3fff 	cmp.w	lr, #4294967295
 801424c:	d008      	beq.n	8014260 <_strtol_l.constprop.0+0x94>
 801424e:	45b1      	cmp	r9, r6
 8014250:	d31c      	bcc.n	801428c <_strtol_l.constprop.0+0xc0>
 8014252:	d101      	bne.n	8014258 <_strtol_l.constprop.0+0x8c>
 8014254:	45a2      	cmp	sl, r4
 8014256:	db19      	blt.n	801428c <_strtol_l.constprop.0+0xc0>
 8014258:	fb06 4603 	mla	r6, r6, r3, r4
 801425c:	f04f 0e01 	mov.w	lr, #1
 8014260:	f815 4b01 	ldrb.w	r4, [r5], #1
 8014264:	e7e8      	b.n	8014238 <_strtol_l.constprop.0+0x6c>
 8014266:	2c2b      	cmp	r4, #43	; 0x2b
 8014268:	bf04      	itt	eq
 801426a:	782c      	ldrbeq	r4, [r5, #0]
 801426c:	1cb5      	addeq	r5, r6, #2
 801426e:	e7ca      	b.n	8014206 <_strtol_l.constprop.0+0x3a>
 8014270:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8014274:	f1bc 0f19 	cmp.w	ip, #25
 8014278:	d801      	bhi.n	801427e <_strtol_l.constprop.0+0xb2>
 801427a:	3c37      	subs	r4, #55	; 0x37
 801427c:	e7e2      	b.n	8014244 <_strtol_l.constprop.0+0x78>
 801427e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8014282:	f1bc 0f19 	cmp.w	ip, #25
 8014286:	d804      	bhi.n	8014292 <_strtol_l.constprop.0+0xc6>
 8014288:	3c57      	subs	r4, #87	; 0x57
 801428a:	e7db      	b.n	8014244 <_strtol_l.constprop.0+0x78>
 801428c:	f04f 3eff 	mov.w	lr, #4294967295
 8014290:	e7e6      	b.n	8014260 <_strtol_l.constprop.0+0x94>
 8014292:	f1be 3fff 	cmp.w	lr, #4294967295
 8014296:	d105      	bne.n	80142a4 <_strtol_l.constprop.0+0xd8>
 8014298:	2322      	movs	r3, #34	; 0x22
 801429a:	6003      	str	r3, [r0, #0]
 801429c:	4646      	mov	r6, r8
 801429e:	b942      	cbnz	r2, 80142b2 <_strtol_l.constprop.0+0xe6>
 80142a0:	4630      	mov	r0, r6
 80142a2:	e79e      	b.n	80141e2 <_strtol_l.constprop.0+0x16>
 80142a4:	b107      	cbz	r7, 80142a8 <_strtol_l.constprop.0+0xdc>
 80142a6:	4276      	negs	r6, r6
 80142a8:	2a00      	cmp	r2, #0
 80142aa:	d0f9      	beq.n	80142a0 <_strtol_l.constprop.0+0xd4>
 80142ac:	f1be 0f00 	cmp.w	lr, #0
 80142b0:	d000      	beq.n	80142b4 <_strtol_l.constprop.0+0xe8>
 80142b2:	1e69      	subs	r1, r5, #1
 80142b4:	6011      	str	r1, [r2, #0]
 80142b6:	e7f3      	b.n	80142a0 <_strtol_l.constprop.0+0xd4>
 80142b8:	2430      	movs	r4, #48	; 0x30
 80142ba:	2b00      	cmp	r3, #0
 80142bc:	d1b1      	bne.n	8014222 <_strtol_l.constprop.0+0x56>
 80142be:	2308      	movs	r3, #8
 80142c0:	e7af      	b.n	8014222 <_strtol_l.constprop.0+0x56>
 80142c2:	2c30      	cmp	r4, #48	; 0x30
 80142c4:	d0a5      	beq.n	8014212 <_strtol_l.constprop.0+0x46>
 80142c6:	230a      	movs	r3, #10
 80142c8:	e7ab      	b.n	8014222 <_strtol_l.constprop.0+0x56>
 80142ca:	bf00      	nop
 80142cc:	08018234 	.word	0x08018234

080142d0 <strtol>:
 80142d0:	4613      	mov	r3, r2
 80142d2:	460a      	mov	r2, r1
 80142d4:	4601      	mov	r1, r0
 80142d6:	4802      	ldr	r0, [pc, #8]	; (80142e0 <strtol+0x10>)
 80142d8:	6800      	ldr	r0, [r0, #0]
 80142da:	f7ff bf77 	b.w	80141cc <_strtol_l.constprop.0>
 80142de:	bf00      	nop
 80142e0:	24000310 	.word	0x24000310

080142e4 <std>:
 80142e4:	2300      	movs	r3, #0
 80142e6:	b510      	push	{r4, lr}
 80142e8:	4604      	mov	r4, r0
 80142ea:	e9c0 3300 	strd	r3, r3, [r0]
 80142ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80142f2:	6083      	str	r3, [r0, #8]
 80142f4:	8181      	strh	r1, [r0, #12]
 80142f6:	6643      	str	r3, [r0, #100]	; 0x64
 80142f8:	81c2      	strh	r2, [r0, #14]
 80142fa:	6183      	str	r3, [r0, #24]
 80142fc:	4619      	mov	r1, r3
 80142fe:	2208      	movs	r2, #8
 8014300:	305c      	adds	r0, #92	; 0x5c
 8014302:	f000 fa17 	bl	8014734 <memset>
 8014306:	4b05      	ldr	r3, [pc, #20]	; (801431c <std+0x38>)
 8014308:	6263      	str	r3, [r4, #36]	; 0x24
 801430a:	4b05      	ldr	r3, [pc, #20]	; (8014320 <std+0x3c>)
 801430c:	62a3      	str	r3, [r4, #40]	; 0x28
 801430e:	4b05      	ldr	r3, [pc, #20]	; (8014324 <std+0x40>)
 8014310:	62e3      	str	r3, [r4, #44]	; 0x2c
 8014312:	4b05      	ldr	r3, [pc, #20]	; (8014328 <std+0x44>)
 8014314:	6224      	str	r4, [r4, #32]
 8014316:	6323      	str	r3, [r4, #48]	; 0x30
 8014318:	bd10      	pop	{r4, pc}
 801431a:	bf00      	nop
 801431c:	08014531 	.word	0x08014531
 8014320:	08014553 	.word	0x08014553
 8014324:	0801458b 	.word	0x0801458b
 8014328:	080145af 	.word	0x080145af

0801432c <stdio_exit_handler>:
 801432c:	4a02      	ldr	r2, [pc, #8]	; (8014338 <stdio_exit_handler+0xc>)
 801432e:	4903      	ldr	r1, [pc, #12]	; (801433c <stdio_exit_handler+0x10>)
 8014330:	4803      	ldr	r0, [pc, #12]	; (8014340 <stdio_exit_handler+0x14>)
 8014332:	f000 b87b 	b.w	801442c <_fwalk_sglue>
 8014336:	bf00      	nop
 8014338:	240002b8 	.word	0x240002b8
 801433c:	0801507d 	.word	0x0801507d
 8014340:	240002c4 	.word	0x240002c4

08014344 <cleanup_stdio>:
 8014344:	6841      	ldr	r1, [r0, #4]
 8014346:	4b0c      	ldr	r3, [pc, #48]	; (8014378 <cleanup_stdio+0x34>)
 8014348:	4299      	cmp	r1, r3
 801434a:	b510      	push	{r4, lr}
 801434c:	4604      	mov	r4, r0
 801434e:	d001      	beq.n	8014354 <cleanup_stdio+0x10>
 8014350:	f000 fe94 	bl	801507c <_fflush_r>
 8014354:	68a1      	ldr	r1, [r4, #8]
 8014356:	4b09      	ldr	r3, [pc, #36]	; (801437c <cleanup_stdio+0x38>)
 8014358:	4299      	cmp	r1, r3
 801435a:	d002      	beq.n	8014362 <cleanup_stdio+0x1e>
 801435c:	4620      	mov	r0, r4
 801435e:	f000 fe8d 	bl	801507c <_fflush_r>
 8014362:	68e1      	ldr	r1, [r4, #12]
 8014364:	4b06      	ldr	r3, [pc, #24]	; (8014380 <cleanup_stdio+0x3c>)
 8014366:	4299      	cmp	r1, r3
 8014368:	d004      	beq.n	8014374 <cleanup_stdio+0x30>
 801436a:	4620      	mov	r0, r4
 801436c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8014370:	f000 be84 	b.w	801507c <_fflush_r>
 8014374:	bd10      	pop	{r4, pc}
 8014376:	bf00      	nop
 8014378:	24003658 	.word	0x24003658
 801437c:	240036c0 	.word	0x240036c0
 8014380:	24003728 	.word	0x24003728

08014384 <global_stdio_init.part.0>:
 8014384:	b510      	push	{r4, lr}
 8014386:	4b0b      	ldr	r3, [pc, #44]	; (80143b4 <global_stdio_init.part.0+0x30>)
 8014388:	4c0b      	ldr	r4, [pc, #44]	; (80143b8 <global_stdio_init.part.0+0x34>)
 801438a:	4a0c      	ldr	r2, [pc, #48]	; (80143bc <global_stdio_init.part.0+0x38>)
 801438c:	601a      	str	r2, [r3, #0]
 801438e:	4620      	mov	r0, r4
 8014390:	2200      	movs	r2, #0
 8014392:	2104      	movs	r1, #4
 8014394:	f7ff ffa6 	bl	80142e4 <std>
 8014398:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801439c:	2201      	movs	r2, #1
 801439e:	2109      	movs	r1, #9
 80143a0:	f7ff ffa0 	bl	80142e4 <std>
 80143a4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80143a8:	2202      	movs	r2, #2
 80143aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143ae:	2112      	movs	r1, #18
 80143b0:	f7ff bf98 	b.w	80142e4 <std>
 80143b4:	24003790 	.word	0x24003790
 80143b8:	24003658 	.word	0x24003658
 80143bc:	0801432d 	.word	0x0801432d

080143c0 <__sfp_lock_acquire>:
 80143c0:	4801      	ldr	r0, [pc, #4]	; (80143c8 <__sfp_lock_acquire+0x8>)
 80143c2:	f000 ba95 	b.w	80148f0 <__retarget_lock_acquire_recursive>
 80143c6:	bf00      	nop
 80143c8:	24003799 	.word	0x24003799

080143cc <__sfp_lock_release>:
 80143cc:	4801      	ldr	r0, [pc, #4]	; (80143d4 <__sfp_lock_release+0x8>)
 80143ce:	f000 ba90 	b.w	80148f2 <__retarget_lock_release_recursive>
 80143d2:	bf00      	nop
 80143d4:	24003799 	.word	0x24003799

080143d8 <__sinit>:
 80143d8:	b510      	push	{r4, lr}
 80143da:	4604      	mov	r4, r0
 80143dc:	f7ff fff0 	bl	80143c0 <__sfp_lock_acquire>
 80143e0:	6a23      	ldr	r3, [r4, #32]
 80143e2:	b11b      	cbz	r3, 80143ec <__sinit+0x14>
 80143e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80143e8:	f7ff bff0 	b.w	80143cc <__sfp_lock_release>
 80143ec:	4b04      	ldr	r3, [pc, #16]	; (8014400 <__sinit+0x28>)
 80143ee:	6223      	str	r3, [r4, #32]
 80143f0:	4b04      	ldr	r3, [pc, #16]	; (8014404 <__sinit+0x2c>)
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	2b00      	cmp	r3, #0
 80143f6:	d1f5      	bne.n	80143e4 <__sinit+0xc>
 80143f8:	f7ff ffc4 	bl	8014384 <global_stdio_init.part.0>
 80143fc:	e7f2      	b.n	80143e4 <__sinit+0xc>
 80143fe:	bf00      	nop
 8014400:	08014345 	.word	0x08014345
 8014404:	24003790 	.word	0x24003790

08014408 <fiprintf>:
 8014408:	b40e      	push	{r1, r2, r3}
 801440a:	b503      	push	{r0, r1, lr}
 801440c:	4601      	mov	r1, r0
 801440e:	ab03      	add	r3, sp, #12
 8014410:	4805      	ldr	r0, [pc, #20]	; (8014428 <fiprintf+0x20>)
 8014412:	f853 2b04 	ldr.w	r2, [r3], #4
 8014416:	6800      	ldr	r0, [r0, #0]
 8014418:	9301      	str	r3, [sp, #4]
 801441a:	f000 faff 	bl	8014a1c <_vfiprintf_r>
 801441e:	b002      	add	sp, #8
 8014420:	f85d eb04 	ldr.w	lr, [sp], #4
 8014424:	b003      	add	sp, #12
 8014426:	4770      	bx	lr
 8014428:	24000310 	.word	0x24000310

0801442c <_fwalk_sglue>:
 801442c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014430:	4607      	mov	r7, r0
 8014432:	4688      	mov	r8, r1
 8014434:	4614      	mov	r4, r2
 8014436:	2600      	movs	r6, #0
 8014438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801443c:	f1b9 0901 	subs.w	r9, r9, #1
 8014440:	d505      	bpl.n	801444e <_fwalk_sglue+0x22>
 8014442:	6824      	ldr	r4, [r4, #0]
 8014444:	2c00      	cmp	r4, #0
 8014446:	d1f7      	bne.n	8014438 <_fwalk_sglue+0xc>
 8014448:	4630      	mov	r0, r6
 801444a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801444e:	89ab      	ldrh	r3, [r5, #12]
 8014450:	2b01      	cmp	r3, #1
 8014452:	d907      	bls.n	8014464 <_fwalk_sglue+0x38>
 8014454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8014458:	3301      	adds	r3, #1
 801445a:	d003      	beq.n	8014464 <_fwalk_sglue+0x38>
 801445c:	4629      	mov	r1, r5
 801445e:	4638      	mov	r0, r7
 8014460:	47c0      	blx	r8
 8014462:	4306      	orrs	r6, r0
 8014464:	3568      	adds	r5, #104	; 0x68
 8014466:	e7e9      	b.n	801443c <_fwalk_sglue+0x10>

08014468 <putchar>:
 8014468:	4b02      	ldr	r3, [pc, #8]	; (8014474 <putchar+0xc>)
 801446a:	4601      	mov	r1, r0
 801446c:	6818      	ldr	r0, [r3, #0]
 801446e:	6882      	ldr	r2, [r0, #8]
 8014470:	f000 be8e 	b.w	8015190 <_putc_r>
 8014474:	24000310 	.word	0x24000310

08014478 <_puts_r>:
 8014478:	6a03      	ldr	r3, [r0, #32]
 801447a:	b570      	push	{r4, r5, r6, lr}
 801447c:	6884      	ldr	r4, [r0, #8]
 801447e:	4605      	mov	r5, r0
 8014480:	460e      	mov	r6, r1
 8014482:	b90b      	cbnz	r3, 8014488 <_puts_r+0x10>
 8014484:	f7ff ffa8 	bl	80143d8 <__sinit>
 8014488:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801448a:	07db      	lsls	r3, r3, #31
 801448c:	d405      	bmi.n	801449a <_puts_r+0x22>
 801448e:	89a3      	ldrh	r3, [r4, #12]
 8014490:	0598      	lsls	r0, r3, #22
 8014492:	d402      	bmi.n	801449a <_puts_r+0x22>
 8014494:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8014496:	f000 fa2b 	bl	80148f0 <__retarget_lock_acquire_recursive>
 801449a:	89a3      	ldrh	r3, [r4, #12]
 801449c:	0719      	lsls	r1, r3, #28
 801449e:	d513      	bpl.n	80144c8 <_puts_r+0x50>
 80144a0:	6923      	ldr	r3, [r4, #16]
 80144a2:	b18b      	cbz	r3, 80144c8 <_puts_r+0x50>
 80144a4:	3e01      	subs	r6, #1
 80144a6:	68a3      	ldr	r3, [r4, #8]
 80144a8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80144ac:	3b01      	subs	r3, #1
 80144ae:	60a3      	str	r3, [r4, #8]
 80144b0:	b9e9      	cbnz	r1, 80144ee <_puts_r+0x76>
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	da2e      	bge.n	8014514 <_puts_r+0x9c>
 80144b6:	4622      	mov	r2, r4
 80144b8:	210a      	movs	r1, #10
 80144ba:	4628      	mov	r0, r5
 80144bc:	f000 f87b 	bl	80145b6 <__swbuf_r>
 80144c0:	3001      	adds	r0, #1
 80144c2:	d007      	beq.n	80144d4 <_puts_r+0x5c>
 80144c4:	250a      	movs	r5, #10
 80144c6:	e007      	b.n	80144d8 <_puts_r+0x60>
 80144c8:	4621      	mov	r1, r4
 80144ca:	4628      	mov	r0, r5
 80144cc:	f000 f8b0 	bl	8014630 <__swsetup_r>
 80144d0:	2800      	cmp	r0, #0
 80144d2:	d0e7      	beq.n	80144a4 <_puts_r+0x2c>
 80144d4:	f04f 35ff 	mov.w	r5, #4294967295
 80144d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80144da:	07da      	lsls	r2, r3, #31
 80144dc:	d405      	bmi.n	80144ea <_puts_r+0x72>
 80144de:	89a3      	ldrh	r3, [r4, #12]
 80144e0:	059b      	lsls	r3, r3, #22
 80144e2:	d402      	bmi.n	80144ea <_puts_r+0x72>
 80144e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80144e6:	f000 fa04 	bl	80148f2 <__retarget_lock_release_recursive>
 80144ea:	4628      	mov	r0, r5
 80144ec:	bd70      	pop	{r4, r5, r6, pc}
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	da04      	bge.n	80144fc <_puts_r+0x84>
 80144f2:	69a2      	ldr	r2, [r4, #24]
 80144f4:	429a      	cmp	r2, r3
 80144f6:	dc06      	bgt.n	8014506 <_puts_r+0x8e>
 80144f8:	290a      	cmp	r1, #10
 80144fa:	d004      	beq.n	8014506 <_puts_r+0x8e>
 80144fc:	6823      	ldr	r3, [r4, #0]
 80144fe:	1c5a      	adds	r2, r3, #1
 8014500:	6022      	str	r2, [r4, #0]
 8014502:	7019      	strb	r1, [r3, #0]
 8014504:	e7cf      	b.n	80144a6 <_puts_r+0x2e>
 8014506:	4622      	mov	r2, r4
 8014508:	4628      	mov	r0, r5
 801450a:	f000 f854 	bl	80145b6 <__swbuf_r>
 801450e:	3001      	adds	r0, #1
 8014510:	d1c9      	bne.n	80144a6 <_puts_r+0x2e>
 8014512:	e7df      	b.n	80144d4 <_puts_r+0x5c>
 8014514:	6823      	ldr	r3, [r4, #0]
 8014516:	250a      	movs	r5, #10
 8014518:	1c5a      	adds	r2, r3, #1
 801451a:	6022      	str	r2, [r4, #0]
 801451c:	701d      	strb	r5, [r3, #0]
 801451e:	e7db      	b.n	80144d8 <_puts_r+0x60>

08014520 <puts>:
 8014520:	4b02      	ldr	r3, [pc, #8]	; (801452c <puts+0xc>)
 8014522:	4601      	mov	r1, r0
 8014524:	6818      	ldr	r0, [r3, #0]
 8014526:	f7ff bfa7 	b.w	8014478 <_puts_r>
 801452a:	bf00      	nop
 801452c:	24000310 	.word	0x24000310

08014530 <__sread>:
 8014530:	b510      	push	{r4, lr}
 8014532:	460c      	mov	r4, r1
 8014534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014538:	f000 f97c 	bl	8014834 <_read_r>
 801453c:	2800      	cmp	r0, #0
 801453e:	bfab      	itete	ge
 8014540:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8014542:	89a3      	ldrhlt	r3, [r4, #12]
 8014544:	181b      	addge	r3, r3, r0
 8014546:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801454a:	bfac      	ite	ge
 801454c:	6563      	strge	r3, [r4, #84]	; 0x54
 801454e:	81a3      	strhlt	r3, [r4, #12]
 8014550:	bd10      	pop	{r4, pc}

08014552 <__swrite>:
 8014552:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014556:	461f      	mov	r7, r3
 8014558:	898b      	ldrh	r3, [r1, #12]
 801455a:	05db      	lsls	r3, r3, #23
 801455c:	4605      	mov	r5, r0
 801455e:	460c      	mov	r4, r1
 8014560:	4616      	mov	r6, r2
 8014562:	d505      	bpl.n	8014570 <__swrite+0x1e>
 8014564:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014568:	2302      	movs	r3, #2
 801456a:	2200      	movs	r2, #0
 801456c:	f000 f950 	bl	8014810 <_lseek_r>
 8014570:	89a3      	ldrh	r3, [r4, #12]
 8014572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014576:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801457a:	81a3      	strh	r3, [r4, #12]
 801457c:	4632      	mov	r2, r6
 801457e:	463b      	mov	r3, r7
 8014580:	4628      	mov	r0, r5
 8014582:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8014586:	f000 b977 	b.w	8014878 <_write_r>

0801458a <__sseek>:
 801458a:	b510      	push	{r4, lr}
 801458c:	460c      	mov	r4, r1
 801458e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014592:	f000 f93d 	bl	8014810 <_lseek_r>
 8014596:	1c43      	adds	r3, r0, #1
 8014598:	89a3      	ldrh	r3, [r4, #12]
 801459a:	bf15      	itete	ne
 801459c:	6560      	strne	r0, [r4, #84]	; 0x54
 801459e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80145a2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80145a6:	81a3      	strheq	r3, [r4, #12]
 80145a8:	bf18      	it	ne
 80145aa:	81a3      	strhne	r3, [r4, #12]
 80145ac:	bd10      	pop	{r4, pc}

080145ae <__sclose>:
 80145ae:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80145b2:	f000 b91d 	b.w	80147f0 <_close_r>

080145b6 <__swbuf_r>:
 80145b6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80145b8:	460e      	mov	r6, r1
 80145ba:	4614      	mov	r4, r2
 80145bc:	4605      	mov	r5, r0
 80145be:	b118      	cbz	r0, 80145c8 <__swbuf_r+0x12>
 80145c0:	6a03      	ldr	r3, [r0, #32]
 80145c2:	b90b      	cbnz	r3, 80145c8 <__swbuf_r+0x12>
 80145c4:	f7ff ff08 	bl	80143d8 <__sinit>
 80145c8:	69a3      	ldr	r3, [r4, #24]
 80145ca:	60a3      	str	r3, [r4, #8]
 80145cc:	89a3      	ldrh	r3, [r4, #12]
 80145ce:	071a      	lsls	r2, r3, #28
 80145d0:	d525      	bpl.n	801461e <__swbuf_r+0x68>
 80145d2:	6923      	ldr	r3, [r4, #16]
 80145d4:	b31b      	cbz	r3, 801461e <__swbuf_r+0x68>
 80145d6:	6823      	ldr	r3, [r4, #0]
 80145d8:	6922      	ldr	r2, [r4, #16]
 80145da:	1a98      	subs	r0, r3, r2
 80145dc:	6963      	ldr	r3, [r4, #20]
 80145de:	b2f6      	uxtb	r6, r6
 80145e0:	4283      	cmp	r3, r0
 80145e2:	4637      	mov	r7, r6
 80145e4:	dc04      	bgt.n	80145f0 <__swbuf_r+0x3a>
 80145e6:	4621      	mov	r1, r4
 80145e8:	4628      	mov	r0, r5
 80145ea:	f000 fd47 	bl	801507c <_fflush_r>
 80145ee:	b9e0      	cbnz	r0, 801462a <__swbuf_r+0x74>
 80145f0:	68a3      	ldr	r3, [r4, #8]
 80145f2:	3b01      	subs	r3, #1
 80145f4:	60a3      	str	r3, [r4, #8]
 80145f6:	6823      	ldr	r3, [r4, #0]
 80145f8:	1c5a      	adds	r2, r3, #1
 80145fa:	6022      	str	r2, [r4, #0]
 80145fc:	701e      	strb	r6, [r3, #0]
 80145fe:	6962      	ldr	r2, [r4, #20]
 8014600:	1c43      	adds	r3, r0, #1
 8014602:	429a      	cmp	r2, r3
 8014604:	d004      	beq.n	8014610 <__swbuf_r+0x5a>
 8014606:	89a3      	ldrh	r3, [r4, #12]
 8014608:	07db      	lsls	r3, r3, #31
 801460a:	d506      	bpl.n	801461a <__swbuf_r+0x64>
 801460c:	2e0a      	cmp	r6, #10
 801460e:	d104      	bne.n	801461a <__swbuf_r+0x64>
 8014610:	4621      	mov	r1, r4
 8014612:	4628      	mov	r0, r5
 8014614:	f000 fd32 	bl	801507c <_fflush_r>
 8014618:	b938      	cbnz	r0, 801462a <__swbuf_r+0x74>
 801461a:	4638      	mov	r0, r7
 801461c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801461e:	4621      	mov	r1, r4
 8014620:	4628      	mov	r0, r5
 8014622:	f000 f805 	bl	8014630 <__swsetup_r>
 8014626:	2800      	cmp	r0, #0
 8014628:	d0d5      	beq.n	80145d6 <__swbuf_r+0x20>
 801462a:	f04f 37ff 	mov.w	r7, #4294967295
 801462e:	e7f4      	b.n	801461a <__swbuf_r+0x64>

08014630 <__swsetup_r>:
 8014630:	b538      	push	{r3, r4, r5, lr}
 8014632:	4b2a      	ldr	r3, [pc, #168]	; (80146dc <__swsetup_r+0xac>)
 8014634:	4605      	mov	r5, r0
 8014636:	6818      	ldr	r0, [r3, #0]
 8014638:	460c      	mov	r4, r1
 801463a:	b118      	cbz	r0, 8014644 <__swsetup_r+0x14>
 801463c:	6a03      	ldr	r3, [r0, #32]
 801463e:	b90b      	cbnz	r3, 8014644 <__swsetup_r+0x14>
 8014640:	f7ff feca 	bl	80143d8 <__sinit>
 8014644:	89a3      	ldrh	r3, [r4, #12]
 8014646:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801464a:	0718      	lsls	r0, r3, #28
 801464c:	d422      	bmi.n	8014694 <__swsetup_r+0x64>
 801464e:	06d9      	lsls	r1, r3, #27
 8014650:	d407      	bmi.n	8014662 <__swsetup_r+0x32>
 8014652:	2309      	movs	r3, #9
 8014654:	602b      	str	r3, [r5, #0]
 8014656:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801465a:	81a3      	strh	r3, [r4, #12]
 801465c:	f04f 30ff 	mov.w	r0, #4294967295
 8014660:	e034      	b.n	80146cc <__swsetup_r+0x9c>
 8014662:	0758      	lsls	r0, r3, #29
 8014664:	d512      	bpl.n	801468c <__swsetup_r+0x5c>
 8014666:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014668:	b141      	cbz	r1, 801467c <__swsetup_r+0x4c>
 801466a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801466e:	4299      	cmp	r1, r3
 8014670:	d002      	beq.n	8014678 <__swsetup_r+0x48>
 8014672:	4628      	mov	r0, r5
 8014674:	f000 f95c 	bl	8014930 <_free_r>
 8014678:	2300      	movs	r3, #0
 801467a:	6363      	str	r3, [r4, #52]	; 0x34
 801467c:	89a3      	ldrh	r3, [r4, #12]
 801467e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8014682:	81a3      	strh	r3, [r4, #12]
 8014684:	2300      	movs	r3, #0
 8014686:	6063      	str	r3, [r4, #4]
 8014688:	6923      	ldr	r3, [r4, #16]
 801468a:	6023      	str	r3, [r4, #0]
 801468c:	89a3      	ldrh	r3, [r4, #12]
 801468e:	f043 0308 	orr.w	r3, r3, #8
 8014692:	81a3      	strh	r3, [r4, #12]
 8014694:	6923      	ldr	r3, [r4, #16]
 8014696:	b94b      	cbnz	r3, 80146ac <__swsetup_r+0x7c>
 8014698:	89a3      	ldrh	r3, [r4, #12]
 801469a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801469e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80146a2:	d003      	beq.n	80146ac <__swsetup_r+0x7c>
 80146a4:	4621      	mov	r1, r4
 80146a6:	4628      	mov	r0, r5
 80146a8:	f000 fd36 	bl	8015118 <__smakebuf_r>
 80146ac:	89a0      	ldrh	r0, [r4, #12]
 80146ae:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80146b2:	f010 0301 	ands.w	r3, r0, #1
 80146b6:	d00a      	beq.n	80146ce <__swsetup_r+0x9e>
 80146b8:	2300      	movs	r3, #0
 80146ba:	60a3      	str	r3, [r4, #8]
 80146bc:	6963      	ldr	r3, [r4, #20]
 80146be:	425b      	negs	r3, r3
 80146c0:	61a3      	str	r3, [r4, #24]
 80146c2:	6923      	ldr	r3, [r4, #16]
 80146c4:	b943      	cbnz	r3, 80146d8 <__swsetup_r+0xa8>
 80146c6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80146ca:	d1c4      	bne.n	8014656 <__swsetup_r+0x26>
 80146cc:	bd38      	pop	{r3, r4, r5, pc}
 80146ce:	0781      	lsls	r1, r0, #30
 80146d0:	bf58      	it	pl
 80146d2:	6963      	ldrpl	r3, [r4, #20]
 80146d4:	60a3      	str	r3, [r4, #8]
 80146d6:	e7f4      	b.n	80146c2 <__swsetup_r+0x92>
 80146d8:	2000      	movs	r0, #0
 80146da:	e7f7      	b.n	80146cc <__swsetup_r+0x9c>
 80146dc:	24000310 	.word	0x24000310

080146e0 <memcmp>:
 80146e0:	b510      	push	{r4, lr}
 80146e2:	3901      	subs	r1, #1
 80146e4:	4402      	add	r2, r0
 80146e6:	4290      	cmp	r0, r2
 80146e8:	d101      	bne.n	80146ee <memcmp+0xe>
 80146ea:	2000      	movs	r0, #0
 80146ec:	e005      	b.n	80146fa <memcmp+0x1a>
 80146ee:	7803      	ldrb	r3, [r0, #0]
 80146f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80146f4:	42a3      	cmp	r3, r4
 80146f6:	d001      	beq.n	80146fc <memcmp+0x1c>
 80146f8:	1b18      	subs	r0, r3, r4
 80146fa:	bd10      	pop	{r4, pc}
 80146fc:	3001      	adds	r0, #1
 80146fe:	e7f2      	b.n	80146e6 <memcmp+0x6>

08014700 <memmove>:
 8014700:	4288      	cmp	r0, r1
 8014702:	b510      	push	{r4, lr}
 8014704:	eb01 0402 	add.w	r4, r1, r2
 8014708:	d902      	bls.n	8014710 <memmove+0x10>
 801470a:	4284      	cmp	r4, r0
 801470c:	4623      	mov	r3, r4
 801470e:	d807      	bhi.n	8014720 <memmove+0x20>
 8014710:	1e43      	subs	r3, r0, #1
 8014712:	42a1      	cmp	r1, r4
 8014714:	d008      	beq.n	8014728 <memmove+0x28>
 8014716:	f811 2b01 	ldrb.w	r2, [r1], #1
 801471a:	f803 2f01 	strb.w	r2, [r3, #1]!
 801471e:	e7f8      	b.n	8014712 <memmove+0x12>
 8014720:	4402      	add	r2, r0
 8014722:	4601      	mov	r1, r0
 8014724:	428a      	cmp	r2, r1
 8014726:	d100      	bne.n	801472a <memmove+0x2a>
 8014728:	bd10      	pop	{r4, pc}
 801472a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801472e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8014732:	e7f7      	b.n	8014724 <memmove+0x24>

08014734 <memset>:
 8014734:	4402      	add	r2, r0
 8014736:	4603      	mov	r3, r0
 8014738:	4293      	cmp	r3, r2
 801473a:	d100      	bne.n	801473e <memset+0xa>
 801473c:	4770      	bx	lr
 801473e:	f803 1b01 	strb.w	r1, [r3], #1
 8014742:	e7f9      	b.n	8014738 <memset+0x4>

08014744 <strchr>:
 8014744:	b2c9      	uxtb	r1, r1
 8014746:	4603      	mov	r3, r0
 8014748:	f810 2b01 	ldrb.w	r2, [r0], #1
 801474c:	b11a      	cbz	r2, 8014756 <strchr+0x12>
 801474e:	428a      	cmp	r2, r1
 8014750:	d1f9      	bne.n	8014746 <strchr+0x2>
 8014752:	4618      	mov	r0, r3
 8014754:	4770      	bx	lr
 8014756:	2900      	cmp	r1, #0
 8014758:	bf18      	it	ne
 801475a:	2300      	movne	r3, #0
 801475c:	e7f9      	b.n	8014752 <strchr+0xe>
	...

08014760 <strdup>:
 8014760:	4b02      	ldr	r3, [pc, #8]	; (801476c <strdup+0xc>)
 8014762:	4601      	mov	r1, r0
 8014764:	6818      	ldr	r0, [r3, #0]
 8014766:	f000 b803 	b.w	8014770 <_strdup_r>
 801476a:	bf00      	nop
 801476c:	24000310 	.word	0x24000310

08014770 <_strdup_r>:
 8014770:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014772:	4604      	mov	r4, r0
 8014774:	4608      	mov	r0, r1
 8014776:	460d      	mov	r5, r1
 8014778:	f7eb fe2a 	bl	80003d0 <strlen>
 801477c:	1c42      	adds	r2, r0, #1
 801477e:	4611      	mov	r1, r2
 8014780:	4620      	mov	r0, r4
 8014782:	9201      	str	r2, [sp, #4]
 8014784:	f7ff fc2a 	bl	8013fdc <_malloc_r>
 8014788:	4604      	mov	r4, r0
 801478a:	b118      	cbz	r0, 8014794 <_strdup_r+0x24>
 801478c:	9a01      	ldr	r2, [sp, #4]
 801478e:	4629      	mov	r1, r5
 8014790:	f000 f8b8 	bl	8014904 <memcpy>
 8014794:	4620      	mov	r0, r4
 8014796:	b003      	add	sp, #12
 8014798:	bd30      	pop	{r4, r5, pc}

0801479a <strncmp>:
 801479a:	b510      	push	{r4, lr}
 801479c:	b16a      	cbz	r2, 80147ba <strncmp+0x20>
 801479e:	3901      	subs	r1, #1
 80147a0:	1884      	adds	r4, r0, r2
 80147a2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80147a6:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80147aa:	429a      	cmp	r2, r3
 80147ac:	d103      	bne.n	80147b6 <strncmp+0x1c>
 80147ae:	42a0      	cmp	r0, r4
 80147b0:	d001      	beq.n	80147b6 <strncmp+0x1c>
 80147b2:	2a00      	cmp	r2, #0
 80147b4:	d1f5      	bne.n	80147a2 <strncmp+0x8>
 80147b6:	1ad0      	subs	r0, r2, r3
 80147b8:	bd10      	pop	{r4, pc}
 80147ba:	4610      	mov	r0, r2
 80147bc:	e7fc      	b.n	80147b8 <strncmp+0x1e>

080147be <strrchr>:
 80147be:	b513      	push	{r0, r1, r4, lr}
 80147c0:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
 80147c4:	4603      	mov	r3, r0
 80147c6:	d110      	bne.n	80147ea <strrchr+0x2c>
 80147c8:	b002      	add	sp, #8
 80147ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80147ce:	f7ff bfb9 	b.w	8014744 <strchr>
 80147d2:	1c43      	adds	r3, r0, #1
 80147d4:	4604      	mov	r4, r0
 80147d6:	4618      	mov	r0, r3
 80147d8:	9101      	str	r1, [sp, #4]
 80147da:	f7ff ffb3 	bl	8014744 <strchr>
 80147de:	9901      	ldr	r1, [sp, #4]
 80147e0:	2800      	cmp	r0, #0
 80147e2:	d1f6      	bne.n	80147d2 <strrchr+0x14>
 80147e4:	4620      	mov	r0, r4
 80147e6:	b002      	add	sp, #8
 80147e8:	bd10      	pop	{r4, pc}
 80147ea:	2400      	movs	r4, #0
 80147ec:	e7f3      	b.n	80147d6 <strrchr+0x18>
	...

080147f0 <_close_r>:
 80147f0:	b538      	push	{r3, r4, r5, lr}
 80147f2:	4d06      	ldr	r5, [pc, #24]	; (801480c <_close_r+0x1c>)
 80147f4:	2300      	movs	r3, #0
 80147f6:	4604      	mov	r4, r0
 80147f8:	4608      	mov	r0, r1
 80147fa:	602b      	str	r3, [r5, #0]
 80147fc:	f7fa f944 	bl	800ea88 <_close>
 8014800:	1c43      	adds	r3, r0, #1
 8014802:	d102      	bne.n	801480a <_close_r+0x1a>
 8014804:	682b      	ldr	r3, [r5, #0]
 8014806:	b103      	cbz	r3, 801480a <_close_r+0x1a>
 8014808:	6023      	str	r3, [r4, #0]
 801480a:	bd38      	pop	{r3, r4, r5, pc}
 801480c:	24003794 	.word	0x24003794

08014810 <_lseek_r>:
 8014810:	b538      	push	{r3, r4, r5, lr}
 8014812:	4d07      	ldr	r5, [pc, #28]	; (8014830 <_lseek_r+0x20>)
 8014814:	4604      	mov	r4, r0
 8014816:	4608      	mov	r0, r1
 8014818:	4611      	mov	r1, r2
 801481a:	2200      	movs	r2, #0
 801481c:	602a      	str	r2, [r5, #0]
 801481e:	461a      	mov	r2, r3
 8014820:	f7fa f959 	bl	800ead6 <_lseek>
 8014824:	1c43      	adds	r3, r0, #1
 8014826:	d102      	bne.n	801482e <_lseek_r+0x1e>
 8014828:	682b      	ldr	r3, [r5, #0]
 801482a:	b103      	cbz	r3, 801482e <_lseek_r+0x1e>
 801482c:	6023      	str	r3, [r4, #0]
 801482e:	bd38      	pop	{r3, r4, r5, pc}
 8014830:	24003794 	.word	0x24003794

08014834 <_read_r>:
 8014834:	b538      	push	{r3, r4, r5, lr}
 8014836:	4d07      	ldr	r5, [pc, #28]	; (8014854 <_read_r+0x20>)
 8014838:	4604      	mov	r4, r0
 801483a:	4608      	mov	r0, r1
 801483c:	4611      	mov	r1, r2
 801483e:	2200      	movs	r2, #0
 8014840:	602a      	str	r2, [r5, #0]
 8014842:	461a      	mov	r2, r3
 8014844:	f7fa f8ea 	bl	800ea1c <_read>
 8014848:	1c43      	adds	r3, r0, #1
 801484a:	d102      	bne.n	8014852 <_read_r+0x1e>
 801484c:	682b      	ldr	r3, [r5, #0]
 801484e:	b103      	cbz	r3, 8014852 <_read_r+0x1e>
 8014850:	6023      	str	r3, [r4, #0]
 8014852:	bd38      	pop	{r3, r4, r5, pc}
 8014854:	24003794 	.word	0x24003794

08014858 <_sbrk_r>:
 8014858:	b538      	push	{r3, r4, r5, lr}
 801485a:	4d06      	ldr	r5, [pc, #24]	; (8014874 <_sbrk_r+0x1c>)
 801485c:	2300      	movs	r3, #0
 801485e:	4604      	mov	r4, r0
 8014860:	4608      	mov	r0, r1
 8014862:	602b      	str	r3, [r5, #0]
 8014864:	f7fa f944 	bl	800eaf0 <_sbrk>
 8014868:	1c43      	adds	r3, r0, #1
 801486a:	d102      	bne.n	8014872 <_sbrk_r+0x1a>
 801486c:	682b      	ldr	r3, [r5, #0]
 801486e:	b103      	cbz	r3, 8014872 <_sbrk_r+0x1a>
 8014870:	6023      	str	r3, [r4, #0]
 8014872:	bd38      	pop	{r3, r4, r5, pc}
 8014874:	24003794 	.word	0x24003794

08014878 <_write_r>:
 8014878:	b538      	push	{r3, r4, r5, lr}
 801487a:	4d07      	ldr	r5, [pc, #28]	; (8014898 <_write_r+0x20>)
 801487c:	4604      	mov	r4, r0
 801487e:	4608      	mov	r0, r1
 8014880:	4611      	mov	r1, r2
 8014882:	2200      	movs	r2, #0
 8014884:	602a      	str	r2, [r5, #0]
 8014886:	461a      	mov	r2, r3
 8014888:	f7fa f8e6 	bl	800ea58 <_write>
 801488c:	1c43      	adds	r3, r0, #1
 801488e:	d102      	bne.n	8014896 <_write_r+0x1e>
 8014890:	682b      	ldr	r3, [r5, #0]
 8014892:	b103      	cbz	r3, 8014896 <_write_r+0x1e>
 8014894:	6023      	str	r3, [r4, #0]
 8014896:	bd38      	pop	{r3, r4, r5, pc}
 8014898:	24003794 	.word	0x24003794

0801489c <__errno>:
 801489c:	4b01      	ldr	r3, [pc, #4]	; (80148a4 <__errno+0x8>)
 801489e:	6818      	ldr	r0, [r3, #0]
 80148a0:	4770      	bx	lr
 80148a2:	bf00      	nop
 80148a4:	24000310 	.word	0x24000310

080148a8 <__libc_init_array>:
 80148a8:	b570      	push	{r4, r5, r6, lr}
 80148aa:	4d0d      	ldr	r5, [pc, #52]	; (80148e0 <__libc_init_array+0x38>)
 80148ac:	4c0d      	ldr	r4, [pc, #52]	; (80148e4 <__libc_init_array+0x3c>)
 80148ae:	1b64      	subs	r4, r4, r5
 80148b0:	10a4      	asrs	r4, r4, #2
 80148b2:	2600      	movs	r6, #0
 80148b4:	42a6      	cmp	r6, r4
 80148b6:	d109      	bne.n	80148cc <__libc_init_array+0x24>
 80148b8:	4d0b      	ldr	r5, [pc, #44]	; (80148e8 <__libc_init_array+0x40>)
 80148ba:	4c0c      	ldr	r4, [pc, #48]	; (80148ec <__libc_init_array+0x44>)
 80148bc:	f000 fd02 	bl	80152c4 <_init>
 80148c0:	1b64      	subs	r4, r4, r5
 80148c2:	10a4      	asrs	r4, r4, #2
 80148c4:	2600      	movs	r6, #0
 80148c6:	42a6      	cmp	r6, r4
 80148c8:	d105      	bne.n	80148d6 <__libc_init_array+0x2e>
 80148ca:	bd70      	pop	{r4, r5, r6, pc}
 80148cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80148d0:	4798      	blx	r3
 80148d2:	3601      	adds	r6, #1
 80148d4:	e7ee      	b.n	80148b4 <__libc_init_array+0xc>
 80148d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80148da:	4798      	blx	r3
 80148dc:	3601      	adds	r6, #1
 80148de:	e7f2      	b.n	80148c6 <__libc_init_array+0x1e>
 80148e0:	08018370 	.word	0x08018370
 80148e4:	08018370 	.word	0x08018370
 80148e8:	08018370 	.word	0x08018370
 80148ec:	08018374 	.word	0x08018374

080148f0 <__retarget_lock_acquire_recursive>:
 80148f0:	4770      	bx	lr

080148f2 <__retarget_lock_release_recursive>:
 80148f2:	4770      	bx	lr

080148f4 <strcpy>:
 80148f4:	4603      	mov	r3, r0
 80148f6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80148fa:	f803 2b01 	strb.w	r2, [r3], #1
 80148fe:	2a00      	cmp	r2, #0
 8014900:	d1f9      	bne.n	80148f6 <strcpy+0x2>
 8014902:	4770      	bx	lr

08014904 <memcpy>:
 8014904:	440a      	add	r2, r1
 8014906:	4291      	cmp	r1, r2
 8014908:	f100 33ff 	add.w	r3, r0, #4294967295
 801490c:	d100      	bne.n	8014910 <memcpy+0xc>
 801490e:	4770      	bx	lr
 8014910:	b510      	push	{r4, lr}
 8014912:	f811 4b01 	ldrb.w	r4, [r1], #1
 8014916:	f803 4f01 	strb.w	r4, [r3, #1]!
 801491a:	4291      	cmp	r1, r2
 801491c:	d1f9      	bne.n	8014912 <memcpy+0xe>
 801491e:	bd10      	pop	{r4, pc}

08014920 <abort>:
 8014920:	b508      	push	{r3, lr}
 8014922:	2006      	movs	r0, #6
 8014924:	f000 fc90 	bl	8015248 <raise>
 8014928:	2001      	movs	r0, #1
 801492a:	f7fa f86d 	bl	800ea08 <_exit>
	...

08014930 <_free_r>:
 8014930:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014932:	2900      	cmp	r1, #0
 8014934:	d044      	beq.n	80149c0 <_free_r+0x90>
 8014936:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801493a:	9001      	str	r0, [sp, #4]
 801493c:	2b00      	cmp	r3, #0
 801493e:	f1a1 0404 	sub.w	r4, r1, #4
 8014942:	bfb8      	it	lt
 8014944:	18e4      	addlt	r4, r4, r3
 8014946:	f7ff fbc9 	bl	80140dc <__malloc_lock>
 801494a:	4a1e      	ldr	r2, [pc, #120]	; (80149c4 <_free_r+0x94>)
 801494c:	9801      	ldr	r0, [sp, #4]
 801494e:	6813      	ldr	r3, [r2, #0]
 8014950:	b933      	cbnz	r3, 8014960 <_free_r+0x30>
 8014952:	6063      	str	r3, [r4, #4]
 8014954:	6014      	str	r4, [r2, #0]
 8014956:	b003      	add	sp, #12
 8014958:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801495c:	f7ff bbc4 	b.w	80140e8 <__malloc_unlock>
 8014960:	42a3      	cmp	r3, r4
 8014962:	d908      	bls.n	8014976 <_free_r+0x46>
 8014964:	6825      	ldr	r5, [r4, #0]
 8014966:	1961      	adds	r1, r4, r5
 8014968:	428b      	cmp	r3, r1
 801496a:	bf01      	itttt	eq
 801496c:	6819      	ldreq	r1, [r3, #0]
 801496e:	685b      	ldreq	r3, [r3, #4]
 8014970:	1949      	addeq	r1, r1, r5
 8014972:	6021      	streq	r1, [r4, #0]
 8014974:	e7ed      	b.n	8014952 <_free_r+0x22>
 8014976:	461a      	mov	r2, r3
 8014978:	685b      	ldr	r3, [r3, #4]
 801497a:	b10b      	cbz	r3, 8014980 <_free_r+0x50>
 801497c:	42a3      	cmp	r3, r4
 801497e:	d9fa      	bls.n	8014976 <_free_r+0x46>
 8014980:	6811      	ldr	r1, [r2, #0]
 8014982:	1855      	adds	r5, r2, r1
 8014984:	42a5      	cmp	r5, r4
 8014986:	d10b      	bne.n	80149a0 <_free_r+0x70>
 8014988:	6824      	ldr	r4, [r4, #0]
 801498a:	4421      	add	r1, r4
 801498c:	1854      	adds	r4, r2, r1
 801498e:	42a3      	cmp	r3, r4
 8014990:	6011      	str	r1, [r2, #0]
 8014992:	d1e0      	bne.n	8014956 <_free_r+0x26>
 8014994:	681c      	ldr	r4, [r3, #0]
 8014996:	685b      	ldr	r3, [r3, #4]
 8014998:	6053      	str	r3, [r2, #4]
 801499a:	440c      	add	r4, r1
 801499c:	6014      	str	r4, [r2, #0]
 801499e:	e7da      	b.n	8014956 <_free_r+0x26>
 80149a0:	d902      	bls.n	80149a8 <_free_r+0x78>
 80149a2:	230c      	movs	r3, #12
 80149a4:	6003      	str	r3, [r0, #0]
 80149a6:	e7d6      	b.n	8014956 <_free_r+0x26>
 80149a8:	6825      	ldr	r5, [r4, #0]
 80149aa:	1961      	adds	r1, r4, r5
 80149ac:	428b      	cmp	r3, r1
 80149ae:	bf04      	itt	eq
 80149b0:	6819      	ldreq	r1, [r3, #0]
 80149b2:	685b      	ldreq	r3, [r3, #4]
 80149b4:	6063      	str	r3, [r4, #4]
 80149b6:	bf04      	itt	eq
 80149b8:	1949      	addeq	r1, r1, r5
 80149ba:	6021      	streq	r1, [r4, #0]
 80149bc:	6054      	str	r4, [r2, #4]
 80149be:	e7ca      	b.n	8014956 <_free_r+0x26>
 80149c0:	b003      	add	sp, #12
 80149c2:	bd30      	pop	{r4, r5, pc}
 80149c4:	24003650 	.word	0x24003650

080149c8 <__sfputc_r>:
 80149c8:	6893      	ldr	r3, [r2, #8]
 80149ca:	3b01      	subs	r3, #1
 80149cc:	2b00      	cmp	r3, #0
 80149ce:	b410      	push	{r4}
 80149d0:	6093      	str	r3, [r2, #8]
 80149d2:	da08      	bge.n	80149e6 <__sfputc_r+0x1e>
 80149d4:	6994      	ldr	r4, [r2, #24]
 80149d6:	42a3      	cmp	r3, r4
 80149d8:	db01      	blt.n	80149de <__sfputc_r+0x16>
 80149da:	290a      	cmp	r1, #10
 80149dc:	d103      	bne.n	80149e6 <__sfputc_r+0x1e>
 80149de:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149e2:	f7ff bde8 	b.w	80145b6 <__swbuf_r>
 80149e6:	6813      	ldr	r3, [r2, #0]
 80149e8:	1c58      	adds	r0, r3, #1
 80149ea:	6010      	str	r0, [r2, #0]
 80149ec:	7019      	strb	r1, [r3, #0]
 80149ee:	4608      	mov	r0, r1
 80149f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80149f4:	4770      	bx	lr

080149f6 <__sfputs_r>:
 80149f6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80149f8:	4606      	mov	r6, r0
 80149fa:	460f      	mov	r7, r1
 80149fc:	4614      	mov	r4, r2
 80149fe:	18d5      	adds	r5, r2, r3
 8014a00:	42ac      	cmp	r4, r5
 8014a02:	d101      	bne.n	8014a08 <__sfputs_r+0x12>
 8014a04:	2000      	movs	r0, #0
 8014a06:	e007      	b.n	8014a18 <__sfputs_r+0x22>
 8014a08:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014a0c:	463a      	mov	r2, r7
 8014a0e:	4630      	mov	r0, r6
 8014a10:	f7ff ffda 	bl	80149c8 <__sfputc_r>
 8014a14:	1c43      	adds	r3, r0, #1
 8014a16:	d1f3      	bne.n	8014a00 <__sfputs_r+0xa>
 8014a18:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014a1c <_vfiprintf_r>:
 8014a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014a20:	460d      	mov	r5, r1
 8014a22:	b09d      	sub	sp, #116	; 0x74
 8014a24:	4614      	mov	r4, r2
 8014a26:	4698      	mov	r8, r3
 8014a28:	4606      	mov	r6, r0
 8014a2a:	b118      	cbz	r0, 8014a34 <_vfiprintf_r+0x18>
 8014a2c:	6a03      	ldr	r3, [r0, #32]
 8014a2e:	b90b      	cbnz	r3, 8014a34 <_vfiprintf_r+0x18>
 8014a30:	f7ff fcd2 	bl	80143d8 <__sinit>
 8014a34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a36:	07d9      	lsls	r1, r3, #31
 8014a38:	d405      	bmi.n	8014a46 <_vfiprintf_r+0x2a>
 8014a3a:	89ab      	ldrh	r3, [r5, #12]
 8014a3c:	059a      	lsls	r2, r3, #22
 8014a3e:	d402      	bmi.n	8014a46 <_vfiprintf_r+0x2a>
 8014a40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a42:	f7ff ff55 	bl	80148f0 <__retarget_lock_acquire_recursive>
 8014a46:	89ab      	ldrh	r3, [r5, #12]
 8014a48:	071b      	lsls	r3, r3, #28
 8014a4a:	d501      	bpl.n	8014a50 <_vfiprintf_r+0x34>
 8014a4c:	692b      	ldr	r3, [r5, #16]
 8014a4e:	b99b      	cbnz	r3, 8014a78 <_vfiprintf_r+0x5c>
 8014a50:	4629      	mov	r1, r5
 8014a52:	4630      	mov	r0, r6
 8014a54:	f7ff fdec 	bl	8014630 <__swsetup_r>
 8014a58:	b170      	cbz	r0, 8014a78 <_vfiprintf_r+0x5c>
 8014a5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014a5c:	07dc      	lsls	r4, r3, #31
 8014a5e:	d504      	bpl.n	8014a6a <_vfiprintf_r+0x4e>
 8014a60:	f04f 30ff 	mov.w	r0, #4294967295
 8014a64:	b01d      	add	sp, #116	; 0x74
 8014a66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014a6a:	89ab      	ldrh	r3, [r5, #12]
 8014a6c:	0598      	lsls	r0, r3, #22
 8014a6e:	d4f7      	bmi.n	8014a60 <_vfiprintf_r+0x44>
 8014a70:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014a72:	f7ff ff3e 	bl	80148f2 <__retarget_lock_release_recursive>
 8014a76:	e7f3      	b.n	8014a60 <_vfiprintf_r+0x44>
 8014a78:	2300      	movs	r3, #0
 8014a7a:	9309      	str	r3, [sp, #36]	; 0x24
 8014a7c:	2320      	movs	r3, #32
 8014a7e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8014a82:	f8cd 800c 	str.w	r8, [sp, #12]
 8014a86:	2330      	movs	r3, #48	; 0x30
 8014a88:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8014c3c <_vfiprintf_r+0x220>
 8014a8c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8014a90:	f04f 0901 	mov.w	r9, #1
 8014a94:	4623      	mov	r3, r4
 8014a96:	469a      	mov	sl, r3
 8014a98:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014a9c:	b10a      	cbz	r2, 8014aa2 <_vfiprintf_r+0x86>
 8014a9e:	2a25      	cmp	r2, #37	; 0x25
 8014aa0:	d1f9      	bne.n	8014a96 <_vfiprintf_r+0x7a>
 8014aa2:	ebba 0b04 	subs.w	fp, sl, r4
 8014aa6:	d00b      	beq.n	8014ac0 <_vfiprintf_r+0xa4>
 8014aa8:	465b      	mov	r3, fp
 8014aaa:	4622      	mov	r2, r4
 8014aac:	4629      	mov	r1, r5
 8014aae:	4630      	mov	r0, r6
 8014ab0:	f7ff ffa1 	bl	80149f6 <__sfputs_r>
 8014ab4:	3001      	adds	r0, #1
 8014ab6:	f000 80a9 	beq.w	8014c0c <_vfiprintf_r+0x1f0>
 8014aba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8014abc:	445a      	add	r2, fp
 8014abe:	9209      	str	r2, [sp, #36]	; 0x24
 8014ac0:	f89a 3000 	ldrb.w	r3, [sl]
 8014ac4:	2b00      	cmp	r3, #0
 8014ac6:	f000 80a1 	beq.w	8014c0c <_vfiprintf_r+0x1f0>
 8014aca:	2300      	movs	r3, #0
 8014acc:	f04f 32ff 	mov.w	r2, #4294967295
 8014ad0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014ad4:	f10a 0a01 	add.w	sl, sl, #1
 8014ad8:	9304      	str	r3, [sp, #16]
 8014ada:	9307      	str	r3, [sp, #28]
 8014adc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8014ae0:	931a      	str	r3, [sp, #104]	; 0x68
 8014ae2:	4654      	mov	r4, sl
 8014ae4:	2205      	movs	r2, #5
 8014ae6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014aea:	4854      	ldr	r0, [pc, #336]	; (8014c3c <_vfiprintf_r+0x220>)
 8014aec:	f7eb fc20 	bl	8000330 <memchr>
 8014af0:	9a04      	ldr	r2, [sp, #16]
 8014af2:	b9d8      	cbnz	r0, 8014b2c <_vfiprintf_r+0x110>
 8014af4:	06d1      	lsls	r1, r2, #27
 8014af6:	bf44      	itt	mi
 8014af8:	2320      	movmi	r3, #32
 8014afa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014afe:	0713      	lsls	r3, r2, #28
 8014b00:	bf44      	itt	mi
 8014b02:	232b      	movmi	r3, #43	; 0x2b
 8014b04:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8014b08:	f89a 3000 	ldrb.w	r3, [sl]
 8014b0c:	2b2a      	cmp	r3, #42	; 0x2a
 8014b0e:	d015      	beq.n	8014b3c <_vfiprintf_r+0x120>
 8014b10:	9a07      	ldr	r2, [sp, #28]
 8014b12:	4654      	mov	r4, sl
 8014b14:	2000      	movs	r0, #0
 8014b16:	f04f 0c0a 	mov.w	ip, #10
 8014b1a:	4621      	mov	r1, r4
 8014b1c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014b20:	3b30      	subs	r3, #48	; 0x30
 8014b22:	2b09      	cmp	r3, #9
 8014b24:	d94d      	bls.n	8014bc2 <_vfiprintf_r+0x1a6>
 8014b26:	b1b0      	cbz	r0, 8014b56 <_vfiprintf_r+0x13a>
 8014b28:	9207      	str	r2, [sp, #28]
 8014b2a:	e014      	b.n	8014b56 <_vfiprintf_r+0x13a>
 8014b2c:	eba0 0308 	sub.w	r3, r0, r8
 8014b30:	fa09 f303 	lsl.w	r3, r9, r3
 8014b34:	4313      	orrs	r3, r2
 8014b36:	9304      	str	r3, [sp, #16]
 8014b38:	46a2      	mov	sl, r4
 8014b3a:	e7d2      	b.n	8014ae2 <_vfiprintf_r+0xc6>
 8014b3c:	9b03      	ldr	r3, [sp, #12]
 8014b3e:	1d19      	adds	r1, r3, #4
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	9103      	str	r1, [sp, #12]
 8014b44:	2b00      	cmp	r3, #0
 8014b46:	bfbb      	ittet	lt
 8014b48:	425b      	neglt	r3, r3
 8014b4a:	f042 0202 	orrlt.w	r2, r2, #2
 8014b4e:	9307      	strge	r3, [sp, #28]
 8014b50:	9307      	strlt	r3, [sp, #28]
 8014b52:	bfb8      	it	lt
 8014b54:	9204      	strlt	r2, [sp, #16]
 8014b56:	7823      	ldrb	r3, [r4, #0]
 8014b58:	2b2e      	cmp	r3, #46	; 0x2e
 8014b5a:	d10c      	bne.n	8014b76 <_vfiprintf_r+0x15a>
 8014b5c:	7863      	ldrb	r3, [r4, #1]
 8014b5e:	2b2a      	cmp	r3, #42	; 0x2a
 8014b60:	d134      	bne.n	8014bcc <_vfiprintf_r+0x1b0>
 8014b62:	9b03      	ldr	r3, [sp, #12]
 8014b64:	1d1a      	adds	r2, r3, #4
 8014b66:	681b      	ldr	r3, [r3, #0]
 8014b68:	9203      	str	r2, [sp, #12]
 8014b6a:	2b00      	cmp	r3, #0
 8014b6c:	bfb8      	it	lt
 8014b6e:	f04f 33ff 	movlt.w	r3, #4294967295
 8014b72:	3402      	adds	r4, #2
 8014b74:	9305      	str	r3, [sp, #20]
 8014b76:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8014c4c <_vfiprintf_r+0x230>
 8014b7a:	7821      	ldrb	r1, [r4, #0]
 8014b7c:	2203      	movs	r2, #3
 8014b7e:	4650      	mov	r0, sl
 8014b80:	f7eb fbd6 	bl	8000330 <memchr>
 8014b84:	b138      	cbz	r0, 8014b96 <_vfiprintf_r+0x17a>
 8014b86:	9b04      	ldr	r3, [sp, #16]
 8014b88:	eba0 000a 	sub.w	r0, r0, sl
 8014b8c:	2240      	movs	r2, #64	; 0x40
 8014b8e:	4082      	lsls	r2, r0
 8014b90:	4313      	orrs	r3, r2
 8014b92:	3401      	adds	r4, #1
 8014b94:	9304      	str	r3, [sp, #16]
 8014b96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b9a:	4829      	ldr	r0, [pc, #164]	; (8014c40 <_vfiprintf_r+0x224>)
 8014b9c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8014ba0:	2206      	movs	r2, #6
 8014ba2:	f7eb fbc5 	bl	8000330 <memchr>
 8014ba6:	2800      	cmp	r0, #0
 8014ba8:	d03f      	beq.n	8014c2a <_vfiprintf_r+0x20e>
 8014baa:	4b26      	ldr	r3, [pc, #152]	; (8014c44 <_vfiprintf_r+0x228>)
 8014bac:	bb1b      	cbnz	r3, 8014bf6 <_vfiprintf_r+0x1da>
 8014bae:	9b03      	ldr	r3, [sp, #12]
 8014bb0:	3307      	adds	r3, #7
 8014bb2:	f023 0307 	bic.w	r3, r3, #7
 8014bb6:	3308      	adds	r3, #8
 8014bb8:	9303      	str	r3, [sp, #12]
 8014bba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014bbc:	443b      	add	r3, r7
 8014bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8014bc0:	e768      	b.n	8014a94 <_vfiprintf_r+0x78>
 8014bc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8014bc6:	460c      	mov	r4, r1
 8014bc8:	2001      	movs	r0, #1
 8014bca:	e7a6      	b.n	8014b1a <_vfiprintf_r+0xfe>
 8014bcc:	2300      	movs	r3, #0
 8014bce:	3401      	adds	r4, #1
 8014bd0:	9305      	str	r3, [sp, #20]
 8014bd2:	4619      	mov	r1, r3
 8014bd4:	f04f 0c0a 	mov.w	ip, #10
 8014bd8:	4620      	mov	r0, r4
 8014bda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014bde:	3a30      	subs	r2, #48	; 0x30
 8014be0:	2a09      	cmp	r2, #9
 8014be2:	d903      	bls.n	8014bec <_vfiprintf_r+0x1d0>
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d0c6      	beq.n	8014b76 <_vfiprintf_r+0x15a>
 8014be8:	9105      	str	r1, [sp, #20]
 8014bea:	e7c4      	b.n	8014b76 <_vfiprintf_r+0x15a>
 8014bec:	fb0c 2101 	mla	r1, ip, r1, r2
 8014bf0:	4604      	mov	r4, r0
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	e7f0      	b.n	8014bd8 <_vfiprintf_r+0x1bc>
 8014bf6:	ab03      	add	r3, sp, #12
 8014bf8:	9300      	str	r3, [sp, #0]
 8014bfa:	462a      	mov	r2, r5
 8014bfc:	4b12      	ldr	r3, [pc, #72]	; (8014c48 <_vfiprintf_r+0x22c>)
 8014bfe:	a904      	add	r1, sp, #16
 8014c00:	4630      	mov	r0, r6
 8014c02:	f3af 8000 	nop.w
 8014c06:	4607      	mov	r7, r0
 8014c08:	1c78      	adds	r0, r7, #1
 8014c0a:	d1d6      	bne.n	8014bba <_vfiprintf_r+0x19e>
 8014c0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8014c0e:	07d9      	lsls	r1, r3, #31
 8014c10:	d405      	bmi.n	8014c1e <_vfiprintf_r+0x202>
 8014c12:	89ab      	ldrh	r3, [r5, #12]
 8014c14:	059a      	lsls	r2, r3, #22
 8014c16:	d402      	bmi.n	8014c1e <_vfiprintf_r+0x202>
 8014c18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8014c1a:	f7ff fe6a 	bl	80148f2 <__retarget_lock_release_recursive>
 8014c1e:	89ab      	ldrh	r3, [r5, #12]
 8014c20:	065b      	lsls	r3, r3, #25
 8014c22:	f53f af1d 	bmi.w	8014a60 <_vfiprintf_r+0x44>
 8014c26:	9809      	ldr	r0, [sp, #36]	; 0x24
 8014c28:	e71c      	b.n	8014a64 <_vfiprintf_r+0x48>
 8014c2a:	ab03      	add	r3, sp, #12
 8014c2c:	9300      	str	r3, [sp, #0]
 8014c2e:	462a      	mov	r2, r5
 8014c30:	4b05      	ldr	r3, [pc, #20]	; (8014c48 <_vfiprintf_r+0x22c>)
 8014c32:	a904      	add	r1, sp, #16
 8014c34:	4630      	mov	r0, r6
 8014c36:	f000 f879 	bl	8014d2c <_printf_i>
 8014c3a:	e7e4      	b.n	8014c06 <_vfiprintf_r+0x1ea>
 8014c3c:	08018334 	.word	0x08018334
 8014c40:	0801833e 	.word	0x0801833e
 8014c44:	00000000 	.word	0x00000000
 8014c48:	080149f7 	.word	0x080149f7
 8014c4c:	0801833a 	.word	0x0801833a

08014c50 <_printf_common>:
 8014c50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014c54:	4616      	mov	r6, r2
 8014c56:	4699      	mov	r9, r3
 8014c58:	688a      	ldr	r2, [r1, #8]
 8014c5a:	690b      	ldr	r3, [r1, #16]
 8014c5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8014c60:	4293      	cmp	r3, r2
 8014c62:	bfb8      	it	lt
 8014c64:	4613      	movlt	r3, r2
 8014c66:	6033      	str	r3, [r6, #0]
 8014c68:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8014c6c:	4607      	mov	r7, r0
 8014c6e:	460c      	mov	r4, r1
 8014c70:	b10a      	cbz	r2, 8014c76 <_printf_common+0x26>
 8014c72:	3301      	adds	r3, #1
 8014c74:	6033      	str	r3, [r6, #0]
 8014c76:	6823      	ldr	r3, [r4, #0]
 8014c78:	0699      	lsls	r1, r3, #26
 8014c7a:	bf42      	ittt	mi
 8014c7c:	6833      	ldrmi	r3, [r6, #0]
 8014c7e:	3302      	addmi	r3, #2
 8014c80:	6033      	strmi	r3, [r6, #0]
 8014c82:	6825      	ldr	r5, [r4, #0]
 8014c84:	f015 0506 	ands.w	r5, r5, #6
 8014c88:	d106      	bne.n	8014c98 <_printf_common+0x48>
 8014c8a:	f104 0a19 	add.w	sl, r4, #25
 8014c8e:	68e3      	ldr	r3, [r4, #12]
 8014c90:	6832      	ldr	r2, [r6, #0]
 8014c92:	1a9b      	subs	r3, r3, r2
 8014c94:	42ab      	cmp	r3, r5
 8014c96:	dc26      	bgt.n	8014ce6 <_printf_common+0x96>
 8014c98:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8014c9c:	1e13      	subs	r3, r2, #0
 8014c9e:	6822      	ldr	r2, [r4, #0]
 8014ca0:	bf18      	it	ne
 8014ca2:	2301      	movne	r3, #1
 8014ca4:	0692      	lsls	r2, r2, #26
 8014ca6:	d42b      	bmi.n	8014d00 <_printf_common+0xb0>
 8014ca8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8014cac:	4649      	mov	r1, r9
 8014cae:	4638      	mov	r0, r7
 8014cb0:	47c0      	blx	r8
 8014cb2:	3001      	adds	r0, #1
 8014cb4:	d01e      	beq.n	8014cf4 <_printf_common+0xa4>
 8014cb6:	6823      	ldr	r3, [r4, #0]
 8014cb8:	6922      	ldr	r2, [r4, #16]
 8014cba:	f003 0306 	and.w	r3, r3, #6
 8014cbe:	2b04      	cmp	r3, #4
 8014cc0:	bf02      	ittt	eq
 8014cc2:	68e5      	ldreq	r5, [r4, #12]
 8014cc4:	6833      	ldreq	r3, [r6, #0]
 8014cc6:	1aed      	subeq	r5, r5, r3
 8014cc8:	68a3      	ldr	r3, [r4, #8]
 8014cca:	bf0c      	ite	eq
 8014ccc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8014cd0:	2500      	movne	r5, #0
 8014cd2:	4293      	cmp	r3, r2
 8014cd4:	bfc4      	itt	gt
 8014cd6:	1a9b      	subgt	r3, r3, r2
 8014cd8:	18ed      	addgt	r5, r5, r3
 8014cda:	2600      	movs	r6, #0
 8014cdc:	341a      	adds	r4, #26
 8014cde:	42b5      	cmp	r5, r6
 8014ce0:	d11a      	bne.n	8014d18 <_printf_common+0xc8>
 8014ce2:	2000      	movs	r0, #0
 8014ce4:	e008      	b.n	8014cf8 <_printf_common+0xa8>
 8014ce6:	2301      	movs	r3, #1
 8014ce8:	4652      	mov	r2, sl
 8014cea:	4649      	mov	r1, r9
 8014cec:	4638      	mov	r0, r7
 8014cee:	47c0      	blx	r8
 8014cf0:	3001      	adds	r0, #1
 8014cf2:	d103      	bne.n	8014cfc <_printf_common+0xac>
 8014cf4:	f04f 30ff 	mov.w	r0, #4294967295
 8014cf8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014cfc:	3501      	adds	r5, #1
 8014cfe:	e7c6      	b.n	8014c8e <_printf_common+0x3e>
 8014d00:	18e1      	adds	r1, r4, r3
 8014d02:	1c5a      	adds	r2, r3, #1
 8014d04:	2030      	movs	r0, #48	; 0x30
 8014d06:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8014d0a:	4422      	add	r2, r4
 8014d0c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8014d10:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8014d14:	3302      	adds	r3, #2
 8014d16:	e7c7      	b.n	8014ca8 <_printf_common+0x58>
 8014d18:	2301      	movs	r3, #1
 8014d1a:	4622      	mov	r2, r4
 8014d1c:	4649      	mov	r1, r9
 8014d1e:	4638      	mov	r0, r7
 8014d20:	47c0      	blx	r8
 8014d22:	3001      	adds	r0, #1
 8014d24:	d0e6      	beq.n	8014cf4 <_printf_common+0xa4>
 8014d26:	3601      	adds	r6, #1
 8014d28:	e7d9      	b.n	8014cde <_printf_common+0x8e>
	...

08014d2c <_printf_i>:
 8014d2c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8014d30:	7e0f      	ldrb	r7, [r1, #24]
 8014d32:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8014d34:	2f78      	cmp	r7, #120	; 0x78
 8014d36:	4691      	mov	r9, r2
 8014d38:	4680      	mov	r8, r0
 8014d3a:	460c      	mov	r4, r1
 8014d3c:	469a      	mov	sl, r3
 8014d3e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8014d42:	d807      	bhi.n	8014d54 <_printf_i+0x28>
 8014d44:	2f62      	cmp	r7, #98	; 0x62
 8014d46:	d80a      	bhi.n	8014d5e <_printf_i+0x32>
 8014d48:	2f00      	cmp	r7, #0
 8014d4a:	f000 80d4 	beq.w	8014ef6 <_printf_i+0x1ca>
 8014d4e:	2f58      	cmp	r7, #88	; 0x58
 8014d50:	f000 80c0 	beq.w	8014ed4 <_printf_i+0x1a8>
 8014d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014d58:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8014d5c:	e03a      	b.n	8014dd4 <_printf_i+0xa8>
 8014d5e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8014d62:	2b15      	cmp	r3, #21
 8014d64:	d8f6      	bhi.n	8014d54 <_printf_i+0x28>
 8014d66:	a101      	add	r1, pc, #4	; (adr r1, 8014d6c <_printf_i+0x40>)
 8014d68:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8014d6c:	08014dc5 	.word	0x08014dc5
 8014d70:	08014dd9 	.word	0x08014dd9
 8014d74:	08014d55 	.word	0x08014d55
 8014d78:	08014d55 	.word	0x08014d55
 8014d7c:	08014d55 	.word	0x08014d55
 8014d80:	08014d55 	.word	0x08014d55
 8014d84:	08014dd9 	.word	0x08014dd9
 8014d88:	08014d55 	.word	0x08014d55
 8014d8c:	08014d55 	.word	0x08014d55
 8014d90:	08014d55 	.word	0x08014d55
 8014d94:	08014d55 	.word	0x08014d55
 8014d98:	08014edd 	.word	0x08014edd
 8014d9c:	08014e05 	.word	0x08014e05
 8014da0:	08014e97 	.word	0x08014e97
 8014da4:	08014d55 	.word	0x08014d55
 8014da8:	08014d55 	.word	0x08014d55
 8014dac:	08014eff 	.word	0x08014eff
 8014db0:	08014d55 	.word	0x08014d55
 8014db4:	08014e05 	.word	0x08014e05
 8014db8:	08014d55 	.word	0x08014d55
 8014dbc:	08014d55 	.word	0x08014d55
 8014dc0:	08014e9f 	.word	0x08014e9f
 8014dc4:	682b      	ldr	r3, [r5, #0]
 8014dc6:	1d1a      	adds	r2, r3, #4
 8014dc8:	681b      	ldr	r3, [r3, #0]
 8014dca:	602a      	str	r2, [r5, #0]
 8014dcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8014dd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8014dd4:	2301      	movs	r3, #1
 8014dd6:	e09f      	b.n	8014f18 <_printf_i+0x1ec>
 8014dd8:	6820      	ldr	r0, [r4, #0]
 8014dda:	682b      	ldr	r3, [r5, #0]
 8014ddc:	0607      	lsls	r7, r0, #24
 8014dde:	f103 0104 	add.w	r1, r3, #4
 8014de2:	6029      	str	r1, [r5, #0]
 8014de4:	d501      	bpl.n	8014dea <_printf_i+0xbe>
 8014de6:	681e      	ldr	r6, [r3, #0]
 8014de8:	e003      	b.n	8014df2 <_printf_i+0xc6>
 8014dea:	0646      	lsls	r6, r0, #25
 8014dec:	d5fb      	bpl.n	8014de6 <_printf_i+0xba>
 8014dee:	f9b3 6000 	ldrsh.w	r6, [r3]
 8014df2:	2e00      	cmp	r6, #0
 8014df4:	da03      	bge.n	8014dfe <_printf_i+0xd2>
 8014df6:	232d      	movs	r3, #45	; 0x2d
 8014df8:	4276      	negs	r6, r6
 8014dfa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014dfe:	485a      	ldr	r0, [pc, #360]	; (8014f68 <_printf_i+0x23c>)
 8014e00:	230a      	movs	r3, #10
 8014e02:	e012      	b.n	8014e2a <_printf_i+0xfe>
 8014e04:	682b      	ldr	r3, [r5, #0]
 8014e06:	6820      	ldr	r0, [r4, #0]
 8014e08:	1d19      	adds	r1, r3, #4
 8014e0a:	6029      	str	r1, [r5, #0]
 8014e0c:	0605      	lsls	r5, r0, #24
 8014e0e:	d501      	bpl.n	8014e14 <_printf_i+0xe8>
 8014e10:	681e      	ldr	r6, [r3, #0]
 8014e12:	e002      	b.n	8014e1a <_printf_i+0xee>
 8014e14:	0641      	lsls	r1, r0, #25
 8014e16:	d5fb      	bpl.n	8014e10 <_printf_i+0xe4>
 8014e18:	881e      	ldrh	r6, [r3, #0]
 8014e1a:	4853      	ldr	r0, [pc, #332]	; (8014f68 <_printf_i+0x23c>)
 8014e1c:	2f6f      	cmp	r7, #111	; 0x6f
 8014e1e:	bf0c      	ite	eq
 8014e20:	2308      	moveq	r3, #8
 8014e22:	230a      	movne	r3, #10
 8014e24:	2100      	movs	r1, #0
 8014e26:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8014e2a:	6865      	ldr	r5, [r4, #4]
 8014e2c:	60a5      	str	r5, [r4, #8]
 8014e2e:	2d00      	cmp	r5, #0
 8014e30:	bfa2      	ittt	ge
 8014e32:	6821      	ldrge	r1, [r4, #0]
 8014e34:	f021 0104 	bicge.w	r1, r1, #4
 8014e38:	6021      	strge	r1, [r4, #0]
 8014e3a:	b90e      	cbnz	r6, 8014e40 <_printf_i+0x114>
 8014e3c:	2d00      	cmp	r5, #0
 8014e3e:	d04b      	beq.n	8014ed8 <_printf_i+0x1ac>
 8014e40:	4615      	mov	r5, r2
 8014e42:	fbb6 f1f3 	udiv	r1, r6, r3
 8014e46:	fb03 6711 	mls	r7, r3, r1, r6
 8014e4a:	5dc7      	ldrb	r7, [r0, r7]
 8014e4c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8014e50:	4637      	mov	r7, r6
 8014e52:	42bb      	cmp	r3, r7
 8014e54:	460e      	mov	r6, r1
 8014e56:	d9f4      	bls.n	8014e42 <_printf_i+0x116>
 8014e58:	2b08      	cmp	r3, #8
 8014e5a:	d10b      	bne.n	8014e74 <_printf_i+0x148>
 8014e5c:	6823      	ldr	r3, [r4, #0]
 8014e5e:	07de      	lsls	r6, r3, #31
 8014e60:	d508      	bpl.n	8014e74 <_printf_i+0x148>
 8014e62:	6923      	ldr	r3, [r4, #16]
 8014e64:	6861      	ldr	r1, [r4, #4]
 8014e66:	4299      	cmp	r1, r3
 8014e68:	bfde      	ittt	le
 8014e6a:	2330      	movle	r3, #48	; 0x30
 8014e6c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8014e70:	f105 35ff 	addle.w	r5, r5, #4294967295
 8014e74:	1b52      	subs	r2, r2, r5
 8014e76:	6122      	str	r2, [r4, #16]
 8014e78:	f8cd a000 	str.w	sl, [sp]
 8014e7c:	464b      	mov	r3, r9
 8014e7e:	aa03      	add	r2, sp, #12
 8014e80:	4621      	mov	r1, r4
 8014e82:	4640      	mov	r0, r8
 8014e84:	f7ff fee4 	bl	8014c50 <_printf_common>
 8014e88:	3001      	adds	r0, #1
 8014e8a:	d14a      	bne.n	8014f22 <_printf_i+0x1f6>
 8014e8c:	f04f 30ff 	mov.w	r0, #4294967295
 8014e90:	b004      	add	sp, #16
 8014e92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014e96:	6823      	ldr	r3, [r4, #0]
 8014e98:	f043 0320 	orr.w	r3, r3, #32
 8014e9c:	6023      	str	r3, [r4, #0]
 8014e9e:	4833      	ldr	r0, [pc, #204]	; (8014f6c <_printf_i+0x240>)
 8014ea0:	2778      	movs	r7, #120	; 0x78
 8014ea2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8014ea6:	6823      	ldr	r3, [r4, #0]
 8014ea8:	6829      	ldr	r1, [r5, #0]
 8014eaa:	061f      	lsls	r7, r3, #24
 8014eac:	f851 6b04 	ldr.w	r6, [r1], #4
 8014eb0:	d402      	bmi.n	8014eb8 <_printf_i+0x18c>
 8014eb2:	065f      	lsls	r7, r3, #25
 8014eb4:	bf48      	it	mi
 8014eb6:	b2b6      	uxthmi	r6, r6
 8014eb8:	07df      	lsls	r7, r3, #31
 8014eba:	bf48      	it	mi
 8014ebc:	f043 0320 	orrmi.w	r3, r3, #32
 8014ec0:	6029      	str	r1, [r5, #0]
 8014ec2:	bf48      	it	mi
 8014ec4:	6023      	strmi	r3, [r4, #0]
 8014ec6:	b91e      	cbnz	r6, 8014ed0 <_printf_i+0x1a4>
 8014ec8:	6823      	ldr	r3, [r4, #0]
 8014eca:	f023 0320 	bic.w	r3, r3, #32
 8014ece:	6023      	str	r3, [r4, #0]
 8014ed0:	2310      	movs	r3, #16
 8014ed2:	e7a7      	b.n	8014e24 <_printf_i+0xf8>
 8014ed4:	4824      	ldr	r0, [pc, #144]	; (8014f68 <_printf_i+0x23c>)
 8014ed6:	e7e4      	b.n	8014ea2 <_printf_i+0x176>
 8014ed8:	4615      	mov	r5, r2
 8014eda:	e7bd      	b.n	8014e58 <_printf_i+0x12c>
 8014edc:	682b      	ldr	r3, [r5, #0]
 8014ede:	6826      	ldr	r6, [r4, #0]
 8014ee0:	6961      	ldr	r1, [r4, #20]
 8014ee2:	1d18      	adds	r0, r3, #4
 8014ee4:	6028      	str	r0, [r5, #0]
 8014ee6:	0635      	lsls	r5, r6, #24
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	d501      	bpl.n	8014ef0 <_printf_i+0x1c4>
 8014eec:	6019      	str	r1, [r3, #0]
 8014eee:	e002      	b.n	8014ef6 <_printf_i+0x1ca>
 8014ef0:	0670      	lsls	r0, r6, #25
 8014ef2:	d5fb      	bpl.n	8014eec <_printf_i+0x1c0>
 8014ef4:	8019      	strh	r1, [r3, #0]
 8014ef6:	2300      	movs	r3, #0
 8014ef8:	6123      	str	r3, [r4, #16]
 8014efa:	4615      	mov	r5, r2
 8014efc:	e7bc      	b.n	8014e78 <_printf_i+0x14c>
 8014efe:	682b      	ldr	r3, [r5, #0]
 8014f00:	1d1a      	adds	r2, r3, #4
 8014f02:	602a      	str	r2, [r5, #0]
 8014f04:	681d      	ldr	r5, [r3, #0]
 8014f06:	6862      	ldr	r2, [r4, #4]
 8014f08:	2100      	movs	r1, #0
 8014f0a:	4628      	mov	r0, r5
 8014f0c:	f7eb fa10 	bl	8000330 <memchr>
 8014f10:	b108      	cbz	r0, 8014f16 <_printf_i+0x1ea>
 8014f12:	1b40      	subs	r0, r0, r5
 8014f14:	6060      	str	r0, [r4, #4]
 8014f16:	6863      	ldr	r3, [r4, #4]
 8014f18:	6123      	str	r3, [r4, #16]
 8014f1a:	2300      	movs	r3, #0
 8014f1c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8014f20:	e7aa      	b.n	8014e78 <_printf_i+0x14c>
 8014f22:	6923      	ldr	r3, [r4, #16]
 8014f24:	462a      	mov	r2, r5
 8014f26:	4649      	mov	r1, r9
 8014f28:	4640      	mov	r0, r8
 8014f2a:	47d0      	blx	sl
 8014f2c:	3001      	adds	r0, #1
 8014f2e:	d0ad      	beq.n	8014e8c <_printf_i+0x160>
 8014f30:	6823      	ldr	r3, [r4, #0]
 8014f32:	079b      	lsls	r3, r3, #30
 8014f34:	d413      	bmi.n	8014f5e <_printf_i+0x232>
 8014f36:	68e0      	ldr	r0, [r4, #12]
 8014f38:	9b03      	ldr	r3, [sp, #12]
 8014f3a:	4298      	cmp	r0, r3
 8014f3c:	bfb8      	it	lt
 8014f3e:	4618      	movlt	r0, r3
 8014f40:	e7a6      	b.n	8014e90 <_printf_i+0x164>
 8014f42:	2301      	movs	r3, #1
 8014f44:	4632      	mov	r2, r6
 8014f46:	4649      	mov	r1, r9
 8014f48:	4640      	mov	r0, r8
 8014f4a:	47d0      	blx	sl
 8014f4c:	3001      	adds	r0, #1
 8014f4e:	d09d      	beq.n	8014e8c <_printf_i+0x160>
 8014f50:	3501      	adds	r5, #1
 8014f52:	68e3      	ldr	r3, [r4, #12]
 8014f54:	9903      	ldr	r1, [sp, #12]
 8014f56:	1a5b      	subs	r3, r3, r1
 8014f58:	42ab      	cmp	r3, r5
 8014f5a:	dcf2      	bgt.n	8014f42 <_printf_i+0x216>
 8014f5c:	e7eb      	b.n	8014f36 <_printf_i+0x20a>
 8014f5e:	2500      	movs	r5, #0
 8014f60:	f104 0619 	add.w	r6, r4, #25
 8014f64:	e7f5      	b.n	8014f52 <_printf_i+0x226>
 8014f66:	bf00      	nop
 8014f68:	08018345 	.word	0x08018345
 8014f6c:	08018356 	.word	0x08018356

08014f70 <__sflush_r>:
 8014f70:	898a      	ldrh	r2, [r1, #12]
 8014f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f76:	4605      	mov	r5, r0
 8014f78:	0710      	lsls	r0, r2, #28
 8014f7a:	460c      	mov	r4, r1
 8014f7c:	d458      	bmi.n	8015030 <__sflush_r+0xc0>
 8014f7e:	684b      	ldr	r3, [r1, #4]
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	dc05      	bgt.n	8014f90 <__sflush_r+0x20>
 8014f84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8014f86:	2b00      	cmp	r3, #0
 8014f88:	dc02      	bgt.n	8014f90 <__sflush_r+0x20>
 8014f8a:	2000      	movs	r0, #0
 8014f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014f92:	2e00      	cmp	r6, #0
 8014f94:	d0f9      	beq.n	8014f8a <__sflush_r+0x1a>
 8014f96:	2300      	movs	r3, #0
 8014f98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8014f9c:	682f      	ldr	r7, [r5, #0]
 8014f9e:	6a21      	ldr	r1, [r4, #32]
 8014fa0:	602b      	str	r3, [r5, #0]
 8014fa2:	d032      	beq.n	801500a <__sflush_r+0x9a>
 8014fa4:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8014fa6:	89a3      	ldrh	r3, [r4, #12]
 8014fa8:	075a      	lsls	r2, r3, #29
 8014faa:	d505      	bpl.n	8014fb8 <__sflush_r+0x48>
 8014fac:	6863      	ldr	r3, [r4, #4]
 8014fae:	1ac0      	subs	r0, r0, r3
 8014fb0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8014fb2:	b10b      	cbz	r3, 8014fb8 <__sflush_r+0x48>
 8014fb4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8014fb6:	1ac0      	subs	r0, r0, r3
 8014fb8:	2300      	movs	r3, #0
 8014fba:	4602      	mov	r2, r0
 8014fbc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8014fbe:	6a21      	ldr	r1, [r4, #32]
 8014fc0:	4628      	mov	r0, r5
 8014fc2:	47b0      	blx	r6
 8014fc4:	1c43      	adds	r3, r0, #1
 8014fc6:	89a3      	ldrh	r3, [r4, #12]
 8014fc8:	d106      	bne.n	8014fd8 <__sflush_r+0x68>
 8014fca:	6829      	ldr	r1, [r5, #0]
 8014fcc:	291d      	cmp	r1, #29
 8014fce:	d82b      	bhi.n	8015028 <__sflush_r+0xb8>
 8014fd0:	4a29      	ldr	r2, [pc, #164]	; (8015078 <__sflush_r+0x108>)
 8014fd2:	410a      	asrs	r2, r1
 8014fd4:	07d6      	lsls	r6, r2, #31
 8014fd6:	d427      	bmi.n	8015028 <__sflush_r+0xb8>
 8014fd8:	2200      	movs	r2, #0
 8014fda:	6062      	str	r2, [r4, #4]
 8014fdc:	04d9      	lsls	r1, r3, #19
 8014fde:	6922      	ldr	r2, [r4, #16]
 8014fe0:	6022      	str	r2, [r4, #0]
 8014fe2:	d504      	bpl.n	8014fee <__sflush_r+0x7e>
 8014fe4:	1c42      	adds	r2, r0, #1
 8014fe6:	d101      	bne.n	8014fec <__sflush_r+0x7c>
 8014fe8:	682b      	ldr	r3, [r5, #0]
 8014fea:	b903      	cbnz	r3, 8014fee <__sflush_r+0x7e>
 8014fec:	6560      	str	r0, [r4, #84]	; 0x54
 8014fee:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8014ff0:	602f      	str	r7, [r5, #0]
 8014ff2:	2900      	cmp	r1, #0
 8014ff4:	d0c9      	beq.n	8014f8a <__sflush_r+0x1a>
 8014ff6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8014ffa:	4299      	cmp	r1, r3
 8014ffc:	d002      	beq.n	8015004 <__sflush_r+0x94>
 8014ffe:	4628      	mov	r0, r5
 8015000:	f7ff fc96 	bl	8014930 <_free_r>
 8015004:	2000      	movs	r0, #0
 8015006:	6360      	str	r0, [r4, #52]	; 0x34
 8015008:	e7c0      	b.n	8014f8c <__sflush_r+0x1c>
 801500a:	2301      	movs	r3, #1
 801500c:	4628      	mov	r0, r5
 801500e:	47b0      	blx	r6
 8015010:	1c41      	adds	r1, r0, #1
 8015012:	d1c8      	bne.n	8014fa6 <__sflush_r+0x36>
 8015014:	682b      	ldr	r3, [r5, #0]
 8015016:	2b00      	cmp	r3, #0
 8015018:	d0c5      	beq.n	8014fa6 <__sflush_r+0x36>
 801501a:	2b1d      	cmp	r3, #29
 801501c:	d001      	beq.n	8015022 <__sflush_r+0xb2>
 801501e:	2b16      	cmp	r3, #22
 8015020:	d101      	bne.n	8015026 <__sflush_r+0xb6>
 8015022:	602f      	str	r7, [r5, #0]
 8015024:	e7b1      	b.n	8014f8a <__sflush_r+0x1a>
 8015026:	89a3      	ldrh	r3, [r4, #12]
 8015028:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801502c:	81a3      	strh	r3, [r4, #12]
 801502e:	e7ad      	b.n	8014f8c <__sflush_r+0x1c>
 8015030:	690f      	ldr	r7, [r1, #16]
 8015032:	2f00      	cmp	r7, #0
 8015034:	d0a9      	beq.n	8014f8a <__sflush_r+0x1a>
 8015036:	0793      	lsls	r3, r2, #30
 8015038:	680e      	ldr	r6, [r1, #0]
 801503a:	bf08      	it	eq
 801503c:	694b      	ldreq	r3, [r1, #20]
 801503e:	600f      	str	r7, [r1, #0]
 8015040:	bf18      	it	ne
 8015042:	2300      	movne	r3, #0
 8015044:	eba6 0807 	sub.w	r8, r6, r7
 8015048:	608b      	str	r3, [r1, #8]
 801504a:	f1b8 0f00 	cmp.w	r8, #0
 801504e:	dd9c      	ble.n	8014f8a <__sflush_r+0x1a>
 8015050:	6a21      	ldr	r1, [r4, #32]
 8015052:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8015054:	4643      	mov	r3, r8
 8015056:	463a      	mov	r2, r7
 8015058:	4628      	mov	r0, r5
 801505a:	47b0      	blx	r6
 801505c:	2800      	cmp	r0, #0
 801505e:	dc06      	bgt.n	801506e <__sflush_r+0xfe>
 8015060:	89a3      	ldrh	r3, [r4, #12]
 8015062:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015066:	81a3      	strh	r3, [r4, #12]
 8015068:	f04f 30ff 	mov.w	r0, #4294967295
 801506c:	e78e      	b.n	8014f8c <__sflush_r+0x1c>
 801506e:	4407      	add	r7, r0
 8015070:	eba8 0800 	sub.w	r8, r8, r0
 8015074:	e7e9      	b.n	801504a <__sflush_r+0xda>
 8015076:	bf00      	nop
 8015078:	dfbffffe 	.word	0xdfbffffe

0801507c <_fflush_r>:
 801507c:	b538      	push	{r3, r4, r5, lr}
 801507e:	690b      	ldr	r3, [r1, #16]
 8015080:	4605      	mov	r5, r0
 8015082:	460c      	mov	r4, r1
 8015084:	b913      	cbnz	r3, 801508c <_fflush_r+0x10>
 8015086:	2500      	movs	r5, #0
 8015088:	4628      	mov	r0, r5
 801508a:	bd38      	pop	{r3, r4, r5, pc}
 801508c:	b118      	cbz	r0, 8015096 <_fflush_r+0x1a>
 801508e:	6a03      	ldr	r3, [r0, #32]
 8015090:	b90b      	cbnz	r3, 8015096 <_fflush_r+0x1a>
 8015092:	f7ff f9a1 	bl	80143d8 <__sinit>
 8015096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801509a:	2b00      	cmp	r3, #0
 801509c:	d0f3      	beq.n	8015086 <_fflush_r+0xa>
 801509e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80150a0:	07d0      	lsls	r0, r2, #31
 80150a2:	d404      	bmi.n	80150ae <_fflush_r+0x32>
 80150a4:	0599      	lsls	r1, r3, #22
 80150a6:	d402      	bmi.n	80150ae <_fflush_r+0x32>
 80150a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150aa:	f7ff fc21 	bl	80148f0 <__retarget_lock_acquire_recursive>
 80150ae:	4628      	mov	r0, r5
 80150b0:	4621      	mov	r1, r4
 80150b2:	f7ff ff5d 	bl	8014f70 <__sflush_r>
 80150b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80150b8:	07da      	lsls	r2, r3, #31
 80150ba:	4605      	mov	r5, r0
 80150bc:	d4e4      	bmi.n	8015088 <_fflush_r+0xc>
 80150be:	89a3      	ldrh	r3, [r4, #12]
 80150c0:	059b      	lsls	r3, r3, #22
 80150c2:	d4e1      	bmi.n	8015088 <_fflush_r+0xc>
 80150c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80150c6:	f7ff fc14 	bl	80148f2 <__retarget_lock_release_recursive>
 80150ca:	e7dd      	b.n	8015088 <_fflush_r+0xc>

080150cc <__swhatbuf_r>:
 80150cc:	b570      	push	{r4, r5, r6, lr}
 80150ce:	460c      	mov	r4, r1
 80150d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80150d4:	2900      	cmp	r1, #0
 80150d6:	b096      	sub	sp, #88	; 0x58
 80150d8:	4615      	mov	r5, r2
 80150da:	461e      	mov	r6, r3
 80150dc:	da0d      	bge.n	80150fa <__swhatbuf_r+0x2e>
 80150de:	89a3      	ldrh	r3, [r4, #12]
 80150e0:	f013 0f80 	tst.w	r3, #128	; 0x80
 80150e4:	f04f 0100 	mov.w	r1, #0
 80150e8:	bf0c      	ite	eq
 80150ea:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80150ee:	2340      	movne	r3, #64	; 0x40
 80150f0:	2000      	movs	r0, #0
 80150f2:	6031      	str	r1, [r6, #0]
 80150f4:	602b      	str	r3, [r5, #0]
 80150f6:	b016      	add	sp, #88	; 0x58
 80150f8:	bd70      	pop	{r4, r5, r6, pc}
 80150fa:	466a      	mov	r2, sp
 80150fc:	f000 f8ac 	bl	8015258 <_fstat_r>
 8015100:	2800      	cmp	r0, #0
 8015102:	dbec      	blt.n	80150de <__swhatbuf_r+0x12>
 8015104:	9901      	ldr	r1, [sp, #4]
 8015106:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801510a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801510e:	4259      	negs	r1, r3
 8015110:	4159      	adcs	r1, r3
 8015112:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8015116:	e7eb      	b.n	80150f0 <__swhatbuf_r+0x24>

08015118 <__smakebuf_r>:
 8015118:	898b      	ldrh	r3, [r1, #12]
 801511a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801511c:	079d      	lsls	r5, r3, #30
 801511e:	4606      	mov	r6, r0
 8015120:	460c      	mov	r4, r1
 8015122:	d507      	bpl.n	8015134 <__smakebuf_r+0x1c>
 8015124:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8015128:	6023      	str	r3, [r4, #0]
 801512a:	6123      	str	r3, [r4, #16]
 801512c:	2301      	movs	r3, #1
 801512e:	6163      	str	r3, [r4, #20]
 8015130:	b002      	add	sp, #8
 8015132:	bd70      	pop	{r4, r5, r6, pc}
 8015134:	ab01      	add	r3, sp, #4
 8015136:	466a      	mov	r2, sp
 8015138:	f7ff ffc8 	bl	80150cc <__swhatbuf_r>
 801513c:	9900      	ldr	r1, [sp, #0]
 801513e:	4605      	mov	r5, r0
 8015140:	4630      	mov	r0, r6
 8015142:	f7fe ff4b 	bl	8013fdc <_malloc_r>
 8015146:	b948      	cbnz	r0, 801515c <__smakebuf_r+0x44>
 8015148:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801514c:	059a      	lsls	r2, r3, #22
 801514e:	d4ef      	bmi.n	8015130 <__smakebuf_r+0x18>
 8015150:	f023 0303 	bic.w	r3, r3, #3
 8015154:	f043 0302 	orr.w	r3, r3, #2
 8015158:	81a3      	strh	r3, [r4, #12]
 801515a:	e7e3      	b.n	8015124 <__smakebuf_r+0xc>
 801515c:	89a3      	ldrh	r3, [r4, #12]
 801515e:	6020      	str	r0, [r4, #0]
 8015160:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015164:	81a3      	strh	r3, [r4, #12]
 8015166:	9b00      	ldr	r3, [sp, #0]
 8015168:	6163      	str	r3, [r4, #20]
 801516a:	9b01      	ldr	r3, [sp, #4]
 801516c:	6120      	str	r0, [r4, #16]
 801516e:	b15b      	cbz	r3, 8015188 <__smakebuf_r+0x70>
 8015170:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8015174:	4630      	mov	r0, r6
 8015176:	f000 f881 	bl	801527c <_isatty_r>
 801517a:	b128      	cbz	r0, 8015188 <__smakebuf_r+0x70>
 801517c:	89a3      	ldrh	r3, [r4, #12]
 801517e:	f023 0303 	bic.w	r3, r3, #3
 8015182:	f043 0301 	orr.w	r3, r3, #1
 8015186:	81a3      	strh	r3, [r4, #12]
 8015188:	89a3      	ldrh	r3, [r4, #12]
 801518a:	431d      	orrs	r5, r3
 801518c:	81a5      	strh	r5, [r4, #12]
 801518e:	e7cf      	b.n	8015130 <__smakebuf_r+0x18>

08015190 <_putc_r>:
 8015190:	b570      	push	{r4, r5, r6, lr}
 8015192:	460d      	mov	r5, r1
 8015194:	4614      	mov	r4, r2
 8015196:	4606      	mov	r6, r0
 8015198:	b118      	cbz	r0, 80151a2 <_putc_r+0x12>
 801519a:	6a03      	ldr	r3, [r0, #32]
 801519c:	b90b      	cbnz	r3, 80151a2 <_putc_r+0x12>
 801519e:	f7ff f91b 	bl	80143d8 <__sinit>
 80151a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80151a4:	07d8      	lsls	r0, r3, #31
 80151a6:	d405      	bmi.n	80151b4 <_putc_r+0x24>
 80151a8:	89a3      	ldrh	r3, [r4, #12]
 80151aa:	0599      	lsls	r1, r3, #22
 80151ac:	d402      	bmi.n	80151b4 <_putc_r+0x24>
 80151ae:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80151b0:	f7ff fb9e 	bl	80148f0 <__retarget_lock_acquire_recursive>
 80151b4:	68a3      	ldr	r3, [r4, #8]
 80151b6:	3b01      	subs	r3, #1
 80151b8:	2b00      	cmp	r3, #0
 80151ba:	60a3      	str	r3, [r4, #8]
 80151bc:	da05      	bge.n	80151ca <_putc_r+0x3a>
 80151be:	69a2      	ldr	r2, [r4, #24]
 80151c0:	4293      	cmp	r3, r2
 80151c2:	db12      	blt.n	80151ea <_putc_r+0x5a>
 80151c4:	b2eb      	uxtb	r3, r5
 80151c6:	2b0a      	cmp	r3, #10
 80151c8:	d00f      	beq.n	80151ea <_putc_r+0x5a>
 80151ca:	6823      	ldr	r3, [r4, #0]
 80151cc:	1c5a      	adds	r2, r3, #1
 80151ce:	6022      	str	r2, [r4, #0]
 80151d0:	701d      	strb	r5, [r3, #0]
 80151d2:	b2ed      	uxtb	r5, r5
 80151d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80151d6:	07da      	lsls	r2, r3, #31
 80151d8:	d405      	bmi.n	80151e6 <_putc_r+0x56>
 80151da:	89a3      	ldrh	r3, [r4, #12]
 80151dc:	059b      	lsls	r3, r3, #22
 80151de:	d402      	bmi.n	80151e6 <_putc_r+0x56>
 80151e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80151e2:	f7ff fb86 	bl	80148f2 <__retarget_lock_release_recursive>
 80151e6:	4628      	mov	r0, r5
 80151e8:	bd70      	pop	{r4, r5, r6, pc}
 80151ea:	4629      	mov	r1, r5
 80151ec:	4622      	mov	r2, r4
 80151ee:	4630      	mov	r0, r6
 80151f0:	f7ff f9e1 	bl	80145b6 <__swbuf_r>
 80151f4:	4605      	mov	r5, r0
 80151f6:	e7ed      	b.n	80151d4 <_putc_r+0x44>

080151f8 <_raise_r>:
 80151f8:	291f      	cmp	r1, #31
 80151fa:	b538      	push	{r3, r4, r5, lr}
 80151fc:	4604      	mov	r4, r0
 80151fe:	460d      	mov	r5, r1
 8015200:	d904      	bls.n	801520c <_raise_r+0x14>
 8015202:	2316      	movs	r3, #22
 8015204:	6003      	str	r3, [r0, #0]
 8015206:	f04f 30ff 	mov.w	r0, #4294967295
 801520a:	bd38      	pop	{r3, r4, r5, pc}
 801520c:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801520e:	b112      	cbz	r2, 8015216 <_raise_r+0x1e>
 8015210:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015214:	b94b      	cbnz	r3, 801522a <_raise_r+0x32>
 8015216:	4620      	mov	r0, r4
 8015218:	f000 f852 	bl	80152c0 <_getpid_r>
 801521c:	462a      	mov	r2, r5
 801521e:	4601      	mov	r1, r0
 8015220:	4620      	mov	r0, r4
 8015222:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8015226:	f000 b839 	b.w	801529c <_kill_r>
 801522a:	2b01      	cmp	r3, #1
 801522c:	d00a      	beq.n	8015244 <_raise_r+0x4c>
 801522e:	1c59      	adds	r1, r3, #1
 8015230:	d103      	bne.n	801523a <_raise_r+0x42>
 8015232:	2316      	movs	r3, #22
 8015234:	6003      	str	r3, [r0, #0]
 8015236:	2001      	movs	r0, #1
 8015238:	e7e7      	b.n	801520a <_raise_r+0x12>
 801523a:	2400      	movs	r4, #0
 801523c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015240:	4628      	mov	r0, r5
 8015242:	4798      	blx	r3
 8015244:	2000      	movs	r0, #0
 8015246:	e7e0      	b.n	801520a <_raise_r+0x12>

08015248 <raise>:
 8015248:	4b02      	ldr	r3, [pc, #8]	; (8015254 <raise+0xc>)
 801524a:	4601      	mov	r1, r0
 801524c:	6818      	ldr	r0, [r3, #0]
 801524e:	f7ff bfd3 	b.w	80151f8 <_raise_r>
 8015252:	bf00      	nop
 8015254:	24000310 	.word	0x24000310

08015258 <_fstat_r>:
 8015258:	b538      	push	{r3, r4, r5, lr}
 801525a:	4d07      	ldr	r5, [pc, #28]	; (8015278 <_fstat_r+0x20>)
 801525c:	2300      	movs	r3, #0
 801525e:	4604      	mov	r4, r0
 8015260:	4608      	mov	r0, r1
 8015262:	4611      	mov	r1, r2
 8015264:	602b      	str	r3, [r5, #0]
 8015266:	f7f9 fc1b 	bl	800eaa0 <_fstat>
 801526a:	1c43      	adds	r3, r0, #1
 801526c:	d102      	bne.n	8015274 <_fstat_r+0x1c>
 801526e:	682b      	ldr	r3, [r5, #0]
 8015270:	b103      	cbz	r3, 8015274 <_fstat_r+0x1c>
 8015272:	6023      	str	r3, [r4, #0]
 8015274:	bd38      	pop	{r3, r4, r5, pc}
 8015276:	bf00      	nop
 8015278:	24003794 	.word	0x24003794

0801527c <_isatty_r>:
 801527c:	b538      	push	{r3, r4, r5, lr}
 801527e:	4d06      	ldr	r5, [pc, #24]	; (8015298 <_isatty_r+0x1c>)
 8015280:	2300      	movs	r3, #0
 8015282:	4604      	mov	r4, r0
 8015284:	4608      	mov	r0, r1
 8015286:	602b      	str	r3, [r5, #0]
 8015288:	f7f9 fc1a 	bl	800eac0 <_isatty>
 801528c:	1c43      	adds	r3, r0, #1
 801528e:	d102      	bne.n	8015296 <_isatty_r+0x1a>
 8015290:	682b      	ldr	r3, [r5, #0]
 8015292:	b103      	cbz	r3, 8015296 <_isatty_r+0x1a>
 8015294:	6023      	str	r3, [r4, #0]
 8015296:	bd38      	pop	{r3, r4, r5, pc}
 8015298:	24003794 	.word	0x24003794

0801529c <_kill_r>:
 801529c:	b538      	push	{r3, r4, r5, lr}
 801529e:	4d07      	ldr	r5, [pc, #28]	; (80152bc <_kill_r+0x20>)
 80152a0:	2300      	movs	r3, #0
 80152a2:	4604      	mov	r4, r0
 80152a4:	4608      	mov	r0, r1
 80152a6:	4611      	mov	r1, r2
 80152a8:	602b      	str	r3, [r5, #0]
 80152aa:	f7f9 fb9d 	bl	800e9e8 <_kill>
 80152ae:	1c43      	adds	r3, r0, #1
 80152b0:	d102      	bne.n	80152b8 <_kill_r+0x1c>
 80152b2:	682b      	ldr	r3, [r5, #0]
 80152b4:	b103      	cbz	r3, 80152b8 <_kill_r+0x1c>
 80152b6:	6023      	str	r3, [r4, #0]
 80152b8:	bd38      	pop	{r3, r4, r5, pc}
 80152ba:	bf00      	nop
 80152bc:	24003794 	.word	0x24003794

080152c0 <_getpid_r>:
 80152c0:	f7f9 bb8a 	b.w	800e9d8 <_getpid>

080152c4 <_init>:
 80152c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152c6:	bf00      	nop
 80152c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152ca:	bc08      	pop	{r3}
 80152cc:	469e      	mov	lr, r3
 80152ce:	4770      	bx	lr

080152d0 <_fini>:
 80152d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80152d2:	bf00      	nop
 80152d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80152d6:	bc08      	pop	{r3}
 80152d8:	469e      	mov	lr, r3
 80152da:	4770      	bx	lr
